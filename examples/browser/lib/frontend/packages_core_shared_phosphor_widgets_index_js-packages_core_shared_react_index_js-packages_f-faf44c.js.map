{"version":3,"file":"packages_core_shared_phosphor_widgets_index_js-packages_core_shared_react_index_js-packages_f-faf44c.js","mappings":"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","sources":["webpack:///../../packages/core/shared/@phosphor/widgets/index.js?","webpack:///../../packages/core/shared/lodash.throttle/index.js?","webpack:///../../packages/core/shared/react/index.js?","webpack:///../../packages/filesystem/src/browser/file-upload-service.ts?","webpack:///../../packages/filesystem/src/common/file-upload.ts?"],"sourcesContent":["module.exports = require('@phosphor/widgets');\n\n;(globalThis['theia'] = globalThis['theia'] || {})['@theia/core/shared/@phosphor/widgets'] = this;\n","module.exports = require('lodash.throttle');\n\n;(globalThis['theia'] = globalThis['theia'] || {})['@theia/core/shared/lodash.throttle'] = this;\n","module.exports = require('react');\n\n;(globalThis['theia'] = globalThis['theia'] || {})['@theia/core/shared/react'] = this;\n","// *****************************************************************************\n// Copyright (C) 2019 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { CancellationTokenSource, CancellationToken, checkCancelled, cancelled, isCancelled } from '@theia/core/lib/common/cancellation';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Progress } from '@theia/core/lib/common/message-service-protocol';\nimport { Endpoint } from '@theia/core/lib/browser/endpoint';\nimport throttle = require('@theia/core/shared/lodash.throttle');\nimport { HTTP_FILE_UPLOAD_PATH } from '../common/file-upload';\nimport { Semaphore } from 'async-mutex';\nimport { FileSystemPreferences } from './filesystem-preferences';\nimport { FileService } from './file-service';\nimport { ConfirmDialog, Dialog } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\n\nexport const HTTP_UPLOAD_URL: string = new Endpoint({ path: HTTP_FILE_UPLOAD_PATH }).getRestUrl().toString(true);\n\nexport interface CustomDataTransfer {\n    values(): Iterable<CustomDataTransferItem>\n}\n\nexport interface CustomDataTransferItem {\n    readonly id: string;\n    asFile(): {\n        readonly name: string;\n        data(): Promise<Uint8Array>;\n    } | undefined\n}\nexport interface FileUploadParams {\n    source?: DataTransfer | CustomDataTransfer\n    progress?: FileUploadProgressParams\n    onDidUpload?: (uri: string) => void;\n    leaveInTemp?: boolean // dont move file out of the initial tmp directory\n}\nexport interface FileUploadProgressParams {\n    text: string\n}\n\nexport interface FileUploadResult {\n    uploaded: string[]\n}\n\n@injectable()\nexport class FileUploadService {\n\n    static TARGET = 'target';\n    static UPLOAD = 'upload';\n\n    protected uploadForm: FileUploadService.Form;\n    protected deferredUpload?: Deferred<FileUploadResult>;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(FileSystemPreferences)\n    protected fileSystemPreferences: FileSystemPreferences;\n\n    @inject(FileService)\n    protected fileService: FileService;\n\n    get maxConcurrentUploads(): number {\n        const maxConcurrentUploads = this.fileSystemPreferences['files.maxConcurrentUploads'];\n        return maxConcurrentUploads > 0 ? maxConcurrentUploads : Infinity;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.uploadForm = this.createUploadForm();\n    }\n\n    protected createUploadForm(): FileUploadService.Form {\n        const targetInput = document.createElement('input');\n        targetInput.type = 'text';\n        targetInput.spellcheck = false;\n        targetInput.name = FileUploadService.TARGET;\n        targetInput.classList.add('theia-input');\n\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.classList.add('theia-input');\n        fileInput.name = FileUploadService.UPLOAD;\n        fileInput.multiple = true;\n\n        const form = document.createElement('form');\n        form.style.display = 'none';\n        form.enctype = 'multipart/form-data';\n        form.append(targetInput);\n        form.append(fileInput);\n\n        document.body.appendChild(form);\n\n        fileInput.addEventListener('change', () => {\n            if (this.deferredUpload && fileInput.value) {\n                const source: FileUploadService.Source = new FormData(form);\n                // clean up to allow upload to the same folder twice\n                fileInput.value = '';\n                const targetUri = new URI(<string>source.get(FileUploadService.TARGET));\n                const { resolve, reject } = this.deferredUpload;\n                this.deferredUpload = undefined;\n                const { onDidUpload } = this.uploadForm;\n                this.withProgress(\n                    (progress, token) => this.uploadAll(targetUri, { source, progress, token, onDidUpload }),\n                    this.uploadForm.progress\n                ).then(resolve, reject);\n            }\n        });\n        return { targetInput, fileInput };\n    }\n\n    async upload(targetUri: string | URI, params: FileUploadParams = {}): Promise<FileUploadResult> {\n        const { source, onDidUpload, leaveInTemp } = params;\n        if (source) {\n            return this.withProgress(\n                (progress, token) => this.uploadAll(\n                    typeof targetUri === 'string' ? new URI(targetUri) : targetUri,\n                    { source, progress, token, leaveInTemp, onDidUpload }\n                ),\n                params.progress,\n            );\n        }\n        this.deferredUpload = new Deferred<FileUploadResult>();\n        this.uploadForm.targetInput.value = String(targetUri);\n        this.uploadForm.fileInput.click();\n        this.uploadForm.progress = params.progress;\n        this.uploadForm.onDidUpload = params.onDidUpload;\n        return this.deferredUpload.promise;\n    }\n\n    protected getUploadUrl(): string {\n        return HTTP_UPLOAD_URL;\n    }\n\n    protected async uploadAll(targetUri: URI, params: FileUploadService.UploadParams): Promise<FileUploadResult> {\n        const responses: Promise<void>[] = [];\n        const status = new Map<File, {\n            total: number\n            done: number\n            uploaded?: boolean\n        }>();\n        const result: FileUploadResult = {\n            uploaded: []\n        };\n        /**\n         * When `false`: display the uploading progress.\n         * When `true`: display the server-processing progress.\n         */\n        let waitingForResponses = false;\n        const report = throttle(() => {\n            if (waitingForResponses) {\n                /** Number of files being processed. */\n                const total = status.size;\n                /** Number of files uploaded and processed. */\n                let done = 0;\n                for (const item of status.values()) {\n                    if (item.uploaded) {\n                        done += 1;\n                    }\n                }\n                params.progress.report({\n                    message: nls.localize('theia/filesystem/processedOutOf', 'Processed {0} out of {1}', done, total),\n                    work: { total, done }\n                });\n            } else {\n                /** Total number of bytes being uploaded. */\n                let total = 0;\n                /** Current number of bytes uploaded. */\n                let done = 0;\n                for (const item of status.values()) {\n                    total += item.total;\n                    done += item.done;\n                }\n                params.progress.report({\n                    message: nls.localize('theia/filesystem/uploadedOutOf', 'Uploaded {0} out of {1}', result.uploaded.length, status.size),\n                    work: { total, done }\n                });\n            }\n        }, 100);\n        const uploads: Promise<void>[] = [];\n        const uploadSemaphore = new Semaphore(this.maxConcurrentUploads);\n        try {\n            await this.index(targetUri, params.source, {\n                token: params.token,\n                progress: params.progress,\n                accept: async item => {\n                    if (await this.fileService.exists(item.uri) && !await this.confirmOverwrite(item.uri)) {\n                        return;\n                    }\n                    // Track and initialize the file in the status map:\n                    status.set(item.file, { total: item.file.size, done: 0 });\n                    report();\n                    // Don't await here: the semaphore will organize the uploading tasks, not the async indexer.\n                    uploads.push(uploadSemaphore.runExclusive(async () => {\n                        checkCancelled(params.token);\n                        const { upload, response } = this.uploadFile(item.file, item.uri, params.token, params.leaveInTemp, (total, done) => {\n                            const entry = status.get(item.file);\n                            if (entry) {\n                                entry.total = total;\n                                entry.done = done;\n                                report();\n                            }\n                        });\n                        function onError(error: Error): void {\n                            status.delete(item.file);\n                            throw error;\n                        }\n                        responses.push(response\n                            .then(() => {\n                                checkCancelled(params.token);\n                                // Consider the file uploaded once the server sends OK back.\n                                result.uploaded.push(item.uri.toString(true));\n                                const entry = status.get(item.file);\n                                if (entry) {\n                                    entry.uploaded = true;\n                                    report();\n                                }\n                            })\n                            .catch(onError)\n                        );\n                        // Have the queue wait for the upload only.\n                        return upload\n                            .catch(onError);\n                    }));\n                }\n            });\n            checkCancelled(params.token);\n            await Promise.all(uploads);\n            checkCancelled(params.token);\n            waitingForResponses = true;\n            report();\n            await Promise.all(responses);\n        } catch (error) {\n            uploadSemaphore.cancel();\n            if (!isCancelled(error)) {\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    protected async confirmOverwrite(fileUri: URI): Promise<boolean> {\n        const dialog = new ConfirmDialog({\n            title: nls.localizeByDefault('Replace'),\n            msg: nls.localizeByDefault(\"A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?\", fileUri.path.base),\n            ok: nls.localizeByDefault('Replace'),\n            cancel: Dialog.CANCEL\n        });\n        return !!await dialog.open();\n    }\n\n    protected uploadFile(\n        file: File,\n        targetUri: URI,\n        token: CancellationToken,\n        leaveInTemp: boolean | undefined,\n        onProgress: (total: number, done: number) => void\n    ): {\n        /**\n         * Promise that resolves once the uploading is finished.\n         *\n         * Rejects on network error.\n         * Rejects if status is not OK (200).\n         * Rejects if cancelled.\n         */\n        upload: Promise<void>\n        /**\n         * Promise that resolves after the uploading step, once the server answers back.\n         *\n         * Rejects on network error.\n         * Rejects if status is not OK (200).\n         * Rejects if cancelled.\n         */\n        response: Promise<void>\n    } {\n        const data = new FormData();\n        data.set('uri', targetUri.toString(true));\n        data.set('file', file);\n        if (leaveInTemp) {\n            data.set('leaveInTemp', 'true');\n        }\n        // TODO: Use Fetch API once it supports upload monitoring.\n        const xhr = new XMLHttpRequest();\n        token.onCancellationRequested(() => xhr.abort());\n        const upload = new Promise<void>((resolve, reject) => {\n            this.registerEvents(xhr.upload, unregister => ({\n                progress: (event: ProgressEvent<XMLHttpRequestEventTarget>) => {\n                    if (event.total === event.loaded) {\n                        unregister();\n                        resolve();\n                    } else {\n                        onProgress(event.total, event.loaded);\n                    }\n                },\n                abort: () => {\n                    unregister();\n                    reject(cancelled());\n                },\n                error: () => {\n                    unregister();\n                    reject(new Error('POST upload error'));\n                },\n                // `load` fires once the response is received, not when the upload is finished.\n                // `resolve` should be called earlier within `progress` but this is a safety catch.\n                load: () => {\n                    unregister();\n                    if (xhr.status === 200) {\n                        resolve();\n                    } else {\n                        reject(new Error(`POST request failed: ${xhr.status} ${xhr.statusText}`));\n                    }\n                },\n            }));\n        });\n        const response = new Promise<void>((resolve, reject) => {\n            this.registerEvents(xhr, unregister => ({\n                abort: () => {\n                    unregister();\n                    reject(cancelled());\n                },\n                error: () => {\n                    unregister();\n                    reject(new Error('POST request error'));\n                },\n                load: () => {\n                    unregister();\n                    if (xhr.status === 200) {\n                        resolve();\n                    } else {\n                        reject(new Error(`POST request failed: ${xhr.status} ${xhr.statusText}`));\n                    }\n                }\n            }));\n        });\n        xhr.open('POST', this.getUploadUrl(), /* async: */ true);\n        xhr.send(data);\n        return {\n            upload,\n            response\n        };\n    }\n\n    /**\n     * Utility function to attach events and get a callback to unregister those.\n     *\n     * You may not call `unregister` in the same tick as `register` is invoked.\n     */\n    protected registerEvents(\n        target: EventTarget,\n        register: (unregister: () => void) => Record<string, EventListenerOrEventListenerObject>\n    ): void {\n        const events = register(() => {\n            for (const [event, fn] of Object.entries(events)) {\n                target.removeEventListener(event, fn);\n            }\n        });\n        for (const [event, fn] of Object.entries(events)) {\n            target.addEventListener(event, fn);\n        }\n    }\n\n    protected async withProgress<T>(\n        cb: (progress: Progress, token: CancellationToken) => Promise<T>,\n        { text }: FileUploadProgressParams = { text: nls.localize('theia/filesystem/uploadFiles', 'Uploading Files') }\n    ): Promise<T> {\n        const cancellationSource = new CancellationTokenSource();\n        const { token } = cancellationSource;\n        const progress = await this.messageService.showProgress(\n            { text, options: { cancelable: true } },\n            () => cancellationSource.cancel()\n        );\n        try {\n            return await cb(progress, token);\n        } finally {\n            progress.cancel();\n        }\n    }\n\n    protected async index(targetUri: URI, source: FileUploadService.Source, context: FileUploadService.Context): Promise<void> {\n        if (source instanceof FormData) {\n            await this.indexFormData(targetUri, source, context);\n        } else if (source instanceof DataTransfer) {\n            await this.indexDataTransfer(targetUri, source, context);\n        } else {\n            await this.indexCustomDataTransfer(targetUri, source, context);\n        }\n    }\n\n    protected async indexFormData(targetUri: URI, formData: FormData, context: FileUploadService.Context): Promise<void> {\n        for (const entry of formData.getAll(FileUploadService.UPLOAD)) {\n            if (entry instanceof File) {\n                await this.indexFile(targetUri, entry, context);\n            }\n        }\n    }\n\n    protected async indexDataTransfer(targetUri: URI, dataTransfer: DataTransfer, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        if (dataTransfer.items) {\n            await this.indexDataTransferItemList(targetUri, dataTransfer.items, context);\n        } else {\n            await this.indexFileList(targetUri, dataTransfer.files, context);\n        }\n    }\n\n    protected async indexCustomDataTransfer(targetUri: URI, dataTransfer: CustomDataTransfer, context: FileUploadService.Context): Promise<void> {\n        for (const item of dataTransfer.values()) {\n            const fileInfo = item.asFile();\n            if (fileInfo) {\n                await this.indexFile(targetUri, new File([await fileInfo.data()], item.id), context);\n            }\n        }\n    }\n\n    protected async indexFileList(targetUri: URI, files: FileList, context: FileUploadService.Context): Promise<void> {\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file) {\n                await this.indexFile(targetUri, file, context);\n            }\n        }\n    }\n\n    protected async indexFile(targetUri: URI, file: File, context: FileUploadService.Context): Promise<void> {\n        await context.accept({\n            uri: targetUri.resolve(file.name),\n            file\n        });\n    }\n\n    protected async indexDataTransferItemList(targetUri: URI, items: DataTransferItemList, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        const entries: WebKitEntry[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const entry = items[i].webkitGetAsEntry() as WebKitEntry;\n            entries.push(entry);\n        }\n        await this.indexEntries(targetUri, entries, context);\n\n    }\n\n    protected async indexEntry(targetUri: URI, entry: WebKitEntry | null, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        if (!entry) {\n            return;\n        }\n        if (entry.isDirectory) {\n            await this.indexDirectoryEntry(targetUri, entry as WebKitDirectoryEntry, context);\n        } else {\n            await this.indexFileEntry(targetUri, entry as WebKitFileEntry, context);\n        }\n    }\n\n    /**\n     *  Read all entries within a folder by block of 100 files or folders until the\n     *  whole folder has been read.\n     */\n    protected async indexDirectoryEntry(targetUri: URI, entry: WebKitDirectoryEntry, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        const newTargetUri = targetUri.resolve(entry.name);\n        return new Promise<void>(async (resolve, reject) => {\n            const reader = entry.createReader();\n            const getEntries = () => reader.readEntries(async results => {\n                try {\n                    if (!context.token.isCancellationRequested && results && results.length) {\n                        await this.indexEntries(newTargetUri, results, context);\n                        getEntries(); // loop to read all getEntries\n                    } else {\n                        resolve();\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            }, reject);\n            getEntries();\n        });\n    }\n\n    protected async indexEntries(targetUri: URI, entries: WebKitEntry[], context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        for (let i = 0; i < entries.length; i++) {\n            await this.indexEntry(targetUri, entries[i], context);\n        }\n    }\n\n    protected async indexFileEntry(targetUri: URI, entry: WebKitFileEntry, context: FileUploadService.Context): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            try {\n                entry.file(\n                    file => this.indexFile(targetUri, file, context).then(resolve, reject),\n                    reject,\n                );\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n}\n\nexport namespace FileUploadService {\n    export type Source = FormData | DataTransfer | CustomDataTransfer;\n    export interface UploadEntry {\n        file: File\n        uri: URI\n    }\n    export interface Context {\n        progress: Progress\n        token: CancellationToken\n        accept: (entry: UploadEntry) => Promise<void>\n    }\n    export interface Form {\n        targetInput: HTMLInputElement\n        fileInput: HTMLInputElement\n        progress?: FileUploadProgressParams\n        onDidUpload?: (uri: string) => void\n    }\n    export interface UploadParams {\n        source: FileUploadService.Source,\n        progress: Progress,\n        token: CancellationToken,\n        onDidUpload?: (uri: string) => void,\n        leaveInTemp?: boolean\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport const HTTP_FILE_UPLOAD_PATH = '/file-upload';\n"],"names":[],"sourceRoot":""}