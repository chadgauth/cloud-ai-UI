"use strict";
(self["webpackChunk_theia_example_browser"] = self["webpackChunk_theia_example_browser"] || []).push([["node_modules_p-queue_index_js-packages_plugin-ext-vscode_lib_browser_plugin-vscode-frontend-m-23145a"],{

/***/ "../../node_modules/p-queue/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/p-queue/index.js ***!
  \*******************************************/
/***/ (function(module) {



// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comp) {
	let first = 0;
	let count = array.length;

	while (count > 0) {
		const step = (count / 2) | 0;
		let it = first + step;

		if (comp(array[it], value) <= 0) {
			first = ++it;
			count -= step + 1;
		} else {
			count = step;
		}
	}

	return first;
}

class PriorityQueue {
	constructor() {
		this._queue = [];
	}

	enqueue(run, opts) {
		opts = Object.assign({
			priority: 0
		}, opts);

		const element = {priority: opts.priority, run};

		if (this.size && this._queue[this.size - 1].priority >= opts.priority) {
			this._queue.push(element);
			return;
		}

		const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);
		this._queue.splice(index, 0, element);
	}

	dequeue() {
		return this._queue.shift().run;
	}

	get size() {
		return this._queue.length;
	}
}

class PQueue {
	constructor(opts) {
		opts = Object.assign({
			concurrency: Infinity,
			autoStart: true,
			queueClass: PriorityQueue
		}, opts);

		if (!(typeof opts.concurrency === 'number' && opts.concurrency >= 1)) {
			throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${opts.concurrency}\` (${typeof opts.concurrency})`);
		}

		this.queue = new opts.queueClass(); // eslint-disable-line new-cap
		this._queueClass = opts.queueClass;
		this._pendingCount = 0;
		this._concurrency = opts.concurrency;
		this._isPaused = opts.autoStart === false;
		this._resolveEmpty = () => {};
		this._resolveIdle = () => {};
	}

	_next() {
		this._pendingCount--;

		if (this.queue.size > 0) {
			if (!this._isPaused) {
				this.queue.dequeue()();
			}
		} else {
			this._resolveEmpty();
			this._resolveEmpty = () => {};

			if (this._pendingCount === 0) {
				this._resolveIdle();
				this._resolveIdle = () => {};
			}
		}
	}

	add(fn, opts) {
		return new Promise((resolve, reject) => {
			const run = () => {
				this._pendingCount++;

				try {
					Promise.resolve(fn()).then(
						val => {
							resolve(val);
							this._next();
						},
						err => {
							reject(err);
							this._next();
						}
					);
				} catch (err) {
					reject(err);
					this._next();
				}
			};

			if (!this._isPaused && this._pendingCount < this._concurrency) {
				run();
			} else {
				this.queue.enqueue(run, opts);
			}
		});
	}

	addAll(fns, opts) {
		return Promise.all(fns.map(fn => this.add(fn, opts)));
	}

	start() {
		if (!this._isPaused) {
			return;
		}

		this._isPaused = false;
		while (this.queue.size > 0 && this._pendingCount < this._concurrency) {
			this.queue.dequeue()();
		}
	}

	pause() {
		this._isPaused = true;
	}

	clear() {
		this.queue = new this._queueClass(); // eslint-disable-line new-cap
	}

	onEmpty() {
		// Instantly resolve if the queue is empty
		if (this.queue.size === 0) {
			return Promise.resolve();
		}

		return new Promise(resolve => {
			const existingResolve = this._resolveEmpty;
			this._resolveEmpty = () => {
				existingResolve();
				resolve();
			};
		});
	}

	onIdle() {
		// Instantly resolve if none pending
		if (this._pendingCount === 0) {
			return Promise.resolve();
		}

		return new Promise(resolve => {
			const existingResolve = this._resolveIdle;
			this._resolveIdle = () => {
				existingResolve();
				resolve();
			};
		});
	}

	get size() {
		return this.queue.size;
	}

	get pending() {
		return this._pendingCount;
	}

	get isPaused() {
		return this._isPaused;
	}
}

module.exports = PQueue;

;(globalThis['theia'] = globalThis['theia'] || {})['p-queue'] = this;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js":
/*!**********************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const user_storage_uri_1 = __webpack_require__(/*! @theia/userstorage/lib/browser/user-storage-uri */ "../../packages/userstorage/lib/browser/user-storage-uri.js");
const uri_components_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/uri-components */ "../../packages/plugin-ext/lib/common/uri-components.js");
const delegating_file_system_provider_1 = __webpack_require__(/*! @theia/filesystem/lib/common/delegating-file-system-provider */ "../../packages/filesystem/lib/common/delegating-file-system-provider.js");
let PluginVSCodeContribution = class PluginVSCodeContribution {
    registerFileSystemProviders(service) {
        this.mapSchemas(service, uri_components_1.Schemes.vscodeRemote, 'file');
        this.mapSchemas(service, uri_components_1.Schemes.userData, user_storage_uri_1.UserStorageUri.scheme);
    }
    mapSchemas(service, from, to) {
        service.onWillActivateFileSystemProvider(event => {
            if (event.scheme === from) {
                event.waitUntil((async () => {
                    const provider = await service.activateProvider(to);
                    service.registerProvider(from, new delegating_file_system_provider_1.DelegatingFileSystemProvider(provider, {
                        uriConverter: {
                            to: resource => resource.withScheme(to),
                            from: resource => resource.withScheme(from)
                        }
                    }));
                })());
            }
        });
    }
};
PluginVSCodeContribution = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeContribution);
exports.PluginVSCodeContribution = PluginVSCodeContribution;

;(globalThis['theia'] = globalThis['theia'] || {})['@theia/plugin-ext-vscode/lib/browser/plugin-vscode-contribution'] = this;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-frontend-module.js":
/*!*************************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-frontend-module.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const plugin_vscode_commands_contribution_1 = __webpack_require__(/*! ./plugin-vscode-commands-contribution */ "../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-commands-contribution.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const plugin_vscode_contribution_1 = __webpack_require__(/*! ./plugin-vscode-contribution */ "../../packages/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js");
const file_service_1 = __webpack_require__(/*! @theia/filesystem/lib/browser/file-service */ "../../packages/filesystem/lib/browser/file-service.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(plugin_vscode_environment_1.PluginVSCodeEnvironment).toSelf().inSingletonScope();
    bind(plugin_vscode_commands_contribution_1.PluginVscodeCommandsContribution).toSelf().inSingletonScope();
    bind(core_1.CommandContribution).toService(plugin_vscode_commands_contribution_1.PluginVscodeCommandsContribution);
    bind(plugin_vscode_contribution_1.PluginVSCodeContribution).toSelf().inSingletonScope();
    bind(file_service_1.FileServiceContribution).toService(plugin_vscode_contribution_1.PluginVSCodeContribution);
});

;(globalThis['theia'] = globalThis['theia'] || {})['@theia/plugin-ext-vscode/lib/browser/plugin-vscode-frontend-module'] = this;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js":
/*!********************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeEnvironment = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
let PluginVSCodeEnvironment = class PluginVSCodeEnvironment {
    async getExtensionsDirUri() {
        if (!this._extensionsDirUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._extensionsDirUri = configDir.resolve('extensions');
        }
        return this._extensionsDirUri;
    }
};
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginVSCodeEnvironment.prototype, "environments", void 0);
PluginVSCodeEnvironment = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeEnvironment);
exports.PluginVSCodeEnvironment = PluginVSCodeEnvironment;

;(globalThis['theia'] = globalThis['theia'] || {})['@theia/plugin-ext-vscode/lib/common/plugin-vscode-environment'] = this;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js":
/*!************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSCodeExtensionUri = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
/**
 * Static methods for identifying a plugin as the target of the VSCode deployment system.
 * In practice, this means that it will be resolved and deployed by the Open-VSX system.
 */
var VSCodeExtensionUri;
(function (VSCodeExtensionUri) {
    VSCodeExtensionUri.VSCODE_PREFIX = 'vscode:extension/';
    /**
     * Should be used to prefix a plugin's ID to ensure that it is identified as a VSX Extension.
     * @returns `vscode:extension/${id}`
     */
    function toVsxExtensionUriString(id) {
        return `${VSCodeExtensionUri.VSCODE_PREFIX}${id}`;
    }
    VSCodeExtensionUri.toVsxExtensionUriString = toVsxExtensionUriString;
    function toUri(idOrName, namespace) {
        if (typeof namespace === 'string') {
            return new uri_1.default(toVsxExtensionUriString(`${namespace}.${idOrName}`));
        }
        else {
            return new uri_1.default(toVsxExtensionUriString(idOrName));
        }
    }
    VSCodeExtensionUri.toUri = toUri;
    function toId(uri) {
        if (uri.scheme === 'vscode' && uri.path.dir.toString() === 'extension') {
            return uri.path.base;
        }
        return undefined;
    }
    VSCodeExtensionUri.toId = toId;
})(VSCodeExtensionUri = exports.VSCodeExtensionUri || (exports.VSCodeExtensionUri = {}));

;(globalThis['theia'] = globalThis['theia'] || {})['@theia/plugin-ext-vscode/lib/common/plugin-vscode-uri'] = this;


/***/ })

}]);
//# sourceMappingURL=node_modules_p-queue_index_js-packages_plugin-ext-vscode_lib_browser_plugin-vscode-frontend-m-23145a.js.map