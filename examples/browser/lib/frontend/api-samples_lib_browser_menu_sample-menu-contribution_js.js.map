{"version":3,"file":"api-samples_lib_browser_menu_sample-menu-contribution_js.js","mappings":"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","sources":["webpack:///../api-samples/src/browser/menu/sample-menu-contribution.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2020 TORO Limited and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ConfirmDialog, QuickInputService } from '@theia/core/lib/browser';\nimport {\n    Command, CommandContribution, CommandRegistry, MAIN_MENU_BAR,\n    MenuContribution, MenuModelRegistry, MenuNode, MessageService, SubMenuOptions\n} from '@theia/core/lib/common';\nimport { inject, injectable, interfaces } from '@theia/core/shared/inversify';\n\nconst SampleCommand: Command = {\n    id: 'sample-command',\n    label: 'Sample Command'\n};\nconst SampleCommand2: Command = {\n    id: 'sample-command2',\n    label: 'Sample Command2'\n};\nconst SampleCommandConfirmDialog: Command = {\n    id: 'sample-command-confirm-dialog',\n    label: 'Sample Confirm Dialog'\n};\nconst SampleComplexCommandConfirmDialog: Command = {\n    id: 'sample-command-complex-confirm-dialog',\n    label: 'Sample Complex Confirm Dialog'\n};\nconst SampleCommandWithProgressMessage: Command = {\n    id: 'sample-command-with-progress',\n    label: 'Sample Command With Progress Message'\n};\nconst SampleCommandWithIndeterminateProgressMessage: Command = {\n    id: 'sample-command-with-indeterminate-progress',\n    label: 'Sample Command With Indeterminate Progress Message'\n};\nconst SampleQuickInputCommand: Command = {\n    id: 'sample-quick-input-command',\n    category: 'Quick Input',\n    label: 'Test Positive Integer'\n};\n\n@injectable()\nexport class SampleCommandContribution implements CommandContribution {\n\n    @inject(QuickInputService)\n    protected readonly quickInputService: QuickInputService;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand({ id: 'create-quick-pick-sample', label: 'Internal QuickPick' }, {\n            execute: () => {\n                const pick = this.quickInputService.createQuickPick();\n                pick.items = [{ label: '1' }, { label: '2' }, { label: '3' }];\n                pick.onDidAccept(() => {\n                    console.log(`accepted: ${pick.selectedItems[0]?.label}`);\n                    pick.hide();\n                });\n                pick.show();\n            }\n        });\n        commands.registerCommand(SampleCommand, {\n            execute: () => {\n                alert('This is a sample command!');\n            }\n        });\n        commands.registerCommand(SampleCommand2, {\n            execute: () => {\n                alert('This is sample command2!');\n            }\n        });\n        commands.registerCommand(SampleCommandConfirmDialog, {\n            execute: async () => {\n                const choice = await new ConfirmDialog({\n                    title: 'Sample Confirm Dialog',\n                    msg: 'This is a sample with lots of text:' + Array(100)\n                        .fill(undefined)\n                        .map((element, index) => `\\n\\nExtra line #${index}`)\n                        .join('')\n                }).open();\n                this.messageService.info(`Sample confirm dialog returned with: \\`${JSON.stringify(choice)}\\``);\n            }\n        });\n        commands.registerCommand(SampleComplexCommandConfirmDialog, {\n            execute: async () => {\n                const mainDiv = document.createElement('div');\n                for (const color of ['#FF00007F', '#00FF007F', '#0000FF7F']) {\n                    const innerDiv = document.createElement('div');\n                    innerDiv.textContent = 'This is a sample with lots of text:' + Array(50)\n                        .fill(undefined)\n                        .map((_, index) => `\\n\\nExtra line #${index}`)\n                        .join('');\n                    innerDiv.style.backgroundColor = color;\n                    innerDiv.style.padding = '5px';\n                    mainDiv.appendChild(innerDiv);\n                }\n                const choice = await new ConfirmDialog({\n                    title: 'Sample Confirm Dialog',\n                    msg: mainDiv\n                }).open();\n                this.messageService.info(`Sample confirm dialog returned with: \\`${JSON.stringify(choice)}\\``);\n            }\n        });\n        commands.registerCommand(SampleQuickInputCommand, {\n            execute: async () => {\n                const result = await this.quickInputService.input({\n                    placeHolder: 'Please provide a positive integer',\n                    validateInput: async (input: string) => {\n                        const numericValue = Number(input);\n                        if (isNaN(numericValue)) {\n                            return 'Invalid: NaN';\n                        } else if (numericValue % 2 === 1) {\n                            return 'Invalid: Odd Number';\n                        } else if (numericValue < 0) {\n                            return 'Invalid: Negative Number';\n                        } else if (!Number.isInteger(numericValue)) {\n                            return 'Invalid: Only Integers Allowed';\n                        }\n                    }\n                });\n                if (result) {\n                    this.messageService.info(`Positive Integer: ${result}`);\n                }\n            }\n        });\n        commands.registerCommand(SampleCommandWithProgressMessage, {\n            execute: () => {\n                this.messageService\n                    .showProgress({\n                        text: 'Starting to report progress',\n                    })\n                    .then(progress => {\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'First step completed',\n                                work: { done: 25, total: 100 }\n                            });\n                        }, 2000);\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'Next step completed',\n                                work: { done: 60, total: 100 }\n                            });\n                        }, 4000);\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'Complete',\n                                work: { done: 100, total: 100 }\n                            });\n                        }, 6000);\n                        window.setTimeout(() => progress.cancel(), 7000);\n                    });\n            }\n        });\n        commands.registerCommand(SampleCommandWithIndeterminateProgressMessage, {\n            execute: () => {\n                this.messageService\n                    .showProgress({\n                        text: 'Starting to report indeterminate progress',\n                    })\n                    .then(progress => {\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'First step completed',\n                            });\n                        }, 2000);\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'Next step completed',\n                            });\n                        }, 4000);\n                        window.setTimeout(() => {\n                            progress.report({\n                                message: 'Complete',\n                            });\n                        }, 6000);\n                        window.setTimeout(() => progress.cancel(), 7000);\n                    });\n            }\n        });\n    }\n\n}\n\n@injectable()\nexport class SampleMenuContribution implements MenuContribution {\n    registerMenus(menus: MenuModelRegistry): void {\n        const subMenuPath = [...MAIN_MENU_BAR, 'sample-menu'];\n        menus.registerSubmenu(subMenuPath, 'Sample Menu', {\n            order: '2' // that should put the menu right next to the File menu\n        });\n        menus.registerMenuAction(subMenuPath, {\n            commandId: SampleCommand.id,\n            order: '0'\n        });\n        menus.registerMenuAction(subMenuPath, {\n            commandId: SampleCommand2.id,\n            order: '2'\n        });\n        const subSubMenuPath = [...subMenuPath, 'sample-sub-menu'];\n        menus.registerSubmenu(subSubMenuPath, 'Sample sub menu', { order: '2' });\n        menus.registerMenuAction(subSubMenuPath, {\n            commandId: SampleCommand.id,\n            order: '1'\n        });\n        menus.registerMenuAction(subSubMenuPath, {\n            commandId: SampleCommand2.id,\n            order: '3'\n        });\n        const placeholder = new PlaceholderMenuNode([...subSubMenuPath, 'placeholder'].join('-'), 'Placeholder', { order: '0' });\n        menus.registerMenuNode(subSubMenuPath, placeholder);\n\n        /**\n         * Register an action menu with an invalid command (un-registered and without a label) in order\n         * to determine that menus and the layout does not break on startup.\n         */\n        menus.registerMenuAction(subMenuPath, { commandId: 'invalid-command' });\n    }\n\n}\n\n/**\n * Special menu node that is not backed by any commands and is always disabled.\n */\nexport class PlaceholderMenuNode implements MenuNode {\n\n    constructor(readonly id: string, public readonly label: string, protected options?: SubMenuOptions) { }\n\n    get icon(): string | undefined {\n        return this.options?.iconClass;\n    }\n\n    get sortString(): string {\n        return this.options?.order || this.label;\n    }\n\n}\n\nexport const bindSampleMenu = (bind: interfaces.Bind) => {\n    bind(CommandContribution).to(SampleCommandContribution).inSingletonScope();\n    bind(MenuContribution).to(SampleMenuContribution).inSingletonScope();\n};\n"],"names":[],"sourceRoot":""}