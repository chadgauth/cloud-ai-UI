{"version":3,"file":"api-samples_lib_browser_menu_sample-browser-menu-module_js.js","mappings":"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","sources":["webpack:///../api-samples/src/browser/menu/sample-browser-menu-module.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2020 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, ContainerModule } from '@theia/core/shared/inversify';\nimport { Menu as MenuWidget } from '@theia/core/shared/@phosphor/widgets';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { MenuNode, CompoundMenuNode, MenuPath } from '@theia/core/lib/common/menu';\nimport { BrowserMainMenuFactory, MenuCommandRegistry, DynamicMenuWidget, BrowserMenuOptions } from '@theia/core/lib/browser/menu/browser-menu-plugin';\nimport { PlaceholderMenuNode } from './sample-menu-contribution';\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    rebind(BrowserMainMenuFactory).to(SampleBrowserMainMenuFactory).inSingletonScope();\n});\n\n@injectable()\nclass SampleBrowserMainMenuFactory extends BrowserMainMenuFactory {\n\n    protected override registerMenu(menuCommandRegistry: MenuCommandRegistry, menu: MenuNode, args: unknown[]): void {\n        if (menu instanceof PlaceholderMenuNode && menuCommandRegistry instanceof SampleMenuCommandRegistry) {\n            menuCommandRegistry.registerPlaceholderMenu(menu);\n        } else {\n            super.registerMenu(menuCommandRegistry, menu, args);\n        }\n    }\n\n    protected override createMenuCommandRegistry(menu: CompoundMenuNode, args: unknown[] = []): MenuCommandRegistry {\n        const menuCommandRegistry = new SampleMenuCommandRegistry(this.services);\n        this.registerMenu(menuCommandRegistry, menu, args);\n        return menuCommandRegistry;\n    }\n\n    override createMenuWidget(menu: CompoundMenuNode, options: BrowserMenuOptions): DynamicMenuWidget {\n        return new SampleDynamicMenuWidget(menu, options, this.services);\n    }\n\n}\n\nclass SampleMenuCommandRegistry extends MenuCommandRegistry {\n\n    protected placeholders = new Map<string, PlaceholderMenuNode>();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    registerPlaceholderMenu(menu: PlaceholderMenuNode): void {\n        const { id } = menu;\n        if (this.placeholders.has(id)) {\n            return;\n        }\n        this.placeholders.set(id, menu);\n    }\n\n    override snapshot(menuPath: MenuPath): this {\n        super.snapshot(menuPath);\n        for (const menu of this.placeholders.values()) {\n            this.toDispose.push(this.registerPlaceholder(menu));\n        }\n        return this;\n    }\n\n    protected registerPlaceholder(menu: PlaceholderMenuNode): Disposable {\n        const { id } = menu;\n        return this.addCommand(id, {\n            execute: () => { /* NOOP */ },\n            label: menu.label,\n            icon: menu.icon,\n            isEnabled: () => false,\n            isVisible: () => true\n        });\n    }\n\n}\n\nclass SampleDynamicMenuWidget extends DynamicMenuWidget {\n\n    protected override buildSubMenus(parentItems: MenuWidget.IItemOptions[], menu: MenuNode, commands: MenuCommandRegistry): MenuWidget.IItemOptions[] {\n        if (menu instanceof PlaceholderMenuNode) {\n            parentItems.push({\n                command: menu.id,\n                type: 'command',\n            });\n        } else {\n            super.buildSubMenus(parentItems, menu, commands);\n        }\n        return parentItems;\n    }\n}\n"],"names":[],"sourceRoot":""}