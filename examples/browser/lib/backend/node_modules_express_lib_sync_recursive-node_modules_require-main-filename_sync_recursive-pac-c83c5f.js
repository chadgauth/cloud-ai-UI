exports.id = "node_modules_express_lib_sync_recursive-node_modules_require-main-filename_sync_recursive-pac-c83c5f";
exports.ids = ["node_modules_express_lib_sync_recursive-node_modules_require-main-filename_sync_recursive-pac-c83c5f"];
exports.modules = {

/***/ "../../node_modules/express/lib sync recursive":
/*!********************************************!*\
  !*** ../../node_modules/express/lib/ sync ***!
  \********************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/express/lib sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../node_modules/require-main-filename sync recursive":
/*!******************************************************!*\
  !*** ../../node_modules/require-main-filename/ sync ***!
  \******************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/require-main-filename sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../dev-packages/application-package/lib/application-package.js":
/*!*************************************************************************!*\
  !*** ../../dev-packages/application-package/lib/application-package.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationPackage = exports.ApplicationPackageOptions = void 0;
const paths = __webpack_require__(/*! path */ "path");
const json_file_1 = __webpack_require__(/*! ./json-file */ "../../dev-packages/application-package/lib/json-file.js");
const npm_registry_1 = __webpack_require__(/*! ./npm-registry */ "../../dev-packages/application-package/lib/npm-registry.js");
const extension_package_1 = __webpack_require__(/*! ./extension-package */ "../../dev-packages/application-package/lib/extension-package.js");
const extension_package_collector_1 = __webpack_require__(/*! ./extension-package-collector */ "../../dev-packages/application-package/lib/extension-package-collector.js");
const application_props_1 = __webpack_require__(/*! ./application-props */ "../../dev-packages/application-package/lib/application-props.js");
const deepmerge = __webpack_require__(/*! deepmerge */ "../../node_modules/deepmerge/dist/cjs.js");
const resolvePackagePath = __webpack_require__(/*! resolve-package-path */ "../../node_modules/resolve-package-path/lib/index.js");
class ApplicationPackageOptions {
}
exports.ApplicationPackageOptions = ApplicationPackageOptions;
class ApplicationPackage {
    constructor(options) {
        this.options = options;
        this.projectPath = options.projectPath;
        this.log = options.log || console.log.bind(console);
        this.error = options.error || console.error.bind(console);
    }
    get registry() {
        if (this._registry) {
            return this._registry;
        }
        this._registry = this.options.registry || new npm_registry_1.NpmRegistry();
        this._registry.updateProps(this.props);
        return this._registry;
    }
    get target() {
        return this.props.target;
    }
    get props() {
        if (this._props) {
            return this._props;
        }
        const theia = this.pck.theia || {};
        if (this.options.appTarget) {
            theia.target = this.options.appTarget;
        }
        if (theia.target && !(theia.target in application_props_1.ApplicationProps.ApplicationTarget)) {
            const defaultTarget = application_props_1.ApplicationProps.ApplicationTarget.browser;
            console.warn(`Unknown application target '${theia.target}', '${defaultTarget}' to be used instead`);
            theia.target = defaultTarget;
        }
        return this._props = deepmerge(application_props_1.ApplicationProps.DEFAULT, theia);
    }
    get pck() {
        if (this._pck) {
            return this._pck;
        }
        return this._pck = (0, json_file_1.readJsonFile)(this.packagePath);
    }
    /**
     * Extension packages in the topological order.
     */
    get extensionPackages() {
        if (!this._extensionPackages) {
            const collector = new extension_package_collector_1.ExtensionPackageCollector((raw, options = {}) => this.newExtensionPackage(raw, options), this.resolveModule);
            this._extensionPackages = collector.collect(this.pck);
        }
        return this._extensionPackages;
    }
    getExtensionPackage(extension) {
        return this.extensionPackages.find(pck => pck.name === extension);
    }
    async findExtensionPackage(extension) {
        return this.getExtensionPackage(extension) || this.resolveExtensionPackage(extension);
    }
    /**
     * Resolve an extension name to its associated package
     * @param extension the name of the extension's package as defined in "dependencies" (might be aliased)
     * @returns the extension package
     */
    async resolveExtensionPackage(extension) {
        const raw = await extension_package_1.RawExtensionPackage.view(this.registry, extension);
        return raw ? this.newExtensionPackage(raw, { alias: extension }) : undefined;
    }
    newExtensionPackage(raw, options = {}) {
        return new extension_package_1.ExtensionPackage(raw, this.registry, options);
    }
    get frontendPreloadModules() {
        var _a;
        return (_a = this._frontendPreloadModules) !== null && _a !== void 0 ? _a : (this._frontendPreloadModules = this.computeModules('frontendPreload'));
    }
    get frontendModules() {
        var _a;
        return (_a = this._frontendModules) !== null && _a !== void 0 ? _a : (this._frontendModules = this.computeModules('frontend'));
    }
    get frontendElectronModules() {
        var _a;
        return (_a = this._frontendElectronModules) !== null && _a !== void 0 ? _a : (this._frontendElectronModules = this.computeModules('frontendElectron', 'frontend'));
    }
    get secondaryWindowModules() {
        var _a;
        return (_a = this._secondaryWindowModules) !== null && _a !== void 0 ? _a : (this._secondaryWindowModules = this.computeModules('secondaryWindow'));
    }
    get backendModules() {
        var _a;
        return (_a = this._backendModules) !== null && _a !== void 0 ? _a : (this._backendModules = this.computeModules('backend'));
    }
    get backendElectronModules() {
        var _a;
        return (_a = this._backendElectronModules) !== null && _a !== void 0 ? _a : (this._backendElectronModules = this.computeModules('backendElectron', 'backend'));
    }
    get electronMainModules() {
        var _a;
        return (_a = this._electronMainModules) !== null && _a !== void 0 ? _a : (this._electronMainModules = this.computeModules('electronMain'));
    }
    get preloadModules() {
        var _a;
        return (_a = this._preloadModules) !== null && _a !== void 0 ? _a : (this._preloadModules = this.computeModules('preload'));
    }
    computeModules(primary, secondary) {
        const result = new Map();
        let moduleIndex = 1;
        for (const extensionPackage of this.extensionPackages) {
            const extensions = extensionPackage.theiaExtensions;
            if (extensions) {
                for (const extension of extensions) {
                    const modulePath = extension[primary] || (secondary && extension[secondary]);
                    if (typeof modulePath === 'string') {
                        const extensionPath = paths.join(extensionPackage.name, modulePath).split(paths.sep).join('/');
                        result.set(`${primary}_${moduleIndex}`, extensionPath);
                        moduleIndex = moduleIndex + 1;
                    }
                }
            }
        }
        return result;
    }
    relative(path) {
        return paths.relative(this.projectPath, path);
    }
    path(...segments) {
        return paths.resolve(this.projectPath, ...segments);
    }
    get packagePath() {
        return this.path('package.json');
    }
    lib(...segments) {
        return this.path('lib', ...segments);
    }
    srcGen(...segments) {
        return this.path('src-gen', ...segments);
    }
    backend(...segments) {
        return this.srcGen('backend', ...segments);
    }
    bundledBackend(...segments) {
        return this.path('backend', 'bundle', ...segments);
    }
    frontend(...segments) {
        return this.srcGen('frontend', ...segments);
    }
    isBrowser() {
        return this.target === application_props_1.ApplicationProps.ApplicationTarget.browser;
    }
    isElectron() {
        return this.target === application_props_1.ApplicationProps.ApplicationTarget.electron;
    }
    ifBrowser(value, defaultValue) {
        return this.isBrowser() ? value : defaultValue;
    }
    ifElectron(value, defaultValue) {
        return this.isElectron() ? value : defaultValue;
    }
    get targetBackendModules() {
        return this.ifBrowser(this.backendModules, this.backendElectronModules);
    }
    get targetFrontendModules() {
        return this.ifBrowser(this.frontendModules, this.frontendElectronModules);
    }
    get targetElectronMainModules() {
        return this.ifElectron(this.electronMainModules, new Map());
    }
    setDependency(name, version) {
        const dependencies = this.pck.dependencies || {};
        const currentVersion = dependencies[name];
        if (currentVersion === version) {
            return false;
        }
        if (version) {
            dependencies[name] = version;
        }
        else {
            delete dependencies[name];
        }
        this.pck.dependencies = (0, npm_registry_1.sortByKey)(dependencies);
        return true;
    }
    save() {
        return (0, json_file_1.writeJsonFile)(this.packagePath, this.pck, {
            detectIndent: true
        });
    }
    /**
     * A node module resolver in the context of the application package.
     */
    get resolveModule() {
        if (!this._moduleResolver) {
            const resolutionPaths = this.packagePath || process.cwd();
            this._moduleResolver = modulePath => {
                const resolved = resolvePackagePath(modulePath, resolutionPaths);
                if (!resolved) {
                    throw new Error('Could not resolve module: ' + modulePath);
                }
                return resolved;
            };
        }
        return this._moduleResolver;
    }
    resolveModulePath(moduleName, ...segments) {
        return paths.resolve(this.resolveModule(moduleName + '/package.json'), '..', ...segments);
    }
}
exports.ApplicationPackage = ApplicationPackage;


/***/ }),

/***/ "../../dev-packages/application-package/lib/application-props.js":
/*!***********************************************************************!*\
  !*** ../../dev-packages/application-package/lib/application-props.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationProps = exports.NpmRegistryProps = exports.GeneratorConfig = exports.BackendApplicationConfig = exports.FrontendApplicationConfig = exports.DefaultTheme = exports.ElectronFrontendApplicationConfig = void 0;
exports.deepmerge = __webpack_require__(/*! deepmerge */ "../../node_modules/deepmerge/dist/cjs.js");
var ElectronFrontendApplicationConfig;
(function (ElectronFrontendApplicationConfig) {
    ElectronFrontendApplicationConfig.DEFAULT = {
        windowOptions: {}
    };
})(ElectronFrontendApplicationConfig = exports.ElectronFrontendApplicationConfig || (exports.ElectronFrontendApplicationConfig = {}));
var DefaultTheme;
(function (DefaultTheme) {
    function defaultForOSTheme(theme) {
        if (typeof theme === 'string') {
            return theme;
        }
        if (typeof window !== 'undefined' &&
            window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return theme.dark;
        }
        return theme.light;
    }
    DefaultTheme.defaultForOSTheme = defaultForOSTheme;
})(DefaultTheme = exports.DefaultTheme || (exports.DefaultTheme = {}));
var FrontendApplicationConfig;
(function (FrontendApplicationConfig) {
    FrontendApplicationConfig.DEFAULT = {
        applicationName: 'Eclipse Theia',
        defaultTheme: { light: 'light', dark: 'dark' },
        defaultIconTheme: 'theia-file-icons',
        electron: ElectronFrontendApplicationConfig.DEFAULT,
        defaultLocale: '',
        validatePreferencesSchema: true
    };
})(FrontendApplicationConfig = exports.FrontendApplicationConfig || (exports.FrontendApplicationConfig = {}));
var BackendApplicationConfig;
(function (BackendApplicationConfig) {
    BackendApplicationConfig.DEFAULT = {
        singleInstance: false,
    };
})(BackendApplicationConfig = exports.BackendApplicationConfig || (exports.BackendApplicationConfig = {}));
var GeneratorConfig;
(function (GeneratorConfig) {
    GeneratorConfig.DEFAULT = {
        preloadTemplate: ''
    };
})(GeneratorConfig = exports.GeneratorConfig || (exports.GeneratorConfig = {}));
var NpmRegistryProps;
(function (NpmRegistryProps) {
    NpmRegistryProps.DEFAULT = {
        next: false,
        registry: 'https://registry.npmjs.org/'
    };
})(NpmRegistryProps = exports.NpmRegistryProps || (exports.NpmRegistryProps = {}));
var ApplicationProps;
(function (ApplicationProps) {
    let ApplicationTarget;
    (function (ApplicationTarget) {
        ApplicationTarget["browser"] = "browser";
        ApplicationTarget["electron"] = "electron";
    })(ApplicationTarget = ApplicationProps.ApplicationTarget || (ApplicationProps.ApplicationTarget = {}));
    ;
    ApplicationProps.DEFAULT = {
        ...NpmRegistryProps.DEFAULT,
        target: 'browser',
        backend: {
            config: BackendApplicationConfig.DEFAULT
        },
        frontend: {
            config: FrontendApplicationConfig.DEFAULT
        },
        generator: {
            config: GeneratorConfig.DEFAULT
        }
    };
})(ApplicationProps = exports.ApplicationProps || (exports.ApplicationProps = {}));


/***/ }),

/***/ "../../dev-packages/application-package/lib/extension-package-collector.js":
/*!*********************************************************************************!*\
  !*** ../../dev-packages/application-package/lib/extension-package-collector.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionPackageCollector = void 0;
const json_file_1 = __webpack_require__(/*! ./json-file */ "../../dev-packages/application-package/lib/json-file.js");
const extension_package_1 = __webpack_require__(/*! ./extension-package */ "../../dev-packages/application-package/lib/extension-package.js");
class ExtensionPackageCollector {
    constructor(extensionPackageFactory, resolveModule) {
        this.extensionPackageFactory = extensionPackageFactory;
        this.resolveModule = resolveModule;
        this.sorted = [];
        this.visited = new Map();
    }
    collect(pck) {
        this.root = pck;
        this.collectPackages(pck);
        return this.sorted;
    }
    collectPackages(pck) {
        var _a, _b;
        for (const [dependency, versionRange] of [
            ...Object.entries((_a = pck.dependencies) !== null && _a !== void 0 ? _a : {}),
            ...Object.entries((_b = pck.peerDependencies) !== null && _b !== void 0 ? _b : {})
        ]) {
            this.collectPackage(dependency, versionRange);
        }
    }
    collectPackagesWithParent(pck, parent) {
        const current = this.parent;
        this.parent = parent;
        this.collectPackages(pck);
        this.parent = current;
    }
    collectPackage(name, versionRange) {
        if (this.visited.has(name)) {
            return;
        }
        this.visited.set(name, true);
        let packagePath;
        try {
            packagePath = this.resolveModule(name);
        }
        catch {
            console.debug(`Failed to resolve module: ${name}`);
        }
        if (!packagePath) {
            return;
        }
        const pck = (0, json_file_1.readJsonFile)(packagePath);
        if (extension_package_1.RawExtensionPackage.is(pck)) {
            const parent = this.parent;
            const version = pck.version;
            const transitive = !(name in this.root.dependencies);
            pck.installed = { packagePath, version, parent, transitive };
            pck.version = versionRange;
            const extensionPackage = this.extensionPackageFactory(pck, { alias: name });
            this.collectPackagesWithParent(pck, extensionPackage);
            this.sorted.push(extensionPackage);
        }
    }
}
exports.ExtensionPackageCollector = ExtensionPackageCollector;


/***/ }),

/***/ "../../dev-packages/application-package/lib/extension-package.js":
/*!***********************************************************************!*\
  !*** ../../dev-packages/application-package/lib/extension-package.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawExtensionPackage = exports.ExtensionPackage = void 0;
const fs = __webpack_require__(/*! fs-extra */ "../../node_modules/fs-extra/lib/index.js");
const paths = __webpack_require__(/*! path */ "path");
const semver = __webpack_require__(/*! semver */ "../../node_modules/semver/index.js");
const npm_registry_1 = __webpack_require__(/*! ./npm-registry */ "../../dev-packages/application-package/lib/npm-registry.js");
class ExtensionPackage {
    constructor(raw, registry, options = {}) {
        var _a;
        this.raw = raw;
        this.registry = registry;
        this._name = (_a = options.alias) !== null && _a !== void 0 ? _a : raw.name;
    }
    /**
     * The name of the extension's package as defined in "dependencies" (might be aliased)
     */
    get name() {
        return this._name;
    }
    get version() {
        if (this.raw.installed) {
            return this.raw.installed.version;
        }
        if (this.raw.view) {
            const latestVersion = this.raw.view.latestVersion;
            if (latestVersion) {
                return latestVersion;
            }
        }
        return this.raw.version;
    }
    get description() {
        return this.raw.description || '';
    }
    get theiaExtensions() {
        return this.raw.theiaExtensions || [];
    }
    get installed() {
        return !!this.raw.installed;
    }
    get dependent() {
        if (!this.transitive) {
            return undefined;
        }
        let current = this.parent;
        let parent = current.parent;
        while (parent !== undefined) {
            current = parent;
            parent = current.parent;
        }
        return current.name;
    }
    get transitive() {
        return !!this.raw.installed && this.raw.installed.transitive;
    }
    get parent() {
        if (this.raw.installed) {
            return this.raw.installed.parent;
        }
        return undefined;
    }
    async view() {
        if (this.raw.view === undefined) {
            const raw = await RawExtensionPackage.view(this.registry, this.name, this.version);
            this.raw.view = raw ? raw.view : new RawExtensionPackage.ViewState(this.registry);
        }
        return this.raw.view;
    }
    async getReadme() {
        if (this.readme === undefined) {
            this.readme = await this.resolveReadme();
        }
        return this.readme;
    }
    async resolveReadme() {
        const raw = await this.view();
        if (raw && raw.readme) {
            return raw.readme;
        }
        if (this.raw.installed) {
            const readmePath = paths.resolve(this.raw.installed.packagePath, '..', 'README.md');
            if (await fs.pathExists(readmePath)) {
                return fs.readFile(readmePath, { encoding: 'utf8' });
            }
            return '';
        }
        return '';
    }
    getAuthor() {
        if (this.raw.publisher) {
            return this.raw.publisher.username;
        }
        if (typeof this.raw.author === 'string') {
            return this.raw.author;
        }
        if (this.raw.author && this.raw.author.name) {
            return this.raw.author.name;
        }
        if (!!this.raw.maintainers && this.raw.maintainers.length > 0) {
            return this.raw.maintainers[0].username;
        }
        return '';
    }
}
exports.ExtensionPackage = ExtensionPackage;
var RawExtensionPackage;
(function (RawExtensionPackage) {
    class ViewState {
        constructor(registry) {
            this.registry = registry;
        }
        get latestVersion() {
            if (this.tags) {
                if (this.registry.props.next) {
                    const next = this.tags['next'];
                    if (next !== undefined) {
                        return next;
                    }
                }
                const latest = this.tags['latest'];
                if (this.registry.props.next || !semver.prerelease(latest)) {
                    return latest;
                }
                return undefined;
            }
            return undefined;
        }
    }
    RawExtensionPackage.ViewState = ViewState;
    function is(pck) {
        return npm_registry_1.PublishedNodePackage.is(pck) && !!pck.theiaExtensions;
    }
    RawExtensionPackage.is = is;
    async function view(registry, name, version) {
        const result = await registry.view(name).catch(() => undefined);
        if (!result) {
            return undefined;
        }
        const tags = result['dist-tags'];
        const versions = [tags['latest']];
        if (registry.props.next) {
            versions.push(tags['next']);
        }
        if (version) {
            versions.push(tags[version], version);
        }
        for (const current of versions.reverse()) {
            const raw = result.versions[current];
            if (is(raw)) {
                const viewState = new ViewState(registry);
                viewState.readme = result.readme;
                viewState.tags = tags;
                raw.view = viewState;
                return raw;
            }
        }
        return undefined;
    }
    RawExtensionPackage.view = view;
})(RawExtensionPackage = exports.RawExtensionPackage || (exports.RawExtensionPackage = {}));


/***/ }),

/***/ "../../dev-packages/application-package/lib/index.js":
/*!***********************************************************!*\
  !*** ../../dev-packages/application-package/lib/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./npm-registry */ "../../dev-packages/application-package/lib/npm-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./extension-package */ "../../dev-packages/application-package/lib/extension-package.js"), exports);
__exportStar(__webpack_require__(/*! ./application-package */ "../../dev-packages/application-package/lib/application-package.js"), exports);
__exportStar(__webpack_require__(/*! ./application-props */ "../../dev-packages/application-package/lib/application-props.js"), exports);
__exportStar(__webpack_require__(/*! ./environment */ "../../dev-packages/application-package/lib/environment.js"), exports);
__exportStar(__webpack_require__(/*! ./api */ "../../dev-packages/application-package/lib/api.js"), exports);


/***/ }),

/***/ "../../dev-packages/application-package/lib/json-file.js":
/*!***************************************************************!*\
  !*** ../../dev-packages/application-package/lib/json-file.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readJsonFile = exports.writeJsonFile = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
const writeJsonFile = __webpack_require__(/*! write-json-file */ "../../node_modules/write-json-file/index.js");
exports.writeJsonFile = writeJsonFile;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function readJsonFile(path) {
    return JSON.parse(fs.readFileSync(path, { encoding: 'utf-8' }));
}
exports.readJsonFile = readJsonFile;


/***/ }),

/***/ "../../dev-packages/application-package/lib/npm-registry.js":
/*!******************************************************************!*\
  !*** ../../dev-packages/application-package/lib/npm-registry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NpmRegistry = exports.NpmRegistryOptions = exports.sortByKey = exports.PublishedNodePackage = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const nano = __webpack_require__(/*! nano */ "../../node_modules/nano/lib/nano.js");
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
const node_request_service_1 = __webpack_require__(/*! @theia/request/lib/node-request-service */ "../../dev-packages/request/lib/node-request-service.js");
const application_props_1 = __webpack_require__(/*! ./application-props */ "../../dev-packages/application-package/lib/application-props.js");
var PublishedNodePackage;
(function (PublishedNodePackage) {
    function is(pck) {
        return !!pck && !!pck.name && !!pck.version;
    }
    PublishedNodePackage.is = is;
})(PublishedNodePackage = exports.PublishedNodePackage || (exports.PublishedNodePackage = {}));
function sortByKey(object) {
    return Object.keys(object).sort().reduce((sorted, key) => {
        sorted[key] = object[key];
        return sorted;
    }, {});
}
exports.sortByKey = sortByKey;
class NpmRegistryOptions {
}
exports.NpmRegistryOptions = NpmRegistryOptions;
class NpmRegistry {
    constructor(options) {
        this.props = { ...application_props_1.NpmRegistryProps.DEFAULT };
        this.index = new Map();
        this.options = {
            watchChanges: false,
            ...options
        };
        this.resetIndex();
        this.request = new node_request_service_1.NodeRequestService();
    }
    updateProps(props) {
        const oldRegistry = this.props.registry;
        Object.assign(this.props, props);
        const newRegistry = this.props.registry;
        if (oldRegistry !== newRegistry) {
            this.resetIndex();
        }
    }
    resetIndex() {
        this.index.clear();
        if (this.options.watchChanges && this.props.registry === application_props_1.NpmRegistryProps.DEFAULT.registry) {
            if (this.changes) {
                this.changes.stop();
            }
            // Invalidate index with NPM registry web hooks
            this.changes = nano('https://replicate.npmjs.com').use('registry').changesReader;
            this.changes.get({}).on('change', change => this.invalidate(change.id));
        }
    }
    invalidate(name) {
        if (this.index.delete(name)) {
            this.view(name);
        }
    }
    view(name) {
        const indexed = this.index.get(name);
        if (indexed) {
            return indexed;
        }
        const result = this.doView(name);
        this.index.set(name, result);
        result.catch(() => this.index.delete(name));
        return result;
    }
    async doView(name) {
        let url = this.props.registry;
        if (name[0] === '@') {
            url += '@' + encodeURIComponent(name.substring(1));
        }
        else {
            url += encodeURIComponent(name);
        }
        const response = await this.request.request({ url });
        if (response.res.statusCode !== 200) {
            throw new Error(`HTTP ${response.res.statusCode}: for ${url}`);
        }
        return request_1.RequestContext.asJson(response);
    }
}
exports.NpmRegistry = NpmRegistry;


/***/ }),

/***/ "../../dev-packages/request/lib/common-request-service.js":
/*!****************************************************************!*\
  !*** ../../dev-packages/request/lib/common-request-service.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.REQUEST_SERVICE_PATH = exports.BackendRequestService = exports.RequestService = exports.RequestContext = void 0;
const textDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : undefined;
var RequestContext;
(function (RequestContext) {
    function isSuccess(context) {
        return (context.res.statusCode && context.res.statusCode >= 200 && context.res.statusCode < 300) || context.res.statusCode === 1223;
    }
    RequestContext.isSuccess = isSuccess;
    function hasNoContent(context) {
        return context.res.statusCode === 204;
    }
    function asText(context) {
        if (!isSuccess(context)) {
            throw new Error(`Server returned code ${context.res.statusCode}.`);
        }
        if (hasNoContent(context)) {
            return '';
        }
        // Ensures that the buffer is an Uint8Array
        context = decompress(context);
        if (textDecoder) {
            return textDecoder.decode(context.buffer);
        }
        else {
            return context.buffer.toString();
        }
    }
    RequestContext.asText = asText;
    function asJson(context) {
        const str = asText(context);
        try {
            return JSON.parse(str);
        }
        catch (err) {
            err.message += ':\n' + str;
            throw err;
        }
    }
    RequestContext.asJson = asJson;
    /**
     * Convert the buffer to base64 before sending it to the frontend.
     * This reduces the amount of JSON data transferred massively.
     * Does nothing if the buffer is already compressed.
     */
    function compress(context) {
        if (context.buffer instanceof Uint8Array && Buffer !== undefined) {
            context.buffer = Buffer.from(context.buffer).toString('base64');
        }
        return context;
    }
    RequestContext.compress = compress;
    /**
     * Decompresses a base64 buffer into a normal array buffer
     * Does nothing if the buffer is not compressed.
     */
    function decompress(context) {
        const buffer = context.buffer;
        if (typeof buffer === 'string' && typeof atob === 'function') {
            context.buffer = Uint8Array.from(atob(buffer), c => c.charCodeAt(0));
        }
        return context;
    }
    RequestContext.decompress = decompress;
})(RequestContext = exports.RequestContext || (exports.RequestContext = {}));
exports.RequestService = Symbol('RequestService');
exports.BackendRequestService = Symbol('BackendRequestService');
exports.REQUEST_SERVICE_PATH = '/services/request-service';


/***/ }),

/***/ "../../dev-packages/request/lib/index.js":
/*!***********************************************!*\
  !*** ../../dev-packages/request/lib/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./common-request-service */ "../../dev-packages/request/lib/common-request-service.js"), exports);


/***/ }),

/***/ "../../dev-packages/request/lib/node-request-service.js":
/*!**************************************************************!*\
  !*** ../../dev-packages/request/lib/node-request-service.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeRequestService = void 0;
const http = __webpack_require__(/*! http */ "http");
const https = __webpack_require__(/*! https */ "https");
const proxy_1 = __webpack_require__(/*! ./proxy */ "../../dev-packages/request/lib/proxy.js");
const zlib_1 = __webpack_require__(/*! zlib */ "zlib");
;
class NodeRequestService {
    getNodeRequest(options) {
        const endpoint = new URL(options.url);
        const module = endpoint.protocol === 'https:' ? https : http;
        return module.request;
    }
    async getProxyUrl(url) {
        return this.proxyUrl;
    }
    async configure(config) {
        if (config.proxyUrl !== undefined) {
            this.proxyUrl = config.proxyUrl;
        }
        if (config.strictSSL !== undefined) {
            this.strictSSL = config.strictSSL;
        }
        if (config.proxyAuthorization !== undefined) {
            this.authorization = config.proxyAuthorization;
        }
    }
    async processOptions(options) {
        var _a;
        const { strictSSL } = this;
        options.strictSSL = (_a = options.strictSSL) !== null && _a !== void 0 ? _a : strictSSL;
        const agent = options.agent ? options.agent : (0, proxy_1.getProxyAgent)(options.url || '', process.env, {
            proxyUrl: await this.getProxyUrl(options.url),
            strictSSL: options.strictSSL
        });
        options.agent = agent;
        const authorization = options.proxyAuthorization || this.authorization;
        if (authorization) {
            options.headers = {
                ...(options.headers || {}),
                'Proxy-Authorization': authorization
            };
        }
        options.headers = {
            'Accept-Encoding': 'gzip',
            ...(options.headers || {}),
        };
        return options;
    }
    request(options, token) {
        return new Promise(async (resolve, reject) => {
            options = await this.processOptions(options);
            const endpoint = new URL(options.url);
            const rawRequest = options.getRawRequest
                ? options.getRawRequest(options)
                : this.getNodeRequest(options);
            const opts = {
                hostname: endpoint.hostname,
                port: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),
                protocol: endpoint.protocol,
                path: endpoint.pathname + endpoint.search,
                method: options.type || 'GET',
                headers: options.headers,
                agent: options.agent,
                rejectUnauthorized: !!options.strictSSL
            };
            if (options.user && options.password) {
                opts.auth = options.user + ':' + options.password;
            }
            const req = rawRequest(opts, async (res) => {
                var _a;
                const followRedirects = (_a = options.followRedirects) !== null && _a !== void 0 ? _a : 3;
                if (res.statusCode && res.statusCode >= 300 && res.statusCode < 400 && followRedirects > 0 && res.headers.location) {
                    this.request({
                        ...options,
                        url: res.headers.location,
                        followRedirects: followRedirects - 1
                    }, token).then(resolve, reject);
                }
                else {
                    const chunks = [];
                    const stream = res.headers['content-encoding'] === 'gzip' ? res.pipe((0, zlib_1.createGunzip)()) : res;
                    stream.on('data', chunk => {
                        chunks.push(chunk);
                    });
                    stream.on('end', () => {
                        const buffer = Buffer.concat(chunks);
                        resolve({
                            url: options.url,
                            res: {
                                headers: res.headers,
                                statusCode: res.statusCode
                            },
                            buffer
                        });
                    });
                    stream.on('error', reject);
                }
            });
            req.on('error', reject);
            if (options.timeout) {
                req.setTimeout(options.timeout);
            }
            if (options.data) {
                req.write(options.data);
            }
            req.end();
            token === null || token === void 0 ? void 0 : token.onCancellationRequested(() => {
                req.abort();
                reject();
            });
        });
    }
    async resolveProxy(url) {
        return undefined;
    }
}
exports.NodeRequestService = NodeRequestService;


/***/ }),

/***/ "../../dev-packages/request/lib/proxy.js":
/*!***********************************************!*\
  !*** ../../dev-packages/request/lib/proxy.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getProxyAgent = void 0;
const url_1 = __webpack_require__(/*! url */ "url");
const httpAgent = __webpack_require__(/*! http-proxy-agent */ "../../node_modules/http-proxy-agent/dist/index.js");
const httpsAgent = __webpack_require__(/*! https-proxy-agent */ "../../node_modules/https-proxy-agent/dist/index.js");
function getSystemProxyURI(requestURL, env) {
    if (requestURL.protocol === 'http:') {
        return env.HTTP_PROXY || env.http_proxy;
    }
    else if (requestURL.protocol === 'https:') {
        return env.HTTPS_PROXY || env.https_proxy || env.HTTP_PROXY || env.http_proxy;
    }
    return undefined;
}
function getProxyAgent(rawRequestURL, env, options = {}) {
    const requestURL = (0, url_1.parse)(rawRequestURL);
    const proxyURL = options.proxyUrl || getSystemProxyURI(requestURL, env);
    if (!proxyURL) {
        return undefined;
    }
    const proxyEndpoint = (0, url_1.parse)(proxyURL);
    if (!/^https?:$/.test(proxyEndpoint.protocol || '')) {
        return undefined;
    }
    const opts = {
        host: proxyEndpoint.hostname || '',
        port: proxyEndpoint.port || (proxyEndpoint.protocol === 'https' ? '443' : '80'),
        auth: proxyEndpoint.auth,
        rejectUnauthorized: !!options.strictSSL,
    };
    const createAgent = requestURL.protocol === 'http:' ? httpAgent : httpsAgent;
    return createAgent(opts);
}
exports.getProxyAgent = getProxyAgent;


/***/ }),

/***/ "../../packages/core/lib/common/severity.js":
/*!**************************************************!*\
  !*** ../../packages/core/lib/common/severity.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Severity = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const nls_1 = __webpack_require__(/*! ./nls */ "../../packages/core/lib/common/nls.js");
var Severity;
(function (Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Error"] = 1] = "Error";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Info"] = 3] = "Info";
    Severity[Severity["Log"] = 4] = "Log";
})(Severity = exports.Severity || (exports.Severity = {}));
const error = 'Errors';
const warning = 'Warnings';
const info = 'Info';
const log = 'Log';
const ignore = 'All';
(function (Severity) {
    function fromValue(value) {
        value = value && value.toLowerCase();
        if (!value) {
            return Severity.Ignore;
        }
        if (['error', 'errors'].indexOf(value) !== -1) {
            return Severity.Error;
        }
        if (['warn', 'warning', 'warnings'].indexOf(value) !== -1) {
            return Severity.Warning;
        }
        if (value === 'info') {
            return Severity.Info;
        }
        if (value === 'log') {
            return Severity.Log;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toDiagnosticSeverity(value) {
        switch (value) {
            case Severity.Ignore:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Hint;
            case Severity.Info:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Information;
            case Severity.Log:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Information;
            case Severity.Warning:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Warning;
            case Severity.Error:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Error;
            default:
                return vscode_languageserver_protocol_1.DiagnosticSeverity.Error;
        }
    }
    Severity.toDiagnosticSeverity = toDiagnosticSeverity;
    function toString(severity) {
        switch (severity) {
            case Severity.Error:
                return error;
            case Severity.Warning:
                return warning;
            case Severity.Info:
                return info;
            case Severity.Log:
                return log;
            default:
                return ignore;
        }
    }
    Severity.toString = toString;
    function toLocaleString(severity) {
        if (severity === Severity.Error || severity === error) {
            return nls_1.nls.localize('theia/core/severity/errors', 'Errors');
        }
        else if (severity === Severity.Warning || severity === warning) {
            return nls_1.nls.localize('theia/core/severity/warnings', 'Warnings');
        }
        else if (severity === Severity.Info || severity === info) {
            return nls_1.nls.localizeByDefault('Info');
        }
        else if (severity === Severity.Log || severity === log) {
            return nls_1.nls.localize('theia/core/severity/log', 'Log');
        }
        else {
            return nls_1.nls.localizeByDefault('All');
        }
    }
    Severity.toLocaleString = toLocaleString;
    function toArray() {
        return [ignore, error, warning, info, log];
    }
    Severity.toArray = toArray;
})(Severity = exports.Severity || (exports.Severity = {}));


/***/ }),

/***/ "../../packages/core/lib/node/backend-application.js":
/*!***********************************************************!*\
  !*** ../../packages/core/lib/node/backend-application.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackendApplication = exports.BackendApplicationCliContribution = exports.BackendApplicationContribution = exports.BackendApplicationServer = void 0;
const dns = __webpack_require__(/*! dns */ "dns");
const path = __webpack_require__(/*! path */ "path");
const http = __webpack_require__(/*! http */ "http");
const https = __webpack_require__(/*! https */ "https");
const express = __webpack_require__(/*! express */ "../../node_modules/express/index.js");
const fs = __webpack_require__(/*! fs-extra */ "../../node_modules/fs-extra/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! ../common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const index_1 = __webpack_require__(/*! ../common/index */ "../../packages/core/lib/common/index.js");
const application_package_1 = __webpack_require__(/*! @theia/application-package */ "../../dev-packages/application-package/lib/index.js");
const process_utils_1 = __webpack_require__(/*! ./process-utils */ "../../packages/core/lib/node/process-utils.js");
const APP_PROJECT_PATH = 'app-project-path';
const TIMER_WARNING_THRESHOLD = 50;
const DEFAULT_PORT = index_1.environment.electron.is() ? 0 : 3000;
const DEFAULT_HOST = 'localhost';
const DEFAULT_SSL = false;
const DEFAULT_DNS_DEFAULT_RESULT_ORDER = 'ipv4first';
exports.BackendApplicationServer = Symbol('BackendApplicationServer');
exports.BackendApplicationContribution = Symbol('BackendApplicationContribution');
let BackendApplicationCliContribution = class BackendApplicationCliContribution {
    constructor() {
        this.dnsDefaultResultOrder = DEFAULT_DNS_DEFAULT_RESULT_ORDER;
    }
    configure(conf) {
        conf.option('port', { alias: 'p', description: 'The port the backend server listens on.', type: 'number', default: DEFAULT_PORT });
        conf.option('hostname', { alias: 'h', description: 'The allowed hostname for connections.', type: 'string', default: DEFAULT_HOST });
        conf.option('ssl', { description: 'Use SSL (HTTPS), cert and certkey must also be set', type: 'boolean', default: DEFAULT_SSL });
        conf.option('cert', { description: 'Path to SSL certificate.', type: 'string' });
        conf.option('certkey', { description: 'Path to SSL certificate key.', type: 'string' });
        conf.option(APP_PROJECT_PATH, { description: 'Sets the application project directory', default: this.appProjectPath() });
        conf.option('dnsDefaultResultOrder', {
            type: 'string',
            description: 'Configure Node\'s DNS resolver default behavior, see https://nodejs.org/docs/latest-v18.x/api/dns.html#dnssetdefaultresultorderorder',
            choices: ['ipv4first', 'verbatim', 'nodeDefault'],
            default: DEFAULT_DNS_DEFAULT_RESULT_ORDER
        });
    }
    setArguments(args) {
        this.port = args.port;
        this.hostname = args.hostname;
        this.ssl = args.ssl;
        this.cert = args.cert;
        this.certkey = args.certkey;
        this.projectPath = args[APP_PROJECT_PATH];
        this.dnsDefaultResultOrder = args.dnsDefaultResultOrder;
    }
    appProjectPath() {
        if (index_1.environment.electron.is()) {
            if (process.env.THEIA_APP_PROJECT_PATH) {
                return process.env.THEIA_APP_PROJECT_PATH;
            }
            throw new Error('The \'THEIA_APP_PROJECT_PATH\' environment variable must be set when running in electron.');
        }
        return process.cwd();
    }
};
BackendApplicationCliContribution = __decorate([
    (0, inversify_1.injectable)()
], BackendApplicationCliContribution);
exports.BackendApplicationCliContribution = BackendApplicationCliContribution;
/**
 * The main entry point for Theia applications.
 */
let BackendApplication = class BackendApplication {
    constructor(contributionsProvider, cliParams) {
        this.contributionsProvider = contributionsProvider;
        this.cliParams = cliParams;
        this.app = express();
        process.on('uncaughtException', error => {
            this.handleUncaughtError(error);
        });
        // Workaround for Electron not installing a handler to ignore SIGPIPE error
        // (https://github.com/electron/electron/issues/13254)
        process.on('SIGPIPE', () => {
            console.error(new Error('Unexpected SIGPIPE'));
        });
        /**
         * Kill the current process tree on exit.
         */
        function signalHandler(signal) {
            process.exit(1);
        }
        // Handles normal process termination.
        process.on('exit', () => this.onStop());
        // Handles `Ctrl+C`.
        process.on('SIGINT', signalHandler);
        // Handles `kill pid`.
        process.on('SIGTERM', signalHandler);
    }
    async initialize() {
        for (const contribution of this.contributionsProvider.getContributions()) {
            if (contribution.initialize) {
                try {
                    await this.measure(contribution.constructor.name + '.initialize', () => contribution.initialize());
                }
                catch (error) {
                    console.error('Could not initialize contribution', error);
                }
            }
        }
    }
    init() {
        this.configure();
    }
    async configure() {
        // Do not await the initialization because contributions are expected to handle
        // concurrent initialize/configure in undefined order if they provide both
        this.initialize();
        this.app.get('*.js', this.serveGzipped.bind(this, 'text/javascript'));
        this.app.get('*.js.map', this.serveGzipped.bind(this, 'application/json'));
        this.app.get('*.css', this.serveGzipped.bind(this, 'text/css'));
        this.app.get('*.wasm', this.serveGzipped.bind(this, 'application/wasm'));
        this.app.get('*.gif', this.serveGzipped.bind(this, 'image/gif'));
        this.app.get('*.png', this.serveGzipped.bind(this, 'image/png'));
        this.app.get('*.svg', this.serveGzipped.bind(this, 'image/svg+xml'));
        for (const contribution of this.contributionsProvider.getContributions()) {
            if (contribution.configure) {
                try {
                    await this.measure(contribution.constructor.name + '.configure', () => contribution.configure(this.app));
                }
                catch (error) {
                    console.error('Could not configure contribution', error);
                }
            }
        }
    }
    use(...handlers) {
        this.app.use(...handlers);
    }
    async start(port, hostname) {
        hostname !== null && hostname !== void 0 ? hostname : (hostname = this.cliParams.hostname);
        port !== null && port !== void 0 ? port : (port = this.cliParams.port);
        if (this.cliParams.dnsDefaultResultOrder !== 'nodeDefault') {
            dns.setDefaultResultOrder(this.cliParams.dnsDefaultResultOrder);
        }
        const deferred = new promise_util_1.Deferred();
        let server;
        if (this.cliParams.ssl) {
            if (this.cliParams.cert === undefined) {
                throw new Error('Missing --cert option, see --help for usage');
            }
            if (this.cliParams.certkey === undefined) {
                throw new Error('Missing --certkey option, see --help for usage');
            }
            let key;
            let cert;
            try {
                key = await fs.readFile(this.cliParams.certkey);
            }
            catch (err) {
                console.error("Can't read certificate key");
                throw err;
            }
            try {
                cert = await fs.readFile(this.cliParams.cert);
            }
            catch (err) {
                console.error("Can't read certificate");
                throw err;
            }
            server = https.createServer({ key, cert }, this.app);
        }
        else {
            server = http.createServer(this.app);
        }
        server.on('error', error => {
            deferred.reject(error);
            /* The backend might run in a separate process,
             * so we defer `process.exit` to let time for logging in the parent process */
            setTimeout(process.exit, 0, 1);
        });
        server.listen(port, hostname, () => {
            // address should be defined at this point
            const address = server.address();
            const url = typeof address === 'string' ? address : this.getHttpUrl(address, this.cliParams.ssl);
            console.info(`Theia app listening on ${url}.`);
            deferred.resolve(server);
        });
        /* Allow any number of websocket servers.  */
        server.setMaxListeners(0);
        for (const contribution of this.contributionsProvider.getContributions()) {
            if (contribution.onStart) {
                try {
                    await this.measure(contribution.constructor.name + '.onStart', () => contribution.onStart(server));
                }
                catch (error) {
                    console.error('Could not start contribution', error);
                }
            }
        }
        return this.stopwatch.startAsync('server', 'Finished starting backend application', () => deferred.promise);
    }
    getHttpUrl({ address, port, family }, ssl) {
        const scheme = ssl ? 'https' : 'http';
        return family.toLowerCase() === 'ipv6'
            ? `${scheme}://[${address}]:${port}`
            : `${scheme}://${address}:${port}`;
    }
    onStop() {
        console.info('>>> Stopping backend contributions...');
        for (const contrib of this.contributionsProvider.getContributions()) {
            if (contrib.onStop) {
                try {
                    contrib.onStop(this.app);
                }
                catch (error) {
                    console.error('Could not stop contribution', error);
                }
            }
        }
        console.info('<<< All backend contributions have been stopped.');
        this.processUtils.terminateProcessTree(process.pid);
    }
    async serveGzipped(contentType, req, res, next) {
        const acceptedEncodings = req.acceptsEncodings();
        const gzUrl = `${req.url}.gz`;
        const gzPath = path.join(this.applicationPackage.projectPath, 'lib', 'frontend', gzUrl);
        if (acceptedEncodings.indexOf('gzip') === -1 || !(await fs.pathExists(gzPath))) {
            next();
            return;
        }
        req.url = gzUrl;
        res.set('Content-Encoding', 'gzip');
        res.set('Content-Type', contentType);
        next();
    }
    async measure(name, fn) {
        return this.stopwatch.startAsync(name, `Backend ${name}`, fn, { thresholdMillis: TIMER_WARNING_THRESHOLD });
    }
    handleUncaughtError(error) {
        if (error) {
            console.error('Uncaught Exception: ', error.toString());
            if (error.stack) {
                console.error(error.stack);
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(application_package_1.ApplicationPackage),
    __metadata("design:type", application_package_1.ApplicationPackage)
], BackendApplication.prototype, "applicationPackage", void 0);
__decorate([
    (0, inversify_1.inject)(process_utils_1.ProcessUtils),
    __metadata("design:type", process_utils_1.ProcessUtils)
], BackendApplication.prototype, "processUtils", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.Stopwatch),
    __metadata("design:type", common_1.Stopwatch)
], BackendApplication.prototype, "stopwatch", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BackendApplication.prototype, "init", null);
BackendApplication = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(common_1.ContributionProvider)),
    __param(0, (0, inversify_1.named)(exports.BackendApplicationContribution)),
    __param(1, (0, inversify_1.inject)(BackendApplicationCliContribution)),
    __metadata("design:paramtypes", [Object, BackendApplicationCliContribution])
], BackendApplication);
exports.BackendApplication = BackendApplication;


/***/ }),

/***/ "../../packages/core/lib/node/cli.js":
/*!*******************************************!*\
  !*** ../../packages/core/lib/node/cli.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CliManager = exports.CliContribution = void 0;
const yargs = __webpack_require__(/*! yargs */ "../../node_modules/yargs/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const contribution_provider_1 = __webpack_require__(/*! ../common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
exports.CliContribution = Symbol('CliContribution');
let CliManager = class CliManager {
    constructor(contributionsProvider) {
        this.contributionsProvider = contributionsProvider;
    }
    async initializeCli(argv) {
        const pack = __webpack_require__(/*! ../../package.json */ "../../packages/core/package.json");
        const version = pack.version;
        const command = yargs.version(version);
        command.exitProcess(this.isExit());
        for (const contrib of this.contributionsProvider.getContributions()) {
            contrib.configure(command);
        }
        const args = command
            .detectLocale(false)
            .showHelpOnFail(false, 'Specify --help for available options')
            .help('help')
            .parse(argv);
        for (const contrib of this.contributionsProvider.getContributions()) {
            await contrib.setArguments(args);
        }
    }
    isExit() {
        return true;
    }
};
CliManager = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(contribution_provider_1.ContributionProvider)),
    __param(0, (0, inversify_1.named)(exports.CliContribution)),
    __metadata("design:paramtypes", [Object])
], CliManager);
exports.CliManager = CliManager;


/***/ }),

/***/ "../../packages/core/lib/node/debug.js":
/*!*********************************************!*\
  !*** ../../packages/core/lib/node/debug.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEBUG_MODE = void 0;
function isInDebugMode() {
    if (typeof v8debug === 'object') {
        return true;
    }
    if (process && process.execArgv) {
        return process.execArgv.some(arg => /^--(debug|inspect)(-brk)?=?/.test(arg));
    }
    return false;
}
exports.DEBUG_MODE = isInDebugMode();


/***/ }),

/***/ "../../packages/core/lib/node/file-uri.js":
/*!************************************************!*\
  !*** ../../packages/core/lib/node/file-uri.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileUri = void 0;
const vscode_uri_1 = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.js");
const uri_1 = __webpack_require__(/*! ../common/uri */ "../../packages/core/lib/common/uri.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../../packages/core/lib/common/os.js");
var FileUri;
(function (FileUri) {
    const windowsDriveRegex = /^([^:/?#]+?):$/;
    /**
     * Creates a new file URI from the filesystem path argument.
     * @param fsPath the filesystem path.
     */
    function create(fsPath_) {
        return new uri_1.default(vscode_uri_1.URI.file(fsPath_));
    }
    FileUri.create = create;
    /**
     * Returns with the platform specific FS path that is represented by the URI argument.
     *
     * @param uri the file URI that has to be resolved to a platform specific FS path.
     */
    function fsPath(uri) {
        if (typeof uri === 'string') {
            return fsPath(new uri_1.default(uri));
        }
        else {
            /*
             * A uri for the root of a Windows drive, eg file:\\\c%3A, is converted to c:
             * by the Uri class.  However file:\\\c%3A is unambiguously a uri to the root of
             * the drive and c: is interpreted as the default directory for the c drive
             * (by, for example, the readdir function in the fs-extra module).
             * A backslash must be appended to the drive, eg c:\, to ensure the correct path.
             */
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const fsPathFromVsCodeUri = uri.codeUri.fsPath;
            if (os_1.isWindows) {
                const isWindowsDriveRoot = windowsDriveRegex.exec(fsPathFromVsCodeUri);
                if (isWindowsDriveRoot) {
                    return fsPathFromVsCodeUri + '\\';
                }
            }
            return fsPathFromVsCodeUri;
        }
    }
    FileUri.fsPath = fsPath;
})(FileUri = exports.FileUri || (exports.FileUri = {}));


/***/ }),

/***/ "../../packages/core/lib/node/filesystem-locking.js":
/*!**********************************************************!*\
  !*** ../../packages/core/lib/node/filesystem-locking.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemLockingImpl = exports.FileSystemLocking = void 0;
const async_mutex_1 = __webpack_require__(/*! async-mutex */ "../../packages/core/node_modules/async-mutex/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const path = __webpack_require__(/*! path */ "path");
exports.FileSystemLocking = Symbol('FileSystemLocking');
let FileSystemLockingImpl = class FileSystemLockingImpl {
    lockPath(lockPath, transaction, thisArg) {
        const resolvedLockPath = this.resolveLockPath(lockPath);
        return this.getLock(resolvedLockPath).runExclusive(async () => transaction.call(thisArg, resolvedLockPath));
    }
    resolveLockPath(lockPath) {
        // try to normalize the path to avoid two paths pointing to the same file
        return path.resolve(lockPath);
    }
    getLocks() {
        var _a;
        var _b;
        const kLocks = Symbol.for('FileSystemLockingImpl.Locks');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (_a = (_b = globalThis)[kLocks]) !== null && _a !== void 0 ? _a : (_b[kLocks] = this.initializeLocks());
    }
    initializeLocks() {
        const locks = new Map();
        const cleanup = setInterval(() => this.cleanupLocks(locks), 60000);
        process.once('beforeExit', () => clearInterval(cleanup));
        return locks;
    }
    cleanupLocks(locks) {
        locks.forEach((lock, lockPath) => {
            if (!lock.isLocked()) {
                locks.delete(lockPath);
            }
        });
    }
    getLock(lockPath) {
        const locks = this.getLocks();
        let lock = locks.get(lockPath);
        if (!lock) {
            locks.set(lockPath, lock = new async_mutex_1.Mutex());
        }
        return lock;
    }
};
FileSystemLockingImpl = __decorate([
    (0, inversify_1.injectable)()
], FileSystemLockingImpl);
exports.FileSystemLockingImpl = FileSystemLockingImpl;


/***/ }),

/***/ "../../packages/core/lib/node/index.js":
/*!*********************************************!*\
  !*** ../../packages/core/lib/node/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemLocking = void 0;
__exportStar(__webpack_require__(/*! ./backend-application */ "../../packages/core/lib/node/backend-application.js"), exports);
__exportStar(__webpack_require__(/*! ./debug */ "../../packages/core/lib/node/debug.js"), exports);
__exportStar(__webpack_require__(/*! ./file-uri */ "../../packages/core/lib/node/file-uri.js"), exports);
__exportStar(__webpack_require__(/*! ./messaging */ "../../packages/core/lib/node/messaging/index.js"), exports);
__exportStar(__webpack_require__(/*! ./cli */ "../../packages/core/lib/node/cli.js"), exports);
var filesystem_locking_1 = __webpack_require__(/*! ./filesystem-locking */ "../../packages/core/lib/node/filesystem-locking.js");
Object.defineProperty(exports, "FileSystemLocking", ({ enumerable: true, get: function () { return filesystem_locking_1.FileSystemLocking; } }));


/***/ }),

/***/ "../../packages/core/lib/node/messaging/index.js":
/*!*******************************************************!*\
  !*** ../../packages/core/lib/node/messaging/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./messaging-service */ "../../packages/core/lib/node/messaging/messaging-service.js"), exports);
__exportStar(__webpack_require__(/*! ./ipc-connection-provider */ "../../packages/core/lib/node/messaging/ipc-connection-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./ipc-channel */ "../../packages/core/lib/node/messaging/ipc-channel.js"), exports);


/***/ }),

/***/ "../../packages/core/lib/node/messaging/ipc-connection-provider.js":
/*!*************************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/ipc-connection-provider.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IPCConnectionProvider = void 0;
const cp = __webpack_require__(/*! child_process */ "child_process");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const path = __webpack_require__(/*! path */ "path");
const readline_1 = __webpack_require__(/*! readline */ "readline");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const ipc_channel_1 = __webpack_require__(/*! ./ipc-channel */ "../../packages/core/lib/node/messaging/ipc-channel.js");
const ipc_protocol_1 = __webpack_require__(/*! ./ipc-protocol */ "../../packages/core/lib/node/messaging/ipc-protocol.js");
let IPCConnectionProvider = class IPCConnectionProvider {
    listen(options, acceptor) {
        return this.doListen({
            logger: this.logger,
            args: [],
            ...options
        }, acceptor);
    }
    doListen(options, acceptor) {
        const childProcess = this.fork(options);
        const channel = new ipc_channel_1.IPCChannel(childProcess);
        const toStop = new common_1.DisposableCollection();
        const toCancelStop = toStop.push(common_1.Disposable.create(() => childProcess.kill()));
        const errorHandler = options.errorHandler;
        if (errorHandler) {
            let errorCount = 0;
            channel.onError((err) => {
                errorCount++;
                if (errorHandler.shouldStop(err, errorCount)) {
                    toStop.dispose();
                }
            });
            channel.onClose(() => {
                if (toStop.disposed) {
                    return;
                }
                if (errorHandler.shouldRestart()) {
                    toCancelStop.dispose();
                    toStop.push(this.doListen(options, acceptor));
                }
            });
        }
        acceptor(channel);
        return toStop;
    }
    fork(options) {
        const forkOptions = {
            env: (0, ipc_protocol_1.createIpcEnv)(options),
            execArgv: [],
            // 5th element MUST be 'overlapped' for it to work properly on Windows.
            // 'overlapped' works just like 'pipe' on non-Windows platforms.
            // See: https://nodejs.org/docs/latest-v14.x/api/child_process.html#child_process_options_stdio
            // Note: For some reason `@types/node` does not know about 'overlapped'.
            stdio: ['pipe', 'pipe', 'pipe', 'ipc', 'overlapped']
        };
        const inspectArgPrefix = `--${options.serverName}-inspect`;
        const inspectArg = process.argv.find(v => v.startsWith(inspectArgPrefix));
        if (inspectArg !== undefined) {
            forkOptions.execArgv = ['--nolazy', `--inspect${inspectArg.substring(inspectArgPrefix.length)}`];
        }
        const childProcess = cp.fork(path.join(__dirname, 'ipc-bootstrap'), options.args, forkOptions);
        (0, readline_1.createInterface)(childProcess.stdout).on('line', line => this.logger.info(`[${options.serverName}: ${childProcess.pid}] ${line}`));
        (0, readline_1.createInterface)(childProcess.stderr).on('line', line => this.logger.error(`[${options.serverName}: ${childProcess.pid}] ${line}`));
        this.logger.debug(`[${options.serverName}: ${childProcess.pid}] IPC started`);
        childProcess.once('exit', () => this.logger.debug(`[${options.serverName}: ${childProcess.pid}] IPC exited`));
        return childProcess;
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    __metadata("design:type", Object)
], IPCConnectionProvider.prototype, "logger", void 0);
IPCConnectionProvider = __decorate([
    (0, inversify_1.injectable)()
], IPCConnectionProvider);
exports.IPCConnectionProvider = IPCConnectionProvider;


/***/ }),

/***/ "../../packages/core/lib/node/messaging/messaging-service.js":
/*!*******************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/messaging-service.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessagingService = void 0;
var MessagingService;
(function (MessagingService) {
    /** Inversify container identifier for the `MessagingService` component. */
    MessagingService.Identifier = Symbol('MessagingService');
    MessagingService.Contribution = Symbol('MessagingService.Contribution');
})(MessagingService = exports.MessagingService || (exports.MessagingService = {}));


/***/ }),

/***/ "../../packages/core/lib/node/process-utils.js":
/*!*****************************************************!*\
  !*** ../../packages/core/lib/node/process-utils.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessUtils = void 0;
const cp = __webpack_require__(/*! child_process */ "child_process");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
/**
 * `@theia/core` service with some process-related utilities.
 */
let ProcessUtils = class ProcessUtils {
    terminateProcessTree(ppid) {
        if (process.platform === 'win32') {
            this.winTerminateProcessTree(ppid);
        }
        else {
            this.unixTerminateProcessTree(ppid);
        }
    }
    winTerminateProcessTree(ppid) {
        this.spawnSync('taskkill.exe', ['/f', '/t', '/pid', ppid.toString(10)]);
    }
    unixTerminateProcessTree(ppid) {
        for (const pid of this.unixGetChildrenRecursive(ppid)) {
            // Prevent killing the current process:
            if (pid !== process.pid) {
                // Don't stop if a process fails to be killed (keep on killing the others):
                try {
                    process.kill(pid);
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        if (ppid === this.unixGetPGID(ppid)) {
            // When a process pgid === pid this means the the process is a group leader.
            // We can then kill every process part of its group by doing `kill(-pgid)`.
            // This can catch leaked processes under `init` that are still part of the group.
            process.kill(-ppid);
        }
        process.kill(ppid);
    }
    unixGetPGID(pid) {
        const { stdout } = this.spawnSync('ps', ['-p', pid.toString(10), '-o', 'pgid=']);
        return Number.parseInt(stdout, 10);
    }
    unixGetChildrenRecursive(ppid) {
        const { stdout } = this.spawnSync('ps', ['ax', '-o', 'ppid=,pid=']);
        const pids = new Set([ppid]);
        const matcher = /(\d+)\s+(\d+)/;
        const psList = stdout
            .trim()
            .split('\n')
            .map(line => {
            const match = line.match(matcher);
            return {
                ppid: Number.parseInt(match[1], 10),
                pid: Number.parseInt(match[2], 10),
            };
        });
        // Keep looking for parent/child relationships while we keep finding new parents:
        let size;
        do {
            size = pids.size;
            for (const child of psList) {
                if (pids.has(child.ppid)) {
                    pids.add(child.pid);
                }
            }
        } while (size !== pids.size);
        // Exclude the requested parent id:
        pids.delete(ppid);
        return pids;
    }
    spawnSync(file, argv, options) {
        var _a;
        const result = cp.spawnSync(file, argv, { ...options, encoding: 'utf8' });
        if (result.error) {
            throw result.error;
        }
        if (result.status !== 0) {
            throw new Error(`${JSON.stringify(file)} exited with ${(_a = result.status) !== null && _a !== void 0 ? _a : result.signal}. Output:\n${JSON.stringify(result.output)}`);
        }
        return result;
    }
};
ProcessUtils = __decorate([
    (0, inversify_1.injectable)()
], ProcessUtils);
exports.ProcessUtils = ProcessUtils;


/***/ }),

/***/ "../../packages/core/shared/fs-extra/index.js":
/*!****************************************************!*\
  !*** ../../packages/core/shared/fs-extra/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! fs-extra */ "../../node_modules/fs-extra/lib/index.js");


/***/ }),

/***/ "../../packages/core/shared/vscode-languageserver-protocol/index.js":
/*!**************************************************************************!*\
  !*** ../../packages/core/shared/vscode-languageserver-protocol/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");


/***/ }),

/***/ "../../packages/debug/lib/common/debug-adapter-session.js":
/*!****************************************************************!*\
  !*** ../../packages/debug/lib/common/debug-adapter-session.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterSessionImpl = void 0;
/**
 * [DebugAdapterSession](#DebugAdapterSession) implementation.
 */
class DebugAdapterSessionImpl {
    constructor(id, debugAdapter) {
        this.id = id;
        this.debugAdapter = debugAdapter;
        this.isClosed = false;
        this.debugAdapter.onMessageReceived((message) => this.send(message));
        this.debugAdapter.onClose(() => this.onDebugAdapterExit());
        this.debugAdapter.onError(error => this.onDebugAdapterError(error));
    }
    async start(channel) {
        console.debug(`starting debug adapter session '${this.id}'`);
        if (this.channel) {
            throw new Error('The session has already been started, id: ' + this.id);
        }
        this.channel = channel;
        this.channel.onMessage((message) => this.write(message));
        this.channel.onClose(() => this.channel = undefined);
    }
    onDebugAdapterExit() {
        this.isClosed = true;
        console.debug(`onDebugAdapterExit session: '${this.id}'`);
        if (this.channel) {
            this.channel.close();
            this.channel = undefined;
        }
    }
    onDebugAdapterError(error) {
        console.debug(`error in debug adapter session: '${this.id}': ${JSON.stringify(error)}`);
        const event = {
            type: 'event',
            event: 'error',
            seq: -1,
            body: error
        };
        this.send(JSON.stringify(event));
    }
    send(message) {
        if (this.channel) {
            this.channel.send(message);
        }
    }
    write(message) {
        if (!this.isClosed) {
            this.debugAdapter.send(message);
        }
    }
    async stop() {
        var _a;
        console.debug(`stopping debug adapter session: '${this.id}'`);
        if (!this.isClosed) {
            await this.debugAdapter.stop();
        }
        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.close();
        this.channel = undefined;
    }
}
exports.DebugAdapterSessionImpl = DebugAdapterSessionImpl;


/***/ }),

/***/ "../../packages/debug/lib/node/stream-debug-adapter.js":
/*!*************************************************************!*\
  !*** ../../packages/debug/lib/node/stream-debug-adapter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SocketDebugAdapter = exports.ProcessDebugAdapter = void 0;
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
class StreamDebugAdapter extends disposable_1.DisposableCollection {
    constructor(fromAdapter, toAdapter) {
        super();
        this.fromAdapter = fromAdapter;
        this.toAdapter = toAdapter;
        this.messageReceivedEmitter = new event_1.Emitter();
        this.onMessageReceived = this.messageReceivedEmitter.event;
        this.errorEmitter = new event_1.Emitter();
        this.onError = this.errorEmitter.event;
        this.closeEmitter = new event_1.Emitter();
        this.onClose = this.closeEmitter.event;
        this.contentLength = -1;
        this.buffer = Buffer.alloc(0);
        this.fromAdapter.on('data', (data) => this.handleData(data));
        this.fromAdapter.on('close', () => this.handleClosed()); // FIXME pass a proper exit code
        this.fromAdapter.on('error', error => this.errorEmitter.fire(error));
        this.toAdapter.on('error', error => this.errorEmitter.fire(error));
    }
    handleClosed() {
        this.closeEmitter.fire();
    }
    send(message) {
        const msg = `${StreamDebugAdapter.CONTENT_LENGTH}: ${Buffer.byteLength(message, 'utf8')}${StreamDebugAdapter.TWO_CRLF}${message}`;
        this.toAdapter.write(msg, 'utf8');
    }
    handleData(data) {
        this.buffer = Buffer.concat([this.buffer, data]);
        while (true) {
            if (this.contentLength >= 0) {
                if (this.buffer.length >= this.contentLength) {
                    const message = this.buffer.toString('utf8', 0, this.contentLength);
                    this.buffer = this.buffer.slice(this.contentLength);
                    this.contentLength = -1;
                    if (message.length > 0) {
                        this.messageReceivedEmitter.fire(message);
                    }
                    continue; // there may be more complete messages to process
                }
            }
            else {
                let idx = this.buffer.indexOf(StreamDebugAdapter.CONTENT_LENGTH);
                if (idx > 0) {
                    // log unrecognized output
                    const output = this.buffer.slice(0, idx);
                    console.log(output.toString('utf-8'));
                    this.buffer = this.buffer.slice(idx);
                }
                idx = this.buffer.indexOf(StreamDebugAdapter.TWO_CRLF);
                if (idx !== -1) {
                    const header = this.buffer.toString('utf8', 0, idx);
                    const lines = header.split('\r\n');
                    for (let i = 0; i < lines.length; i++) {
                        const pair = lines[i].split(/: +/);
                        if (pair[0] === StreamDebugAdapter.CONTENT_LENGTH) {
                            this.contentLength = +pair[1];
                        }
                    }
                    this.buffer = this.buffer.slice(idx + StreamDebugAdapter.TWO_CRLF.length);
                    continue;
                }
            }
            break;
        }
    }
}
// these constants are for the message header, see: https://microsoft.github.io/debug-adapter-protocol/overview#header-part
StreamDebugAdapter.TWO_CRLF = '\r\n\r\n';
StreamDebugAdapter.CONTENT_LENGTH = 'Content-Length';
class ProcessDebugAdapter extends StreamDebugAdapter {
    constructor(process) {
        super(process.stdout, process.stdin);
        this.process = process;
    }
    async stop() {
        var _a;
        this.process.kill();
        (_a = this.process.stdin) === null || _a === void 0 ? void 0 : _a.end();
    }
}
exports.ProcessDebugAdapter = ProcessDebugAdapter;
class SocketDebugAdapter extends StreamDebugAdapter {
    constructor(socket) {
        super(socket, socket);
        this.socket = socket;
    }
    stop() {
        return new Promise(resolve => {
            this.socket.end(() => resolve());
        });
    }
}
exports.SocketDebugAdapter = SocketDebugAdapter;


/***/ }),

/***/ "../../packages/plugin-ext/lib/common/arrays.js":
/*!******************************************************!*\
  !*** ../../packages/plugin-ext/lib/common/arrays.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/arrays.ts
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isReadonlyArray = exports.flatten = exports.isNonEmptyArray = exports.coalesce = void 0;
/**
 * @returns New array with all falsy values removed. The original array IS NOT modified.
 */
function coalesce(array) {
    return array.filter(e => !!e);
}
exports.coalesce = coalesce;
function isNonEmptyArray(obj) {
    return Array.isArray(obj) && obj.length > 0;
}
exports.isNonEmptyArray = isNonEmptyArray;
function flatten(arr) {
    return [].concat(...arr);
}
exports.flatten = flatten;
/**
 * @returns 'true' if the 'arg' is a 'ReadonlyArray'.
 */
function isReadonlyArray(arg) {
    // Since Typescript does not properly narrow down typings for 'ReadonlyArray' we need to help it.
    return Array.isArray(arg);
}
exports.isReadonlyArray = isReadonlyArray;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-protocol.js":
/*!***************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin-protocol.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessTerminatedMessage = exports.ProcessTerminateMessage = void 0;
var ProcessTerminateMessage;
(function (ProcessTerminateMessage) {
    ProcessTerminateMessage.TYPE = 0;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function is(object) {
        return typeof object === 'object' && object.type === ProcessTerminateMessage.TYPE;
    }
    ProcessTerminateMessage.is = is;
})(ProcessTerminateMessage = exports.ProcessTerminateMessage || (exports.ProcessTerminateMessage = {}));
var ProcessTerminatedMessage;
(function (ProcessTerminatedMessage) {
    ProcessTerminatedMessage.TYPE = 1;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function is(object) {
        return typeof object === 'object' && object.type === ProcessTerminatedMessage.TYPE;
    }
    ProcessTerminatedMessage.is = is;
})(ProcessTerminatedMessage = exports.ProcessTerminatedMessage || (exports.ProcessTerminatedMessage = {}));


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-activation-events.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-activation-events.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateActivationEvents = void 0;
const arrays_1 = __webpack_require__(/*! ../../common/arrays */ "../../packages/plugin-ext/lib/common/arrays.js");
const types_1 = __webpack_require__(/*! @theia/core/lib/common/types */ "../../packages/core/lib/common/types.js");
/**
 * Most activation events can be automatically deduced from the package manifest.
 * This function will update the manifest based on the plugin contributions.
 */
function updateActivationEvents(manifest) {
    if (!(0, types_1.isObject)(manifest) || !(0, types_1.isObject)(manifest.contributes) || !manifest.contributes) {
        return;
    }
    const activationEvents = new Set((0, types_1.isStringArray)(manifest.activationEvents) ? manifest.activationEvents : []);
    if (manifest.contributes.commands) {
        const value = manifest.contributes.commands;
        const commands = Array.isArray(value) ? value : [value];
        updateCommandsContributions(commands, activationEvents);
    }
    if (Array.isArray(manifest.contributes.views)) {
        const views = (0, arrays_1.flatten)(Object.values(manifest.contributes.views));
        updateViewsContribution(views, activationEvents);
    }
    if (Array.isArray(manifest.contributes.customEditors)) {
        updateCustomEditorsContribution(manifest.contributes.customEditors, activationEvents);
    }
    if (Array.isArray(manifest.contributes.authentication)) {
        updateAuthenticationProviderContributions(manifest.contributes.authentication, activationEvents);
    }
    if (Array.isArray(manifest.contributes.languages)) {
        updateLanguageContributions(manifest.contributes.languages, activationEvents);
    }
    if (Array.isArray(manifest.contributes.notebooks)) {
        updateNotebookContributions(manifest.contributes.notebooks, activationEvents);
    }
    manifest.activationEvents = Array.from(activationEvents);
}
exports.updateActivationEvents = updateActivationEvents;
function updateViewsContribution(views, activationEvents) {
    for (const view of views) {
        if ((0, types_1.isObject)(view) && typeof view.id === 'string') {
            activationEvents.add(`onView:${view.id}`);
        }
    }
}
function updateCustomEditorsContribution(customEditors, activationEvents) {
    for (const customEditor of customEditors) {
        if ((0, types_1.isObject)(customEditor) && typeof customEditor.viewType === 'string') {
            activationEvents.add(`onCustomEditor:${customEditor.viewType}`);
        }
    }
}
function updateCommandsContributions(commands, activationEvents) {
    for (const command of commands) {
        if ((0, types_1.isObject)(command) && typeof command.command === 'string') {
            activationEvents.add(`onCommand:${command.command}`);
        }
    }
}
function updateAuthenticationProviderContributions(authProviders, activationEvents) {
    for (const authProvider of authProviders) {
        if ((0, types_1.isObject)(authProvider) && typeof authProvider.id === 'string') {
            activationEvents.add(`onAuthenticationRequest:${authProvider.id}`);
        }
    }
}
function updateLanguageContributions(languages, activationEvents) {
    for (const language of languages) {
        if ((0, types_1.isObject)(language) && typeof language.id === 'string') {
            activationEvents.add(`onLanguage:${language.id}`);
        }
    }
}
function updateNotebookContributions(notebooks, activationEvents) {
    for (const notebook of notebooks) {
        if ((0, types_1.isObject)(notebook) && typeof notebook.type === 'string') {
            activationEvents.add(`onNotebookSerializer:${notebook.type}`);
        }
    }
}


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-manifest-loader.js":
/*!***************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-manifest-loader.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadManifest = void 0;
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/plugin-ext/lib/common/index.js");
const plugin_activation_events_1 = __webpack_require__(/*! ./plugin-activation-events */ "../../packages/plugin-ext/lib/hosted/node/plugin-activation-events.js");
async function loadManifest(pluginPath) {
    var _a;
    const manifest = await fs.readJson(path.join(pluginPath, 'package.json'));
    // translate vscode builtins, as they are published with a prefix. See https://github.com/theia-ide/vscode-builtin-extensions/blob/master/src/republish.js#L50
    const built_prefix = '@theia/vscode-builtin-';
    if (manifest && manifest.name && manifest.name.startsWith(built_prefix)) {
        manifest.name = manifest.name.substring(built_prefix.length);
    }
    (_a = manifest.publisher) !== null && _a !== void 0 ? _a : (manifest.publisher = common_1.PluginIdentifiers.UNPUBLISHED);
    (0, plugin_activation_events_1.updateActivationEvents)(manifest);
    return manifest;
}
exports.loadManifest = loadManifest;


/***/ }),

/***/ "../../node_modules/yargs/build/lib sync recursive":
/*!************************************************!*\
  !*** ../../node_modules/yargs/build/lib/ sync ***!
  \************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/yargs/build/lib sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../node_modules/yargs/node_modules/yargs-parser sync recursive":
/*!****************************************************************!*\
  !*** ../../node_modules/yargs/node_modules/yargs-parser/ sync ***!
  \****************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/yargs/node_modules/yargs-parser sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../node_modules/yargs sync recursive":
/*!**************************************!*\
  !*** ../../node_modules/yargs/ sync ***!
  \**************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/yargs sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../packages/core/package.json":
/*!****************************************!*\
  !*** ../../packages/core/package.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@theia/core","version":"1.41.0","description":"Theia is a cloud & desktop IDE framework implemented in TypeScript.","main":"lib/common/index.js","typings":"lib/common/index.d.ts","dependencies":{"@babel/runtime":"^7.10.0","@phosphor/algorithm":"1","@phosphor/commands":"1","@phosphor/coreutils":"1","@phosphor/domutils":"1","@phosphor/dragdrop":"1","@phosphor/messaging":"1","@phosphor/properties":"1","@phosphor/signaling":"1","@phosphor/virtualdom":"1","@phosphor/widgets":"1","@theia/application-package":"1.41.0","@theia/request":"1.41.0","@types/body-parser":"^1.16.4","@types/cookie":"^0.3.3","@types/dompurify":"^2.2.2","@types/express":"^4.16.0","@types/fs-extra":"^4.0.2","@types/lodash.debounce":"4.0.3","@types/lodash.throttle":"^4.1.3","@types/markdown-it":"^12.2.3","@types/react":"^18.0.15","@types/react-dom":"^18.0.6","@types/route-parser":"^0.1.1","@types/safer-buffer":"^2.1.0","@types/ws":"^5.1.2","@types/yargs":"^15","@vscode/codicons":"*","ajv":"^6.5.3","async-mutex":"^0.4.0","body-parser":"^1.17.2","cookie":"^0.4.0","dompurify":"^2.2.9","drivelist":"^9.0.2","es6-promise":"^4.2.4","express":"^4.16.3","fast-json-stable-stringify":"^2.1.0","file-icons-js":"~1.0.3","font-awesome":"^4.7.0","fs-extra":"^4.0.2","fuzzy":"^0.1.3","http-proxy-agent":"^5.0.0","https-proxy-agent":"^5.0.0","iconv-lite":"^0.6.0","inversify":"^6.0.1","jschardet":"^2.1.1","keytar":"7.2.0","lodash.debounce":"^4.0.8","lodash.throttle":"^4.1.1","markdown-it":"^12.3.2","msgpackr":"1.6.1","nsfw":"^2.2.4","p-debounce":"^2.1.0","perfect-scrollbar":"^1.3.0","react":"^18.2.0","react-dom":"^18.2.0","react-tooltip":"^4.2.21","react-virtuoso":"^2.17.0","reflect-metadata":"^0.1.10","route-parser":"^0.0.5","safer-buffer":"^2.1.2","socket.io":"^4.5.3","socket.io-client":"^4.5.3","uuid":"^8.3.2","vscode-languageserver-protocol":"^3.17.2","vscode-uri":"^2.1.1","ws":"^7.1.2","yargs":"^15.3.1"},"peerDependencies":{"@theia/electron":"*"},"peerDependenciesMeta":{"@theia/electron":{"optional":true}},"publishConfig":{"access":"public"},"theiaReExports":{"electron-shared":{"copy":"@theia/electron#shared"},"shared":{"export *":["@phosphor/algorithm","@phosphor/commands","@phosphor/coreutils","@phosphor/domutils","@phosphor/dragdrop","@phosphor/messaging","@phosphor/properties","@phosphor/signaling","@phosphor/virtualdom","@phosphor/widgets","@theia/application-package","@theia/application-package/lib/api","@theia/application-package/lib/environment","@theia/request","@theia/request/lib/proxy","@theia/request/lib/node-request-service","fs-extra","fuzzy","inversify","react-dom","react-dom/client","react-virtuoso","vscode-languageserver-protocol","vscode-uri"],"export =":["dompurify as DOMPurify","express","lodash.debounce as debounce","lodash.throttle as throttle","nsfw","markdown-it as markdownit","react as React","ws as WebSocket","yargs"]}},"theiaExtensions":[{"frontendPreload":"lib/browser/preload/preload-module","preload":"lib/electron-browser/preload"},{"frontend":"lib/browser/i18n/i18n-frontend-module","backend":"lib/node/i18n/i18n-backend-module"},{"frontend":"lib/browser/menu/browser-menu-module","frontendElectron":"lib/electron-browser/menu/electron-menu-module"},{"frontend":"lib/browser/window/browser-window-module","frontendElectron":"lib/electron-browser/window/electron-window-module"},{"frontend":"lib/browser/keyboard/browser-keyboard-module","frontendElectron":"lib/electron-browser/keyboard/electron-keyboard-module","backendElectron":"lib/electron-node/keyboard/electron-backend-keyboard-module"},{"frontendElectron":"lib/electron-browser/token/electron-token-frontend-module","backendElectron":"lib/electron-node/token/electron-token-backend-module"},{"backend":"lib/node/hosting/backend-hosting-module","backendElectron":"lib/electron-node/hosting/electron-backend-hosting-module"},{"frontend":"lib/browser/request/browser-request-module","frontendElectron":"lib/electron-browser/request/electron-browser-request-module"},{"backend":"lib/node/request/backend-request-module","backendElectron":"lib/electron-node/request/electron-backend-request-module"}],"keywords":["theia-extension"],"license":"EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0","repository":{"type":"git","url":"https://github.com/eclipse-theia/theia.git"},"bugs":{"url":"https://github.com/eclipse-theia/theia/issues"},"homepage":"https://github.com/eclipse-theia/theia","files":["electron-shared","i18n","lib","shared","src"],"scripts":{"build":"theiaext build","clean":"theiaext clean","compile":"theiaext compile","generate-layout":"electron ./scripts/generate-layout","generate-theia-re-exports":"theia-re-exports generate && theia-re-exports template README_TEMPLATE.md > README.md","lint":"theiaext lint","prepare":"yarn -s generate-theia-re-exports","test":"theiaext test","version":"yarn -s generate-theia-re-exports","watch":"theiaext watch"},"devDependencies":{"@theia/ext-scripts":"1.41.0","@theia/re-exports":"1.41.0","minimist":"^1.2.0"},"nyc":{"extends":"../../configs/nyc.json"}}');

/***/ })

};
;
//# sourceMappingURL=node_modules_express_lib_sync_recursive-node_modules_require-main-filename_sync_recursive-pac-c83c5f.js.map