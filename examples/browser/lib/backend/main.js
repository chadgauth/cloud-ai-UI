/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@stroncium/procfs/lib/parsers sync recursive ^\\.\\/.*$":
/*!***********************************************************************!*\
  !*** ../../node_modules/@stroncium/procfs/lib/parsers/ sync ^\.\/.*$ ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./cgroups": "../../node_modules/@stroncium/procfs/lib/parsers/cgroups.js",
	"./cgroups.js": "../../node_modules/@stroncium/procfs/lib/parsers/cgroups.js",
	"./config": "../../node_modules/@stroncium/procfs/lib/parsers/config.js",
	"./config.js": "../../node_modules/@stroncium/procfs/lib/parsers/config.js",
	"./cpuinfo": "../../node_modules/@stroncium/procfs/lib/parsers/cpuinfo.js",
	"./cpuinfo.js": "../../node_modules/@stroncium/procfs/lib/parsers/cpuinfo.js",
	"./devices": "../../node_modules/@stroncium/procfs/lib/parsers/devices.js",
	"./devices.js": "../../node_modules/@stroncium/procfs/lib/parsers/devices.js",
	"./diskstats": "../../node_modules/@stroncium/procfs/lib/parsers/diskstats.js",
	"./diskstats.js": "../../node_modules/@stroncium/procfs/lib/parsers/diskstats.js",
	"./filesystems": "../../node_modules/@stroncium/procfs/lib/parsers/filesystems.js",
	"./filesystems.js": "../../node_modules/@stroncium/procfs/lib/parsers/filesystems.js",
	"./loadavg": "../../node_modules/@stroncium/procfs/lib/parsers/loadavg.js",
	"./loadavg.js": "../../node_modules/@stroncium/procfs/lib/parsers/loadavg.js",
	"./meminfo": "../../node_modules/@stroncium/procfs/lib/parsers/meminfo.js",
	"./meminfo.js": "../../node_modules/@stroncium/procfs/lib/parsers/meminfo.js",
	"./partitions": "../../node_modules/@stroncium/procfs/lib/parsers/partitions.js",
	"./partitions.js": "../../node_modules/@stroncium/procfs/lib/parsers/partitions.js",
	"./processAutogroup": "../../node_modules/@stroncium/procfs/lib/parsers/processAutogroup.js",
	"./processAutogroup.js": "../../node_modules/@stroncium/procfs/lib/parsers/processAutogroup.js",
	"./processCgroups": "../../node_modules/@stroncium/procfs/lib/parsers/processCgroups.js",
	"./processCgroups.js": "../../node_modules/@stroncium/procfs/lib/parsers/processCgroups.js",
	"./processCmdline": "../../node_modules/@stroncium/procfs/lib/parsers/processCmdline.js",
	"./processCmdline.js": "../../node_modules/@stroncium/procfs/lib/parsers/processCmdline.js",
	"./processEnviron": "../../node_modules/@stroncium/procfs/lib/parsers/processEnviron.js",
	"./processEnviron.js": "../../node_modules/@stroncium/procfs/lib/parsers/processEnviron.js",
	"./processExe": "../../node_modules/@stroncium/procfs/lib/parsers/processExe.js",
	"./processExe.js": "../../node_modules/@stroncium/procfs/lib/parsers/processExe.js",
	"./processFd": "../../node_modules/@stroncium/procfs/lib/parsers/processFd.js",
	"./processFd.js": "../../node_modules/@stroncium/procfs/lib/parsers/processFd.js",
	"./processFdinfo": "../../node_modules/@stroncium/procfs/lib/parsers/processFdinfo.js",
	"./processFdinfo.js": "../../node_modules/@stroncium/procfs/lib/parsers/processFdinfo.js",
	"./processFds": "../../node_modules/@stroncium/procfs/lib/parsers/processFds.js",
	"./processFds.js": "../../node_modules/@stroncium/procfs/lib/parsers/processFds.js",
	"./processGidMap": "../../node_modules/@stroncium/procfs/lib/parsers/processGidMap.js",
	"./processGidMap.js": "../../node_modules/@stroncium/procfs/lib/parsers/processGidMap.js",
	"./processIo": "../../node_modules/@stroncium/procfs/lib/parsers/processIo.js",
	"./processIo.js": "../../node_modules/@stroncium/procfs/lib/parsers/processIo.js",
	"./processLimits": "../../node_modules/@stroncium/procfs/lib/parsers/processLimits.js",
	"./processLimits.js": "../../node_modules/@stroncium/procfs/lib/parsers/processLimits.js",
	"./processMountinfo": "../../node_modules/@stroncium/procfs/lib/parsers/processMountinfo.js",
	"./processMountinfo.js": "../../node_modules/@stroncium/procfs/lib/parsers/processMountinfo.js",
	"./processNetDev": "../../node_modules/@stroncium/procfs/lib/parsers/processNetDev.js",
	"./processNetDev.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetDev.js",
	"./processNetTcp4": "../../node_modules/@stroncium/procfs/lib/parsers/processNetTcp4.js",
	"./processNetTcp4.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetTcp4.js",
	"./processNetTcp6": "../../node_modules/@stroncium/procfs/lib/parsers/processNetTcp6.js",
	"./processNetTcp6.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetTcp6.js",
	"./processNetUdp4": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUdp4.js",
	"./processNetUdp4.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUdp4.js",
	"./processNetUdp6": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUdp6.js",
	"./processNetUdp6.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUdp6.js",
	"./processNetUnix": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUnix.js",
	"./processNetUnix.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetUnix.js",
	"./processNetWireless": "../../node_modules/@stroncium/procfs/lib/parsers/processNetWireless.js",
	"./processNetWireless.js": "../../node_modules/@stroncium/procfs/lib/parsers/processNetWireless.js",
	"./processStat": "../../node_modules/@stroncium/procfs/lib/parsers/processStat.js",
	"./processStat.js": "../../node_modules/@stroncium/procfs/lib/parsers/processStat.js",
	"./processStatm": "../../node_modules/@stroncium/procfs/lib/parsers/processStatm.js",
	"./processStatm.js": "../../node_modules/@stroncium/procfs/lib/parsers/processStatm.js",
	"./processStatus": "../../node_modules/@stroncium/procfs/lib/parsers/processStatus.js",
	"./processStatus.js": "../../node_modules/@stroncium/procfs/lib/parsers/processStatus.js",
	"./processThreads": "../../node_modules/@stroncium/procfs/lib/parsers/processThreads.js",
	"./processThreads.js": "../../node_modules/@stroncium/procfs/lib/parsers/processThreads.js",
	"./processUidMap": "../../node_modules/@stroncium/procfs/lib/parsers/processUidMap.js",
	"./processUidMap.js": "../../node_modules/@stroncium/procfs/lib/parsers/processUidMap.js",
	"./processes": "../../node_modules/@stroncium/procfs/lib/parsers/processes.js",
	"./processes.js": "../../node_modules/@stroncium/procfs/lib/parsers/processes.js",
	"./stat": "../../node_modules/@stroncium/procfs/lib/parsers/stat.js",
	"./stat.js": "../../node_modules/@stroncium/procfs/lib/parsers/stat.js",
	"./swaps": "../../node_modules/@stroncium/procfs/lib/parsers/swaps.js",
	"./swaps.js": "../../node_modules/@stroncium/procfs/lib/parsers/swaps.js",
	"./uptime": "../../node_modules/@stroncium/procfs/lib/parsers/uptime.js",
	"./uptime.js": "../../node_modules/@stroncium/procfs/lib/parsers/uptime.js",
	"./utils": "../../node_modules/@stroncium/procfs/lib/parsers/utils.js",
	"./utils.js": "../../node_modules/@stroncium/procfs/lib/parsers/utils.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "../../node_modules/@stroncium/procfs/lib/parsers sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/index.js":
/*!***************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OVSXRouterClient = exports.OVSXMockClient = exports.OVSXHttpClient = exports.OVSXApiFilterImpl = exports.OVSXApiFilter = void 0;
var ovsx_api_filter_1 = __webpack_require__(/*! ./ovsx-api-filter */ "../../dev-packages/ovsx-client/lib/ovsx-api-filter.js");
Object.defineProperty(exports, "OVSXApiFilter", ({ enumerable: true, get: function () { return ovsx_api_filter_1.OVSXApiFilter; } }));
Object.defineProperty(exports, "OVSXApiFilterImpl", ({ enumerable: true, get: function () { return ovsx_api_filter_1.OVSXApiFilterImpl; } }));
var ovsx_http_client_1 = __webpack_require__(/*! ./ovsx-http-client */ "../../dev-packages/ovsx-client/lib/ovsx-http-client.js");
Object.defineProperty(exports, "OVSXHttpClient", ({ enumerable: true, get: function () { return ovsx_http_client_1.OVSXHttpClient; } }));
var ovsx_mock_client_1 = __webpack_require__(/*! ./ovsx-mock-client */ "../../dev-packages/ovsx-client/lib/ovsx-mock-client.js");
Object.defineProperty(exports, "OVSXMockClient", ({ enumerable: true, get: function () { return ovsx_mock_client_1.OVSXMockClient; } }));
var ovsx_router_client_1 = __webpack_require__(/*! ./ovsx-router-client */ "../../dev-packages/ovsx-client/lib/ovsx-router-client.js");
Object.defineProperty(exports, "OVSXRouterClient", ({ enumerable: true, get: function () { return ovsx_router_client_1.OVSXRouterClient; } }));
__exportStar(__webpack_require__(/*! ./ovsx-router-filters */ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/index.js"), exports);
__exportStar(__webpack_require__(/*! ./ovsx-types */ "../../dev-packages/ovsx-client/lib/ovsx-types.js"), exports);


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-api-filter.js":
/*!*************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-api-filter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OVSXApiFilterImpl = exports.OVSXApiFilter = void 0;
const semver = __webpack_require__(/*! semver */ "../../node_modules/semver/index.js");
const ovsx_types_1 = __webpack_require__(/*! ./ovsx-types */ "../../dev-packages/ovsx-client/lib/ovsx-types.js");
exports.OVSXApiFilter = Symbol('OVSXApiFilter');
class OVSXApiFilterImpl {
    constructor(supportedApiVersion) {
        this.supportedApiVersion = supportedApiVersion;
    }
    getLatestCompatibleExtension(extensions) {
        if (extensions.length === 0) {
            return;
        }
        else if (this.isBuiltinNamespace(extensions[0].namespace.toLowerCase())) {
            return extensions.find(extension => this.versionGreaterThanOrEqualTo(extension.version, this.supportedApiVersion));
        }
        else {
            return extensions.find(extension => { var _a, _b; return this.supportedVscodeApiSatisfies((_b = (_a = extension.engines) === null || _a === void 0 ? void 0 : _a.vscode) !== null && _b !== void 0 ? _b : '*'); });
        }
    }
    getLatestCompatibleVersion(searchEntry) {
        function getLatestCompatibleVersion(predicate) {
            if (searchEntry.allVersions) {
                return searchEntry.allVersions.find(predicate);
            }
            // If the allVersions field is missing then try to use the
            // searchEntry as VSXAllVersions and check if it's compatible:
            if (predicate(searchEntry)) {
                return searchEntry;
            }
        }
        if (this.isBuiltinNamespace(searchEntry.namespace)) {
            return getLatestCompatibleVersion(allVersions => this.versionGreaterThanOrEqualTo(allVersions.version, this.supportedApiVersion));
        }
        else {
            return getLatestCompatibleVersion(allVersions => { var _a, _b; return this.supportedVscodeApiSatisfies((_b = (_a = allVersions.engines) === null || _a === void 0 ? void 0 : _a.vscode) !== null && _b !== void 0 ? _b : '*'); });
        }
    }
    isBuiltinNamespace(namespace) {
        return ovsx_types_1.VSXBuiltinNamespaces.is(namespace);
    }
    /**
     * @returns `a >= b`
     */
    versionGreaterThanOrEqualTo(a, b) {
        const versionA = semver.clean(a);
        const versionB = semver.clean(b);
        if (!versionA || !versionB) {
            return false;
        }
        return semver.lte(versionA, versionB);
    }
    supportedVscodeApiSatisfies(vscodeApiRange) {
        return semver.satisfies(this.supportedApiVersion, vscodeApiRange);
    }
}
exports.OVSXApiFilterImpl = OVSXApiFilterImpl;


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-http-client.js":
/*!**************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-http-client.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OVSXHttpClient = void 0;
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
class OVSXHttpClient {
    constructor(vsxRegistryUrl, requestService) {
        this.vsxRegistryUrl = vsxRegistryUrl;
        this.requestService = requestService;
    }
    /**
     * @param requestService
     * @returns factory that will cache clients based on the requested input URL.
     */
    static createClientFactory(requestService) {
        // eslint-disable-next-line no-null/no-null
        const cachedClients = Object.create(null);
        return url => { var _a; return (_a = cachedClients[url]) !== null && _a !== void 0 ? _a : (cachedClients[url] = new this(url, requestService)); };
    }
    async search(searchOptions) {
        try {
            return await this.requestJson(this.buildUrl('api/-/search', searchOptions));
        }
        catch (err) {
            return {
                error: (err === null || err === void 0 ? void 0 : err.message) || String(err),
                offset: -1,
                extensions: []
            };
        }
    }
    async query(queryOptions) {
        try {
            return await this.requestJson(this.buildUrl('api/-/query', queryOptions));
        }
        catch (error) {
            console.warn(error);
            return {
                extensions: []
            };
        }
    }
    async requestJson(url) {
        return request_1.RequestContext.asJson(await this.requestService.request({
            url,
            headers: { 'Accept': 'application/json' }
        }));
    }
    buildUrl(url, query) {
        return new URL(`${url}${this.buildQueryString(query)}`, this.vsxRegistryUrl).toString();
    }
    buildQueryString(searchQuery) {
        if (!searchQuery) {
            return '';
        }
        let queryString = '';
        for (const [key, value] of Object.entries(searchQuery)) {
            if (typeof value === 'string') {
                queryString += `&${key}=${encodeURIComponent(value)}`;
            }
            else if (typeof value === 'boolean' || typeof value === 'number') {
                queryString += `&${key}=${value}`;
            }
        }
        return queryString && '?' + queryString.slice(1);
    }
}
exports.OVSXHttpClient = OVSXHttpClient;


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-mock-client.js":
/*!**************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-mock-client.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OVSXMockClient = void 0;
/**
 * Querying will only find exact matches.
 * Searching will try to find the query string in various fields.
 */
class OVSXMockClient {
    constructor(extensions = []) {
        this.extensions = extensions;
    }
    setExtensions(extensions) {
        this.extensions = extensions;
        return this;
    }
    /**
     * @param baseUrl required to construct the URLs required by {@link VSXExtensionRaw}.
     * @param ids list of ids to generate {@link VSXExtensionRaw} from.
     */
    setExtensionsFromIds(baseUrl, ids) {
        const now = Date.now();
        const url = new OVSXMockClient.UrlBuilder(baseUrl);
        this.extensions = ids.map((extension, i) => {
            const [id, version = '0.0.1'] = extension.split('@', 2);
            const [namespace, name] = id.split('.', 2);
            return {
                allVersions: {
                    [version]: url.extensionUrl(namespace, name, `/${version}`)
                },
                displayName: name,
                downloadCount: 0,
                files: {
                    download: url.extensionFileUrl(namespace, name, version, `/${id}-${version}.vsix`)
                },
                name,
                namespace,
                namespaceAccess: 'public',
                namespaceUrl: url.namespaceUrl(namespace),
                publishedBy: {
                    loginName: 'mock'
                },
                reviewCount: 0,
                reviewsUrl: url.extensionReviewsUrl(namespace, name),
                timestamp: new Date(now - ids.length + i + 1).toISOString(),
                version,
                description: `Mock VS Code Extension for ${id}`
            };
        });
        return this;
    }
    async query(queryOptions) {
        return {
            extensions: this.extensions
                .filter(extension => typeof queryOptions === 'object' && (this.compare(queryOptions.extensionId, this.id(extension)) &&
                this.compare(queryOptions.extensionName, extension.name) &&
                this.compare(queryOptions.extensionVersion, extension.version) &&
                this.compare(queryOptions.namespaceName, extension.namespace)))
        };
    }
    async search(searchOptions) {
        var _a, _b;
        const query = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.query;
        const offset = (_a = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.offset) !== null && _a !== void 0 ? _a : 0;
        const size = (_b = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.size) !== null && _b !== void 0 ? _b : 18;
        const end = offset + size;
        return {
            offset,
            extensions: this.extensions
                .filter(extension => typeof query !== 'string' || (this.includes(query, this.id(extension)) ||
                this.includes(query, extension.description) ||
                this.includes(query, extension.displayName)))
                .sort((a, b) => this.sort(a, b, searchOptions))
                .filter((extension, i) => i >= offset && i < end)
                .map(extension => ({
                downloadCount: extension.downloadCount,
                files: extension.files,
                name: extension.name,
                namespace: extension.namespace,
                timestamp: extension.timestamp,
                url: `${extension.namespaceUrl}/${extension.name}`,
                version: extension.version,
            }))
        };
    }
    id(extension) {
        return `${extension.namespace}.${extension.name}`;
    }
    /**
     * Case sensitive.
     */
    compare(expected, value) {
        return expected === undefined || value === undefined || expected === value;
    }
    /**
     * Case insensitive.
     */
    includes(needle, value) {
        return value === undefined || value.toLowerCase().includes(needle.toLowerCase());
    }
    sort(a, b, searchOptions) {
        var _a, _b, _c, _d;
        let order = 0;
        const sortBy = (_a = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.sortBy) !== null && _a !== void 0 ? _a : 'relevance';
        const sortOrder = (_b = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.sortOrder) !== null && _b !== void 0 ? _b : 'desc';
        if (sortBy === 'averageRating') {
            order = ((_c = a.averageRating) !== null && _c !== void 0 ? _c : -1) - ((_d = b.averageRating) !== null && _d !== void 0 ? _d : -1);
        }
        else if (sortBy === 'downloadCount') {
            order = a.downloadCount - b.downloadCount;
        }
        else if (sortBy === 'relevance') {
            order = 0;
        }
        else if (sortBy === 'timestamp') {
            order = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
        }
        if (sortOrder === 'asc') {
            order *= -1;
        }
        return order;
    }
}
exports.OVSXMockClient = OVSXMockClient;
(function (OVSXMockClient) {
    /**
     * URLs should respect the official OpenVSX API:
     * https://open-vsx.org/swagger-ui/index.html
     */
    class UrlBuilder {
        constructor(baseUrl) {
            this.baseUrl = baseUrl;
        }
        url(path) {
            return this.baseUrl + path;
        }
        apiUrl(path) {
            return this.url(`/api${path}`);
        }
        namespaceUrl(namespace, path = '') {
            return this.apiUrl(`/${namespace}${path}`);
        }
        extensionUrl(namespace, name, path = '') {
            return this.apiUrl(`/${namespace}/${name}${path}`);
        }
        extensionReviewsUrl(namespace, name) {
            return this.apiUrl(`/${namespace}/${name}/reviews`);
        }
        extensionFileUrl(namespace, name, version, path = '') {
            return this.apiUrl(`/${namespace}/${name}/${version}/file${path}`);
        }
    }
    OVSXMockClient.UrlBuilder = UrlBuilder;
})(OVSXMockClient = exports.OVSXMockClient || (exports.OVSXMockClient = {}));


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-router-client.js":
/*!****************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-router-client.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OVSXRouterClient = exports.createFilterFactory = void 0;
/**
 * Helper function to create factories that handle a single condition key.
 */
function createFilterFactory(conditionKey, factory) {
    return (conditions, remainingKeys) => {
        if (conditionKey in conditions) {
            const filter = factory(conditions[conditionKey]);
            if (filter) {
                remainingKeys.delete(conditionKey);
                return filter;
            }
        }
    };
}
exports.createFilterFactory = createFilterFactory;
/**
 * Route and agglomerate queries according to {@link routerConfig}.
 * {@link ruleFactories} is the actual logic used to evaluate the config.
 * Each rule implementation will be ran sequentially over each configured rule.
 */
class OVSXRouterClient {
    constructor(useDefault, clientProvider, rules) {
        this.useDefault = useDefault;
        this.clientProvider = clientProvider;
        this.rules = rules;
    }
    static async FromConfig(routerConfig, clientProvider, filterFactories) {
        const rules = routerConfig.rules ? await this.ParseRules(routerConfig.rules, filterFactories, routerConfig.registries) : [];
        return new this(this.ParseUse(routerConfig.use, routerConfig.registries), clientProvider, rules);
    }
    static async ParseRules(rules, filterFactories, aliases) {
        return Promise.all(rules.map(async ({ use, ...conditions }) => {
            const remainingKeys = new Set(Object.keys(conditions));
            const filters = removeNullValues(await Promise.all(filterFactories.map(filterFactory => filterFactory(conditions, remainingKeys))));
            if (remainingKeys.size > 0) {
                throw new Error(`unknown conditions: ${Array.from(remainingKeys).join(', ')}`);
            }
            return {
                filters,
                use: this.ParseUse(use, aliases)
            };
        }));
    }
    static ParseUse(use, aliases) {
        if (typeof use === 'string') {
            return [alias(use)];
        }
        else if (Array.isArray(use)) {
            return use.map(alias);
        }
        else {
            return [];
        }
        function alias(aliasOrUri) {
            var _a;
            return (_a = aliases === null || aliases === void 0 ? void 0 : aliases[aliasOrUri]) !== null && _a !== void 0 ? _a : aliasOrUri;
        }
    }
    async search(searchOptions) {
        return this.runRules(filter => { var _a; return (_a = filter.filterSearchOptions) === null || _a === void 0 ? void 0 : _a.call(filter, searchOptions); }, rule => rule.use.length > 0
            ? this.mergedSearch(rule.use, searchOptions)
            : this.emptySearchResult(searchOptions), () => this.mergedSearch(this.useDefault, searchOptions));
    }
    async query(queryOptions = {}) {
        return this.runRules(filter => { var _a; return (_a = filter.filterQueryOptions) === null || _a === void 0 ? void 0 : _a.call(filter, queryOptions); }, rule => rule.use.length > 0
            ? this.mergedQuery(rule.use, queryOptions)
            : this.emptyQueryResult(queryOptions), () => this.mergedQuery(this.useDefault, queryOptions));
    }
    emptySearchResult(searchOptions) {
        var _a;
        return {
            extensions: [],
            offset: (_a = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.offset) !== null && _a !== void 0 ? _a : 0
        };
    }
    emptyQueryResult(queryOptions) {
        return {
            extensions: []
        };
    }
    async mergedQuery(registries, queryOptions) {
        return this.mergeQueryResults(await createMapping(registries, async (registry) => (await this.clientProvider(registry)).query(queryOptions)));
    }
    async mergedSearch(registries, searchOptions) {
        return this.mergeSearchResults(await createMapping(registries, async (registry) => (await this.clientProvider(registry)).search(searchOptions)));
    }
    async mergeSearchResults(results) {
        const filtering = [];
        results.forEach((result, sourceUri) => {
            filtering.push(Promise
                .all(result.extensions.map(extension => this.filterExtension(sourceUri, extension)))
                .then(removeNullValues));
        });
        return {
            extensions: interleave(await Promise.all(filtering)),
            offset: Math.min(...Array.from(results.values(), result => result.offset))
        };
    }
    async mergeQueryResults(results) {
        const filtering = [];
        results.forEach((result, sourceUri) => {
            result.extensions.forEach(extension => filtering.push(this.filterExtension(sourceUri, extension)));
        });
        return {
            extensions: removeNullValues(await Promise.all(filtering))
        };
    }
    async filterExtension(sourceUri, extension) {
        return this.runRules(filter => { var _a; return (_a = filter.filterExtension) === null || _a === void 0 ? void 0 : _a.call(filter, extension); }, rule => rule.use.includes(sourceUri) ? extension : undefined, () => extension);
    }
    async runRules(runFilter, onRuleMatched, onNoRuleMatched) {
        for (const rule of this.rules) {
            const results = removeNullValues(await Promise.all(rule.filters.map(filter => runFilter(filter))));
            if (results.length > 0 && results.every(value => value)) {
                return onRuleMatched(rule);
            }
        }
        return onNoRuleMatched === null || onNoRuleMatched === void 0 ? void 0 : onNoRuleMatched();
    }
}
exports.OVSXRouterClient = OVSXRouterClient;
function nonNullable(value) {
    // eslint-disable-next-line no-null/no-null
    return typeof value !== 'undefined' && value !== null;
}
function removeNullValues(values) {
    return values.filter(nonNullable);
}
/**
 * Create a map where the keys are each element from {@link values} and the
 * values are the result of a mapping function applied on the key.
 */
async function createMapping(values, map, thisArg) {
    return new Map(await Promise.all(values.map(async (value, index) => [value, await map.call(thisArg, value, index)])));
}
/**
 * @example
 * interleave([[1, 2, 3], [4, 5], [6, 7, 8]]) === [1, 4, 6, 2, 5, 7, 3, 8]
 */
function interleave(arrays) {
    const interleaved = [];
    const length = Math.max(...arrays.map(array => array.length));
    for (let i = 0; i < length; i++) {
        for (const array of arrays) {
            if (i < array.length) {
                interleaved.push(array[i]);
            }
        }
    }
    return interleaved;
}


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/abstract-reg-exp-filter.js":
/*!*****************************************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-router-filters/abstract-reg-exp-filter.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractRegExpFilter = void 0;
class AbstractRegExpFilter {
    constructor(regExp) {
        this.regExp = regExp;
    }
    test(value) {
        return typeof value === 'string' && this.regExp.test(value);
    }
}
exports.AbstractRegExpFilter = AbstractRegExpFilter;


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/extension-id-matches-filter.js":
/*!*********************************************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-router-filters/extension-id-matches-filter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionIdMatchesFilter = exports.ExtensionIdMatchesFilterFactory = void 0;
const ovsx_router_client_1 = __webpack_require__(/*! ../ovsx-router-client */ "../../dev-packages/ovsx-client/lib/ovsx-router-client.js");
const ovsx_types_1 = __webpack_require__(/*! ../ovsx-types */ "../../dev-packages/ovsx-client/lib/ovsx-types.js");
const abstract_reg_exp_filter_1 = __webpack_require__(/*! ./abstract-reg-exp-filter */ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/abstract-reg-exp-filter.js");
exports.ExtensionIdMatchesFilterFactory = (0, ovsx_router_client_1.createFilterFactory)('ifExtensionIdMatches', ifExtensionIdMatches => {
    if (typeof ifExtensionIdMatches !== 'string') {
        throw new TypeError(`expected a string, got: ${typeof ifExtensionIdMatches}`);
    }
    return new ExtensionIdMatchesFilter(new RegExp(ifExtensionIdMatches, 'i'));
});
class ExtensionIdMatchesFilter extends abstract_reg_exp_filter_1.AbstractRegExpFilter {
    filterExtension(extension) {
        return this.test(ovsx_types_1.ExtensionLike.id(extension));
    }
}
exports.ExtensionIdMatchesFilter = ExtensionIdMatchesFilter;


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/index.js":
/*!***********************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-router-filters/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequestContainsFilterFactory = exports.ExtensionIdMatchesFilterFactory = void 0;
var extension_id_matches_filter_1 = __webpack_require__(/*! ./extension-id-matches-filter */ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/extension-id-matches-filter.js");
Object.defineProperty(exports, "ExtensionIdMatchesFilterFactory", ({ enumerable: true, get: function () { return extension_id_matches_filter_1.ExtensionIdMatchesFilterFactory; } }));
var request_contains_filter_1 = __webpack_require__(/*! ./request-contains-filter */ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/request-contains-filter.js");
Object.defineProperty(exports, "RequestContainsFilterFactory", ({ enumerable: true, get: function () { return request_contains_filter_1.RequestContainsFilterFactory; } }));


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/request-contains-filter.js":
/*!*****************************************************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-router-filters/request-contains-filter.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequestContainsFilter = exports.RequestContainsFilterFactory = void 0;
const ovsx_router_client_1 = __webpack_require__(/*! ../ovsx-router-client */ "../../dev-packages/ovsx-client/lib/ovsx-router-client.js");
const abstract_reg_exp_filter_1 = __webpack_require__(/*! ./abstract-reg-exp-filter */ "../../dev-packages/ovsx-client/lib/ovsx-router-filters/abstract-reg-exp-filter.js");
exports.RequestContainsFilterFactory = (0, ovsx_router_client_1.createFilterFactory)('ifRequestContains', ifRequestContains => {
    if (typeof ifRequestContains !== 'string') {
        throw new TypeError(`expected a string, got: ${typeof ifRequestContains}`);
    }
    return new RequestContainsFilter(new RegExp(ifRequestContains, 'i'));
});
class RequestContainsFilter extends abstract_reg_exp_filter_1.AbstractRegExpFilter {
    filterSearchOptions(searchOptions) {
        return !searchOptions || this.test(searchOptions.query) || this.test(searchOptions.category);
    }
    filterQueryOptions(queryOptions) {
        return !queryOptions || Object.values(queryOptions).some(this.test, this);
    }
}
exports.RequestContainsFilter = RequestContainsFilter;


/***/ }),

/***/ "../../dev-packages/ovsx-client/lib/ovsx-types.js":
/*!********************************************************!*\
  !*** ../../dev-packages/ovsx-client/lib/ovsx-types.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXBuiltinNamespaces = exports.VSXResponseError = exports.ExtensionLike = void 0;
var ExtensionLike;
(function (ExtensionLike) {
    function id(extension) {
        return `${extension.namespace}.${extension.name}`;
    }
    ExtensionLike.id = id;
    function idWithVersion(extension) {
        if (!extension.version) {
            throw new Error(`no valid "version" value provided for "${id(extension)}"`);
        }
        return `${id(extension)}@${extension.version}`;
    }
    ExtensionLike.idWithVersion = idWithVersion;
    // eslint-disable-next-line @typescript-eslint/no-shadow
    function fromId(id) {
        const [left, version] = id.split('@', 2);
        const [namespace, name] = left.split('.', 2);
        return {
            name,
            namespace,
            version
        };
    }
    ExtensionLike.fromId = fromId;
})(ExtensionLike = exports.ExtensionLike || (exports.ExtensionLike = {}));
var VSXResponseError;
(function (VSXResponseError) {
    function is(error) {
        return !!error && typeof error === 'object' && typeof error.statusCode === 'number';
    }
    VSXResponseError.is = is;
})(VSXResponseError = exports.VSXResponseError || (exports.VSXResponseError = {}));
/**
 * Builtin namespaces maintained by the framework.
 */
var VSXBuiltinNamespaces;
(function (VSXBuiltinNamespaces) {
    /**
     * Namespace for individual vscode builtin extensions.
     */
    VSXBuiltinNamespaces.VSCODE = 'vscode';
    /**
     * Namespace for vscode builtin extension packs.
     * - corresponds to: https://github.com/eclipse-theia/vscode-builtin-extensions/blob/af9cfeb2ea23e1668a8340c1c2fb5afd56be07d7/src/create-extension-pack.js#L45
     */
    VSXBuiltinNamespaces.THEIA = 'eclipse-theia';
    /**
     * Determines if the extension namespace is a builtin maintained by the framework.
     * @param namespace the extension namespace to verify.
     */
    function is(namespace) {
        return namespace === VSXBuiltinNamespaces.VSCODE
            || namespace === VSXBuiltinNamespaces.THEIA;
    }
    VSXBuiltinNamespaces.is = is;
})(VSXBuiltinNamespaces = exports.VSXBuiltinNamespaces || (exports.VSXBuiltinNamespaces = {}));


/***/ }),

/***/ "../api-samples/lib/common/vsx/sample-app-info.js":
/*!********************************************************!*\
  !*** ../api-samples/lib/common/vsx/sample-app-info.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SampleAppInfo = void 0;
exports.SampleAppInfo = Symbol('SampleAppInfo');


/***/ }),

/***/ "../api-samples/lib/common/vsx/sample-ovsx-client-factory.js":
/*!*******************************************************************!*\
  !*** ../api-samples/lib/common/vsx/sample-ovsx-client-factory.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rebindOVSXClientFactory = void 0;
const common_1 = __webpack_require__(/*! @theia/vsx-registry/lib/common */ "../../packages/vsx-registry/lib/common/index.js");
const sample_app_info_1 = __webpack_require__(/*! ./sample-app-info */ "../api-samples/lib/common/vsx/sample-app-info.js");
function rebindOVSXClientFactory(rebind) {
    // rebind the OVSX client factory so that we can replace patterns like "${self}" in the configs:
    rebind(common_1.OVSXUrlResolver)
        .toDynamicValue(ctx => {
        const appInfo = ctx.container.get(sample_app_info_1.SampleAppInfo);
        const selfOrigin = appInfo.getSelfOrigin();
        return async (url) => url.replace('${self}', await selfOrigin);
    })
        .inSingletonScope();
}
exports.rebindOVSXClientFactory = rebindOVSXClientFactory;


/***/ }),

/***/ "../api-samples/lib/node/api-samples-backend-module.js":
/*!*************************************************************!*\
  !*** ../api-samples/lib/node/api-samples-backend-module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const sample_backend_application_server_1 = __webpack_require__(/*! ./sample-backend-application-server */ "../api-samples/lib/node/sample-backend-application-server.js");
const sample_mock_open_vsx_server_1 = __webpack_require__(/*! ./sample-mock-open-vsx-server */ "../api-samples/lib/node/sample-mock-open-vsx-server.js");
const sample_app_info_1 = __webpack_require__(/*! ../common/vsx/sample-app-info */ "../api-samples/lib/common/vsx/sample-app-info.js");
const sample_backend_app_info_1 = __webpack_require__(/*! ./sample-backend-app-info */ "../api-samples/lib/node/sample-backend-app-info.js");
const sample_ovsx_client_factory_1 = __webpack_require__(/*! ../common/vsx/sample-ovsx-client-factory */ "../api-samples/lib/common/vsx/sample-ovsx-client-factory.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    (0, sample_ovsx_client_factory_1.rebindOVSXClientFactory)(rebind);
    bind(sample_backend_app_info_1.SampleBackendAppInfo).toSelf().inSingletonScope();
    bind(sample_app_info_1.SampleAppInfo).toService(sample_backend_app_info_1.SampleBackendAppInfo);
    bind(node_1.BackendApplicationContribution).toService(sample_backend_app_info_1.SampleBackendAppInfo);
    // bind a mock/sample OpenVSX registry:
    bind(node_1.BackendApplicationContribution).to(sample_mock_open_vsx_server_1.SampleMockOpenVsxServer).inSingletonScope();
    if (process.env.SAMPLE_BACKEND_APPLICATION_SERVER) {
        bind(node_1.BackendApplicationServer).to(sample_backend_application_server_1.SampleBackendApplicationServer).inSingletonScope();
    }
});


/***/ }),

/***/ "../api-samples/lib/node/sample-backend-app-info.js":
/*!**********************************************************!*\
  !*** ../api-samples/lib/node/sample-backend-app-info.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SampleBackendAppInfo = void 0;
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let SampleBackendAppInfo = class SampleBackendAppInfo {
    constructor() {
        this.addressDeferred = new promise_util_1.Deferred();
    }
    onStart(server) {
        const address = server.address();
        // eslint-disable-next-line no-null/no-null
        if (typeof address === 'object' && address !== null) {
            this.addressDeferred.resolve(address);
        }
        else {
            this.addressDeferred.resolve({
                address: '127.0.0.1',
                port: 3000,
                family: '4'
            });
        }
    }
    async getSelfOrigin() {
        const { ssl } = this.backendCli;
        const protocol = ssl ? 'https' : 'http';
        const { address, port } = await this.addressDeferred.promise;
        const hostname = common_1.environment.electron.is() ? 'localhost' : address;
        return `${protocol}://${hostname}:${port}`;
    }
};
__decorate([
    (0, inversify_1.inject)(node_1.BackendApplicationCliContribution),
    __metadata("design:type", node_1.BackendApplicationCliContribution)
], SampleBackendAppInfo.prototype, "backendCli", void 0);
SampleBackendAppInfo = __decorate([
    (0, inversify_1.injectable)()
], SampleBackendAppInfo);
exports.SampleBackendAppInfo = SampleBackendAppInfo;


/***/ }),

/***/ "../api-samples/lib/node/sample-backend-application-server.js":
/*!********************************************************************!*\
  !*** ../api-samples/lib/node/sample-backend-application-server.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SampleBackendApplicationServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let SampleBackendApplicationServer = class SampleBackendApplicationServer {
    configure(app) {
        app.get('*', (req, res) => {
            res.status(200).send('SampleBackendApplicationServer OK');
        });
    }
};
SampleBackendApplicationServer = __decorate([
    (0, inversify_1.injectable)()
], SampleBackendApplicationServer);
exports.SampleBackendApplicationServer = SampleBackendApplicationServer;


/***/ }),

/***/ "../api-samples/lib/node/sample-mock-open-vsx-server.js":
/*!**************************************************************!*\
  !*** ../api-samples/lib/node/sample-mock-open-vsx-server.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SampleMockOpenVsxServer = void 0;
const express = __webpack_require__(/*! @theia/core/shared/express */ "../../packages/core/shared/express/index.js");
const fs = __webpack_require__(/*! fs */ "fs");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const ovsx_client_1 = __webpack_require__(/*! @theia/ovsx-client */ "../../dev-packages/ovsx-client/lib/index.js");
const path = __webpack_require__(/*! path */ "path");
const sample_app_info_1 = __webpack_require__(/*! ../common/vsx/sample-app-info */ "../api-samples/lib/common/vsx/sample-app-info.js");
/**
 * This class implements a very crude OpenVSX mock server for testing.
 *
 * See {@link configure}'s implementation for supported REST APIs.
 */
let SampleMockOpenVsxServer = class SampleMockOpenVsxServer {
    get mockServerPath() {
        return '/mock-open-vsx';
    }
    get pluginsDbPath() {
        return '../../sample-plugins';
    }
    async configure(app) {
        const selfOrigin = await this.appInfo.getSelfOrigin();
        const baseUrl = `${selfOrigin}${this.mockServerPath}`;
        const pluginsDb = await this.findMockPlugins(this.pluginsDbPath, baseUrl);
        const staticFileHandlers = new Map(Array.from(pluginsDb.entries(), ([key, value]) => [key, express.static(value.path)]));
        const mockClient = new ovsx_client_1.OVSXMockClient(Array.from(pluginsDb.values(), value => value.data));
        app.use(this.mockServerPath + '/api', express.Router()
            .get('/-/query', async (req, res) => {
            res.json(await mockClient.query(this.sanitizeQuery(req.query)));
        })
            .get('/-/search', async (req, res) => {
            res.json(await mockClient.search(this.sanitizeQuery(req.query)));
        })
            .get('/:namespace', async (req, res) => {
            const extensions = mockClient.extensions
                .filter(ext => req.params.namespace === ext.namespace)
                .map(ext => `${ext.namespaceUrl}/${ext.name}`);
            if (extensions.length === 0) {
                res.status(404).json({ error: `Namespace not found: ${req.params.namespace}` });
            }
            else {
                res.json({
                    name: req.params.namespace,
                    extensions
                });
            }
        })
            .get('/:namespace/:name', async (req, res) => {
            res.json(mockClient.extensions.find(ext => req.params.namespace === ext.namespace && req.params.name === ext.name));
        })
            .get('/:namespace/:name/reviews', async (req, res) => {
            res.json([]);
        })
            // implicitly GET/HEAD because of the express.static handlers
            .use('/:namespace/:name/:version/file', async (req, res, next) => {
            const versionedId = this.getVersionedId(req.params.namespace, req.params.name, req.params.version);
            const staticFileHandler = staticFileHandlers.get(versionedId);
            if (!staticFileHandler) {
                return next();
            }
            staticFileHandler(req, res, next);
        }));
    }
    getVersionedId(namespace, name, version) {
        return `${namespace}.${name}@${version}`;
    }
    sanitizeQuery(query) {
        return typeof query === 'object'
            ? Object.fromEntries(Object.entries(query).filter(([key, value]) => typeof value === 'string'))
            : {};
    }
    /**
     * This method expects the following folder hierarchy: `pluginsDbPath/namespace/pluginName/pluginFiles...`
     * @param pluginsDbPath where to look for plugins on the disk.
     * @param baseUrl used when generating the URLs for {@link VSXExtensionRaw} properties.
     */
    async findMockPlugins(pluginsDbPath, baseUrl) {
        const url = new ovsx_client_1.OVSXMockClient.UrlBuilder(baseUrl);
        const result = new Map();
        if (!await this.isDirectory(pluginsDbPath)) {
            console.error(`ERROR: ${pluginsDbPath} is not a directory!`);
            return result;
        }
        const namespaces = await fs.promises.readdir(pluginsDbPath);
        await Promise.all(namespaces.map(async (namespace) => {
            const namespacePath = path.join(pluginsDbPath, namespace);
            if (!await this.isDirectory(namespacePath)) {
                return;
            }
            const names = await fs.promises.readdir(namespacePath);
            await Promise.all(names.map(async (pluginName) => {
                const pluginPath = path.join(namespacePath, pluginName);
                if (!await this.isDirectory(pluginPath)) {
                    return;
                }
                const packageJsonPath = path.join(pluginPath, 'package.json');
                const { name, version } = JSON.parse(await fs.promises.readFile(packageJsonPath, 'utf8'));
                const versionedId = this.getVersionedId(namespace, name, version);
                result.set(versionedId, {
                    path: pluginPath,
                    data: {
                        allVersions: {},
                        downloadCount: 0,
                        files: {
                            // the default generated name from vsce is NAME-VERSION.vsix
                            download: url.extensionFileUrl(namespace, name, version, `/${name}-${version}.vsix`),
                            icon: url.extensionFileUrl(namespace, name, version, '/icon128.png'),
                            readme: url.extensionFileUrl(namespace, name, version, '/README.md')
                        },
                        name,
                        namespace,
                        namespaceAccess: 'public',
                        namespaceUrl: url.namespaceUrl(namespace),
                        publishedBy: {
                            loginName: 'mock-open-vsx'
                        },
                        reviewCount: 0,
                        reviewsUrl: url.extensionReviewsUrl(namespace, name),
                        timestamp: new Date().toISOString(),
                        version,
                    }
                });
            }));
        }));
        return result;
    }
    async isDirectory(fsPath) {
        return (await fs.promises.stat(fsPath)).isDirectory();
    }
};
__decorate([
    (0, inversify_1.inject)(sample_app_info_1.SampleAppInfo),
    __metadata("design:type", Object)
], SampleMockOpenVsxServer.prototype, "appInfo", void 0);
SampleMockOpenVsxServer = __decorate([
    (0, inversify_1.injectable)()
], SampleMockOpenVsxServer);
exports.SampleMockOpenVsxServer = SampleMockOpenVsxServer;


/***/ }),

/***/ "./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/bindings.js":
/*!**********************************************************************************!*\
  !*** ./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/bindings.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = function (jsModule) {
    switch (jsModule) {
        case 'drivelist': return __webpack_require__(/*! drivelist/build/Release/drivelist.node */ "../../node_modules/drivelist/build/Release/drivelist.node");
    }
    throw new Error(`unhandled module: "${jsModule}"`);
}

/***/ }),

/***/ "./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/ripgrep.js":
/*!*********************************************************************************!*\
  !*** ./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/ripgrep.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


const path = __webpack_require__(/*! path */ "path");

exports.rgPath = path.join(__dirname, `./native/rg${process.platform === 'win32' ? '.exe' : ''}`);


/***/ }),

/***/ "./src-gen/backend/main.js":
/*!*********************************!*\
  !*** ./src-gen/backend/main.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// @ts-check
const { BackendApplicationConfigProvider } = __webpack_require__(/*! @theia/core/lib/node/backend-application-config-provider */ "../../packages/core/lib/node/backend-application-config-provider.js");
const main = __webpack_require__(/*! @theia/core/lib/node/main */ "../../packages/core/lib/node/main.js");

BackendApplicationConfigProvider.set({
    "singleInstance": false
});

const serverModule = __webpack_require__(/*! ./server */ "./src-gen/backend/server.js");
const serverAddress = main.start(serverModule());

serverAddress.then(({ port, address, family }) => {
    if (process && process.send) {
        process.send({ port, address, family });
    }
});

globalThis.serverAddress = serverAddress;


/***/ }),

/***/ "./src-gen/backend/server.js":
/*!***********************************!*\
  !*** ./src-gen/backend/server.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// @ts-check
__webpack_require__(/*! reflect-metadata */ "../../node_modules/reflect-metadata/Reflect.js");

// Erase the ELECTRON_RUN_AS_NODE variable from the environment, else Electron apps started using Theia will pick it up.
if ('ELECTRON_RUN_AS_NODE' in process.env) {
    delete process.env.ELECTRON_RUN_AS_NODE;
}

const path = __webpack_require__(/*! path */ "path");
const express = __webpack_require__(/*! express */ "../../node_modules/express/index.js");
const { Container } = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const { BackendApplication, BackendApplicationServer, CliManager } = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const { backendApplicationModule } = __webpack_require__(/*! @theia/core/lib/node/backend-application-module */ "../../packages/core/lib/node/backend-application-module.js");
const { messagingBackendModule } = __webpack_require__(/*! @theia/core/lib/node/messaging/messaging-backend-module */ "../../packages/core/lib/node/messaging/messaging-backend-module.js");
const { loggerBackendModule } = __webpack_require__(/*! @theia/core/lib/node/logger-backend-module */ "../../packages/core/lib/node/logger-backend-module.js");

const container = new Container();
container.load(backendApplicationModule);
container.load(messagingBackendModule);
container.load(loggerBackendModule);

function defaultServeStatic(app) {
    app.use(express.static(path.resolve(__dirname, '../../lib/frontend')))
}

function load(raw) {
    return Promise.resolve(raw).then(
        module => container.load(module.default)
    );
}

async function start(port, host, argv = process.argv) {
    if (!container.isBound(BackendApplicationServer)) {
        container.bind(BackendApplicationServer).toConstantValue({ configure: defaultServeStatic });
    }
    await container.get(CliManager).initializeCli(argv);
    return container.get(BackendApplication).start(port, host);
}

module.exports = async (port, host, argv) => {
    try {
        await load(__webpack_require__(/*! @theia/core/lib/node/i18n/i18n-backend-module */ "../../packages/core/lib/node/i18n/i18n-backend-module.js"));
        await load(__webpack_require__(/*! @theia/core/lib/node/hosting/backend-hosting-module */ "../../packages/core/lib/node/hosting/backend-hosting-module.js"));
        await load(__webpack_require__(/*! @theia/core/lib/node/request/backend-request-module */ "../../packages/core/lib/node/request/backend-request-module.js"));
        await load(__webpack_require__(/*! @theia/filesystem/lib/node/filesystem-backend-module */ "../../packages/filesystem/lib/node/filesystem-backend-module.js"));
        await load(__webpack_require__(/*! @theia/filesystem/lib/node/download/file-download-backend-module */ "../../packages/filesystem/lib/node/download/file-download-backend-module.js"));
        await load(__webpack_require__(/*! @theia/process/lib/common/process-common-module */ "../../packages/process/lib/common/process-common-module.js"));
        await load(__webpack_require__(/*! @theia/process/lib/node/process-backend-module */ "../../packages/process/lib/node/process-backend-module.js"));
        await load(__webpack_require__(/*! @theia/workspace/lib/node/workspace-backend-module */ "../../packages/workspace/lib/node/workspace-backend-module.js"));
        await load(__webpack_require__(/*! @theia/file-search/lib/node/file-search-backend-module */ "../../packages/file-search/lib/node/file-search-backend-module.js"));
        await load(__webpack_require__(/*! @theia/search-in-workspace/lib/node/search-in-workspace-backend-module */ "../../packages/search-in-workspace/lib/node/search-in-workspace-backend-module.js"));
        await load(__webpack_require__(/*! @theia/terminal/lib/node/terminal-backend-module */ "../../packages/terminal/lib/node/terminal-backend-module.js"));
        await load(__webpack_require__(/*! @theia/task/lib/node/task-backend-module */ "../../packages/task/lib/node/task-backend-module.js"));
        await load(__webpack_require__(/*! @theia/debug/lib/node/debug-backend-module */ "../../packages/debug/lib/node/debug-backend-module.js"));
        await load(__webpack_require__(/*! @theia/plugin-ext/lib/plugin-ext-backend-module */ "../../packages/plugin-ext/lib/plugin-ext-backend-module.js"));
        await load(__webpack_require__(/*! @theia/plugin-ext-vscode/lib/node/plugin-vscode-backend-module */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-backend-module.js"));
        await load(__webpack_require__(/*! @theia/vsx-registry/lib/common/vsx-registry-common-module */ "../../packages/vsx-registry/lib/common/vsx-registry-common-module.js"));
        await load(__webpack_require__(/*! @theia/vsx-registry/lib/node/vsx-registry-backend-module */ "../../packages/vsx-registry/lib/node/vsx-registry-backend-module.js"));
        await load(__webpack_require__(/*! @theia/api-samples/lib/node/api-samples-backend-module */ "../api-samples/lib/node/api-samples-backend-module.js"));
        await load(__webpack_require__(/*! @theia/mini-browser/lib/node/mini-browser-backend-module */ "../../packages/mini-browser/lib/node/mini-browser-backend-module.js"));
        await load(__webpack_require__(/*! @theia/git/lib/node/git-backend-module */ "../../packages/git/lib/node/git-backend-module.js"));
        await load(__webpack_require__(/*! @theia/git/lib/node/env/git-env-module */ "../../packages/git/lib/node/env/git-env-module.js"));
        await load(__webpack_require__(/*! @theia/metrics/lib/node/metrics-backend-module */ "../../packages/metrics/lib/node/metrics-backend-module.js"));
        await load(__webpack_require__(/*! @theia/plugin-dev/lib/node/plugin-dev-backend-module */ "../../packages/plugin-dev/lib/node/plugin-dev-backend-module.js"));
        await load(__webpack_require__(/*! @theia/plugin-metrics/lib/node/plugin-metrics-backend-module */ "../../packages/plugin-metrics/lib/node/plugin-metrics-backend-module.js"));
        return await start(port, host, argv);
    } catch (error) {
        console.error('Failed to start the backend application:');
        console.error(error);
        process.exitCode = 1;
        throw error;
    }
}


/***/ }),

/***/ "../../packages/core/lib/common/application-protocol.js":
/*!**************************************************************!*\
  !*** ../../packages/core/lib/common/application-protocol.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationServer = exports.applicationPath = void 0;
exports.applicationPath = '/services/application';
exports.ApplicationServer = Symbol('ApplicationServer');


/***/ }),

/***/ "../../packages/core/lib/common/encoding-service.js":
/*!**********************************************************!*\
  !*** ../../packages/core/lib/common/encoding-service.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/common/encoding.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingService = void 0;
/* eslint-disable no-null/no-null */
const iconv = __webpack_require__(/*! iconv-lite */ "../../packages/core/node_modules/iconv-lite/lib/index.js");
const safer_buffer_1 = __webpack_require__(/*! safer-buffer */ "../../node_modules/safer-buffer/safer.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const buffer_1 = __webpack_require__(/*! ./buffer */ "../../packages/core/lib/common/buffer.js");
const encodings_1 = __webpack_require__(/*! ./encodings */ "../../packages/core/lib/common/encodings.js");
const stream_1 = __webpack_require__(/*! ./stream */ "../../packages/core/lib/common/stream.js");
const ZERO_BYTE_DETECTION_BUFFER_MAX_LEN = 512; // number of bytes to look at to decide about a file being binary or not
const NO_ENCODING_GUESS_MIN_BYTES = 512; // when not auto guessing the encoding, small number of bytes are enough
const AUTO_ENCODING_GUESS_MIN_BYTES = 512 * 8; // with auto guessing we want a lot more content to be read for guessing
const AUTO_ENCODING_GUESS_MAX_BYTES = 512 * 128; // set an upper limit for the number of bytes we pass on to jschardet
// we explicitly ignore a specific set of encodings from auto guessing
// - ASCII: we never want this encoding (most UTF-8 files would happily detect as
//          ASCII files and then you could not type non-ASCII characters anymore)
// - UTF-16: we have our own detection logic for UTF-16
// - UTF-32: we do not support this encoding in VSCode
const IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];
let EncodingService = class EncodingService {
    encode(value, options) {
        let encoding = options === null || options === void 0 ? void 0 : options.encoding;
        const addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
        encoding = this.toIconvEncoding(encoding);
        if (encoding === encodings_1.UTF8 && !addBOM) {
            return buffer_1.BinaryBuffer.fromString(value);
        }
        const buffer = iconv.encode(value, encoding, { addBOM });
        return buffer_1.BinaryBuffer.wrap(buffer);
    }
    decode(value, encoding) {
        const buffer = safer_buffer_1.Buffer.from(value.buffer);
        encoding = this.toIconvEncoding(encoding);
        return iconv.decode(buffer, encoding);
    }
    exists(encoding) {
        encoding = this.toIconvEncoding(encoding);
        return iconv.encodingExists(encoding);
    }
    toIconvEncoding(encoding) {
        if (encoding === encodings_1.UTF8_with_bom || !encoding) {
            return encodings_1.UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it
        }
        return encoding;
    }
    async toResourceEncoding(encoding, options) {
        // Some encodings come with a BOM automatically
        if (encoding === encodings_1.UTF16be || encoding === encodings_1.UTF16le || encoding === encodings_1.UTF8_with_bom) {
            return { encoding, hasBOM: true };
        }
        // Ensure that we preserve an existing BOM if found for UTF8
        // unless we are instructed to overwrite the encoding
        const overwriteEncoding = options === null || options === void 0 ? void 0 : options.overwriteEncoding;
        if (!overwriteEncoding && encoding === encodings_1.UTF8) {
            try {
                // stream here to avoid fetching the whole content on write
                const buffer = await options.read(encodings_1.UTF8_BOM.length);
                if (this.detectEncodingByBOMFromBuffer(safer_buffer_1.Buffer.from(buffer), buffer.byteLength) === encodings_1.UTF8_with_bom) {
                    return { encoding, hasBOM: true };
                }
            }
            catch (error) {
                // ignore - file might not exist
            }
        }
        return { encoding, hasBOM: false };
    }
    async detectEncoding(data, autoGuessEncoding) {
        const buffer = safer_buffer_1.Buffer.from(data.buffer);
        const bytesRead = data.byteLength;
        // Always first check for BOM to find out about encoding
        let encoding = this.detectEncodingByBOMFromBuffer(buffer, bytesRead);
        // Detect 0 bytes to see if file is binary or UTF-16 LE/BEÏ
        // unless we already know that this file has a UTF-16 encoding
        let seemsBinary = false;
        if (encoding !== encodings_1.UTF16be && encoding !== encodings_1.UTF16le && buffer) {
            let couldBeUTF16LE = true; // e.g. 0xAA 0x00
            let couldBeUTF16BE = true; // e.g. 0x00 0xAA
            let containsZeroByte = false;
            // This is a simplified guess to detect UTF-16 BE or LE by just checking if
            // the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE
            // this would be the odd byte index and for UTF-16 BE the even one.
            // Note: this can produce false positives (a binary file that uses a 2-byte
            // encoding of the same format as UTF-16) and false negatives (a UTF-16 file
            // that is using 4 bytes to encode a character).
            for (let i = 0; i < bytesRead && i < ZERO_BYTE_DETECTION_BUFFER_MAX_LEN; i++) {
                const isEndian = (i % 2 === 1); // assume 2-byte sequences typical for UTF-16
                const isZeroByte = (buffer.readUInt8(i) === 0);
                if (isZeroByte) {
                    containsZeroByte = true;
                }
                // UTF-16 LE: expect e.g. 0xAA 0x00
                if (couldBeUTF16LE && (isEndian && !isZeroByte || !isEndian && isZeroByte)) {
                    couldBeUTF16LE = false;
                }
                // UTF-16 BE: expect e.g. 0x00 0xAA
                if (couldBeUTF16BE && (isEndian && isZeroByte || !isEndian && !isZeroByte)) {
                    couldBeUTF16BE = false;
                }
                // Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary
                if (isZeroByte && !couldBeUTF16LE && !couldBeUTF16BE) {
                    break;
                }
            }
            // Handle case of 0-byte included
            if (containsZeroByte) {
                if (couldBeUTF16LE) {
                    encoding = encodings_1.UTF16le;
                }
                else if (couldBeUTF16BE) {
                    encoding = encodings_1.UTF16be;
                }
                else {
                    seemsBinary = true;
                }
            }
        }
        // Auto guess encoding if configured
        if (autoGuessEncoding && !seemsBinary && !encoding && buffer) {
            const guessedEncoding = await this.guessEncodingByBuffer(buffer.slice(0, bytesRead));
            return {
                seemsBinary: false,
                encoding: guessedEncoding
            };
        }
        return { seemsBinary, encoding };
    }
    detectEncodingByBOMFromBuffer(buffer, bytesRead) {
        if (!buffer || bytesRead < encodings_1.UTF16be_BOM.length) {
            return undefined;
        }
        const b0 = buffer.readUInt8(0);
        const b1 = buffer.readUInt8(1);
        // UTF-16 BE
        if (b0 === encodings_1.UTF16be_BOM[0] && b1 === encodings_1.UTF16be_BOM[1]) {
            return encodings_1.UTF16be;
        }
        // UTF-16 LE
        if (b0 === encodings_1.UTF16le_BOM[0] && b1 === encodings_1.UTF16le_BOM[1]) {
            return encodings_1.UTF16le;
        }
        if (bytesRead < encodings_1.UTF8_BOM.length) {
            return undefined;
        }
        const b2 = buffer.readUInt8(2);
        // UTF-8
        if (b0 === encodings_1.UTF8_BOM[0] && b1 === encodings_1.UTF8_BOM[1] && b2 === encodings_1.UTF8_BOM[2]) {
            return encodings_1.UTF8_with_bom;
        }
        return undefined;
    }
    async guessEncodingByBuffer(buffer) {
        const jschardet = await Promise.resolve().then(() => __webpack_require__(/*! jschardet */ "../../node_modules/jschardet/index.js"));
        const guessed = jschardet.detect(buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES)); // ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53
        if (!guessed || !guessed.encoding) {
            return undefined;
        }
        const enc = guessed.encoding.toLowerCase();
        if (0 <= IGNORE_ENCODINGS.indexOf(enc)) {
            return undefined; // see comment above why we ignore some encodings
        }
        return this.toIconvEncoding(guessed.encoding);
    }
    decodeStream(source, options) {
        var _a;
        const minBytesRequiredForDetection = ((_a = options.minBytesRequiredForDetection) !== null && _a !== void 0 ? _a : options.guessEncoding) ? AUTO_ENCODING_GUESS_MIN_BYTES : NO_ENCODING_GUESS_MIN_BYTES;
        return new Promise((resolve, reject) => {
            const target = (0, stream_1.newWriteableStream)(strings => strings.join(''));
            const bufferedChunks = [];
            let bytesBuffered = 0;
            let decoder = undefined;
            const createDecoder = async () => {
                try {
                    // detect encoding from buffer
                    const detected = await this.detectEncoding(buffer_1.BinaryBuffer.concat(bufferedChunks), options.guessEncoding);
                    // ensure to respect overwrite of encoding
                    detected.encoding = await options.overwriteEncoding(detected.encoding);
                    // decode and write buffered content
                    decoder = iconv.getDecoder(this.toIconvEncoding(detected.encoding));
                    const decoded = decoder.write(safer_buffer_1.Buffer.from(buffer_1.BinaryBuffer.concat(bufferedChunks).buffer));
                    target.write(decoded);
                    bufferedChunks.length = 0;
                    bytesBuffered = 0;
                    // signal to the outside our detected encoding and final decoder stream
                    resolve({
                        stream: target,
                        detected
                    });
                }
                catch (error) {
                    reject(error);
                }
            };
            // Stream error: forward to target
            source.on('error', error => target.error(error));
            // Stream data
            source.on('data', async (chunk) => {
                // if the decoder is ready, we just write directly
                if (decoder) {
                    target.write(decoder.write(safer_buffer_1.Buffer.from(chunk.buffer)));
                }
                else {
                    bufferedChunks.push(chunk);
                    bytesBuffered += chunk.byteLength;
                    // buffered enough data for encoding detection, create stream
                    if (bytesBuffered >= minBytesRequiredForDetection) {
                        // pause stream here until the decoder is ready
                        source.pause();
                        await createDecoder();
                        // resume stream now that decoder is ready but
                        // outside of this stack to reduce recursion
                        setTimeout(() => source.resume());
                    }
                }
            });
            // Stream end
            source.on('end', async () => {
                // we were still waiting for data to do the encoding
                // detection. thus, wrap up starting the stream even
                // without all the data to get things going
                if (!decoder) {
                    await createDecoder();
                }
                // end the target with the remainders of the decoder
                target.end(decoder === null || decoder === void 0 ? void 0 : decoder.end());
            });
        });
    }
    async encodeStream(value, options) {
        let encoding = options === null || options === void 0 ? void 0 : options.encoding;
        const addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
        encoding = this.toIconvEncoding(encoding);
        if (encoding === encodings_1.UTF8 && !addBOM) {
            return value === undefined ? undefined : typeof value === 'string' ?
                buffer_1.BinaryBuffer.fromString(value) : buffer_1.BinaryBufferReadable.fromReadable(value);
        }
        value = value || '';
        const readable = typeof value === 'string' ? stream_1.Readable.fromString(value) : value;
        const encoder = iconv.getEncoder(encoding, { addBOM });
        let bytesWritten = false;
        let done = false;
        return {
            read() {
                if (done) {
                    return null;
                }
                const chunk = readable.read();
                if (typeof chunk !== 'string') {
                    done = true;
                    // If we are instructed to add a BOM but we detect that no
                    // bytes have been written, we must ensure to return the BOM
                    // ourselves so that we comply with the contract.
                    if (!bytesWritten && addBOM) {
                        switch (encoding) {
                            case encodings_1.UTF8:
                            case encodings_1.UTF8_with_bom:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF8_BOM));
                            case encodings_1.UTF16be:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16be_BOM));
                            case encodings_1.UTF16le:
                                return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16le_BOM));
                        }
                    }
                    const leftovers = encoder.end();
                    if (leftovers && leftovers.length > 0) {
                        bytesWritten = true;
                        return buffer_1.BinaryBuffer.wrap(leftovers);
                    }
                    return null;
                }
                bytesWritten = true;
                return buffer_1.BinaryBuffer.wrap(encoder.write(chunk));
            }
        };
    }
};
EncodingService = __decorate([
    (0, inversify_1.injectable)()
], EncodingService);
exports.EncodingService = EncodingService;


/***/ }),

/***/ "../../packages/core/lib/common/encodings.js":
/*!***************************************************!*\
  !*** ../../packages/core/lib/common/encodings.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UTF8_BOM = exports.UTF16le_BOM = exports.UTF16be_BOM = exports.UTF16le = exports.UTF16be = exports.UTF8_with_bom = exports.UTF8 = void 0;
exports.UTF8 = 'utf8';
exports.UTF8_with_bom = 'utf8bom';
exports.UTF16be = 'utf16be';
exports.UTF16le = 'utf16le';
exports.UTF16be_BOM = [0xFE, 0xFF];
exports.UTF16le_BOM = [0xFF, 0xFE];
exports.UTF8_BOM = [0xEF, 0xBB, 0xBF];


/***/ }),

/***/ "../../packages/core/lib/common/env-variables/env-variables-protocol.js":
/*!******************************************************************************!*\
  !*** ../../packages/core/lib/common/env-variables/env-variables-protocol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvVariablesServer = exports.envVariablesPath = void 0;
exports.envVariablesPath = '/services/envs';
exports.EnvVariablesServer = Symbol('EnvVariablesServer');


/***/ }),

/***/ "../../packages/core/lib/common/env-variables/index.js":
/*!*************************************************************!*\
  !*** ../../packages/core/lib/common/env-variables/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./env-variables-protocol */ "../../packages/core/lib/common/env-variables/env-variables-protocol.js"), exports);


/***/ }),

/***/ "../../packages/core/lib/common/i18n/localization-server.js":
/*!******************************************************************!*\
  !*** ../../packages/core/lib/common/i18n/localization-server.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalizationServer = exports.LocalizationServerPath = void 0;
exports.LocalizationServerPath = '/localization-server';
exports.LocalizationServer = Symbol('LocalizationServer');


/***/ }),

/***/ "../../packages/core/lib/common/keytar-protocol.js":
/*!*********************************************************!*\
  !*** ../../packages/core/lib/common/keytar-protocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeytarService = exports.keytarServicePath = void 0;
exports.keytarServicePath = '/services/keytar';
exports.KeytarService = Symbol('KeytarService');


/***/ }),

/***/ "../../packages/core/lib/common/messaging/web-socket-channel.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/common/messaging/web-socket-channel.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketChannel = void 0;
const uint8_array_message_buffer_1 = __webpack_require__(/*! ../message-rpc/uint8-array-message-buffer */ "../../packages/core/lib/common/message-rpc/uint8-array-message-buffer.js");
const channel_1 = __webpack_require__(/*! ../message-rpc/channel */ "../../packages/core/lib/common/message-rpc/channel.js");
const disposable_1 = __webpack_require__(/*! ../disposable */ "../../packages/core/lib/common/disposable.js");
/**
 * A channel that manages the main websocket connection between frontend and backend. All service channels
 * are reusing this main channel. (multiplexing). An {@link IWebSocket} abstraction is used to keep the implementation
 * independent of the actual websocket implementation and its execution context (backend vs. frontend).
 */
class WebSocketChannel extends channel_1.AbstractChannel {
    constructor(socket) {
        super();
        this.socket = socket;
        this.toDispose.push(disposable_1.Disposable.create(() => socket.close()));
        socket.onClose((reason, code) => this.onCloseEmitter.fire({ reason, code }));
        socket.onClose(() => this.close());
        socket.onError(error => this.onErrorEmitter.fire(error));
        socket.onMessage(data => this.onMessageEmitter.fire(() => {
            // In the browser context socketIO receives binary messages as ArrayBuffers.
            // So we have to convert them to a Uint8Array before delegating the message to the read buffer.
            const buffer = data instanceof ArrayBuffer ? new Uint8Array(data) : data;
            return new uint8_array_message_buffer_1.Uint8ArrayReadBuffer(buffer);
        }));
    }
    getWriteBuffer() {
        const result = new uint8_array_message_buffer_1.Uint8ArrayWriteBuffer();
        result.onCommit(buffer => {
            if (this.socket.isConnected()) {
                this.socket.send(buffer);
            }
        });
        return result;
    }
}
exports.WebSocketChannel = WebSocketChannel;
WebSocketChannel.wsPath = '/services';


/***/ }),

/***/ "../../packages/core/lib/common/preferences/preference-schema.js":
/*!***********************************************************************!*\
  !*** ../../packages/core/lib/common/preferences/preference-schema.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceDataProperty = exports.PreferenceSchemaProperties = exports.PreferenceSchema = void 0;
const preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../../packages/core/lib/common/preferences/preference-scope.js");
const types_1 = __webpack_require__(/*! ../types */ "../../packages/core/lib/common/types.js");
var PreferenceSchema;
(function (PreferenceSchema) {
    function is(obj) {
        return (0, types_1.isObject)(obj) && PreferenceSchemaProperties.is(obj.properties);
    }
    PreferenceSchema.is = is;
    function getDefaultScope(schema) {
        let defaultScope = preference_scope_1.PreferenceScope.Workspace;
        if (!preference_scope_1.PreferenceScope.is(schema.scope)) {
            defaultScope = preference_scope_1.PreferenceScope.fromString(schema.scope) || preference_scope_1.PreferenceScope.Workspace;
        }
        else {
            defaultScope = schema.scope;
        }
        return defaultScope;
    }
    PreferenceSchema.getDefaultScope = getDefaultScope;
})(PreferenceSchema = exports.PreferenceSchema || (exports.PreferenceSchema = {}));
var PreferenceSchemaProperties;
(function (PreferenceSchemaProperties) {
    function is(obj) {
        return (0, types_1.isObject)(obj);
    }
    PreferenceSchemaProperties.is = is;
})(PreferenceSchemaProperties = exports.PreferenceSchemaProperties || (exports.PreferenceSchemaProperties = {}));
var PreferenceDataProperty;
(function (PreferenceDataProperty) {
    function fromPreferenceSchemaProperty(schemaProps, defaultScope = preference_scope_1.PreferenceScope.Workspace) {
        if (!schemaProps.scope) {
            schemaProps.scope = defaultScope;
        }
        else if ((0, types_1.isString)(schemaProps.scope)) {
            return Object.assign(schemaProps, { scope: preference_scope_1.PreferenceScope.fromString(schemaProps.scope) || defaultScope });
        }
        return schemaProps;
    }
    PreferenceDataProperty.fromPreferenceSchemaProperty = fromPreferenceSchemaProperty;
})(PreferenceDataProperty = exports.PreferenceDataProperty || (exports.PreferenceDataProperty = {}));


/***/ }),

/***/ "../../packages/core/lib/common/preferences/preference-scope.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/common/preferences/preference-scope.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceScope = void 0;
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 2] = "Workspace";
    PreferenceScope[PreferenceScope["Folder"] = 3] = "Folder";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
(function (PreferenceScope) {
    function is(scope) {
        return typeof scope === 'number' && getScopes().includes(scope);
    }
    PreferenceScope.is = is;
    /**
     * @returns preference scopes from broadest to narrowest: Default -> Folder.
     */
    function getScopes() {
        return Object.values(PreferenceScope).filter(nameOrIndex => !isNaN(Number(nameOrIndex)));
    }
    PreferenceScope.getScopes = getScopes;
    /**
     * @returns preference scopes from narrowest to broadest. Folder -> Default.
     */
    function getReversedScopes() {
        return getScopes().reverse();
    }
    PreferenceScope.getReversedScopes = getReversedScopes;
    function getScopeNames(scope) {
        const names = [];
        const scopes = getScopes();
        if (scope) {
            for (const scopeIndex of scopes) {
                if (scopeIndex <= scope) {
                    names.push(PreferenceScope[scopeIndex]);
                }
            }
        }
        return names;
    }
    PreferenceScope.getScopeNames = getScopeNames;
    function fromString(strScope) {
        switch (strScope) {
            case 'application':
                return PreferenceScope.User;
            case 'window':
                return PreferenceScope.Folder;
            case 'resource':
                return PreferenceScope.Folder;
            case 'language-overridable':
                return PreferenceScope.Folder;
        }
    }
    PreferenceScope.fromString = fromString;
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));


/***/ }),

/***/ "../../packages/core/lib/node/application-server.js":
/*!**********************************************************!*\
  !*** ../../packages/core/lib/node/application-server.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationServerImpl = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const application_package_1 = __webpack_require__(/*! @theia/application-package */ "../../dev-packages/application-package/lib/index.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../../packages/core/lib/common/os.js");
let ApplicationServerImpl = class ApplicationServerImpl {
    getExtensionsInfos() {
        const extensions = this.applicationPackage.extensionPackages;
        const infos = extensions.map(extension => ({ name: extension.name, version: extension.version }));
        return Promise.resolve(infos);
    }
    getApplicationInfo() {
        const pck = this.applicationPackage.pck;
        if (pck.name && pck.version) {
            const name = pck.name;
            const version = pck.version;
            return Promise.resolve({ name, version });
        }
        return Promise.resolve(undefined);
    }
    async getBackendOS() {
        return os_1.OS.type();
    }
};
__decorate([
    (0, inversify_1.inject)(application_package_1.ApplicationPackage),
    __metadata("design:type", application_package_1.ApplicationPackage)
], ApplicationServerImpl.prototype, "applicationPackage", void 0);
ApplicationServerImpl = __decorate([
    (0, inversify_1.injectable)()
], ApplicationServerImpl);
exports.ApplicationServerImpl = ApplicationServerImpl;


/***/ }),

/***/ "../../packages/core/lib/node/backend-application-config-provider.js":
/*!***************************************************************************!*\
  !*** ../../packages/core/lib/node/backend-application-config-provider.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackendApplicationConfigProvider = void 0;
const application_props_1 = __webpack_require__(/*! @theia/application-package/lib/application-props */ "../../dev-packages/application-package/lib/application-props.js");
class BackendApplicationConfigProvider {
    static get() {
        const config = BackendApplicationConfigProvider.doGet();
        if (config === undefined) {
            throw new Error('The configuration is not set. Did you call BackendApplicationConfigProvider#set?');
        }
        return config;
    }
    static set(config) {
        if (BackendApplicationConfigProvider.doGet() !== undefined) {
            throw new Error('The configuration is already set.');
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalObject = global;
        const key = BackendApplicationConfigProvider.KEY;
        globalObject[key] = (0, application_props_1.deepmerge)(application_props_1.BackendApplicationConfig.DEFAULT, config);
    }
    static doGet() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalObject = global;
        const key = BackendApplicationConfigProvider.KEY;
        return globalObject[key];
    }
}
exports.BackendApplicationConfigProvider = BackendApplicationConfigProvider;
BackendApplicationConfigProvider.KEY = Symbol('BackendApplicationConfigProvider');


/***/ }),

/***/ "../../packages/core/lib/node/backend-application-module.js":
/*!******************************************************************!*\
  !*** ../../packages/core/lib/node/backend-application-module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.backendApplicationModule = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const application_package_1 = __webpack_require__(/*! @theia/application-package */ "../../dev-packages/application-package/lib/index.js");
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/core/lib/common/index.js");
const backend_application_1 = __webpack_require__(/*! ./backend-application */ "../../packages/core/lib/node/backend-application.js");
const cli_1 = __webpack_require__(/*! ./cli */ "../../packages/core/lib/node/cli.js");
const messaging_1 = __webpack_require__(/*! ./messaging */ "../../packages/core/lib/node/messaging/index.js");
const application_server_1 = __webpack_require__(/*! ./application-server */ "../../packages/core/lib/node/application-server.js");
const application_protocol_1 = __webpack_require__(/*! ../common/application-protocol */ "../../packages/core/lib/common/application-protocol.js");
const env_variables_1 = __webpack_require__(/*! ./../common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const env_variables_2 = __webpack_require__(/*! ./env-variables */ "../../packages/core/lib/node/env-variables/index.js");
const connection_container_module_1 = __webpack_require__(/*! ./messaging/connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const quick_pick_service_1 = __webpack_require__(/*! ../common/quick-pick-service */ "../../packages/core/lib/common/quick-pick-service.js");
const ws_request_validators_1 = __webpack_require__(/*! ./ws-request-validators */ "../../packages/core/lib/node/ws-request-validators.js");
const keytar_protocol_1 = __webpack_require__(/*! ../common/keytar-protocol */ "../../packages/core/lib/common/keytar-protocol.js");
const keytar_server_1 = __webpack_require__(/*! ./keytar-server */ "../../packages/core/lib/node/keytar-server.js");
const contribution_filter_1 = __webpack_require__(/*! ../common/contribution-filter */ "../../packages/core/lib/common/contribution-filter/index.js");
const environment_utils_1 = __webpack_require__(/*! ./environment-utils */ "../../packages/core/lib/node/environment-utils.js");
const process_utils_1 = __webpack_require__(/*! ./process-utils */ "../../packages/core/lib/node/process-utils.js");
const proxy_cli_contribution_1 = __webpack_require__(/*! ./request/proxy-cli-contribution */ "../../packages/core/lib/node/request/proxy-cli-contribution.js");
const performance_1 = __webpack_require__(/*! ./performance */ "../../packages/core/lib/node/performance/index.js");
const os_backend_provider_1 = __webpack_require__(/*! ./os-backend-provider */ "../../packages/core/lib/node/os-backend-provider.js");
const backend_request_facade_1 = __webpack_require__(/*! ./request/backend-request-facade */ "../../packages/core/lib/node/request/backend-request-facade.js");
const filesystem_locking_1 = __webpack_require__(/*! ./filesystem-locking */ "../../packages/core/lib/node/filesystem-locking.js");
(0, inversify_1.decorate)((0, inversify_1.injectable)(), application_package_1.ApplicationPackage);
const commandConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bindFrontendService }) => {
    bindFrontendService(common_1.commandServicePath, common_1.CommandService);
});
const messageConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind, bindFrontendService }) => {
    bindFrontendService(common_1.messageServicePath, common_1.MessageClient);
    bind(common_1.MessageService).toSelf().inSingletonScope();
});
const quickPickConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bindFrontendService }) => {
    bindFrontendService(quick_pick_service_1.quickPickServicePath, quick_pick_service_1.QuickPickService);
});
exports.backendApplicationModule = new inversify_1.ContainerModule(bind => {
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(commandConnectionModule);
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(messageConnectionModule);
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(quickPickConnectionModule);
    bind(cli_1.CliManager).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, cli_1.CliContribution);
    bind(backend_application_1.BackendApplicationCliContribution).toSelf().inSingletonScope();
    bind(cli_1.CliContribution).toService(backend_application_1.BackendApplicationCliContribution);
    bind(backend_application_1.BackendApplication).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, backend_application_1.BackendApplicationContribution);
    // Bind the BackendApplicationServer as a BackendApplicationContribution
    // and fallback to an empty contribution if never bound.
    bind(backend_application_1.BackendApplicationContribution).toDynamicValue(ctx => {
        if (ctx.container.isBound(backend_application_1.BackendApplicationServer)) {
            return ctx.container.get(backend_application_1.BackendApplicationServer);
        }
        else {
            console.warn('no BackendApplicationServer is set, frontend might not be available');
            return {};
        }
    }).inSingletonScope();
    bind(messaging_1.IPCConnectionProvider).toSelf().inSingletonScope();
    bind(application_server_1.ApplicationServerImpl).toSelf().inSingletonScope();
    bind(application_protocol_1.ApplicationServer).toService(application_server_1.ApplicationServerImpl);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(application_protocol_1.applicationPath, () => ctx.container.get(application_protocol_1.ApplicationServer))).inSingletonScope();
    bind(env_variables_1.EnvVariablesServer).to(env_variables_2.EnvVariablesServerImpl).inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(env_variables_1.envVariablesPath, () => {
        const envVariablesServer = ctx.container.get(env_variables_1.EnvVariablesServer);
        return envVariablesServer;
    })).inSingletonScope();
    bind(application_package_1.ApplicationPackage).toDynamicValue(({ container }) => {
        const { projectPath } = container.get(backend_application_1.BackendApplicationCliContribution);
        return new application_package_1.ApplicationPackage({ projectPath });
    }).inSingletonScope();
    bind(ws_request_validators_1.WsRequestValidator).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, ws_request_validators_1.WsRequestValidatorContribution);
    bind(keytar_protocol_1.KeytarService).to(keytar_server_1.KeytarServiceImpl).inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(keytar_protocol_1.keytarServicePath, () => ctx.container.get(keytar_protocol_1.KeytarService))).inSingletonScope();
    bind(contribution_filter_1.ContributionFilterRegistry).to(contribution_filter_1.ContributionFilterRegistryImpl).inSingletonScope();
    bind(environment_utils_1.EnvironmentUtils).toSelf().inSingletonScope();
    bind(process_utils_1.ProcessUtils).toSelf().inSingletonScope();
    bind(os_backend_provider_1.OSBackendProviderImpl).toSelf().inSingletonScope();
    bind(common_1.OSBackendProvider).toService(os_backend_provider_1.OSBackendProviderImpl);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(common_1.OSBackendProviderPath, () => ctx.container.get(common_1.OSBackendProvider))).inSingletonScope();
    bind(proxy_cli_contribution_1.ProxyCliContribution).toSelf().inSingletonScope();
    bind(cli_1.CliContribution).toService(proxy_cli_contribution_1.ProxyCliContribution);
    bind(backend_request_facade_1.BackendRequestFacade).toSelf().inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(request_1.REQUEST_SERVICE_PATH, () => ctx.container.get(backend_request_facade_1.BackendRequestFacade))).inSingletonScope();
    (0, performance_1.bindNodeStopwatch)(bind);
    (0, performance_1.bindBackendStopwatchServer)(bind);
    bind(filesystem_locking_1.FileSystemLocking).to(filesystem_locking_1.FileSystemLockingImpl).inSingletonScope();
});


/***/ }),

/***/ "../../packages/core/lib/node/console-logger-server.js":
/*!*************************************************************!*\
  !*** ../../packages/core/lib/node/console-logger-server.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLoggerServer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const logger_watcher_1 = __webpack_require__(/*! ../common/logger-watcher */ "../../packages/core/lib/common/logger-watcher.js");
const logger_cli_contribution_1 = __webpack_require__(/*! ./logger-cli-contribution */ "../../packages/core/lib/node/logger-cli-contribution.js");
const logger_protocol_1 = __webpack_require__(/*! ../common/logger-protocol */ "../../packages/core/lib/common/logger-protocol.js");
let ConsoleLoggerServer = class ConsoleLoggerServer {
    constructor() {
        this.client = undefined;
    }
    init() {
        for (const name of Object.keys(this.cli.logLevels)) {
            this.setLogLevel(name, this.cli.logLevels[name]);
        }
    }
    async setLogLevel(name, newLogLevel) {
        const event = {
            loggerName: name,
            newLogLevel
        };
        if (this.client !== undefined) {
            this.client.onLogLevelChanged(event);
        }
        this.watcher.fireLogLevelChanged(event);
    }
    async getLogLevel(name) {
        return this.cli.logLevelFor(name);
    }
    /* eslint-disable @typescript-eslint/no-explicit-any */
    async log(name, logLevel, message, params) {
        const configuredLogLevel = await this.getLogLevel(name);
        if (logLevel >= configuredLogLevel) {
            logger_protocol_1.ConsoleLogger.log(name, logLevel, message, params);
        }
    }
    async child(name) {
        this.setLogLevel(name, this.cli.logLevelFor(name));
    }
    dispose() { }
    setClient(client) {
        this.client = client;
    }
};
__decorate([
    (0, inversify_1.inject)(logger_watcher_1.LoggerWatcher),
    __metadata("design:type", logger_watcher_1.LoggerWatcher)
], ConsoleLoggerServer.prototype, "watcher", void 0);
__decorate([
    (0, inversify_1.inject)(logger_cli_contribution_1.LogLevelCliContribution),
    __metadata("design:type", logger_cli_contribution_1.LogLevelCliContribution)
], ConsoleLoggerServer.prototype, "cli", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ConsoleLoggerServer.prototype, "init", null);
ConsoleLoggerServer = __decorate([
    (0, inversify_1.injectable)()
], ConsoleLoggerServer);
exports.ConsoleLoggerServer = ConsoleLoggerServer;


/***/ }),

/***/ "../../packages/core/lib/node/env-variables/env-variables-server.js":
/*!**************************************************************************!*\
  !*** ../../packages/core/lib/node/env-variables/env-variables-server.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018-2020 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvVariablesServerImpl = void 0;
const path_1 = __webpack_require__(/*! path */ "path");
const os_1 = __webpack_require__(/*! os */ "os");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const drivelist = __webpack_require__(/*! drivelist */ "../../node_modules/drivelist/js/index.js");
const os_2 = __webpack_require__(/*! ../../common/os */ "../../packages/core/lib/common/os.js");
const file_uri_1 = __webpack_require__(/*! ../file-uri */ "../../packages/core/lib/node/file-uri.js");
let EnvVariablesServerImpl = class EnvVariablesServerImpl {
    constructor() {
        this.envs = {};
        this.homeDirUri = file_uri_1.FileUri.create((0, os_1.homedir)()).toString();
        this.configDirUri = this.createConfigDirUri();
        this.configDirUri.then(configDirUri => console.log(`Configuration directory URI: '${configDirUri}'`));
        const prEnv = process.env;
        Object.keys(prEnv).forEach((key) => {
            let keyName = key;
            if (os_2.isWindows) {
                keyName = key.toLowerCase();
            }
            this.envs[keyName] = { 'name': keyName, 'value': prEnv[key] };
        });
    }
    async createConfigDirUri() {
        return file_uri_1.FileUri.create(process.env.THEIA_CONFIG_DIR || (0, path_1.join)((0, os_1.homedir)(), '.theia')).toString();
    }
    async getExecPath() {
        return process.execPath;
    }
    async getVariables() {
        return Object.keys(this.envs).map(key => this.envs[key]);
    }
    async getValue(key) {
        if (os_2.isWindows) {
            key = key.toLowerCase();
        }
        return this.envs[key];
    }
    getConfigDirUri() {
        return this.configDirUri;
    }
    async getHomeDirUri() {
        return this.homeDirUri;
    }
    async getDrives() {
        const uris = [];
        const drives = await drivelist.list();
        for (const drive of drives) {
            for (const mountpoint of drive.mountpoints) {
                if (this.filterHiddenPartitions(mountpoint.path)) {
                    uris.push(file_uri_1.FileUri.create(mountpoint.path).toString());
                }
            }
        }
        return uris;
    }
    /**
     * Filters hidden and system partitions.
     */
    filterHiddenPartitions(path) {
        // OS X: This is your sleep-image. When your Mac goes to sleep it writes the contents of its memory to the hard disk. (https://bit.ly/2R6cztl)
        if (path === '/private/var/vm') {
            return false;
        }
        // Ubuntu: This system partition is simply the boot partition created when the computers mother board runs UEFI rather than BIOS. (https://bit.ly/2N5duHr)
        if (path === '/boot/efi') {
            return false;
        }
        return true;
    }
};
EnvVariablesServerImpl = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], EnvVariablesServerImpl);
exports.EnvVariablesServerImpl = EnvVariablesServerImpl;


/***/ }),

/***/ "../../packages/core/lib/node/env-variables/index.js":
/*!***********************************************************!*\
  !*** ../../packages/core/lib/node/env-variables/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./env-variables-server */ "../../packages/core/lib/node/env-variables/env-variables-server.js"), exports);


/***/ }),

/***/ "../../packages/core/lib/node/environment-utils.js":
/*!*********************************************************!*\
  !*** ../../packages/core/lib/node/environment-utils.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentUtils = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
let EnvironmentUtils = class EnvironmentUtils {
    /**
     * Merge a given record of environment variables with the process environment variables.
     * Empty string values will not be included in the final env.
     * @param env desired environment to merge with `process.env`.
     * @returns a normalized merged record of valid environment variables.
     */
    mergeProcessEnv(env = {}) {
        env = this.normalizeEnv(env);
        // eslint-disable-next-line no-null/no-null
        const mergedEnv = Object.create(null);
        for (const [key, value] of Object.entries(this.normalizeEnv(process.env))) {
            // Ignore keys from `process.env` that are overridden in `env`. Accept only non-empty strings.
            if (!(key in env) && value) {
                mergedEnv[key] = value;
            }
        }
        for (const [key, value] of Object.entries(env)) {
            // Accept only non-empty strings from the `env` object.
            if (value) {
                mergedEnv[key] = value;
            }
        }
        return mergedEnv;
    }
    /**
     * Normalize an environment record for a given OS.
     *
     * On Windows it will uppercase all keys.
     *
     * @param env Environment variables map to normalize.
     * @param platform Platform to normalize for.
     * @returns New object with normalized environment variables.
     */
    normalizeEnv(env) {
        if (this.getPlatform() !== 'win32') {
            return { ...env };
        }
        const normalized = {};
        for (const [key, value] of Object.entries(env)) {
            normalized[key.toLocaleUpperCase()] = value;
        }
        return normalized;
    }
    getPlatform() {
        return process.platform;
    }
};
EnvironmentUtils = __decorate([
    (0, inversify_1.injectable)()
], EnvironmentUtils);
exports.EnvironmentUtils = EnvironmentUtils;


/***/ }),

/***/ "../../packages/core/lib/node/hosting/backend-application-hosts.js":
/*!*************************************************************************!*\
  !*** ../../packages/core/lib/node/hosting/backend-application-hosts.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackendApplicationHosts = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
/**
 * **Important: This component is not bound on Electron.**
 *
 * Component handling the different hosts the Theia backend should be reachable at.
 *
 * Hosts should be set through the `THEIA_HOSTS` environment variable as a comma-separated list of hosts.
 *
 * If you do not set this variable, we'll consider that we don't know where the application is hosted at.
 */
let BackendApplicationHosts = class BackendApplicationHosts {
    constructor() {
        this._hosts = new Set();
    }
    /**
     * Set of domains that the application is supposed to be reachable at.
     * If the set is empty it means that we don't know where we are hosted.
     * You can check for this with `.hasKnownHosts()`.
     */
    get hosts() {
        return this._hosts;
    }
    init() {
        const theiaHostsEnv = process.env['THEIA_HOSTS'];
        if (theiaHostsEnv) {
            theiaHostsEnv.split(',').forEach(host => {
                const trimmed = host.trim();
                if (trimmed.length > 0) {
                    this._hosts.add(trimmed);
                }
            });
        }
    }
    /**
     * Do we know where we are hosted?
     */
    hasKnownHosts() {
        return this._hosts.size > 0;
    }
};
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BackendApplicationHosts.prototype, "init", null);
BackendApplicationHosts = __decorate([
    (0, inversify_1.injectable)()
], BackendApplicationHosts);
exports.BackendApplicationHosts = BackendApplicationHosts;


/***/ }),

/***/ "../../packages/core/lib/node/hosting/backend-hosting-module.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/node/hosting/backend-hosting-module.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const ws_request_validators_1 = __webpack_require__(/*! ../ws-request-validators */ "../../packages/core/lib/node/ws-request-validators.js");
const backend_application_hosts_1 = __webpack_require__(/*! ./backend-application-hosts */ "../../packages/core/lib/node/hosting/backend-application-hosts.js");
const ws_origin_validator_1 = __webpack_require__(/*! ./ws-origin-validator */ "../../packages/core/lib/node/hosting/ws-origin-validator.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(backend_application_hosts_1.BackendApplicationHosts).toSelf().inSingletonScope();
    bind(ws_origin_validator_1.WsOriginValidator).toSelf().inSingletonScope();
    bind(ws_request_validators_1.WsRequestValidatorContribution).toService(ws_origin_validator_1.WsOriginValidator);
});


/***/ }),

/***/ "../../packages/core/lib/node/hosting/ws-origin-validator.js":
/*!*******************************************************************!*\
  !*** ../../packages/core/lib/node/hosting/ws-origin-validator.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WsOriginValidator = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const url = __webpack_require__(/*! url */ "url");
const backend_application_hosts_1 = __webpack_require__(/*! ./backend-application-hosts */ "../../packages/core/lib/node/hosting/backend-application-hosts.js");
let WsOriginValidator = class WsOriginValidator {
    allowWsUpgrade(request) {
        if (!this.backendApplicationHosts.hasKnownHosts() || !request.headers.origin) {
            return true;
        }
        const origin = url.parse(request.headers.origin);
        return this.backendApplicationHosts.hosts.has(origin.host);
    }
};
__decorate([
    (0, inversify_1.inject)(backend_application_hosts_1.BackendApplicationHosts),
    __metadata("design:type", backend_application_hosts_1.BackendApplicationHosts)
], WsOriginValidator.prototype, "backendApplicationHosts", void 0);
WsOriginValidator = __decorate([
    (0, inversify_1.injectable)()
], WsOriginValidator);
exports.WsOriginValidator = WsOriginValidator;


/***/ }),

/***/ "../../packages/core/lib/node/i18n/i18n-backend-module.js":
/*!****************************************************************!*\
  !*** ../../packages/core/lib/node/i18n/i18n-backend-module.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const localization_1 = __webpack_require__(/*! ../../common/i18n/localization */ "../../packages/core/lib/common/i18n/localization.js");
const localization_provider_1 = __webpack_require__(/*! ./localization-provider */ "../../packages/core/lib/node/i18n/localization-provider.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const localization_contribution_1 = __webpack_require__(/*! ./localization-contribution */ "../../packages/core/lib/node/i18n/localization-contribution.js");
const localization_server_1 = __webpack_require__(/*! ./localization-server */ "../../packages/core/lib/node/i18n/localization-server.js");
const theia_localization_contribution_1 = __webpack_require__(/*! ./theia-localization-contribution */ "../../packages/core/lib/node/i18n/theia-localization-contribution.js");
const localization_server_2 = __webpack_require__(/*! ../../common/i18n/localization-server */ "../../packages/core/lib/common/i18n/localization-server.js");
const backend_application_1 = __webpack_require__(/*! ../backend-application */ "../../packages/core/lib/node/backend-application.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(localization_provider_1.LocalizationProvider).toSelf().inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(localization_1.localizationPath, () => ctx.container.get(localization_provider_1.LocalizationProvider))).inSingletonScope();
    bind(localization_contribution_1.LocalizationRegistry).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, localization_contribution_1.LocalizationContribution);
    bind(localization_server_1.LocalizationServerImpl).toSelf().inSingletonScope();
    bind(localization_server_2.LocalizationServer).toService(localization_server_1.LocalizationServerImpl);
    bind(backend_application_1.BackendApplicationContribution).toService(localization_server_1.LocalizationServerImpl);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(localization_server_2.LocalizationServerPath, () => ctx.container.get(localization_server_2.LocalizationServer))).inSingletonScope();
    bind(theia_localization_contribution_1.TheiaLocalizationContribution).toSelf().inSingletonScope();
    bind(localization_contribution_1.LocalizationContribution).toService(theia_localization_contribution_1.TheiaLocalizationContribution);
});


/***/ }),

/***/ "../../packages/core/lib/node/i18n/localization-contribution.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/node/i18n/localization-contribution.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalizationRegistry = exports.LocalizationContribution = void 0;
const fs = __webpack_require__(/*! fs-extra */ "../../node_modules/fs-extra/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const localization_provider_1 = __webpack_require__(/*! ./localization-provider */ "../../packages/core/lib/node/i18n/localization-provider.js");
exports.LocalizationContribution = Symbol('LocalizationContribution');
let LocalizationRegistry = class LocalizationRegistry {
    async initialize() {
        await Promise.all(this.contributions.getContributions().map(contribution => contribution.registerLocalizations(this)));
    }
    registerLocalization(localization) {
        this.localizationProvider.addLocalizations(localization);
    }
    registerLocalizationFromRequire(locale, required) {
        const translations = this.flattenTranslations(required);
        this.registerLocalization(this.createLocalization(locale, translations));
    }
    async registerLocalizationFromFile(localizationPath, locale) {
        if (!locale) {
            locale = this.identifyLocale(localizationPath);
        }
        if (!locale) {
            throw new Error('Could not determine locale from path.');
        }
        const translationJson = await fs.readJson(localizationPath);
        const translations = this.flattenTranslations(translationJson);
        this.registerLocalization(this.createLocalization(locale, translations));
    }
    createLocalization(locale, translations) {
        let localization;
        if (typeof locale === 'string') {
            localization = {
                languageId: locale,
                translations
            };
        }
        else {
            localization = {
                ...locale,
                translations
            };
        }
        return localization;
    }
    flattenTranslations(localization) {
        if ((0, common_1.isObject)(localization)) {
            const record = {};
            for (const [key, value] of Object.entries(localization)) {
                if (typeof value === 'string') {
                    record[key] = value;
                }
                else if ((0, common_1.isObject)(value)) {
                    const flattened = this.flattenTranslations(value);
                    for (const [flatKey, flatValue] of Object.entries(flattened)) {
                        record[`${key}/${flatKey}`] = flatValue;
                    }
                }
            }
            return record;
        }
        else {
            return {};
        }
    }
    identifyLocale(localizationPath) {
        const regex = /nls\.(\w+)\.json$/i;
        const match = regex.exec(localizationPath);
        if (match) {
            return match[1];
        }
        return undefined;
    }
};
__decorate([
    (0, inversify_1.inject)(localization_provider_1.LocalizationProvider),
    __metadata("design:type", localization_provider_1.LocalizationProvider)
], LocalizationRegistry.prototype, "localizationProvider", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.LocalizationContribution),
    __metadata("design:type", Object)
], LocalizationRegistry.prototype, "contributions", void 0);
LocalizationRegistry = __decorate([
    (0, inversify_1.injectable)()
], LocalizationRegistry);
exports.LocalizationRegistry = LocalizationRegistry;


/***/ }),

/***/ "../../packages/core/lib/node/i18n/localization-provider.js":
/*!******************************************************************!*\
  !*** ../../packages/core/lib/node/i18n/localization-provider.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalizationProvider = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../../packages/core/lib/common/nls.js");
let LocalizationProvider = class LocalizationProvider {
    constructor() {
        this.localizations = [];
        this.currentLanguage = nls_1.nls.defaultLocale;
    }
    addLocalizations(...localizations) {
        this.localizations.push(...localizations);
    }
    removeLocalizations(...localizations) {
        for (const localization of localizations) {
            const index = this.localizations.indexOf(localization);
            if (index >= 0) {
                this.localizations.splice(index, 1);
            }
        }
    }
    setCurrentLanguage(languageId) {
        this.currentLanguage = languageId;
    }
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    getAvailableLanguages(all) {
        var _a;
        const languageInfos = new Map();
        for (const localization of this.localizations.values()) {
            if (all || localization.languagePack) {
                const languageInfo = (_a = languageInfos.get(localization.languageId)) !== null && _a !== void 0 ? _a : {
                    languageId: localization.languageId
                };
                languageInfo.languageName || (languageInfo.languageName = localization.languageName);
                languageInfo.localizedLanguageName || (languageInfo.localizedLanguageName = localization.localizedLanguageName);
                languageInfo.languagePack || (languageInfo.languagePack = localization.languagePack);
                languageInfos.set(localization.languageId, languageInfo);
            }
        }
        return Array.from(languageInfos.values()).sort((a, b) => a.languageId.localeCompare(b.languageId));
    }
    loadLocalization(languageId) {
        const merged = {
            languageId,
            translations: {}
        };
        for (const localization of this.localizations.filter(e => e.languageId === languageId)) {
            merged.languageName || (merged.languageName = localization.languageName);
            merged.localizedLanguageName || (merged.localizedLanguageName = localization.localizedLanguageName);
            merged.languagePack || (merged.languagePack = localization.languagePack);
            Object.assign(merged.translations, localization.translations);
        }
        return merged;
    }
};
LocalizationProvider = __decorate([
    (0, inversify_1.injectable)()
], LocalizationProvider);
exports.LocalizationProvider = LocalizationProvider;


/***/ }),

/***/ "../../packages/core/lib/node/i18n/localization-server.js":
/*!****************************************************************!*\
  !*** ../../packages/core/lib/node/i18n/localization-server.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalizationServerImpl = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const nls_1 = __webpack_require__(/*! ../../common/nls */ "../../packages/core/lib/common/nls.js");
const promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const localization_contribution_1 = __webpack_require__(/*! ./localization-contribution */ "../../packages/core/lib/node/i18n/localization-contribution.js");
const localization_provider_1 = __webpack_require__(/*! ./localization-provider */ "../../packages/core/lib/node/i18n/localization-provider.js");
let LocalizationServerImpl = class LocalizationServerImpl {
    constructor() {
        this.initialized = new promise_util_1.Deferred();
    }
    async initialize() {
        await this.localizationRegistry.initialize();
        this.initialized.resolve();
    }
    waitForInitialization() {
        return this.initialized.promise;
    }
    async loadLocalization(languageId) {
        await this.waitForInitialization();
        languageId = this.localizationProvider.getAvailableLanguages().some(e => e.languageId === languageId) ? languageId : nls_1.nls.defaultLocale;
        this.localizationProvider.setCurrentLanguage(languageId);
        return this.localizationProvider.loadLocalization(languageId);
    }
};
__decorate([
    (0, inversify_1.inject)(localization_contribution_1.LocalizationRegistry),
    __metadata("design:type", localization_contribution_1.LocalizationRegistry)
], LocalizationServerImpl.prototype, "localizationRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(localization_provider_1.LocalizationProvider),
    __metadata("design:type", localization_provider_1.LocalizationProvider)
], LocalizationServerImpl.prototype, "localizationProvider", void 0);
LocalizationServerImpl = __decorate([
    (0, inversify_1.injectable)()
], LocalizationServerImpl);
exports.LocalizationServerImpl = LocalizationServerImpl;


/***/ }),

/***/ "../../packages/core/lib/node/i18n/theia-localization-contribution.js":
/*!****************************************************************************!*\
  !*** ../../packages/core/lib/node/i18n/theia-localization-contribution.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaLocalizationContribution = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
let TheiaLocalizationContribution = class TheiaLocalizationContribution {
    async registerLocalizations(registry) {
        registry.registerLocalizationFromRequire('cs', __webpack_require__(/*! ../../../i18n/nls.cs.json */ "../../packages/core/i18n/nls.cs.json"));
        registry.registerLocalizationFromRequire('de', __webpack_require__(/*! ../../../i18n/nls.de.json */ "../../packages/core/i18n/nls.de.json"));
        registry.registerLocalizationFromRequire('es', __webpack_require__(/*! ../../../i18n/nls.es.json */ "../../packages/core/i18n/nls.es.json"));
        registry.registerLocalizationFromRequire('fr', __webpack_require__(/*! ../../../i18n/nls.fr.json */ "../../packages/core/i18n/nls.fr.json"));
        registry.registerLocalizationFromRequire('hu', __webpack_require__(/*! ../../../i18n/nls.hu.json */ "../../packages/core/i18n/nls.hu.json"));
        registry.registerLocalizationFromRequire('it', __webpack_require__(/*! ../../../i18n/nls.it.json */ "../../packages/core/i18n/nls.it.json"));
        registry.registerLocalizationFromRequire('ja', __webpack_require__(/*! ../../../i18n/nls.ja.json */ "../../packages/core/i18n/nls.ja.json"));
        registry.registerLocalizationFromRequire('pl', __webpack_require__(/*! ../../../i18n/nls.pl.json */ "../../packages/core/i18n/nls.pl.json"));
        registry.registerLocalizationFromRequire('pt-br', __webpack_require__(/*! ../../../i18n/nls.pt-br.json */ "../../packages/core/i18n/nls.pt-br.json"));
        registry.registerLocalizationFromRequire('pt-pt', __webpack_require__(/*! ../../../i18n/nls.pt-pt.json */ "../../packages/core/i18n/nls.pt-pt.json"));
        registry.registerLocalizationFromRequire('ru', __webpack_require__(/*! ../../../i18n/nls.ru.json */ "../../packages/core/i18n/nls.ru.json"));
        registry.registerLocalizationFromRequire('zh-cn', __webpack_require__(/*! ../../../i18n/nls.zh-cn.json */ "../../packages/core/i18n/nls.zh-cn.json"));
    }
};
TheiaLocalizationContribution = __decorate([
    (0, inversify_1.injectable)()
], TheiaLocalizationContribution);
exports.TheiaLocalizationContribution = TheiaLocalizationContribution;


/***/ }),

/***/ "../../packages/core/lib/node/keytar-server.js":
/*!*****************************************************!*\
  !*** ../../packages/core/lib/node/keytar-server.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var KeytarServiceImpl_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeytarServiceImpl = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/core/lib/common/index.js");
const keytar = __webpack_require__(/*! keytar */ "../../node_modules/keytar/lib/keytar.js");
let KeytarServiceImpl = KeytarServiceImpl_1 = class KeytarServiceImpl {
    async setPassword(service, account, password) {
        if (common_1.isWindows && password.length > KeytarServiceImpl_1.MAX_PASSWORD_LENGTH) {
            let index = 0;
            let chunk = 0;
            let hasNextChunk = true;
            while (hasNextChunk) {
                const passwordChunk = password.substring(index, index + KeytarServiceImpl_1.PASSWORD_CHUNK_SIZE);
                index += KeytarServiceImpl_1.PASSWORD_CHUNK_SIZE;
                hasNextChunk = password.length - index > 0;
                const content = {
                    content: passwordChunk,
                    hasNextChunk: hasNextChunk
                };
                await keytar.setPassword(service, chunk ? `${account}-${chunk}` : account, JSON.stringify(content));
                chunk++;
            }
        }
        else {
            await keytar.setPassword(service, account, password);
        }
    }
    deletePassword(service, account) {
        return keytar.deletePassword(service, account);
    }
    async getPassword(service, account) {
        const password = await keytar.getPassword(service, account);
        if (password) {
            try {
                let { content, hasNextChunk } = JSON.parse(password);
                if (!content || !hasNextChunk) {
                    return password;
                }
                let index = 1;
                while (hasNextChunk) {
                    const nextChunk = await keytar.getPassword(service, `${account}-${index++}`);
                    const result = JSON.parse(nextChunk);
                    content += result.content;
                    hasNextChunk = result.hasNextChunk;
                }
                return content;
            }
            catch {
                return password;
            }
        }
    }
    async findPassword(service) {
        const password = await keytar.findPassword(service);
        if (password) {
            return password;
        }
    }
    async findCredentials(service) {
        return keytar.findCredentials(service);
    }
};
KeytarServiceImpl.MAX_PASSWORD_LENGTH = 2500;
KeytarServiceImpl.PASSWORD_CHUNK_SIZE = KeytarServiceImpl_1.MAX_PASSWORD_LENGTH - 100;
KeytarServiceImpl = KeytarServiceImpl_1 = __decorate([
    (0, inversify_1.injectable)()
], KeytarServiceImpl);
exports.KeytarServiceImpl = KeytarServiceImpl;


/***/ }),

/***/ "../../packages/core/lib/node/logger-backend-module.js":
/*!*************************************************************!*\
  !*** ../../packages/core/lib/node/logger-backend-module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loggerBackendModule = exports.bindLogger = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const messaging_1 = __webpack_require__(/*! ../common/messaging */ "../../packages/core/lib/common/messaging/index.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../../packages/core/lib/common/logger.js");
const logger_protocol_1 = __webpack_require__(/*! ../common/logger-protocol */ "../../packages/core/lib/common/logger-protocol.js");
const console_logger_server_1 = __webpack_require__(/*! ./console-logger-server */ "../../packages/core/lib/node/console-logger-server.js");
const logger_watcher_1 = __webpack_require__(/*! ../common/logger-watcher */ "../../packages/core/lib/common/logger-watcher.js");
const backend_application_1 = __webpack_require__(/*! ./backend-application */ "../../packages/core/lib/node/backend-application.js");
const cli_1 = __webpack_require__(/*! ./cli */ "../../packages/core/lib/node/cli.js");
const logger_cli_contribution_1 = __webpack_require__(/*! ./logger-cli-contribution */ "../../packages/core/lib/node/logger-cli-contribution.js");
function bindLogger(bind, props) {
    bind(logger_1.LoggerName).toConstantValue(logger_1.rootLoggerName);
    bind(logger_1.ILogger).to(logger_1.Logger).inSingletonScope().whenTargetIsDefault();
    bind(logger_watcher_1.LoggerWatcher).toSelf().inSingletonScope();
    bind(logger_protocol_1.ILoggerServer).to(console_logger_server_1.ConsoleLoggerServer).inSingletonScope().onActivation((context, server) => {
        if (props && props.onLoggerServerActivation) {
            props.onLoggerServerActivation(context, server);
        }
        return server;
    });
    bind(logger_cli_contribution_1.LogLevelCliContribution).toSelf().inSingletonScope();
    bind(cli_1.CliContribution).toService(logger_cli_contribution_1.LogLevelCliContribution);
    bind(logger_1.LoggerFactory).toFactory(ctx => (name) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(logger_1.ILogger).to(logger_1.Logger).inTransientScope();
        child.bind(logger_1.LoggerName).toConstantValue(name);
        return child.get(logger_1.ILogger);
    });
}
exports.bindLogger = bindLogger;
/**
 * IMPORTANT: don't use in tests, since it overrides console
 */
exports.loggerBackendModule = new inversify_1.ContainerModule(bind => {
    bind(backend_application_1.BackendApplicationContribution).toDynamicValue(ctx => ({
        initialize() {
            (0, logger_1.setRootLogger)(ctx.container.get(logger_1.ILogger));
        }
    }));
    bind(logger_protocol_1.DispatchingLoggerClient).toSelf().inSingletonScope();
    bindLogger(bind, {
        onLoggerServerActivation: ({ container }, server) => {
            server.setClient(container.get(logger_protocol_1.DispatchingLoggerClient));
            server.setClient = () => {
                throw new Error('use DispatchingLoggerClient');
            };
        }
    });
    bind(messaging_1.ConnectionHandler).toDynamicValue(({ container }) => new messaging_1.RpcConnectionHandler(logger_protocol_1.loggerPath, client => {
        const dispatching = container.get(logger_protocol_1.DispatchingLoggerClient);
        dispatching.clients.add(client);
        client.onDidCloseConnection(() => dispatching.clients.delete(client));
        return container.get(logger_protocol_1.ILoggerServer);
    })).inSingletonScope();
});


/***/ }),

/***/ "../../packages/core/lib/node/logger-cli-contribution.js":
/*!***************************************************************!*\
  !*** ../../packages/core/lib/node/logger-cli-contribution.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogLevelCliContribution = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../../packages/core/lib/common/logger.js");
const fs = __webpack_require__(/*! fs-extra */ "../../node_modules/fs-extra/lib/index.js");
const nsfw = __webpack_require__(/*! nsfw */ "../../node_modules/nsfw/js/src/index.js");
const event_1 = __webpack_require__(/*! ../common/event */ "../../packages/core/lib/common/event.js");
const path = __webpack_require__(/*! path */ "path");
/**
 * Parses command line switches related to log levels, then watches the log
 * levels file (if specified) for changes.  This is the source of truth for
 * what the log level per logger should be.
 */
let LogLevelCliContribution = class LogLevelCliContribution {
    constructor() {
        this._logLevels = {};
        /**
         * Log level to use for loggers not specified in `logLevels`.
         */
        this._defaultLogLevel = logger_1.LogLevel.INFO;
        this.logConfigChangedEvent = new event_1.Emitter();
    }
    get defaultLogLevel() {
        return this._defaultLogLevel;
    }
    get logLevels() {
        return this._logLevels;
    }
    configure(conf) {
        conf.option('log-level', {
            description: 'Sets the default log level',
            choices: Array.from(logger_1.LogLevel.strings.values()),
            nargs: 1,
        });
        conf.option('log-config', {
            description: 'Path to the JSON file specifying the configuration of various loggers',
            type: 'string',
            nargs: 1,
        });
    }
    async setArguments(args) {
        if (args['log-level'] !== undefined && args['log-config'] !== undefined) {
            throw new Error('--log-level and --log-config are mutually exclusive.');
        }
        if (args['log-level'] !== undefined) {
            this._defaultLogLevel = this.readLogLevelString(args['log-level'], 'Unknown log level passed to --log-level');
        }
        if (args['log-config'] !== undefined) {
            let filename = args['log-config'];
            try {
                filename = path.resolve(filename);
                await this.slurpLogConfigFile(filename);
                await this.watchLogConfigFile(filename);
            }
            catch (e) {
                console.error(`Error reading log config file ${filename}: ${e}`);
            }
        }
    }
    watchLogConfigFile(filename) {
        return nsfw(filename, async (events) => {
            try {
                for (const event of events) {
                    switch (event.action) {
                        case 0 /* CREATED */:
                        case 2 /* MODIFIED */:
                            await this.slurpLogConfigFile(filename);
                            this.logConfigChangedEvent.fire(undefined);
                            break;
                    }
                }
            }
            catch (e) {
                console.error(`Error reading log config file ${filename}: ${e}`);
            }
        }).then((watcher) => {
            watcher.start();
        });
    }
    async slurpLogConfigFile(filename) {
        try {
            const content = await fs.readFile(filename, 'utf-8');
            const data = JSON.parse(content);
            let newDefaultLogLevel = logger_1.LogLevel.INFO;
            if ('defaultLevel' in data) {
                newDefaultLogLevel = this.readLogLevelString(data['defaultLevel'], `Unknown default log level in ${filename}`);
            }
            const newLogLevels = {};
            if ('levels' in data) {
                const loggers = data['levels'];
                for (const logger of Object.keys(loggers)) {
                    const levelStr = loggers[logger];
                    newLogLevels[logger] = this.readLogLevelString(levelStr, `Unknown log level for logger ${logger} in ${filename}`);
                }
            }
            this._defaultLogLevel = newDefaultLogLevel;
            this._logLevels = newLogLevels;
            console.log(`Successfully read new log config from ${filename}.`);
        }
        catch (e) {
            throw new Error(`Error reading log config file ${filename}: ${e.message}`);
        }
    }
    get onLogConfigChanged() {
        return this.logConfigChangedEvent.event;
    }
    logLevelFor(loggerName) {
        const level = this._logLevels[loggerName];
        if (level !== undefined) {
            return level;
        }
        else {
            return this.defaultLogLevel;
        }
    }
    /**
     * Converts the string to a `LogLevel`. Throws an error if invalid.
     */
    readLogLevelString(levelStr, errMessagePrefix) {
        const level = logger_1.LogLevel.fromString(levelStr);
        if (level === undefined) {
            throw new Error(`${errMessagePrefix}: "${levelStr}".`);
        }
        return level;
    }
};
LogLevelCliContribution = __decorate([
    (0, inversify_1.injectable)()
], LogLevelCliContribution);
exports.LogLevelCliContribution = LogLevelCliContribution;


/***/ }),

/***/ "../../packages/core/lib/node/main.js":
/*!********************************************!*\
  !*** ../../packages/core/lib/node/main.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.start = void 0;
const ipc_protocol_1 = __webpack_require__(/*! ./messaging/ipc-protocol */ "../../packages/core/lib/node/messaging/ipc-protocol.js");
(0, ipc_protocol_1.checkParentAlive)();
process.on('unhandledRejection', (reason, promise) => {
    throw reason;
});
async function start(serverModule) {
    const server = await serverModule;
    return server.address();
}
exports.start = start;
exports["default"] = start;


/***/ }),

/***/ "../../packages/core/lib/node/messaging/connection-container-module.js":
/*!*****************************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/connection-container-module.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionContainerModule = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
/**
 * ### Connection Container Module
 *
 * It provides bindings which are scoped per a connection, e.g.
 * in order to allow backend services to access frontend service within the same connection.
 *
 * #### Binding a frontend service
 * ```ts
 * const myConnectionModule = ConnectionContainerModule.create(({ bindFrontendService }) => {
 *   bindFrontendService(myFrontendServicePath, MyFrontendService);
 * });
 *
 * export const myBackendApplicationModule = new ContainerModule(bind => {
 *   bind(ConnectionContainerModule).toConstantValue(myConnectionModule);
 * }
 * ```
 *
 * #### Exposing a backend service
 * ```ts
 * const myConnectionModule2 = ConnectionContainerModule.create(({ bind, bindBackendService }) => {
 *   bind(MyBackendService).toSelf().inSingletonScope();
 *   bindBackendService(myBackendServicePath, MyBackendService);
 * });
 *
 * export const myBackendApplicationModule2 = new ContainerModule(bind => {
 *   bind(ConnectionContainerModule).toConstantValue(myConnectionModule2);
 * }
 * ```
 *
 * #### Injecting a frontend service
 * ```ts
 * @injectable()
 * export class MyBackendService {
 *     @inject(MyFrontendService)
 *     protected readonly myFrontendService: MyFrontendService;
 * }
 * ```
 */
exports.ConnectionContainerModule = Object.assign(Symbol('ConnectionContainerModule'), {
    create(callback) {
        return new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
            const bindFrontendService = (path, serviceIdentifier) => {
                const serviceFactory = new common_1.RpcProxyFactory();
                const service = serviceFactory.createProxy();
                bind(common_1.ConnectionHandler).toConstantValue({
                    path,
                    onConnection: connection => serviceFactory.listen(connection)
                });
                return bind(serviceIdentifier).toConstantValue(service);
            };
            const bindBackendService = (path, serviceIdentifier, onActivation) => {
                bind(common_1.ConnectionHandler).toDynamicValue(context => new common_1.RpcConnectionHandler(path, proxy => {
                    const service = context.container.get(serviceIdentifier);
                    return onActivation ? onActivation(service, proxy) : service;
                })).inSingletonScope();
            };
            callback({ bind, unbind, isBound, rebind, bindFrontendService, bindBackendService });
        });
    }
});


/***/ }),

/***/ "../../packages/core/lib/node/messaging/messaging-backend-module.js":
/*!**************************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/messaging-backend-module.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.messagingBackendModule = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const backend_application_1 = __webpack_require__(/*! ../backend-application */ "../../packages/core/lib/node/backend-application.js");
const messaging_contribution_1 = __webpack_require__(/*! ./messaging-contribution */ "../../packages/core/lib/node/messaging/messaging-contribution.js");
const connection_container_module_1 = __webpack_require__(/*! ./connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const messaging_service_1 = __webpack_require__(/*! ./messaging-service */ "../../packages/core/lib/node/messaging/messaging-service.js");
const messaging_listeners_1 = __webpack_require__(/*! ./messaging-listeners */ "../../packages/core/lib/node/messaging/messaging-listeners.js");
exports.messagingBackendModule = new inversify_1.ContainerModule(bind => {
    (0, common_1.bindContributionProvider)(bind, connection_container_module_1.ConnectionContainerModule);
    (0, common_1.bindContributionProvider)(bind, messaging_service_1.MessagingService.Contribution);
    bind(messaging_service_1.MessagingService.Identifier).to(messaging_contribution_1.MessagingContribution).inSingletonScope();
    bind(messaging_contribution_1.MessagingContribution).toDynamicValue(({ container }) => {
        const child = container.createChild();
        child.bind(messaging_contribution_1.MessagingContainer).toConstantValue(container);
        return child.get(messaging_service_1.MessagingService.Identifier);
    }).inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(messaging_contribution_1.MessagingContribution);
    bind(messaging_listeners_1.MessagingListener).toSelf().inSingletonScope();
    (0, common_1.bindContributionProvider)(bind, messaging_listeners_1.MessagingListenerContribution);
});


/***/ }),

/***/ "../../packages/core/lib/node/messaging/messaging-contribution.js":
/*!************************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/messaging-contribution.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MessagingContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessagingContribution = exports.MessagingContainer = void 0;
const socket_io_1 = __webpack_require__(/*! socket.io */ "../../node_modules/socket.io/dist/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const web_socket_channel_1 = __webpack_require__(/*! ../../common/messaging/web-socket-channel */ "../../packages/core/lib/common/messaging/web-socket-channel.js");
const messaging_service_1 = __webpack_require__(/*! ./messaging-service */ "../../packages/core/lib/node/messaging/messaging-service.js");
const connection_container_module_1 = __webpack_require__(/*! ./connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const Route = __webpack_require__(/*! route-parser */ "../../node_modules/route-parser/index.js");
const ws_request_validators_1 = __webpack_require__(/*! ../ws-request-validators */ "../../packages/core/lib/node/ws-request-validators.js");
const messaging_listeners_1 = __webpack_require__(/*! ./messaging-listeners */ "../../packages/core/lib/node/messaging/messaging-listeners.js");
const channel_1 = __webpack_require__(/*! ../../common/message-rpc/channel */ "../../packages/core/lib/common/message-rpc/channel.js");
exports.MessagingContainer = Symbol('MessagingContainer');
let MessagingContribution = MessagingContribution_1 = class MessagingContribution {
    constructor() {
        this.wsHandlers = new MessagingContribution_1.ConnectionHandlers();
        this.channelHandlers = new MessagingContribution_1.ConnectionHandlers();
        this.checkAliveTimeout = 30000; // 30 seconds
        this.maxHttpBufferSize = 1e8; // 100 MB
    }
    init() {
        this.ws(web_socket_channel_1.WebSocketChannel.wsPath, (_, socket) => this.handleChannels(socket));
        for (const contribution of this.contributions.getContributions()) {
            contribution.configure(this);
        }
    }
    wsChannel(spec, callback) {
        this.channelHandlers.push(spec, (params, channel) => callback(params, channel));
    }
    ws(spec, callback) {
        this.wsHandlers.push(spec, callback);
    }
    onStart(server) {
        const socketServer = new socket_io_1.Server(server, {
            pingInterval: this.checkAliveTimeout,
            pingTimeout: this.checkAliveTimeout * 2,
            maxHttpBufferSize: this.maxHttpBufferSize
        });
        // Accept every namespace by using /.*/
        socketServer.of(/.*/).on('connection', async (socket) => {
            const request = socket.request;
            // Socket.io strips the `origin` header of the incoming request
            // We provide a `fix-origin` header in the `WebSocketConnectionProvider`
            request.headers.origin = request.headers['fix-origin'];
            if (await this.allowConnect(socket.request)) {
                this.handleConnection(socket);
                this.messagingListener.onDidWebSocketUpgrade(socket.request, socket);
            }
            else {
                socket.disconnect(true);
            }
        });
    }
    handleConnection(socket) {
        const pathname = socket.nsp.name;
        if (pathname && !this.wsHandlers.route(pathname, socket)) {
            console.error('Cannot find a ws handler for the path: ' + pathname);
        }
    }
    async allowConnect(request) {
        try {
            return this.wsRequestValidator.allowWsUpgrade(request);
        }
        catch (e) {
            return false;
        }
    }
    handleChannels(socket) {
        const socketChannel = new web_socket_channel_1.WebSocketChannel(this.toIWebSocket(socket));
        const multiplexer = new channel_1.ChannelMultiplexer(socketChannel);
        const channelHandlers = this.getConnectionChannelHandlers(socket);
        multiplexer.onDidOpenChannel(event => {
            if (channelHandlers.route(event.id, event.channel)) {
                console.debug(`Opening channel for service path '${event.id}'.`);
                event.channel.onClose(() => console.debug(`Closing channel on service path '${event.id}'.`));
            }
        });
    }
    toIWebSocket(socket) {
        return {
            close: () => {
                socket.removeAllListeners('disconnect');
                socket.removeAllListeners('error');
                socket.removeAllListeners('message');
                socket.disconnect();
            },
            isConnected: () => socket.connected,
            onClose: cb => socket.on('disconnect', reason => cb(reason)),
            onError: cb => socket.on('error', error => cb(error)),
            onMessage: cb => socket.on('message', data => cb(data)),
            send: message => socket.emit('message', message)
        };
    }
    createSocketContainer(socket) {
        const connectionContainer = this.container.createChild();
        connectionContainer.bind(socket_io_1.Socket).toConstantValue(socket);
        return connectionContainer;
    }
    getConnectionChannelHandlers(socket) {
        const connectionContainer = this.createSocketContainer(socket);
        (0, common_1.bindContributionProvider)(connectionContainer, common_1.ConnectionHandler);
        connectionContainer.load(...this.connectionModules.getContributions());
        const connectionChannelHandlers = new MessagingContribution_1.ConnectionHandlers(this.channelHandlers);
        const connectionHandlers = connectionContainer.getNamed(common_1.ContributionProvider, common_1.ConnectionHandler);
        for (const connectionHandler of connectionHandlers.getContributions(true)) {
            connectionChannelHandlers.push(connectionHandler.path, (_, channel) => {
                connectionHandler.onConnection(channel);
            });
        }
        return connectionChannelHandlers;
    }
};
__decorate([
    (0, inversify_1.inject)(exports.MessagingContainer),
    __metadata("design:type", Object)
], MessagingContribution.prototype, "container", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(connection_container_module_1.ConnectionContainerModule),
    __metadata("design:type", Object)
], MessagingContribution.prototype, "connectionModules", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(messaging_service_1.MessagingService.Contribution),
    __metadata("design:type", Object)
], MessagingContribution.prototype, "contributions", void 0);
__decorate([
    (0, inversify_1.inject)(ws_request_validators_1.WsRequestValidator),
    __metadata("design:type", ws_request_validators_1.WsRequestValidator)
], MessagingContribution.prototype, "wsRequestValidator", void 0);
__decorate([
    (0, inversify_1.inject)(messaging_listeners_1.MessagingListener),
    __metadata("design:type", messaging_listeners_1.MessagingListener)
], MessagingContribution.prototype, "messagingListener", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MessagingContribution.prototype, "init", null);
MessagingContribution = MessagingContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], MessagingContribution);
exports.MessagingContribution = MessagingContribution;
(function (MessagingContribution) {
    class ConnectionHandlers {
        constructor(parent) {
            this.parent = parent;
            this.handlers = [];
        }
        push(spec, callback) {
            const route = new Route(spec);
            this.handlers.push((path, channel) => {
                const params = route.match(path);
                if (!params) {
                    return false;
                }
                callback(params, channel);
                return route.reverse(params);
            });
        }
        route(path, connection) {
            for (const handler of this.handlers) {
                try {
                    const result = handler(path, connection);
                    if (result) {
                        return result;
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
            if (this.parent) {
                return this.parent.route(path, connection);
            }
            return false;
        }
    }
    MessagingContribution.ConnectionHandlers = ConnectionHandlers;
})(MessagingContribution = exports.MessagingContribution || (exports.MessagingContribution = {}));
exports.MessagingContribution = MessagingContribution;


/***/ }),

/***/ "../../packages/core/lib/node/messaging/messaging-listeners.js":
/*!*********************************************************************!*\
  !*** ../../packages/core/lib/node/messaging/messaging-listeners.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 MayStreet Inc. and others
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessagingListener = exports.MessagingListenerContribution = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
/**
 * Bind components to this symbol to subscribe to WebSocket events.
 */
exports.MessagingListenerContribution = Symbol('MessagingListenerContribution');
/**
 * Handler of Theia messaging system events, dispatching to MessagingListenerContribution instances.
 */
let MessagingListener = class MessagingListener {
    /**
     * Notify all the subscribed `MessagingListenerContribution`s that the Websocket was upgraded.
     */
    async onDidWebSocketUpgrade(request, socket) {
        await Promise.all(Array.from(this.messagingListenerContributions.getContributions(), async (messagingListener) => messagingListener.onDidWebSocketUpgrade(request, socket)));
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.MessagingListenerContribution),
    __metadata("design:type", Object)
], MessagingListener.prototype, "messagingListenerContributions", void 0);
MessagingListener = __decorate([
    (0, inversify_1.injectable)()
], MessagingListener);
exports.MessagingListener = MessagingListener;


/***/ }),

/***/ "../../packages/core/lib/node/os-backend-provider.js":
/*!***********************************************************!*\
  !*** ../../packages/core/lib/node/os-backend-provider.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OSBackendProviderImpl = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const os_1 = __webpack_require__(/*! ../common/os */ "../../packages/core/lib/common/os.js");
let OSBackendProviderImpl = class OSBackendProviderImpl {
    getBackendOS() {
        return Promise.resolve(os_1.OS.type());
    }
};
OSBackendProviderImpl = __decorate([
    (0, inversify_1.injectable)()
], OSBackendProviderImpl);
exports.OSBackendProviderImpl = OSBackendProviderImpl;


/***/ }),

/***/ "../../packages/core/lib/node/performance/index.js":
/*!*********************************************************!*\
  !*** ../../packages/core/lib/node/performance/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./node-stopwatch */ "../../packages/core/lib/node/performance/node-stopwatch.js"), exports);
__exportStar(__webpack_require__(/*! ./measurement-backend-bindings */ "../../packages/core/lib/node/performance/measurement-backend-bindings.js"), exports);


/***/ }),

/***/ "../../packages/core/lib/node/performance/measurement-backend-bindings.js":
/*!********************************************************************************!*\
  !*** ../../packages/core/lib/node/performance/measurement-backend-bindings.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
* Copyright (c) 2021 STMicroelectronics and others.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License v. 2.0 are satisfied: GNU General Public License, version 2
* with the GNU Classpath Exception which is available at
* https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
*******************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindBackendStopwatchServer = exports.bindNodeStopwatch = void 0;
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
const node_stopwatch_1 = __webpack_require__(/*! ./node-stopwatch */ "../../packages/core/lib/node/performance/node-stopwatch.js");
function bindNodeStopwatch(bind) {
    return bind(common_1.Stopwatch).to(node_stopwatch_1.NodeStopwatch).inSingletonScope();
}
exports.bindNodeStopwatch = bindNodeStopwatch;
function bindBackendStopwatchServer(bind) {
    bind(common_1.ConnectionHandler).toDynamicValue(({ container }) => new common_1.RpcConnectionHandler(common_1.stopwatchPath, () => container.get(common_1.BackendStopwatch))).inSingletonScope();
    bind(common_1.DefaultBackendStopwatch).toSelf().inSingletonScope();
    return bind(common_1.BackendStopwatch).to(common_1.DefaultBackendStopwatch).inSingletonScope();
}
exports.bindBackendStopwatchServer = bindBackendStopwatchServer;


/***/ }),

/***/ "../../packages/core/lib/node/performance/node-stopwatch.js":
/*!******************************************************************!*\
  !*** ../../packages/core/lib/node/performance/node-stopwatch.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
* Copyright (c) 2019, 2021 TypeFox, STMicroelectronics and others.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* This Source Code may also be made available under the following Secondary
* Licenses when the conditions for such availability set forth in the Eclipse
* Public License v. 2.0 are satisfied: GNU General Public License, version 2
* with the GNU Classpath Exception which is available at
* https://www.gnu.org/software/classpath/license.html.
*
* SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
*******************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeStopwatch = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const perf_hooks_1 = __webpack_require__(/*! perf_hooks */ "perf_hooks");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/core/lib/common/index.js");
let NodeStopwatch = class NodeStopwatch extends common_1.Stopwatch {
    constructor() {
        super({
            owner: 'backend',
            now: () => perf_hooks_1.performance.now(),
        });
    }
    start(name, options) {
        const startTime = perf_hooks_1.performance.now();
        return this.createMeasurement(name, () => {
            const duration = perf_hooks_1.performance.now() - startTime;
            return { duration, startTime };
        }, options);
    }
};
NodeStopwatch = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], NodeStopwatch);
exports.NodeStopwatch = NodeStopwatch;
;


/***/ }),

/***/ "../../packages/core/lib/node/request/backend-request-facade.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/node/request/backend-request-facade.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackendRequestFacade = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
let BackendRequestFacade = class BackendRequestFacade {
    configure(config) {
        return this.requestService.configure(config);
    }
    async request(options) {
        const context = await this.requestService.request(options);
        return request_1.RequestContext.compress(context);
    }
    resolveProxy(url) {
        return this.requestService.resolveProxy(url);
    }
};
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], BackendRequestFacade.prototype, "requestService", void 0);
BackendRequestFacade = __decorate([
    (0, inversify_1.injectable)()
], BackendRequestFacade);
exports.BackendRequestFacade = BackendRequestFacade;


/***/ }),

/***/ "../../packages/core/lib/node/request/backend-request-module.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/node/request/backend-request-module.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
const node_request_service_1 = __webpack_require__(/*! @theia/request/lib/node-request-service */ "../../dev-packages/request/lib/node-request-service.js");
(0, inversify_1.decorate)((0, inversify_1.injectable)(), node_request_service_1.NodeRequestService);
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(request_1.RequestService).to(node_request_service_1.NodeRequestService).inSingletonScope();
});


/***/ }),

/***/ "../../packages/core/lib/node/request/proxy-cli-contribution.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/lib/node/request/proxy-cli-contribution.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProxyCliContribution = exports.StrictSSL = exports.ProxyAuthorization = exports.ProxyUrl = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const request_1 = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");
exports.ProxyUrl = 'proxy-url';
exports.ProxyAuthorization = 'proxy-authorization';
exports.StrictSSL = 'strict-ssl';
let ProxyCliContribution = class ProxyCliContribution {
    configure(conf) {
        conf.option(exports.ProxyUrl, {
            description: 'Sets the proxy URL for outgoing requests.',
            type: 'string'
        });
        conf.option(exports.ProxyAuthorization, {
            description: 'Sets the proxy authorization header for outgoing requests.',
            type: 'string'
        });
        conf.option(exports.StrictSSL, {
            description: 'Determines whether SSL is strictly set for outgoing requests.',
            type: 'boolean'
        });
    }
    setArguments(args) {
        const proxyUrl = args[exports.ProxyUrl];
        const authorization = args[exports.ProxyAuthorization];
        const strictSSL = args[exports.StrictSSL];
        const config = {};
        if (typeof proxyUrl === 'string') {
            config.proxyUrl = proxyUrl.trim();
        }
        if (typeof authorization === 'string') {
            config.proxyAuthorization = authorization;
        }
        if (typeof strictSSL === 'boolean') {
            config.strictSSL = strictSSL;
        }
        this.requestService.configure(config);
    }
};
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], ProxyCliContribution.prototype, "requestService", void 0);
ProxyCliContribution = __decorate([
    (0, inversify_1.injectable)()
], ProxyCliContribution);
exports.ProxyCliContribution = ProxyCliContribution;


/***/ }),

/***/ "../../packages/core/lib/node/ws-request-validators.js":
/*!*************************************************************!*\
  !*** ../../packages/core/lib/node/ws-request-validators.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WsRequestValidator = exports.WsRequestValidatorContribution = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../../node_modules/inversify/es/inversify.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/core/lib/common/index.js");
/**
 * Bind components to this symbol to filter WebSocket connections.
 */
exports.WsRequestValidatorContribution = Symbol('RequestValidatorContribution');
/**
 * Central handler of `WsRequestValidatorContribution`.
 */
let WsRequestValidator = class WsRequestValidator {
    /**
     * Ask all bound `WsRequestValidatorContributions` if the WebSocket connection should be allowed or not.
     */
    async allowWsUpgrade(request) {
        return new Promise(async (resolve) => {
            await Promise.all(Array.from(this.requestValidators.getContributions(), async (validator) => {
                if (!await validator.allowWsUpgrade(request)) {
                    resolve(false); // bail on first refusal
                }
            }));
            resolve(true);
        });
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(exports.WsRequestValidatorContribution),
    __metadata("design:type", Object)
], WsRequestValidator.prototype, "requestValidators", void 0);
WsRequestValidator = __decorate([
    (0, inversify_1.injectable)()
], WsRequestValidator);
exports.WsRequestValidator = WsRequestValidator;


/***/ }),

/***/ "../../packages/core/shared/@theia/application-package/index.js":
/*!**********************************************************************!*\
  !*** ../../packages/core/shared/@theia/application-package/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/application-package */ "../../dev-packages/application-package/lib/index.js");


/***/ }),

/***/ "../../packages/core/shared/@theia/application-package/lib/api/index.js":
/*!******************************************************************************!*\
  !*** ../../packages/core/shared/@theia/application-package/lib/api/index.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/application-package/lib/api */ "../../dev-packages/application-package/lib/api.js");


/***/ }),

/***/ "../../packages/core/shared/@theia/application-package/lib/environment/index.js":
/*!**************************************************************************************!*\
  !*** ../../packages/core/shared/@theia/application-package/lib/environment/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/application-package/lib/environment */ "../../dev-packages/application-package/lib/environment.js");


/***/ }),

/***/ "../../packages/core/shared/@theia/request/index.js":
/*!**********************************************************!*\
  !*** ../../packages/core/shared/@theia/request/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/request */ "../../dev-packages/request/lib/index.js");


/***/ }),

/***/ "../../packages/core/shared/express/index.js":
/*!***************************************************!*\
  !*** ../../packages/core/shared/express/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! express */ "../../node_modules/express/index.js");


/***/ }),

/***/ "../../packages/core/shared/fuzzy/index.js":
/*!*************************************************!*\
  !*** ../../packages/core/shared/fuzzy/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! fuzzy */ "../../node_modules/fuzzy/lib/fuzzy.js");


/***/ }),

/***/ "../../packages/debug/lib/common/debug-adapter-contribution-registry.js":
/*!******************************************************************************!*\
  !*** ../../packages/debug/lib/common/debug-adapter-contribution-registry.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterContributionRegistry = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const debug_service_1 = __webpack_require__(/*! ./debug-service */ "../../packages/debug/lib/common/debug-service.js");
const debug_model_1 = __webpack_require__(/*! ./debug-model */ "../../packages/debug/lib/common/debug-model.js");
/**
 * Contributions registry.
 */
let DebugAdapterContributionRegistry = class DebugAdapterContributionRegistry {
    *getContributions(debugType) {
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.type === debugType || contribution.type === '*' || debugType === '*') {
                yield contribution;
            }
        }
    }
    debugTypes() {
        if (!this._debugTypes) {
            const result = new Set();
            for (const contribution of this.contributions.getContributions()) {
                result.add(contribution.type);
            }
            this._debugTypes = [...result];
        }
        return this._debugTypes;
    }
    async getDebuggersForLanguage(language) {
        const debuggers = [];
        for (const contribution of this.contributions.getContributions()) {
            if (contribution.languages && contribution.label) {
                const label = await contribution.label;
                if (label && (await contribution.languages || []).indexOf(language) !== -1) {
                    debuggers.push({
                        type: contribution.type,
                        label
                    });
                }
            }
        }
        return debuggers;
    }
    /**
     * Provides initial [debug configuration](#DebugConfiguration).
     * @param debugType The registered debug type
     * @returns An array of [debug configurations](#DebugConfiguration)
     */
    async provideDebugConfigurations(debugType, workspaceFolderUri) {
        const configurations = [];
        for (const contribution of this.getContributions(debugType)) {
            if (contribution.provideDebugConfigurations) {
                try {
                    const result = await contribution.provideDebugConfigurations(workspaceFolderUri);
                    configurations.push(...result);
                }
                catch (e) {
                    console.error('provideDebugConfigurations failed:', e);
                }
            }
        }
        return configurations;
    }
    /**
     * Resolves a [debug configuration](#DebugConfiguration) by filling in missing values
     * or by adding/changing/removing attributes before variable substitution.
     * @param debugConfiguration The [debug configuration](#DebugConfiguration) to resolve.
     * @returns The resolved debug configuration.
     */
    async resolveDebugConfiguration(config, workspaceFolderUri) {
        let current = config;
        for (const contribution of this.getContributions(config.type)) {
            if (contribution.resolveDebugConfiguration) {
                try {
                    const next = await contribution.resolveDebugConfiguration(config, workspaceFolderUri);
                    if (next) {
                        current = next;
                    }
                    else {
                        return current;
                    }
                }
                catch (e) {
                    console.error('resolveDebugConfiguration failed:', e);
                }
            }
        }
        return current;
    }
    /**
     * Resolves a [debug configuration](#DebugConfiguration) by filling in missing values
     * or by adding/changing/removing attributes with substituted variables.
     * @param debugConfiguration The [debug configuration](#DebugConfiguration) to resolve.
     * @returns The resolved debug configuration.
     */
    async resolveDebugConfigurationWithSubstitutedVariables(config, workspaceFolderUri) {
        let current = config;
        for (const contribution of this.getContributions(config.type)) {
            if (contribution.resolveDebugConfigurationWithSubstitutedVariables) {
                try {
                    const next = await contribution.resolveDebugConfigurationWithSubstitutedVariables(config, workspaceFolderUri);
                    if (next) {
                        current = next;
                    }
                    else {
                        return current;
                    }
                }
                catch (e) {
                    console.error('resolveDebugConfigurationWithSubstitutedVariables failed:', e);
                }
            }
        }
        return current;
    }
    /**
     * Provides schema attributes.
     * @param debugType The registered debug type
     * @returns Schema attributes for the given debug type
     */
    async getSchemaAttributes(debugType) {
        const schemas = [];
        for (const contribution of this.getContributions(debugType)) {
            if (contribution.getSchemaAttributes) {
                try {
                    schemas.push(...await contribution.getSchemaAttributes());
                }
                catch (e) {
                    console.error('getSchemaAttributes failed:', e);
                }
            }
        }
        return schemas;
    }
    async getConfigurationSnippets() {
        const schemas = [];
        for (const contribution of this.getContributions('*')) {
            if (contribution.getConfigurationSnippets) {
                try {
                    schemas.push(...await contribution.getConfigurationSnippets());
                }
                catch (e) {
                    console.error('getConfigurationSnippets failed:', e);
                }
            }
        }
        return schemas;
    }
    /**
     * Provides a [debug adapter executable](#DebugAdapterExecutable)
     * based on [debug configuration](#DebugConfiguration) to launch a new debug adapter.
     * @param config The resolved [debug configuration](#DebugConfiguration).
     * @returns The [debug adapter executable](#DebugAdapterExecutable).
     */
    async provideDebugAdapterExecutable(config) {
        for (const contribution of this.getContributions(config.type)) {
            if (contribution.provideDebugAdapterExecutable) {
                const executable = await contribution.provideDebugAdapterExecutable(config);
                if (executable) {
                    return executable;
                }
            }
        }
        throw debug_service_1.DebugError.NotFound(config.type);
    }
    /**
     * Returns a [debug adapter session factory](#DebugAdapterSessionFactory).
     * @param debugType The registered debug type
     * @returns An [debug adapter session factory](#DebugAdapterSessionFactory)
     */
    debugAdapterSessionFactory(debugType) {
        for (const contribution of this.getContributions(debugType)) {
            if (contribution.debugAdapterSessionFactory) {
                return contribution.debugAdapterSessionFactory;
            }
        }
        return undefined;
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(debug_model_1.DebugAdapterContribution),
    __metadata("design:type", Object)
], DebugAdapterContributionRegistry.prototype, "contributions", void 0);
DebugAdapterContributionRegistry = __decorate([
    (0, inversify_1.injectable)()
], DebugAdapterContributionRegistry);
exports.DebugAdapterContributionRegistry = DebugAdapterContributionRegistry;


/***/ }),

/***/ "../../packages/debug/lib/common/debug-model.js":
/*!******************************************************!*\
  !*** ../../packages/debug/lib/common/debug-model.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterContribution = exports.DebugAdapterFactory = exports.DebugAdapterSessionFactory = exports.DebugAdapterSession = void 0;
// FIXME: break down this file to debug adapter and debug adapter contribution (see Theia file naming conventions)
/**
 * DebugAdapterSession symbol for DI.
 */
exports.DebugAdapterSession = Symbol('DebugAdapterSession');
/**
 * DebugAdapterSessionFactory symbol for DI.
 */
exports.DebugAdapterSessionFactory = Symbol('DebugAdapterSessionFactory');
/**
 * DebugAdapterFactory symbol for DI.
 */
exports.DebugAdapterFactory = Symbol('DebugAdapterFactory');
/**
 * DebugAdapterContribution symbol for DI.
 */
exports.DebugAdapterContribution = Symbol('DebugAdapterContribution');


/***/ }),

/***/ "../../packages/debug/lib/common/debug-service.js":
/*!********************************************************!*\
  !*** ../../packages/debug/lib/common/debug-service.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardingDebugChannel = exports.DebugError = exports.DebugAdapterPath = exports.DebugService = exports.DebugPath = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const application_error_1 = __webpack_require__(/*! @theia/core/lib/common/application-error */ "../../packages/core/lib/common/application-error.js");
/**
 * The WS endpoint path to the Debug service.
 */
exports.DebugPath = '/services/debug';
/**
 * DebugService symbol for DI.
 */
exports.DebugService = Symbol('DebugService');
/**
 * The endpoint path to the debug adapter session.
 */
exports.DebugAdapterPath = '/services/debug-adapter';
var DebugError;
(function (DebugError) {
    DebugError.NotFound = application_error_1.ApplicationError.declare(-41000, (type) => ({
        message: `'${type}' debugger type is not supported.`,
        data: { type }
    }));
})(DebugError = exports.DebugError || (exports.DebugError = {}));
/**
 * A {@link DebugChannel} wrapper implementation that sends and receives messages to/from an underlying {@link Channel}.
 */
class ForwardingDebugChannel {
    constructor(underlyingChannel) {
        this.underlyingChannel = underlyingChannel;
        this.onMessageEmitter = new core_1.Emitter();
        this.underlyingChannel.onMessage(msg => this.onMessageEmitter.fire(msg().readString()));
    }
    send(content) {
        this.underlyingChannel.getWriteBuffer().writeString(content).commit();
    }
    onMessage(cb) {
        this.onMessageEmitter.event(cb);
    }
    onError(cb) {
        this.underlyingChannel.onError(cb);
    }
    onClose(cb) {
        this.underlyingChannel.onClose(event => { var _a; return cb((_a = event.code) !== null && _a !== void 0 ? _a : -1, event.reason); });
    }
    close() {
        this.underlyingChannel.close();
        this.onMessageEmitter.dispose();
    }
}
exports.ForwardingDebugChannel = ForwardingDebugChannel;


/***/ }),

/***/ "../../packages/debug/lib/node/debug-adapter-factory.js":
/*!**************************************************************!*\
  !*** ../../packages/debug/lib/node/debug-adapter-factory.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterSessionFactoryImpl = exports.LaunchBasedDebugAdapterFactory = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Some entities copied and modified from https://github.com/Microsoft/vscode-debugadapter-node/blob/master/adapter/src/protocol.ts
const net = __webpack_require__(/*! net */ "net");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const debug_adapter_session_1 = __webpack_require__(/*! ../common/debug-adapter-session */ "../../packages/debug/lib/common/debug-adapter-session.js");
const application_package_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package */ "../../packages/core/shared/@theia/application-package/index.js");
const stream_debug_adapter_1 = __webpack_require__(/*! ./stream-debug-adapter */ "../../packages/debug/lib/node/stream-debug-adapter.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
/**
 * [DebugAdapterFactory](#DebugAdapterFactory) implementation based on
 * launching the debug adapter as separate process.
 */
let LaunchBasedDebugAdapterFactory = class LaunchBasedDebugAdapterFactory {
    start(executable) {
        const process = this.childProcess(executable);
        if (!process.process) {
            throw new Error(`Could not start debug adapter process: ${JSON.stringify(executable)}`);
        }
        // FIXME: propagate onError + onExit
        const provider = new stream_debug_adapter_1.ProcessDebugAdapter(process.process);
        return provider;
    }
    childProcess(executable) {
        const isForkOptions = (forkOptions) => (0, common_1.isObject)(forkOptions) && 'modulePath' in forkOptions;
        const processOptions = { ...executable };
        const options = { stdio: ['pipe', 'pipe', 2] };
        if (isForkOptions(processOptions)) {
            options.stdio.push('ipc');
            options.env = application_package_1.environment.electron.runAsNodeEnv();
            options.execArgv = executable.execArgv;
        }
        processOptions.options = options;
        return this.processFactory(processOptions);
    }
    connect(debugServerPort) {
        const socket = net.createConnection(debugServerPort);
        // FIXME: propagate socket.on('error', ...) + socket.on('close', ...)
        const provider = new stream_debug_adapter_1.SocketDebugAdapter(socket);
        return provider;
    }
};
__decorate([
    (0, inversify_1.inject)(node_1.RawProcessFactory),
    __metadata("design:type", Function)
], LaunchBasedDebugAdapterFactory.prototype, "processFactory", void 0);
__decorate([
    (0, inversify_1.inject)(node_1.ProcessManager),
    __metadata("design:type", node_1.ProcessManager)
], LaunchBasedDebugAdapterFactory.prototype, "processManager", void 0);
LaunchBasedDebugAdapterFactory = __decorate([
    (0, inversify_1.injectable)()
], LaunchBasedDebugAdapterFactory);
exports.LaunchBasedDebugAdapterFactory = LaunchBasedDebugAdapterFactory;
/**
 * [DebugAdapterSessionFactory](#DebugAdapterSessionFactory) implementation.
 */
let DebugAdapterSessionFactoryImpl = class DebugAdapterSessionFactoryImpl {
    get(sessionId, debugAdapter) {
        return new debug_adapter_session_1.DebugAdapterSessionImpl(sessionId, debugAdapter);
    }
};
DebugAdapterSessionFactoryImpl = __decorate([
    (0, inversify_1.injectable)()
], DebugAdapterSessionFactoryImpl);
exports.DebugAdapterSessionFactoryImpl = DebugAdapterSessionFactoryImpl;


/***/ }),

/***/ "../../packages/debug/lib/node/debug-adapter-session-manager.js":
/*!**********************************************************************!*\
  !*** ../../packages/debug/lib/node/debug-adapter-session-manager.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterSessionManager = void 0;
const coreutils_1 = __webpack_require__(/*! @theia/core/shared/@phosphor/coreutils */ "../../packages/core/shared/@phosphor/coreutils/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const debug_service_1 = __webpack_require__(/*! ../common/debug-service */ "../../packages/debug/lib/common/debug-service.js");
const debug_model_1 = __webpack_require__(/*! ../common/debug-model */ "../../packages/debug/lib/common/debug-model.js");
/**
 * Debug adapter session manager.
 */
let DebugAdapterSessionManager = class DebugAdapterSessionManager {
    constructor() {
        this.sessions = new Map();
    }
    configure(service) {
        service.wsChannel(`${debug_service_1.DebugAdapterPath}/:id`, ({ id }, wsChannel) => {
            const session = this.find(id);
            if (!session) {
                wsChannel.close();
                return;
            }
            session.start(new debug_service_1.ForwardingDebugChannel(wsChannel));
        });
    }
    /**
     * Creates a new [debug adapter session](#DebugAdapterSession).
     * @param config The [DebugConfiguration](#DebugConfiguration)
     * @returns The debug adapter session
     */
    async create(config, registry) {
        const sessionId = coreutils_1.UUID.uuid4();
        let communicationProvider;
        if ('debugServer' in config) {
            communicationProvider = this.debugAdapterFactory.connect(config.debugServer);
        }
        else {
            const executable = await registry.provideDebugAdapterExecutable(config);
            communicationProvider = this.debugAdapterFactory.start(executable);
        }
        const sessionFactory = registry.debugAdapterSessionFactory(config.type) || this.debugAdapterSessionFactory;
        const session = sessionFactory.get(sessionId, communicationProvider);
        this.sessions.set(sessionId, session);
        if (config.parentSession) {
            const parentSession = this.sessions.get(config.parentSession.id);
            if (parentSession) {
                session.parentSession = parentSession;
            }
        }
        return session;
    }
    /**
     * Removes [debug adapter session](#DebugAdapterSession) from the list of the instantiated sessions.
     * Is invoked when session is terminated and isn't needed anymore.
     * @param sessionId The session identifier
     */
    remove(sessionId) {
        this.sessions.delete(sessionId);
    }
    /**
     * Finds the debug adapter session by its id.
     * Returning the value 'undefined' means the session isn't found.
     * @param sessionId The session identifier
     * @returns The debug adapter session
     */
    find(sessionId) {
        return this.sessions.get(sessionId);
    }
    /**
     * Returns all instantiated debug adapter sessions.
     * @returns An array of debug adapter sessions
     */
    getAll() {
        return this.sessions.values();
    }
};
__decorate([
    (0, inversify_1.inject)(debug_model_1.DebugAdapterSessionFactory),
    __metadata("design:type", Object)
], DebugAdapterSessionManager.prototype, "debugAdapterSessionFactory", void 0);
__decorate([
    (0, inversify_1.inject)(debug_model_1.DebugAdapterFactory),
    __metadata("design:type", Object)
], DebugAdapterSessionManager.prototype, "debugAdapterFactory", void 0);
DebugAdapterSessionManager = __decorate([
    (0, inversify_1.injectable)()
], DebugAdapterSessionManager);
exports.DebugAdapterSessionManager = DebugAdapterSessionManager;


/***/ }),

/***/ "../../packages/debug/lib/node/debug-backend-module.js":
/*!*************************************************************!*\
  !*** ../../packages/debug/lib/node/debug-backend-module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const debug_service_1 = __webpack_require__(/*! ../common/debug-service */ "../../packages/debug/lib/common/debug-service.js");
const debug_adapter_factory_1 = __webpack_require__(/*! ./debug-adapter-factory */ "../../packages/debug/lib/node/debug-adapter-factory.js");
const messaging_service_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/messaging-service */ "../../packages/core/lib/node/messaging/messaging-service.js");
const connection_container_module_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const debug_model_1 = __webpack_require__(/*! ../common/debug-model */ "../../packages/debug/lib/common/debug-model.js");
const debug_service_impl_1 = __webpack_require__(/*! ./debug-service-impl */ "../../packages/debug/lib/node/debug-service-impl.js");
const debug_adapter_contribution_registry_1 = __webpack_require__(/*! ../common/debug-adapter-contribution-registry */ "../../packages/debug/lib/common/debug-adapter-contribution-registry.js");
const debug_adapter_session_manager_1 = __webpack_require__(/*! ./debug-adapter-session-manager */ "../../packages/debug/lib/node/debug-adapter-session-manager.js");
const debugConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind, bindBackendService }) => {
    (0, common_1.bindContributionProvider)(bind, debug_model_1.DebugAdapterContribution);
    bind(debug_adapter_contribution_registry_1.DebugAdapterContributionRegistry).toSelf().inSingletonScope();
    bind(debug_service_1.DebugService).to(debug_service_impl_1.DebugServiceImpl).inSingletonScope();
    bindBackendService(debug_service_1.DebugPath, debug_service_1.DebugService);
});
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(debugConnectionModule);
    bind(debug_model_1.DebugAdapterSessionFactory).to(debug_adapter_factory_1.DebugAdapterSessionFactoryImpl).inSingletonScope();
    bind(debug_model_1.DebugAdapterFactory).to(debug_adapter_factory_1.LaunchBasedDebugAdapterFactory).inSingletonScope();
    bind(debug_adapter_session_manager_1.DebugAdapterSessionManager).toSelf().inSingletonScope();
    bind(messaging_service_1.MessagingService.Contribution).toService(debug_adapter_session_manager_1.DebugAdapterSessionManager);
    bind(common_1.ILogger).toDynamicValue(({ container }) => container.get(common_1.ILogger).child('debug')).inSingletonScope().whenTargetNamed('debug');
});


/***/ }),

/***/ "../../packages/debug/lib/node/debug-service-impl.js":
/*!***********************************************************!*\
  !*** ../../packages/debug/lib/node/debug-service-impl.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugServiceImpl = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const debug_adapter_session_manager_1 = __webpack_require__(/*! ./debug-adapter-session-manager */ "../../packages/debug/lib/node/debug-adapter-session-manager.js");
const debug_adapter_contribution_registry_1 = __webpack_require__(/*! ../common/debug-adapter-contribution-registry */ "../../packages/debug/lib/common/debug-adapter-contribution-registry.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
/**
 * DebugService implementation.
 */
let DebugServiceImpl = class DebugServiceImpl {
    constructor() {
        this.sessions = new Set();
    }
    get onDidChangeDebugConfigurationProviders() {
        return core_1.Event.None;
    }
    dispose() {
        this.terminateDebugSession();
    }
    async debugTypes() {
        return this.registry.debugTypes();
    }
    getDebuggersForLanguage(language) {
        return this.registry.getDebuggersForLanguage(language);
    }
    getSchemaAttributes(debugType) {
        return this.registry.getSchemaAttributes(debugType);
    }
    getConfigurationSnippets() {
        return this.registry.getConfigurationSnippets();
    }
    async provideDebuggerVariables(debugType) {
        // TODO: Support resolution of variables map through Theia extensions?
        return {};
    }
    async provideDebugConfigurations(debugType, workspaceFolderUri) {
        return this.registry.provideDebugConfigurations(debugType, workspaceFolderUri);
    }
    async provideDynamicDebugConfigurations() {
        // TODO: Support dynamic debug configurations through Theia extensions?
        return {};
    }
    fetchDynamicDebugConfiguration(name, type, folder) {
        // TODO: Support dynamic debug configurations through Theia extensions?
        return Promise.resolve(undefined);
    }
    async resolveDebugConfiguration(config, workspaceFolderUri) {
        return this.registry.resolveDebugConfiguration(config, workspaceFolderUri);
    }
    async resolveDebugConfigurationWithSubstitutedVariables(config, workspaceFolderUri) {
        return this.registry.resolveDebugConfigurationWithSubstitutedVariables(config, workspaceFolderUri);
    }
    async createDebugSession(config, _workspaceFolderUri) {
        const session = await this.sessionManager.create(config, this.registry);
        this.sessions.add(session.id);
        return session.id;
    }
    async terminateDebugSession(sessionId) {
        if (sessionId) {
            await this.doStop(sessionId);
        }
        else {
            const promises = [];
            const sessions = [...this.sessions];
            this.sessions.clear();
            for (const session of sessions) {
                promises.push((async () => {
                    try {
                        await this.doStop(session);
                    }
                    catch (e) {
                        console.error('terminateDebugSession failed:', e);
                    }
                })());
            }
            await Promise.all(promises);
        }
    }
    async doStop(sessionId) {
        const debugSession = this.sessionManager.find(sessionId);
        if (debugSession) {
            this.sessionManager.remove(sessionId);
            this.sessions.delete(sessionId);
            await debugSession.stop();
        }
    }
};
__decorate([
    (0, inversify_1.inject)(debug_adapter_session_manager_1.DebugAdapterSessionManager),
    __metadata("design:type", debug_adapter_session_manager_1.DebugAdapterSessionManager)
], DebugServiceImpl.prototype, "sessionManager", void 0);
__decorate([
    (0, inversify_1.inject)(debug_adapter_contribution_registry_1.DebugAdapterContributionRegistry),
    __metadata("design:type", debug_adapter_contribution_registry_1.DebugAdapterContributionRegistry)
], DebugServiceImpl.prototype, "registry", void 0);
DebugServiceImpl = __decorate([
    (0, inversify_1.injectable)()
], DebugServiceImpl);
exports.DebugServiceImpl = DebugServiceImpl;


/***/ }),

/***/ "../../packages/file-search/lib/common/file-search-service.js":
/*!********************************************************************!*\
  !*** ../../packages/file-search/lib/common/file-search-service.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WHITESPACE_QUERY_SEPARATOR = exports.FileSearchService = exports.fileSearchServicePath = void 0;
exports.fileSearchServicePath = '/services/search';
exports.FileSearchService = Symbol('FileSearchService');
exports.WHITESPACE_QUERY_SEPARATOR = /\s+/;


/***/ }),

/***/ "../../packages/file-search/lib/node/file-search-backend-module.js":
/*!*************************************************************************!*\
  !*** ../../packages/file-search/lib/node/file-search-backend-module.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const file_search_service_impl_1 = __webpack_require__(/*! ./file-search-service-impl */ "../../packages/file-search/lib/node/file-search-service-impl.js");
const file_search_service_1 = __webpack_require__(/*! ../common/file-search-service */ "../../packages/file-search/lib/common/file-search-service.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(file_search_service_1.FileSearchService).to(file_search_service_impl_1.FileSearchServiceImpl).inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(file_search_service_1.fileSearchServicePath, () => ctx.container.get(file_search_service_1.FileSearchService))).inSingletonScope();
});


/***/ }),

/***/ "../../packages/file-search/lib/node/file-search-service-impl.js":
/*!***********************************************************************!*\
  !*** ../../packages/file-search/lib/node/file-search-service-impl.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSearchServiceImpl = void 0;
const cp = __webpack_require__(/*! child_process */ "child_process");
const fuzzy = __webpack_require__(/*! @theia/core/shared/fuzzy */ "../../packages/core/shared/fuzzy/index.js");
const readline = __webpack_require__(/*! readline */ "readline");
const ripgrep_1 = __webpack_require__(/*! @vscode/ripgrep */ "./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/ripgrep.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const file_search_service_1 = __webpack_require__(/*! ../common/file-search-service */ "../../packages/file-search/lib/common/file-search-service.js");
const path = __webpack_require__(/*! path */ "path");
let FileSearchServiceImpl = class FileSearchServiceImpl {
    constructor(logger, 
    /** @deprecated since 1.7.0 */
    rawProcessFactory) {
        this.logger = logger;
        this.rawProcessFactory = rawProcessFactory;
    }
    async find(searchPattern, options, clientToken) {
        const cancellationSource = new core_1.CancellationTokenSource();
        if (clientToken) {
            clientToken.onCancellationRequested(() => cancellationSource.cancel());
        }
        const token = cancellationSource.token;
        const opts = {
            fuzzyMatch: true,
            limit: Number.MAX_SAFE_INTEGER,
            useGitIgnore: true,
            ...options
        };
        const roots = options.rootOptions || {};
        if (options.rootUris) {
            for (const rootUri of options.rootUris) {
                if (!roots[rootUri]) {
                    roots[rootUri] = {};
                }
            }
        }
        // eslint-disable-next-line guard-for-in
        for (const rootUri in roots) {
            const rootOptions = roots[rootUri];
            if (opts.includePatterns) {
                const includePatterns = rootOptions.includePatterns || [];
                rootOptions.includePatterns = [...includePatterns, ...opts.includePatterns];
            }
            if (opts.excludePatterns) {
                const excludePatterns = rootOptions.excludePatterns || [];
                rootOptions.excludePatterns = [...excludePatterns, ...opts.excludePatterns];
            }
            if (rootOptions.useGitIgnore === undefined) {
                rootOptions.useGitIgnore = opts.useGitIgnore;
            }
        }
        const exactMatches = new Set();
        const fuzzyMatches = new Set();
        if (core_1.isWindows) {
            // Allow users on Windows to search for paths using either forwards or backwards slash
            searchPattern = searchPattern.replace(/\//g, '\\');
        }
        const patterns = searchPattern.toLocaleLowerCase().trim().split(file_search_service_1.WHITESPACE_QUERY_SEPARATOR);
        await Promise.all(Object.keys(roots).map(async (root) => {
            try {
                const rootUri = new uri_1.default(root);
                const rootPath = file_uri_1.FileUri.fsPath(rootUri);
                const rootOptions = roots[root];
                await this.doFind(rootUri, rootOptions, candidate => {
                    // Convert OS-native candidate path to a file URI string
                    const fileUri = file_uri_1.FileUri.create(path.resolve(rootPath, candidate)).toString();
                    // Skip results that have already been matched.
                    if (exactMatches.has(fileUri) || fuzzyMatches.has(fileUri)) {
                        return;
                    }
                    // Determine if the candidate matches any of the patterns exactly or fuzzy
                    const candidatePattern = candidate.toLocaleLowerCase();
                    const patternExists = patterns.every(pattern => candidatePattern.indexOf(pattern) !== -1);
                    if (patternExists) {
                        exactMatches.add(fileUri);
                    }
                    else if (!searchPattern || searchPattern === '*') {
                        exactMatches.add(fileUri);
                    }
                    else {
                        const fuzzyPatternExists = patterns.every(pattern => fuzzy.test(pattern, candidate));
                        if (opts.fuzzyMatch && fuzzyPatternExists) {
                            fuzzyMatches.add(fileUri);
                        }
                    }
                    // Preemptively terminate the search when the list of exact matches reaches the limit.
                    if (exactMatches.size === opts.limit) {
                        cancellationSource.cancel();
                    }
                }, token);
            }
            catch (e) {
                console.error('Failed to search:', root, e);
            }
        }));
        if (clientToken && clientToken.isCancellationRequested) {
            return [];
        }
        // Return the list of results limited by the search limit.
        return [...exactMatches, ...fuzzyMatches].slice(0, opts.limit);
    }
    doFind(rootUri, options, accept, token) {
        return new Promise((resolve, reject) => {
            const cwd = file_uri_1.FileUri.fsPath(rootUri);
            const args = this.getSearchArgs(options);
            const ripgrep = cp.spawn(ripgrep_1.rgPath, args, { cwd });
            ripgrep.on('error', reject);
            ripgrep.on('exit', (code, signal) => {
                if (typeof code === 'number' && code !== 0) {
                    reject(new Error(`"${ripgrep_1.rgPath}" exited with code: ${code}`));
                }
                else if (typeof signal === 'string') {
                    reject(new Error(`"${ripgrep_1.rgPath}" was terminated by signal: ${signal}`));
                }
            });
            token.onCancellationRequested(() => {
                ripgrep.kill(); // most likely sends a signal.
                resolve(); // avoid rejecting for no good reason.
            });
            const lineReader = readline.createInterface({
                input: ripgrep.stdout,
                crlfDelay: Infinity,
            });
            lineReader.on('line', line => {
                if (!token.isCancellationRequested) {
                    accept(line);
                }
            });
            lineReader.on('close', () => resolve());
        });
    }
    getSearchArgs(options) {
        const args = ['--files', '--hidden', '--case-sensitive', '--no-require-git', '--no-config'];
        if (options.includePatterns) {
            for (const includePattern of options.includePatterns) {
                if (includePattern) {
                    args.push('--glob', includePattern);
                }
            }
        }
        if (options.excludePatterns) {
            for (const excludePattern of options.excludePatterns) {
                if (excludePattern) {
                    args.push('--glob', `!${excludePattern}`);
                }
            }
        }
        if (options.useGitIgnore) {
            // ripgrep follows `.gitignore` by default, but it doesn't exclude `.git`:
            args.push('--glob', '!.git');
        }
        else {
            args.push('--no-ignore');
        }
        return args;
    }
};
FileSearchServiceImpl = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(core_1.ILogger)),
    __param(1, (0, inversify_1.inject)(node_1.RawProcessFactory)),
    __metadata("design:paramtypes", [Object, Function])
], FileSearchServiceImpl);
exports.FileSearchServiceImpl = FileSearchServiceImpl;


/***/ }),

/***/ "../../packages/filesystem/lib/common/download/file-download-data.js":
/*!***************************************************************************!*\
  !*** ../../packages/filesystem/lib/common/download/file-download-data.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileDownloadData = void 0;
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
var FileDownloadData;
(function (FileDownloadData) {
    function is(arg) {
        return (0, common_1.isObject)(arg) && 'uris' in arg;
    }
    FileDownloadData.is = is;
})(FileDownloadData = exports.FileDownloadData || (exports.FileDownloadData = {}));


/***/ }),

/***/ "../../packages/filesystem/lib/common/file-upload.js":
/*!***********************************************************!*\
  !*** ../../packages/filesystem/lib/common/file-upload.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HTTP_FILE_UPLOAD_PATH = void 0;
exports.HTTP_FILE_UPLOAD_PATH = '/file-upload';


/***/ }),

/***/ "../../packages/filesystem/lib/common/filesystem-watcher-protocol.js":
/*!***************************************************************************!*\
  !*** ../../packages/filesystem/lib/common/filesystem-watcher-protocol.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemWatcherServer = exports.FileSystemWatcherService = void 0;
exports.FileSystemWatcherService = Symbol('FileSystemWatcherServer2');
exports.FileSystemWatcherServer = Symbol('FileSystemWatcherServer');


/***/ }),

/***/ "../../packages/filesystem/lib/common/io.js":
/*!**************************************************!*\
  !*** ../../packages/filesystem/lib/common/io.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/platform/files/common/io.ts
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readFileIntoStream = void 0;
const buffer_1 = __webpack_require__(/*! @theia/core/lib/common//buffer */ "../../packages/core/lib/common/buffer.js");
const cancellation_1 = __webpack_require__(/*! @theia/core/lib/common/cancellation */ "../../packages/core/lib/common/cancellation.js");
const files_1 = __webpack_require__(/*! ./files */ "../../packages/filesystem/lib/common/files.js");
/**
 * A helper to read a file from a provider with open/read/close capability into a stream.
 */
async function readFileIntoStream(provider, resource, target, transformer, options, token) {
    let error = undefined;
    try {
        await doReadFileIntoStream(provider, resource, target, transformer, options, token);
    }
    catch (err) {
        error = err;
    }
    finally {
        if (error && options.errorTransformer) {
            error = options.errorTransformer(error);
        }
        target.end(error);
    }
}
exports.readFileIntoStream = readFileIntoStream;
async function doReadFileIntoStream(provider, resource, target, transformer, options, token) {
    // Check for cancellation
    throwIfCancelled(token);
    // open handle through provider
    const handle = await provider.open(resource, { create: false });
    // Check for cancellation
    throwIfCancelled(token);
    try {
        let totalBytesRead = 0;
        let bytesRead = 0;
        let allowedRemainingBytes = (options && typeof options.length === 'number') ? options.length : undefined;
        let buffer = buffer_1.BinaryBuffer.alloc(Math.min(options.bufferSize, typeof allowedRemainingBytes === 'number' ? allowedRemainingBytes : options.bufferSize));
        let posInFile = options && typeof options.position === 'number' ? options.position : 0;
        let posInBuffer = 0;
        do {
            // read from source (handle) at current position (pos) into buffer (buffer) at
            // buffer position (posInBuffer) up to the size of the buffer (buffer.byteLength).
            bytesRead = await provider.read(handle, posInFile, buffer.buffer, posInBuffer, buffer.byteLength - posInBuffer);
            posInFile += bytesRead;
            posInBuffer += bytesRead;
            totalBytesRead += bytesRead;
            if (typeof allowedRemainingBytes === 'number') {
                allowedRemainingBytes -= bytesRead;
            }
            // when buffer full, create a new one and emit it through stream
            if (posInBuffer === buffer.byteLength) {
                await target.write(transformer(buffer));
                buffer = buffer_1.BinaryBuffer.alloc(Math.min(options.bufferSize, typeof allowedRemainingBytes === 'number' ? allowedRemainingBytes : options.bufferSize));
                posInBuffer = 0;
            }
        } while (bytesRead > 0 && (typeof allowedRemainingBytes !== 'number' || allowedRemainingBytes > 0) && throwIfCancelled(token) && throwIfTooLarge(totalBytesRead, options));
        // wrap up with last buffer (also respect maxBytes if provided)
        if (posInBuffer > 0) {
            let lastChunkLength = posInBuffer;
            if (typeof allowedRemainingBytes === 'number') {
                lastChunkLength = Math.min(posInBuffer, allowedRemainingBytes);
            }
            target.write(transformer(buffer.slice(0, lastChunkLength)));
        }
    }
    catch (error) {
        throw (0, files_1.ensureFileSystemProviderError)(error);
    }
    finally {
        await provider.close(handle);
    }
}
function throwIfCancelled(token) {
    if (token.isCancellationRequested) {
        throw (0, cancellation_1.cancelled)();
    }
    return true;
}
function throwIfTooLarge(totalBytesRead, options) {
    // Return early if file is too large to load and we have configured limits
    if (options === null || options === void 0 ? void 0 : options.limits) {
        if (typeof options.limits.memory === 'number' && totalBytesRead > options.limits.memory) {
            throw (0, files_1.createFileSystemProviderError)('To open a file of this size, you need to restart and allow it to use more memory', files_1.FileSystemProviderErrorCode.FileExceedsMemoryLimit);
        }
        if (typeof options.limits.size === 'number' && totalBytesRead > options.limits.size) {
            throw (0, files_1.createFileSystemProviderError)('File is too large to open', files_1.FileSystemProviderErrorCode.FileTooLarge);
        }
    }
    return true;
}


/***/ }),

/***/ "../../packages/filesystem/lib/common/remote-file-system-provider.js":
/*!***************************************************************************!*\
  !*** ../../packages/filesystem/lib/common/remote-file-system-provider.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemProviderServer = exports.RemoteFileSystemProvider = exports.RemoteFileSystemProxyFactory = exports.RemoteFileSystemProviderError = exports.RemoteFileSystemServer = exports.remoteFileSystemPath = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
const buffer_1 = __webpack_require__(/*! @theia/core/lib/common/buffer */ "../../packages/core/lib/common/buffer.js");
const files_1 = __webpack_require__(/*! ./files */ "../../packages/filesystem/lib/common/files.js");
const proxy_factory_1 = __webpack_require__(/*! @theia/core/lib/common/messaging/proxy-factory */ "../../packages/core/lib/common/messaging/proxy-factory.js");
const application_error_1 = __webpack_require__(/*! @theia/core/lib/common/application-error */ "../../packages/core/lib/common/application-error.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const stream_1 = __webpack_require__(/*! @theia/core/lib/common/stream */ "../../packages/core/lib/common/stream.js");
const cancellation_1 = __webpack_require__(/*! @theia/core/lib/common/cancellation */ "../../packages/core/lib/common/cancellation.js");
exports.remoteFileSystemPath = '/services/remote-filesystem';
exports.RemoteFileSystemServer = Symbol('RemoteFileSystemServer');
exports.RemoteFileSystemProviderError = application_error_1.ApplicationError.declare(-33005, (message, data, stack) => ({ message, data, stack }));
class RemoteFileSystemProxyFactory extends proxy_factory_1.RpcProxyFactory {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    serializeError(e) {
        if (e instanceof files_1.FileSystemProviderError) {
            const { code, name } = e;
            return super.serializeError((0, exports.RemoteFileSystemProviderError)(e.message, { code, name }, e.stack));
        }
        return super.serializeError(e);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    deserializeError(capturedError, e) {
        const error = super.deserializeError(capturedError, e);
        if (exports.RemoteFileSystemProviderError.is(error)) {
            const fileOperationError = new files_1.FileSystemProviderError(error.message, error.data.code);
            fileOperationError.name = error.data.name;
            fileOperationError.stack = error.stack;
            return fileOperationError;
        }
        return e;
    }
}
exports.RemoteFileSystemProxyFactory = RemoteFileSystemProxyFactory;
/**
 * Frontend component.
 *
 * Wraps the remote filesystem provider living on the backend.
 */
let RemoteFileSystemProvider = class RemoteFileSystemProvider {
    constructor() {
        this.onDidChangeFileEmitter = new event_1.Emitter();
        this.onDidChangeFile = this.onDidChangeFileEmitter.event;
        this.onFileWatchErrorEmitter = new event_1.Emitter();
        this.onFileWatchError = this.onFileWatchErrorEmitter.event;
        this.onDidChangeCapabilitiesEmitter = new event_1.Emitter();
        this.onDidChangeCapabilities = this.onDidChangeCapabilitiesEmitter.event;
        this.onFileStreamDataEmitter = new event_1.Emitter();
        this.onFileStreamData = this.onFileStreamDataEmitter.event;
        this.onFileStreamEndEmitter = new event_1.Emitter();
        this.onFileStreamEnd = this.onFileStreamEndEmitter.event;
        this.toDispose = new disposable_1.DisposableCollection(this.onDidChangeFileEmitter, this.onDidChangeCapabilitiesEmitter, this.onFileStreamDataEmitter, this.onFileStreamEndEmitter);
        this.watcherSequence = 0;
        /**
         * We'll track the currently allocated watchers, in order to re-allocate them
         * with the same options once we reconnect to the backend after a disconnection.
         */
        this.watchOptions = new Map();
        this._capabilities = 0;
        this.readyDeferred = new promise_util_1.Deferred();
        this.ready = this.readyDeferred.promise;
    }
    get capabilities() { return this._capabilities; }
    init() {
        this.server.getCapabilities().then(capabilities => {
            this._capabilities = capabilities;
            this.readyDeferred.resolve();
        }, this.readyDeferred.reject);
        this.server.setClient({
            notifyDidChangeFile: ({ changes }) => {
                this.onDidChangeFileEmitter.fire(changes.map(event => ({ resource: new uri_1.default(event.resource), type: event.type })));
            },
            notifyFileWatchError: () => {
                this.onFileWatchErrorEmitter.fire();
            },
            notifyDidChangeCapabilities: capabilities => this.setCapabilities(capabilities),
            onFileStreamData: (handle, data) => this.onFileStreamDataEmitter.fire([handle, data]),
            onFileStreamEnd: (handle, error) => this.onFileStreamEndEmitter.fire([handle, error])
        });
        const onInitialized = this.server.onDidOpenConnection(() => {
            // skip reconnection on the first connection
            onInitialized.dispose();
            this.toDispose.push(this.server.onDidOpenConnection(() => this.reconnect()));
        });
    }
    dispose() {
        this.toDispose.dispose();
    }
    setCapabilities(capabilities) {
        this._capabilities = capabilities;
        this.onDidChangeCapabilitiesEmitter.fire(undefined);
    }
    // --- forwarding calls
    stat(resource) {
        return this.server.stat(resource.toString());
    }
    access(resource, mode) {
        return this.server.access(resource.toString(), mode);
    }
    fsPath(resource) {
        return this.server.fsPath(resource.toString());
    }
    open(resource, opts) {
        return this.server.open(resource.toString(), opts);
    }
    close(fd) {
        return this.server.close(fd);
    }
    async read(fd, pos, data, offset, length) {
        const { bytes, bytesRead } = await this.server.read(fd, pos, length);
        // copy back the data that was written into the buffer on the remote
        // side. we need to do this because buffers are not referenced by
        // pointer, but only by value and as such cannot be directly written
        // to from the other process.
        data.set(bytes.slice(0, bytesRead), offset);
        return bytesRead;
    }
    async readFile(resource) {
        const bytes = await this.server.readFile(resource.toString());
        return bytes;
    }
    readFileStream(resource, opts, token) {
        const capturedError = new Error();
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const stream = (0, stream_1.newWriteableStream)(data => buffer_1.BinaryBuffer.concat(data.map(data => buffer_1.BinaryBuffer.wrap(data))).buffer);
        this.server.readFileStream(resource.toString(), opts, token).then(streamHandle => {
            if (token.isCancellationRequested) {
                stream.end((0, cancellation_1.cancelled)());
                return;
            }
            const toDispose = new disposable_1.DisposableCollection(token.onCancellationRequested(() => stream.end((0, cancellation_1.cancelled)())), this.onFileStreamData(([handle, data]) => {
                if (streamHandle === handle) {
                    stream.write(data);
                }
            }), this.onFileStreamEnd(([handle, error]) => {
                if (streamHandle === handle) {
                    if (error) {
                        const code = ('code' in error && error.code) || files_1.FileSystemProviderErrorCode.Unknown;
                        const fileOperationError = new files_1.FileSystemProviderError(error.message, code);
                        fileOperationError.name = error.name;
                        const capturedStack = capturedError.stack || '';
                        fileOperationError.stack = `${capturedStack}\nCaused by: ${error.stack}`;
                        stream.end(fileOperationError);
                    }
                    else {
                        stream.end();
                    }
                }
            }));
            stream.on('end', () => toDispose.dispose());
        }, error => stream.end(error));
        return stream;
    }
    write(fd, pos, data, offset, length) {
        return this.server.write(fd, pos, data, offset, length);
    }
    writeFile(resource, content, opts) {
        return this.server.writeFile(resource.toString(), content, opts);
    }
    delete(resource, opts) {
        return this.server.delete(resource.toString(), opts);
    }
    mkdir(resource) {
        return this.server.mkdir(resource.toString());
    }
    readdir(resource) {
        return this.server.readdir(resource.toString());
    }
    rename(resource, target, opts) {
        return this.server.rename(resource.toString(), target.toString(), opts);
    }
    copy(resource, target, opts) {
        return this.server.copy(resource.toString(), target.toString(), opts);
    }
    updateFile(resource, changes, opts) {
        return this.server.updateFile(resource.toString(), changes, opts);
    }
    watch(resource, options) {
        const watcherId = this.watcherSequence++;
        const uri = resource.toString();
        this.watchOptions.set(watcherId, { uri, options });
        this.server.watch(watcherId, uri, options);
        const toUnwatch = disposable_1.Disposable.create(() => {
            this.watchOptions.delete(watcherId);
            this.server.unwatch(watcherId);
        });
        this.toDispose.push(toUnwatch);
        return toUnwatch;
    }
    /**
     * When a frontend disconnects (e.g. bad connection) the backend resources will be cleared.
     *
     * This means that we need to re-allocate the watchers when a frontend reconnects.
     */
    reconnect() {
        for (const [watcher, { uri, options }] of this.watchOptions.entries()) {
            this.server.watch(watcher, uri, options);
        }
    }
};
__decorate([
    (0, inversify_1.inject)(exports.RemoteFileSystemServer),
    __metadata("design:type", Object)
], RemoteFileSystemProvider.prototype, "server", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], RemoteFileSystemProvider.prototype, "init", null);
RemoteFileSystemProvider = __decorate([
    (0, inversify_1.injectable)()
], RemoteFileSystemProvider);
exports.RemoteFileSystemProvider = RemoteFileSystemProvider;
/**
 * Backend component.
 *
 * JSON-RPC server exposing a wrapped file system provider remotely.
 */
let FileSystemProviderServer = class FileSystemProviderServer {
    constructor() {
        this.BUFFER_SIZE = 64 * 1024;
        /**
         * Mapping of `watcherId` to a disposable watcher handle.
         */
        this.watchers = new Map();
        this.toDispose = new disposable_1.DisposableCollection();
        this.readFileStreamSeq = 0;
    }
    dispose() {
        this.toDispose.dispose();
    }
    setClient(client) {
        this.client = client;
    }
    init() {
        if (this.provider.dispose) {
            this.toDispose.push(disposable_1.Disposable.create(() => this.provider.dispose()));
        }
        this.toDispose.push(this.provider.onDidChangeCapabilities(() => {
            if (this.client) {
                this.client.notifyDidChangeCapabilities(this.provider.capabilities);
            }
        }));
        this.toDispose.push(this.provider.onDidChangeFile(changes => {
            if (this.client) {
                this.client.notifyDidChangeFile({
                    changes: changes.map(({ resource, type }) => ({ resource: resource.toString(), type }))
                });
            }
        }));
        this.toDispose.push(this.provider.onFileWatchError(() => {
            if (this.client) {
                this.client.notifyFileWatchError();
            }
        }));
    }
    async getCapabilities() {
        return this.provider.capabilities;
    }
    stat(resource) {
        return this.provider.stat(new uri_1.default(resource));
    }
    access(resource, mode) {
        if ((0, files_1.hasAccessCapability)(this.provider)) {
            return this.provider.access(new uri_1.default(resource), mode);
        }
        throw new Error('not supported');
    }
    async fsPath(resource) {
        if ((0, files_1.hasAccessCapability)(this.provider)) {
            return this.provider.fsPath(new uri_1.default(resource));
        }
        throw new Error('not supported');
    }
    open(resource, opts) {
        if ((0, files_1.hasOpenReadWriteCloseCapability)(this.provider)) {
            return this.provider.open(new uri_1.default(resource), opts);
        }
        throw new Error('not supported');
    }
    close(fd) {
        if ((0, files_1.hasOpenReadWriteCloseCapability)(this.provider)) {
            return this.provider.close(fd);
        }
        throw new Error('not supported');
    }
    async read(fd, pos, length) {
        if ((0, files_1.hasOpenReadWriteCloseCapability)(this.provider)) {
            const buffer = buffer_1.BinaryBuffer.alloc(this.BUFFER_SIZE);
            const bytes = buffer.buffer;
            const bytesRead = await this.provider.read(fd, pos, bytes, 0, length);
            return { bytes, bytesRead };
        }
        throw new Error('not supported');
    }
    write(fd, pos, data, offset, length) {
        if ((0, files_1.hasOpenReadWriteCloseCapability)(this.provider)) {
            return this.provider.write(fd, pos, data, offset, length);
        }
        throw new Error('not supported');
    }
    async readFile(resource) {
        if ((0, files_1.hasReadWriteCapability)(this.provider)) {
            return this.provider.readFile(new uri_1.default(resource));
        }
        throw new Error('not supported');
    }
    writeFile(resource, content, opts) {
        if ((0, files_1.hasReadWriteCapability)(this.provider)) {
            return this.provider.writeFile(new uri_1.default(resource), content, opts);
        }
        throw new Error('not supported');
    }
    delete(resource, opts) {
        return this.provider.delete(new uri_1.default(resource), opts);
    }
    mkdir(resource) {
        return this.provider.mkdir(new uri_1.default(resource));
    }
    readdir(resource) {
        return this.provider.readdir(new uri_1.default(resource));
    }
    rename(source, target, opts) {
        return this.provider.rename(new uri_1.default(source), new uri_1.default(target), opts);
    }
    copy(source, target, opts) {
        if ((0, files_1.hasFileFolderCopyCapability)(this.provider)) {
            return this.provider.copy(new uri_1.default(source), new uri_1.default(target), opts);
        }
        throw new Error('not supported');
    }
    updateFile(resource, changes, opts) {
        if ((0, files_1.hasUpdateCapability)(this.provider)) {
            return this.provider.updateFile(new uri_1.default(resource), changes, opts);
        }
        throw new Error('not supported');
    }
    async watch(requestedWatcherId, resource, opts) {
        if (this.watchers.has(requestedWatcherId)) {
            throw new Error('watcher id is already allocated!');
        }
        const watcher = this.provider.watch(new uri_1.default(resource), opts);
        this.watchers.set(requestedWatcherId, watcher);
        this.toDispose.push(disposable_1.Disposable.create(() => this.unwatch(requestedWatcherId)));
    }
    async unwatch(watcherId) {
        const watcher = this.watchers.get(watcherId);
        if (watcher) {
            this.watchers.delete(watcherId);
            watcher.dispose();
        }
    }
    async readFileStream(resource, opts, token) {
        if ((0, files_1.hasFileReadStreamCapability)(this.provider)) {
            const handle = this.readFileStreamSeq++;
            const stream = this.provider.readFileStream(new uri_1.default(resource), opts, token);
            stream.on('data', data => { var _a; return (_a = this.client) === null || _a === void 0 ? void 0 : _a.onFileStreamData(handle, data); });
            stream.on('error', error => {
                var _a;
                const code = error instanceof files_1.FileSystemProviderError ? error.code : undefined;
                const { name, message, stack } = error;
                (_a = this.client) === null || _a === void 0 ? void 0 : _a.onFileStreamEnd(handle, { code, name, message, stack });
            });
            stream.on('end', () => { var _a; return (_a = this.client) === null || _a === void 0 ? void 0 : _a.onFileStreamEnd(handle, undefined); });
            return handle;
        }
        throw new Error('not supported');
    }
};
__decorate([
    (0, inversify_1.inject)(files_1.FileSystemProvider),
    __metadata("design:type", Object)
], FileSystemProviderServer.prototype, "provider", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FileSystemProviderServer.prototype, "init", null);
FileSystemProviderServer = __decorate([
    (0, inversify_1.injectable)()
], FileSystemProviderServer);
exports.FileSystemProviderServer = FileSystemProviderServer;


/***/ }),

/***/ "../../packages/filesystem/lib/node/disk-file-system-provider.js":
/*!***********************************************************************!*\
  !*** ../../packages/filesystem/lib/node/disk-file-system-provider.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/platform/files/node/diskFileSystemProvider.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiskFileSystemProvider = void 0;
/* eslint-disable no-null/no-null */
/* eslint-disable @typescript-eslint/no-shadow */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const path_1 = __webpack_require__(/*! path */ "path");
const uuid_1 = __webpack_require__(/*! uuid */ "../../node_modules/uuid/dist/esm-node/index.js");
const os = __webpack_require__(/*! os */ "os");
const fs = __webpack_require__(/*! fs */ "fs");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const util_1 = __webpack_require__(/*! util */ "util");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const path_2 = __webpack_require__(/*! @theia/core/lib/common/path */ "../../packages/core/lib/common/path.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
const os_1 = __webpack_require__(/*! @theia/core/lib/common/os */ "../../packages/core/lib/common/os.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const files_1 = __webpack_require__(/*! ../common/files */ "../../packages/filesystem/lib/common/files.js");
const filesystem_watcher_protocol_1 = __webpack_require__(/*! ../common/filesystem-watcher-protocol */ "../../packages/filesystem/lib/common/filesystem-watcher-protocol.js");
const trash = __webpack_require__(/*! trash */ "../../node_modules/trash/index.js");
const vscode_languageserver_textdocument_1 = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
const encoding_service_1 = __webpack_require__(/*! @theia/core/lib/common/encoding-service */ "../../packages/core/lib/common/encoding-service.js");
const buffer_1 = __webpack_require__(/*! @theia/core/lib/common/buffer */ "../../packages/core/lib/common/buffer.js");
const stream_1 = __webpack_require__(/*! @theia/core/lib/common/stream */ "../../packages/core/lib/common/stream.js");
const io_1 = __webpack_require__(/*! ../common/io */ "../../packages/filesystem/lib/common/io.js");
const stat_mode_1 = __webpack_require__(/*! stat-mode */ "../../node_modules/stat-mode/dist/src/index.js");
let DiskFileSystemProvider = class DiskFileSystemProvider {
    constructor() {
        this.BUFFER_SIZE = 64 * 1024;
        this.onDidChangeFileEmitter = new event_1.Emitter();
        this.onDidChangeFile = this.onDidChangeFileEmitter.event;
        this.onFileWatchErrorEmitter = new event_1.Emitter();
        this.onFileWatchError = this.onFileWatchErrorEmitter.event;
        this.toDispose = new disposable_1.DisposableCollection(this.onDidChangeFileEmitter);
        // #region File Capabilities
        this.onDidChangeCapabilities = event_1.Event.None;
        this.mapHandleToPos = new Map();
        this.writeHandles = new Set();
        this.canFlush = true;
    }
    init() {
        this.toDispose.push(this.watcher);
        this.watcher.setClient({
            onDidFilesChanged: params => this.onDidChangeFileEmitter.fire(params.changes.map(({ uri, type }) => ({
                resource: new uri_1.default(uri),
                type
            }))),
            onError: () => this.onFileWatchErrorEmitter.fire()
        });
    }
    get capabilities() {
        if (!this._capabilities) {
            this._capabilities =
                2 /* FileReadWrite */ |
                    4 /* FileOpenReadWriteClose */ |
                    16 /* FileReadStream */ |
                    8 /* FileFolderCopy */ |
                    16777216 /* Access */ |
                    4096 /* Trash */ |
                    33554432 /* Update */;
            if (os_1.OS.type() === os_1.OS.Type.Linux) {
                this._capabilities |= 1024 /* PathCaseSensitive */;
            }
        }
        return this._capabilities;
    }
    // #endregion
    // #region File Metadata Resolving
    async stat(resource) {
        try {
            const { stat, symbolicLink } = await this.statLink(this.toFilePath(resource)); // cannot use fs.stat() here to support links properly
            const mode = new stat_mode_1.Mode(stat);
            return {
                type: this.toType(stat, symbolicLink),
                ctime: stat.birthtime.getTime(),
                mtime: stat.mtime.getTime(),
                size: stat.size,
                permissions: !mode.owner.write ? files_1.FilePermission.Readonly : undefined,
            };
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async access(resource, mode) {
        try {
            await (0, util_1.promisify)(fs.access)(this.toFilePath(resource), mode);
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async fsPath(resource) {
        return file_uri_1.FileUri.fsPath(resource);
    }
    async statLink(path) {
        // First stat the link
        let lstats;
        try {
            lstats = await (0, util_1.promisify)(fs_1.lstat)(path);
            // Return early if the stat is not a symbolic link at all
            if (!lstats.isSymbolicLink()) {
                return { stat: lstats };
            }
        }
        catch (error) {
            /* ignore - use stat() instead */
        }
        // If the stat is a symbolic link or failed to stat, use fs.stat()
        // which for symbolic links will stat the target they point to
        try {
            const stats = await (0, util_1.promisify)(fs_1.stat)(path);
            return { stat: stats, symbolicLink: (lstats === null || lstats === void 0 ? void 0 : lstats.isSymbolicLink()) ? { dangling: false } : undefined };
        }
        catch (error) {
            // If the link points to a non-existing file we still want
            // to return it as result while setting dangling: true flag
            if (error.code === 'ENOENT' && lstats) {
                return { stat: lstats, symbolicLink: { dangling: true } };
            }
            throw error;
        }
    }
    async readdir(resource) {
        try {
            const children = await (0, util_1.promisify)(fs.readdir)(this.toFilePath(resource));
            const result = [];
            await Promise.all(children.map(async (child) => {
                try {
                    const stat = await this.stat(resource.resolve(child));
                    result.push([child, stat.type]);
                }
                catch (error) {
                    console.trace(error); // ignore errors for individual entries that can arise from permission denied
                }
            }));
            return result;
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    toType(entry, symbolicLink) {
        // Signal file type by checking for file / directory, except:
        // - symbolic links pointing to non-existing files are FileType.Unknown
        // - files that are neither file nor directory are FileType.Unknown
        let type;
        if (symbolicLink === null || symbolicLink === void 0 ? void 0 : symbolicLink.dangling) {
            type = files_1.FileType.Unknown;
        }
        else if (entry.isFile()) {
            type = files_1.FileType.File;
        }
        else if (entry.isDirectory()) {
            type = files_1.FileType.Directory;
        }
        else {
            type = files_1.FileType.Unknown;
        }
        // Always signal symbolic link as file type additionally
        if (symbolicLink) {
            type |= files_1.FileType.SymbolicLink;
        }
        return type;
    }
    // #endregion
    // #region File Reading/Writing
    async readFile(resource) {
        try {
            const filePath = this.toFilePath(resource);
            return await (0, util_1.promisify)(fs_1.readFile)(filePath);
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    readFileStream(resource, opts, token) {
        const stream = (0, stream_1.newWriteableStream)(data => buffer_1.BinaryBuffer.concat(data.map(data => buffer_1.BinaryBuffer.wrap(data))).buffer);
        (0, io_1.readFileIntoStream)(this, resource, stream, data => data.buffer, {
            ...opts,
            bufferSize: this.BUFFER_SIZE
        }, token);
        return stream;
    }
    async writeFile(resource, content, opts) {
        let handle = undefined;
        try {
            const filePath = this.toFilePath(resource);
            // Validate target unless { create: true, overwrite: true }
            if (!opts.create || !opts.overwrite) {
                const fileExists = await (0, util_1.promisify)(fs_1.exists)(filePath);
                if (fileExists) {
                    if (!opts.overwrite) {
                        throw (0, files_1.createFileSystemProviderError)('File already exists', files_1.FileSystemProviderErrorCode.FileExists);
                    }
                }
                else {
                    if (!opts.create) {
                        throw (0, files_1.createFileSystemProviderError)('File does not exist', files_1.FileSystemProviderErrorCode.FileNotFound);
                    }
                }
            }
            // Open
            handle = await this.open(resource, { create: true });
            // Write content at once
            await this.write(handle, 0, content, 0, content.byteLength);
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
        finally {
            if (typeof handle === 'number') {
                await this.close(handle);
            }
        }
    }
    async open(resource, opts) {
        try {
            const filePath = this.toFilePath(resource);
            let flags = undefined;
            if (opts.create) {
                if (os_1.isWindows && await (0, util_1.promisify)(fs_1.exists)(filePath)) {
                    try {
                        // On Windows and if the file exists, we use a different strategy of saving the file
                        // by first truncating the file and then writing with r+ flag. This helps to save hidden files on Windows
                        // (see https://github.com/Microsoft/vscode/issues/931) and prevent removing alternate data streams
                        // (see https://github.com/Microsoft/vscode/issues/6363)
                        await (0, util_1.promisify)(fs_1.truncate)(filePath, 0);
                        // After a successful truncate() the flag can be set to 'r+' which will not truncate.
                        flags = 'r+';
                    }
                    catch (error) {
                        console.trace(error);
                    }
                }
                // we take opts.create as a hint that the file is opened for writing
                // as such we use 'w' to truncate an existing or create the
                // file otherwise. we do not allow reading.
                if (!flags) {
                    flags = 'w';
                }
            }
            else {
                // otherwise we assume the file is opened for reading
                // as such we use 'r' to neither truncate, nor create
                // the file.
                flags = 'r';
            }
            const handle = await (0, util_1.promisify)(fs_1.open)(filePath, flags);
            // remember this handle to track file position of the handle
            // we init the position to 0 since the file descriptor was
            // just created and the position was not moved so far (see
            // also http://man7.org/linux/man-pages/man2/open.2.html -
            // "The file offset is set to the beginning of the file.")
            this.mapHandleToPos.set(handle, 0);
            // remember that this handle was used for writing
            if (opts.create) {
                this.writeHandles.add(handle);
            }
            return handle;
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async close(fd) {
        try {
            // remove this handle from map of positions
            this.mapHandleToPos.delete(fd);
            // if a handle is closed that was used for writing, ensure
            // to flush the contents to disk if possible.
            if (this.writeHandles.delete(fd) && this.canFlush) {
                try {
                    await (0, util_1.promisify)(fs_1.fdatasync)(fd);
                }
                catch (error) {
                    // In some exotic setups it is well possible that node fails to sync
                    // In that case we disable flushing and log the error to our logger
                    this.canFlush = false;
                    console.error(error);
                }
            }
            return await (0, util_1.promisify)(fs_1.close)(fd);
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async read(fd, pos, data, offset, length) {
        const normalizedPos = this.normalizePos(fd, pos);
        let bytesRead = null;
        try {
            const result = await (0, util_1.promisify)(fs_1.read)(fd, data, offset, length, normalizedPos);
            if (typeof result === 'number') {
                bytesRead = result; // node.d.ts fail
            }
            else {
                bytesRead = result.bytesRead;
            }
            return bytesRead;
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
        finally {
            this.updatePos(fd, normalizedPos, bytesRead);
        }
    }
    normalizePos(fd, pos) {
        // when calling fs.read/write we try to avoid passing in the "pos" argument and
        // rather prefer to pass in "null" because this avoids an extra seek(pos)
        // call that in some cases can even fail (e.g. when opening a file over FTP -
        // see https://github.com/microsoft/vscode/issues/73884).
        //
        // as such, we compare the passed in position argument with our last known
        // position for the file descriptor and use "null" if they match.
        if (pos === this.mapHandleToPos.get(fd)) {
            return null;
        }
        return pos;
    }
    updatePos(fd, pos, bytesLength) {
        const lastKnownPos = this.mapHandleToPos.get(fd);
        if (typeof lastKnownPos === 'number') {
            // pos !== null signals that previously a position was used that is
            // not null. node.js documentation explains, that in this case
            // the internal file pointer is not moving and as such we do not move
            // our position pointer.
            //
            // Docs: "If position is null, data will be read from the current file position,
            // and the file position will be updated. If position is an integer, the file position
            // will remain unchanged."
            if (typeof pos === 'number') {
                // do not modify the position
            }
            else if (typeof bytesLength === 'number') {
                this.mapHandleToPos.set(fd, lastKnownPos + bytesLength);
            }
            else {
                this.mapHandleToPos.delete(fd);
            }
        }
    }
    async write(fd, pos, data, offset, length) {
        // we know at this point that the file to write to is truncated and thus empty
        // if the write now fails, the file remains empty. as such we really try hard
        // to ensure the write succeeds by retrying up to three times.
        return (0, promise_util_1.retry)(() => this.doWrite(fd, pos, data, offset, length), 100 /* ms delay */, 3 /* retries */);
    }
    async doWrite(fd, pos, data, offset, length) {
        const normalizedPos = this.normalizePos(fd, pos);
        let bytesWritten = null;
        try {
            const result = await (0, util_1.promisify)(fs_1.write)(fd, data, offset, length, normalizedPos);
            if (typeof result === 'number') {
                bytesWritten = result; // node.d.ts fail
            }
            else {
                bytesWritten = result.bytesWritten;
            }
            return bytesWritten;
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
        finally {
            this.updatePos(fd, normalizedPos, bytesWritten);
        }
    }
    // #endregion
    // #region Move/Copy/Delete/Create Folder
    async mkdir(resource) {
        try {
            await (0, util_1.promisify)(fs_1.mkdir)(this.toFilePath(resource));
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async delete(resource, opts) {
        try {
            const filePath = this.toFilePath(resource);
            await this.doDelete(filePath, opts);
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    async doDelete(filePath, opts) {
        if (!opts.useTrash) {
            if (opts.recursive) {
                await this.rimraf(filePath);
            }
            else {
                await (0, util_1.promisify)(fs_1.unlink)(filePath);
            }
        }
        else {
            await trash(filePath);
        }
    }
    rimraf(path) {
        if (new path_2.Path(path).isRoot) {
            throw new Error('rimraf - will refuse to recursively delete root');
        }
        return this.rimrafMove(path);
    }
    async rimrafMove(path) {
        try {
            const pathInTemp = (0, path_1.join)(os.tmpdir(), (0, uuid_1.v4)());
            try {
                await (0, util_1.promisify)(fs_1.rename)(path, pathInTemp);
            }
            catch (error) {
                return this.rimrafUnlink(path); // if rename fails, delete without tmp dir
            }
            // Delete but do not return as promise
            this.rimrafUnlink(pathInTemp);
        }
        catch (error) {
            if (error.code !== 'ENOENT') {
                throw error;
            }
        }
    }
    async rimrafUnlink(path) {
        try {
            const stat = await (0, util_1.promisify)(fs_1.lstat)(path);
            // Folder delete (recursive) - NOT for symbolic links though!
            if (stat.isDirectory() && !stat.isSymbolicLink()) {
                // Children
                const children = await (0, util_1.promisify)(fs_1.readdir)(path);
                await Promise.all(children.map(child => this.rimrafUnlink((0, path_1.join)(path, child))));
                // Folder
                await (0, util_1.promisify)(fs_1.rmdir)(path);
            }
            else {
                // chmod as needed to allow for unlink
                const mode = stat.mode;
                if (!(mode & 128)) { // 128 === 0200
                    await (0, util_1.promisify)(fs_1.chmod)(path, mode | 128);
                }
                return (0, util_1.promisify)(fs_1.unlink)(path);
            }
        }
        catch (error) {
            if (error.code !== 'ENOENT') {
                throw error;
            }
        }
    }
    async rename(from, to, opts) {
        const fromFilePath = this.toFilePath(from);
        const toFilePath = this.toFilePath(to);
        if (fromFilePath === toFilePath) {
            return; // simulate node.js behaviour here and do a no-op if paths match
        }
        try {
            // Ensure target does not exist
            await this.validateTargetDeleted(from, to, 'move', opts.overwrite);
            // Move
            await this.move(fromFilePath, toFilePath);
        }
        catch (error) {
            // rewrite some typical errors that can happen especially around symlinks
            // to something the user can better understand
            if (error.code === 'EINVAL' || error.code === 'EBUSY' || error.code === 'ENAMETOOLONG') {
                error = new Error(`Unable to move '${(0, path_1.basename)(fromFilePath)}' into '${(0, path_1.basename)((0, path_1.dirname)(toFilePath))}' (${error.toString()}).`);
            }
            throw this.toFileSystemProviderError(error);
        }
    }
    async move(source, target) {
        if (source === target) {
            return Promise.resolve();
        }
        async function updateMtime(path) {
            const stat = await (0, util_1.promisify)(fs_1.lstat)(path);
            if (stat.isDirectory() || stat.isSymbolicLink()) {
                return Promise.resolve(); // only for files
            }
            const fd = await (0, util_1.promisify)(fs_1.open)(path, 'a');
            try {
                await (0, util_1.promisify)(fs_1.futimes)(fd, stat.atime, new Date());
            }
            catch (error) {
                // ignore
            }
            return (0, util_1.promisify)(fs_1.close)(fd);
        }
        try {
            await (0, util_1.promisify)(fs_1.rename)(source, target);
            await updateMtime(target);
        }
        catch (error) {
            // In two cases we fallback to classic copy and delete:
            //
            // 1.) The EXDEV error indicates that source and target are on different devices
            // In this case, fallback to using a copy() operation as there is no way to
            // rename() between different devices.
            //
            // 2.) The user tries to rename a file/folder that ends with a dot. This is not
            // really possible to move then, at least on UNC devices.
            if (source.toLowerCase() !== target.toLowerCase() && error.code === 'EXDEV' || source.endsWith('.')) {
                await this.doCopy(source, target);
                await this.rimraf(source);
                await updateMtime(target);
            }
            else {
                throw error;
            }
        }
    }
    async copy(from, to, opts) {
        const fromFilePath = this.toFilePath(from);
        const toFilePath = this.toFilePath(to);
        if (fromFilePath === toFilePath) {
            return; // simulate node.js behaviour here and do a no-op if paths match
        }
        try {
            // Ensure target does not exist
            await this.validateTargetDeleted(from, to, 'copy', opts.overwrite);
            // Copy
            await this.doCopy(fromFilePath, toFilePath);
        }
        catch (error) {
            // rewrite some typical errors that can happen especially around symlinks
            // to something the user can better understand
            if (error.code === 'EINVAL' || error.code === 'EBUSY' || error.code === 'ENAMETOOLONG') {
                error = new Error(`Unable to copy '${(0, path_1.basename)(fromFilePath)}' into '${(0, path_1.basename)((0, path_1.dirname)(toFilePath))}' (${error.toString()}).`);
            }
            throw this.toFileSystemProviderError(error);
        }
    }
    async validateTargetDeleted(from, to, mode, overwrite) {
        const isPathCaseSensitive = !!(this.capabilities & 1024 /* PathCaseSensitive */);
        const fromFilePath = this.toFilePath(from);
        const toFilePath = this.toFilePath(to);
        let isSameResourceWithDifferentPathCase = false;
        if (!isPathCaseSensitive) {
            isSameResourceWithDifferentPathCase = fromFilePath.toLowerCase() === toFilePath.toLowerCase();
        }
        if (isSameResourceWithDifferentPathCase && mode === 'copy') {
            throw (0, files_1.createFileSystemProviderError)("'File cannot be copied to same path with different path case", files_1.FileSystemProviderErrorCode.FileExists);
        }
        // handle existing target (unless this is a case change)
        if (!isSameResourceWithDifferentPathCase && await (0, util_1.promisify)(fs_1.exists)(toFilePath)) {
            if (!overwrite) {
                throw (0, files_1.createFileSystemProviderError)('File at target already exists', files_1.FileSystemProviderErrorCode.FileExists);
            }
            // Delete target
            await this.delete(to, { recursive: true, useTrash: false });
        }
    }
    async doCopy(source, target, copiedSourcesIn) {
        const copiedSources = copiedSourcesIn ? copiedSourcesIn : Object.create(null);
        const fileStat = await (0, util_1.promisify)(fs_1.stat)(source);
        if (!fileStat.isDirectory()) {
            return this.doCopyFile(source, target, fileStat.mode & 511);
        }
        if (copiedSources[source]) {
            return Promise.resolve(); // escape when there are cycles (can happen with symlinks)
        }
        copiedSources[source] = true; // remember as copied
        // Create folder
        await this.mkdirp(target, fileStat.mode & 511);
        // Copy each file recursively
        const files = await (0, util_1.promisify)(fs_1.readdir)(source);
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            await this.doCopy((0, path_1.join)(source, file), (0, path_1.join)(target, file), copiedSources);
        }
    }
    async mkdirp(path, mode) {
        const mkdir = async () => {
            try {
                await (0, util_1.promisify)(fs.mkdir)(path, mode);
            }
            catch (error) {
                // ENOENT: a parent folder does not exist yet
                if (error.code === 'ENOENT') {
                    throw error;
                }
                // Any other error: check if folder exists and
                // return normally in that case if its a folder
                let targetIsFile = false;
                try {
                    const fileStat = await (0, util_1.promisify)(fs.stat)(path);
                    targetIsFile = !fileStat.isDirectory();
                }
                catch (statError) {
                    throw error; // rethrow original error if stat fails
                }
                if (targetIsFile) {
                    throw new Error(`'${path}' exists and is not a directory.`);
                }
            }
        };
        // stop at root
        if (path === (0, path_1.dirname)(path)) {
            return;
        }
        try {
            await mkdir();
        }
        catch (error) {
            // ENOENT: a parent folder does not exist yet, continue
            // to create the parent folder and then try again.
            if (error.code === 'ENOENT') {
                await this.mkdirp((0, path_1.dirname)(path), mode);
                return mkdir();
            }
            // Any other error
            throw error;
        }
    }
    doCopyFile(source, target, mode) {
        return new Promise((resolve, reject) => {
            const reader = fs.createReadStream(source);
            const writer = fs.createWriteStream(target, { mode });
            let finished = false;
            const finish = (error) => {
                if (!finished) {
                    finished = true;
                    // in error cases, pass to callback
                    if (error) {
                        return reject(error);
                    }
                    // we need to explicitly chmod because of https://github.com/nodejs/node/issues/1104
                    fs.chmod(target, mode, error => error ? reject(error) : resolve());
                }
            };
            // handle errors properly
            reader.once('error', error => finish(error));
            writer.once('error', error => finish(error));
            // we are done (underlying fd has been closed)
            writer.once('close', () => finish());
            // start piping
            reader.pipe(writer);
        });
    }
    // #endregion
    // #region File Watching
    watch(resource, opts) {
        const watcherService = this.watcher;
        /**
         * Disposable handle. Can be disposed early (before the watcher is allocated.)
         */
        const handle = {
            disposed: false,
            watcherId: undefined,
            dispose() {
                if (this.disposed) {
                    return;
                }
                if (this.watcherId !== undefined) {
                    watcherService.unwatchFileChanges(this.watcherId);
                }
                this.disposed = true;
            },
        };
        watcherService.watchFileChanges(resource.toString(), {
            // Convert from `files.WatchOptions` to internal `watcher-protocol.WatchOptions`:
            ignored: opts.excludes
        }).then(watcherId => {
            if (handle.disposed) {
                watcherService.unwatchFileChanges(watcherId);
            }
            else {
                handle.watcherId = watcherId;
            }
        });
        this.toDispose.push(handle);
        return handle;
    }
    // #endregion
    async updateFile(resource, changes, opts) {
        try {
            const content = await this.readFile(resource);
            const decoded = this.encodingService.decode(buffer_1.BinaryBuffer.wrap(content), opts.readEncoding);
            const newContent = vscode_languageserver_textdocument_1.TextDocument.update(vscode_languageserver_textdocument_1.TextDocument.create('', '', 1, decoded), changes, 2).getText();
            const encoding = await this.encodingService.toResourceEncoding(opts.writeEncoding, {
                overwriteEncoding: opts.overwriteEncoding,
                read: async (length) => {
                    const fd = await this.open(resource, { create: false });
                    try {
                        const data = new Uint8Array(length);
                        await this.read(fd, 0, data, 0, length);
                        return data;
                    }
                    finally {
                        await this.close(fd);
                    }
                }
            });
            const encoded = this.encodingService.encode(newContent, encoding);
            await this.writeFile(resource, encoded.buffer, { create: false, overwrite: true });
            const stat = await this.stat(resource);
            return Object.assign(stat, { encoding: encoding.encoding });
        }
        catch (error) {
            throw this.toFileSystemProviderError(error);
        }
    }
    // #region Helpers
    toFilePath(resource) {
        return (0, path_1.normalize)(file_uri_1.FileUri.fsPath(resource));
    }
    toFileSystemProviderError(error) {
        if (error instanceof files_1.FileSystemProviderError) {
            return error; // avoid double conversion
        }
        let code;
        switch (error.code) {
            case 'ENOENT':
                code = files_1.FileSystemProviderErrorCode.FileNotFound;
                break;
            case 'EISDIR':
                code = files_1.FileSystemProviderErrorCode.FileIsADirectory;
                break;
            case 'ENOTDIR':
                code = files_1.FileSystemProviderErrorCode.FileNotADirectory;
                break;
            case 'EEXIST':
                code = files_1.FileSystemProviderErrorCode.FileExists;
                break;
            case 'EPERM':
            case 'EACCES':
                code = files_1.FileSystemProviderErrorCode.NoPermissions;
                break;
            default:
                code = files_1.FileSystemProviderErrorCode.Unknown;
        }
        return (0, files_1.createFileSystemProviderError)(error, code);
    }
    // #endregion
    dispose() {
        this.toDispose.dispose();
    }
};
__decorate([
    (0, inversify_1.inject)(filesystem_watcher_protocol_1.FileSystemWatcherServer),
    __metadata("design:type", Object)
], DiskFileSystemProvider.prototype, "watcher", void 0);
__decorate([
    (0, inversify_1.inject)(encoding_service_1.EncodingService),
    __metadata("design:type", encoding_service_1.EncodingService)
], DiskFileSystemProvider.prototype, "encodingService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiskFileSystemProvider.prototype, "init", null);
DiskFileSystemProvider = __decorate([
    (0, inversify_1.injectable)()
], DiskFileSystemProvider);
exports.DiskFileSystemProvider = DiskFileSystemProvider;


/***/ }),

/***/ "../../packages/filesystem/lib/node/download/directory-archiver.js":
/*!*************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/download/directory-archiver.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DirectoryArchiver = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const tar_fs_1 = __webpack_require__(/*! tar-fs */ "../../packages/filesystem/node_modules/tar-fs/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
let DirectoryArchiver = class DirectoryArchiver {
    async archive(inputPath, outputPath, entries) {
        return new Promise(async (resolve, reject) => {
            (0, tar_fs_1.pack)(inputPath, { entries }).pipe(fs.createWriteStream(outputPath)).on('finish', () => resolve()).on('error', e => reject(e));
        });
    }
    async findCommonParents(uris) {
        const map = new Map();
        for (const uri of uris) {
            // 1. Get the container if not the URI is not a directory.
            const containerUri = (await this.isDir(uri)) ? uri : uri.parent;
            let containerUriStr = this.toUriString(containerUri);
            // 2. If the container already registered, just append the current URI to it.
            if (map.has(containerUriStr)) {
                map.set(containerUriStr, [...map.get(containerUriStr), this.toUriString(uri)]);
            }
            else {
                // 3. Try to find the longest container URI that we can use.
                // When we have `/A/B/` and `/A/C` and a file `A/B/C/D.txt` then we need to find `/A/B`. The longest URIs come first.
                for (const knownContainerUri of Array.from(map.keys()).sort((left, right) => right.length - left.length)) {
                    if (uri.toString().startsWith(knownContainerUri)) {
                        containerUriStr = knownContainerUri;
                        break;
                    }
                }
                const entries = map.get(containerUriStr) || [];
                entries.push(this.toUriString(uri));
                map.set(containerUriStr, entries);
            }
            // 4. Collapse the hierarchy by finding the closest common parents for the entries, if any.
            let collapsed = false;
            collapseLoop: while (!collapsed) {
                const knownContainerUris = Array.from(map.keys()).sort((left, right) => right.length - left.length);
                if (knownContainerUris.length > 1) {
                    for (let i = 0; i < knownContainerUris.length; i++) {
                        for (let j = i + 1; j < knownContainerUris.length; j++) {
                            const left = knownContainerUris[i];
                            const right = knownContainerUris[j];
                            const commonParent = this.closestCommonParentUri(new uri_1.default(left), new uri_1.default(right));
                            if (commonParent && !commonParent.path.isRoot) {
                                const leftEntries = map.get(left) || [];
                                const rightEntries = map.get(right) || [];
                                map.delete(left);
                                map.delete(right);
                                map.set(this.toUriString(commonParent), [...leftEntries, ...rightEntries]);
                                break collapseLoop;
                            }
                        }
                    }
                }
                collapsed = true;
            }
        }
        return map;
    }
    closestCommonParentUri(left, right) {
        if (left.scheme !== right.scheme) {
            return undefined;
        }
        const allLeft = left.allLocations;
        const allRight = right.allLocations;
        for (const leftUri of allLeft) {
            for (const rightUri of allRight) {
                if (this.equal(leftUri, rightUri)) {
                    return leftUri;
                }
            }
        }
        return undefined;
    }
    async isDir(uri) {
        try {
            const stat = await fs.stat(file_uri_1.FileUri.fsPath(uri));
            return stat.isDirectory();
        }
        catch {
            return false;
        }
    }
    equal(left, right) {
        if (Array.isArray(left) && Array.isArray(right)) {
            if (left === right) {
                return true;
            }
            if (left.length !== right.length) {
                return false;
            }
            return left.map(this.toUriString).sort().toString() === right.map(this.toUriString).sort().toString();
        }
        else if (left instanceof uri_1.default && right instanceof uri_1.default) {
            return this.toUriString(left) === this.toUriString(right);
        }
        return false;
    }
    toUriString(uri) {
        const raw = uri.toString();
        return raw.endsWith('/') ? raw.slice(0, -1) : raw;
    }
};
DirectoryArchiver = __decorate([
    (0, inversify_1.injectable)()
], DirectoryArchiver);
exports.DirectoryArchiver = DirectoryArchiver;


/***/ }),

/***/ "../../packages/filesystem/lib/node/download/file-download-backend-module.js":
/*!***********************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/download/file-download-backend-module.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const backend_application_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application */ "../../packages/core/lib/node/backend-application.js");
const file_download_endpoint_1 = __webpack_require__(/*! ./file-download-endpoint */ "../../packages/filesystem/lib/node/download/file-download-endpoint.js");
const file_download_handler_1 = __webpack_require__(/*! ./file-download-handler */ "../../packages/filesystem/lib/node/download/file-download-handler.js");
const directory_archiver_1 = __webpack_require__(/*! ./directory-archiver */ "../../packages/filesystem/lib/node/download/directory-archiver.js");
const file_download_cache_1 = __webpack_require__(/*! ./file-download-cache */ "../../packages/filesystem/lib/node/download/file-download-cache.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(file_download_endpoint_1.FileDownloadEndpoint).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(file_download_endpoint_1.FileDownloadEndpoint);
    bind(file_download_cache_1.FileDownloadCache).toSelf().inSingletonScope();
    bind(file_download_handler_1.FileDownloadHandler).to(file_download_handler_1.SingleFileDownloadHandler).inSingletonScope().whenTargetNamed(file_download_handler_1.FileDownloadHandler.SINGLE);
    bind(file_download_handler_1.FileDownloadHandler).to(file_download_handler_1.MultiFileDownloadHandler).inSingletonScope().whenTargetNamed(file_download_handler_1.FileDownloadHandler.MULTI);
    bind(file_download_handler_1.FileDownloadHandler).to(file_download_handler_1.DownloadLinkHandler).inSingletonScope().whenTargetNamed(file_download_handler_1.FileDownloadHandler.DOWNLOAD_LINK);
    bind(directory_archiver_1.DirectoryArchiver).toSelf().inSingletonScope();
});


/***/ }),

/***/ "../../packages/filesystem/lib/node/download/file-download-cache.js":
/*!**************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/download/file-download-cache.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileDownloadCache = void 0;
// *****************************************************************************
// Copyright (C) 2019 Bitsler and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const rimraf = __webpack_require__(/*! rimraf */ "../../node_modules/rimraf/rimraf.js");
let FileDownloadCache = class FileDownloadCache {
    constructor() {
        this.downloads = new Map();
        this.expireTimeInMinutes = 1;
    }
    addDownload(id, downloadInfo) {
        downloadInfo.file = encodeURIComponent(downloadInfo.file);
        if (downloadInfo.root) {
            downloadInfo.root = encodeURIComponent(downloadInfo.root);
        }
        // expires in 1 minute enough for parallel connections to be connected.
        downloadInfo.expire = Date.now() + (this.expireTimeInMinutes * 600000);
        this.downloads.set(id, downloadInfo);
    }
    getDownload(id) {
        this.expireDownloads();
        const downloadInfo = this.downloads.get(id);
        if (downloadInfo) {
            downloadInfo.file = decodeURIComponent(downloadInfo.file);
            if (downloadInfo.root) {
                downloadInfo.root = decodeURIComponent(downloadInfo.root);
            }
        }
        return downloadInfo;
    }
    deleteDownload(id) {
        const downloadInfo = this.downloads.get(id);
        if (downloadInfo && downloadInfo.remove) {
            this.deleteRecursively(downloadInfo.root || downloadInfo.file);
        }
        this.downloads.delete(id);
    }
    values() {
        this.expireDownloads();
        return [...this.downloads.entries()].reduce((downloads, [key, value]) => ({ ...downloads, [key]: value }), {});
    }
    deleteRecursively(pathToDelete) {
        rimraf(pathToDelete, error => {
            if (error) {
                this.logger.warn(`An error occurred while deleting the temporary data from the disk. Cannot clean up: ${pathToDelete}.`, error);
            }
        });
    }
    expireDownloads() {
        const time = Date.now();
        for (const [id, download] of this.downloads.entries()) {
            if (download.expire && download.expire <= time) {
                this.deleteDownload(id);
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(logger_1.ILogger),
    __metadata("design:type", Object)
], FileDownloadCache.prototype, "logger", void 0);
FileDownloadCache = __decorate([
    (0, inversify_1.injectable)()
], FileDownloadCache);
exports.FileDownloadCache = FileDownloadCache;


/***/ }),

/***/ "../../packages/filesystem/lib/node/download/file-download-endpoint.js":
/*!*****************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/download/file-download-endpoint.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FileDownloadEndpoint_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileDownloadEndpoint = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const url = __webpack_require__(/*! url */ "url");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const body_parser_1 = __webpack_require__(/*! body-parser */ "../../node_modules/body-parser/index.js");
const express_1 = __webpack_require__(/*! @theia/core/shared/express */ "../../packages/core/shared/express/index.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const file_download_handler_1 = __webpack_require__(/*! ./file-download-handler */ "../../packages/filesystem/lib/node/download/file-download-handler.js");
let FileDownloadEndpoint = FileDownloadEndpoint_1 = class FileDownloadEndpoint {
    configure(app) {
        const router = (0, express_1.Router)();
        router.get('/download', (request, response) => this.downloadLinkHandler.handle(request, response));
        router.get('/', (request, response) => this.singleFileDownloadHandler.handle(request, response));
        router.put('/', (request, response) => this.multiFileDownloadHandler.handle(request, response));
        // Content-Type: application/json
        app.use((0, body_parser_1.json)());
        app.use(FileDownloadEndpoint_1.PATH, router);
        app.get('/file', (request, response) => {
            const uri = url.parse(request.url).query;
            if (!uri) {
                response.status(400).send('invalid uri');
                return;
            }
            const fsPath = file_uri_1.FileUri.fsPath(decodeURIComponent(uri));
            response.sendFile(fsPath);
        });
    }
};
FileDownloadEndpoint.PATH = '/files';
__decorate([
    (0, inversify_1.inject)(file_download_handler_1.FileDownloadHandler),
    (0, inversify_1.named)(file_download_handler_1.FileDownloadHandler.SINGLE),
    __metadata("design:type", file_download_handler_1.FileDownloadHandler)
], FileDownloadEndpoint.prototype, "singleFileDownloadHandler", void 0);
__decorate([
    (0, inversify_1.inject)(file_download_handler_1.FileDownloadHandler),
    (0, inversify_1.named)(file_download_handler_1.FileDownloadHandler.MULTI),
    __metadata("design:type", file_download_handler_1.FileDownloadHandler)
], FileDownloadEndpoint.prototype, "multiFileDownloadHandler", void 0);
__decorate([
    (0, inversify_1.inject)(file_download_handler_1.FileDownloadHandler),
    (0, inversify_1.named)(file_download_handler_1.FileDownloadHandler.DOWNLOAD_LINK),
    __metadata("design:type", file_download_handler_1.FileDownloadHandler)
], FileDownloadEndpoint.prototype, "downloadLinkHandler", void 0);
FileDownloadEndpoint = FileDownloadEndpoint_1 = __decorate([
    (0, inversify_1.injectable)()
], FileDownloadEndpoint);
exports.FileDownloadEndpoint = FileDownloadEndpoint;


/***/ }),

/***/ "../../packages/filesystem/lib/node/download/file-download-handler.js":
/*!****************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/download/file-download-handler.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiFileDownloadHandler = exports.SingleFileDownloadHandler = exports.DownloadLinkHandler = exports.FileDownloadHandler = void 0;
const os = __webpack_require__(/*! os */ "os");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const uuid_1 = __webpack_require__(/*! uuid */ "../../node_modules/uuid/dist/esm-node/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const http_status_codes_1 = __webpack_require__(/*! http-status-codes */ "../../node_modules/http-status-codes/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const objects_1 = __webpack_require__(/*! @theia/core/lib/common/objects */ "../../packages/core/lib/common/objects.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const directory_archiver_1 = __webpack_require__(/*! ./directory-archiver */ "../../packages/filesystem/lib/node/download/directory-archiver.js");
const file_download_data_1 = __webpack_require__(/*! ../../common/download/file-download-data */ "../../packages/filesystem/lib/common/download/file-download-data.js");
const file_download_cache_1 = __webpack_require__(/*! ./file-download-cache */ "../../packages/filesystem/lib/node/download/file-download-cache.js");
let FileDownloadHandler = class FileDownloadHandler {
    /**
     * Prepares the file and the link for download
     */
    async prepareDownload(request, response, options) {
        const name = path.basename(options.filePath);
        try {
            await fs.access(options.filePath, fs.constants.R_OK);
            const stat = await fs.stat(options.filePath);
            this.fileDownloadCache.addDownload(options.downloadId, { file: options.filePath, remove: options.remove, size: stat.size, root: options.root });
            // do not send filePath but instead use the downloadId
            const data = { name, id: options.downloadId };
            response.status(http_status_codes_1.OK).send(data).end();
        }
        catch (e) {
            this.handleError(response, e, http_status_codes_1.INTERNAL_SERVER_ERROR);
        }
    }
    async download(request, response, downloadInfo, id) {
        const filePath = downloadInfo.file;
        const statSize = downloadInfo.size;
        // this sets the content-disposition and content-type automatically
        response.attachment(filePath);
        try {
            await fs.access(filePath, fs.constants.R_OK);
            response.setHeader('Accept-Ranges', 'bytes');
            // parse range header and combine multiple ranges
            const range = this.parseRangeHeader(request.headers['range'], statSize);
            if (!range) {
                response.setHeader('Content-Length', statSize);
                this.streamDownload(http_status_codes_1.OK, response, fs.createReadStream(filePath), id);
            }
            else {
                const rangeStart = range.start;
                const rangeEnd = range.end;
                if (rangeStart >= statSize || rangeEnd >= statSize) {
                    response.setHeader('Content-Range', `bytes */${statSize}`);
                    // Return the 416 'Requested Range Not Satisfiable'.
                    response.status(http_status_codes_1.REQUESTED_RANGE_NOT_SATISFIABLE).end();
                    return;
                }
                response.setHeader('Content-Range', `bytes ${rangeStart}-${rangeEnd}/${statSize}`);
                response.setHeader('Content-Length', rangeStart === rangeEnd ? 0 : (rangeEnd - rangeStart + 1));
                response.setHeader('Cache-Control', 'no-cache');
                this.streamDownload(http_status_codes_1.PARTIAL_CONTENT, response, fs.createReadStream(filePath, { start: rangeStart, end: rangeEnd }), id);
            }
        }
        catch (e) {
            this.fileDownloadCache.deleteDownload(id);
            this.handleError(response, e, http_status_codes_1.INTERNAL_SERVER_ERROR);
        }
    }
    /**
     * Streams the file and pipe it to the Response to avoid any OOM issues
     */
    streamDownload(status, response, stream, id) {
        response.status(status);
        stream.on('error', error => {
            this.fileDownloadCache.deleteDownload(id);
            this.handleError(response, error, http_status_codes_1.INTERNAL_SERVER_ERROR);
        });
        response.on('error', error => {
            this.fileDownloadCache.deleteDownload(id);
            this.handleError(response, error, http_status_codes_1.INTERNAL_SERVER_ERROR);
        });
        response.on('close', () => {
            stream.destroy();
        });
        stream.pipe(response);
    }
    parseRangeHeader(range, statSize) {
        if (!range || range.length === 0 || Array.isArray(range)) {
            return;
        }
        const index = range.indexOf('=');
        if (index === -1) {
            return;
        }
        const rangeType = range.slice(0, index);
        if (rangeType !== 'bytes') {
            return;
        }
        const [start, end] = range.slice(index + 1).split('-').map(r => parseInt(r, 10));
        return {
            start: isNaN(start) ? 0 : start,
            end: (isNaN(end) || end > statSize - 1) ? (statSize - 1) : end
        };
    }
    async archive(inputPath, outputPath = path.join(os.tmpdir(), (0, uuid_1.v4)()), entries) {
        await this.directoryArchiver.archive(inputPath, outputPath, entries);
        return outputPath;
    }
    async createTempDir(downloadId = (0, uuid_1.v4)()) {
        const outputPath = path.join(os.tmpdir(), downloadId);
        await fs.mkdir(outputPath);
        return outputPath;
    }
    async handleError(response, reason, status = http_status_codes_1.INTERNAL_SERVER_ERROR) {
        this.logger.error(reason);
        response.status(status).send('Unable to download file.').end();
    }
};
__decorate([
    (0, inversify_1.inject)(logger_1.ILogger),
    __metadata("design:type", Object)
], FileDownloadHandler.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(directory_archiver_1.DirectoryArchiver),
    __metadata("design:type", directory_archiver_1.DirectoryArchiver)
], FileDownloadHandler.prototype, "directoryArchiver", void 0);
__decorate([
    (0, inversify_1.inject)(file_download_cache_1.FileDownloadCache),
    __metadata("design:type", file_download_cache_1.FileDownloadCache)
], FileDownloadHandler.prototype, "fileDownloadCache", void 0);
FileDownloadHandler = __decorate([
    (0, inversify_1.injectable)()
], FileDownloadHandler);
exports.FileDownloadHandler = FileDownloadHandler;
(function (FileDownloadHandler) {
    FileDownloadHandler.SINGLE = Symbol('single');
    FileDownloadHandler.MULTI = Symbol('multi');
    FileDownloadHandler.DOWNLOAD_LINK = Symbol('download');
})(FileDownloadHandler = exports.FileDownloadHandler || (exports.FileDownloadHandler = {}));
exports.FileDownloadHandler = FileDownloadHandler;
let DownloadLinkHandler = class DownloadLinkHandler extends FileDownloadHandler {
    async handle(request, response) {
        const { method, query } = request;
        if (method !== 'GET' && method !== 'HEAD') {
            this.handleError(response, `Unexpected HTTP method. Expected GET got '${method}' instead.`, http_status_codes_1.METHOD_NOT_ALLOWED);
            return;
        }
        if (query === undefined || query.id === undefined || typeof query.id !== 'string') {
            this.handleError(response, `Cannot access the 'id' query from the request. The query was: ${JSON.stringify(query)}.`, http_status_codes_1.BAD_REQUEST);
            return;
        }
        const cancelDownload = query.cancel;
        const downloadInfo = this.fileDownloadCache.getDownload(query.id);
        if (!downloadInfo) {
            this.handleError(response, `Cannot find the file from the request. The query was: ${JSON.stringify(query)}.`, http_status_codes_1.NOT_FOUND);
            return;
        }
        // allow head request to determine the content length for parallel downloaders
        if (method === 'HEAD') {
            response.setHeader('Content-Length', downloadInfo.size);
            response.status(http_status_codes_1.OK).end();
            return;
        }
        if (!cancelDownload) {
            this.download(request, response, downloadInfo, query.id);
        }
        else {
            this.logger.info('Download', query.id, 'has been cancelled');
            this.fileDownloadCache.deleteDownload(query.id);
        }
    }
};
DownloadLinkHandler = __decorate([
    (0, inversify_1.injectable)()
], DownloadLinkHandler);
exports.DownloadLinkHandler = DownloadLinkHandler;
let SingleFileDownloadHandler = class SingleFileDownloadHandler extends FileDownloadHandler {
    async handle(request, response) {
        const { method, body, query } = request;
        if (method !== 'GET') {
            this.handleError(response, `Unexpected HTTP method. Expected GET got '${method}' instead.`, http_status_codes_1.METHOD_NOT_ALLOWED);
            return;
        }
        if (body !== undefined && !(0, objects_1.isEmpty)(body)) {
            this.handleError(response, `The request body must either undefined or empty when downloading a single file. The body was: ${JSON.stringify(body)}.`, http_status_codes_1.BAD_REQUEST);
            return;
        }
        if (query === undefined || query.uri === undefined || typeof query.uri !== 'string') {
            this.handleError(response, `Cannot access the 'uri' query from the request. The query was: ${JSON.stringify(query)}.`, http_status_codes_1.BAD_REQUEST);
            return;
        }
        const uri = new uri_1.default(query.uri).toString(true);
        const filePath = file_uri_1.FileUri.fsPath(uri);
        let stat;
        try {
            stat = await fs.stat(filePath);
        }
        catch {
            this.handleError(response, `The file does not exist. URI: ${uri}.`, http_status_codes_1.NOT_FOUND);
            return;
        }
        try {
            const downloadId = (0, uuid_1.v4)();
            const options = { filePath, downloadId, remove: false };
            if (!stat.isDirectory()) {
                await this.prepareDownload(request, response, options);
            }
            else {
                const outputRootPath = await this.createTempDir(downloadId);
                const outputPath = path.join(outputRootPath, `${path.basename(filePath)}.tar`);
                await this.archive(filePath, outputPath);
                options.filePath = outputPath;
                options.remove = true;
                options.root = outputRootPath;
                await this.prepareDownload(request, response, options);
            }
        }
        catch (e) {
            this.handleError(response, e, http_status_codes_1.INTERNAL_SERVER_ERROR);
        }
    }
};
SingleFileDownloadHandler = __decorate([
    (0, inversify_1.injectable)()
], SingleFileDownloadHandler);
exports.SingleFileDownloadHandler = SingleFileDownloadHandler;
let MultiFileDownloadHandler = class MultiFileDownloadHandler extends FileDownloadHandler {
    async handle(request, response) {
        const { method, body } = request;
        if (method !== 'PUT') {
            this.handleError(response, `Unexpected HTTP method. Expected PUT got '${method}' instead.`, http_status_codes_1.METHOD_NOT_ALLOWED);
            return;
        }
        if (body === undefined) {
            this.handleError(response, 'The request body must be defined when downloading multiple files.', http_status_codes_1.BAD_REQUEST);
            return;
        }
        if (!file_download_data_1.FileDownloadData.is(body)) {
            this.handleError(response, `Unexpected body format. Cannot extract the URIs from the request body. Body was: ${JSON.stringify(body)}.`, http_status_codes_1.BAD_REQUEST);
            return;
        }
        if (body.uris.length === 0) {
            this.handleError(response, `Insufficient body format. No URIs were defined by the request body. Body was: ${JSON.stringify(body)}.`, http_status_codes_1.BAD_REQUEST);
            return;
        }
        for (const uri of body.uris) {
            try {
                await fs.access(file_uri_1.FileUri.fsPath(uri));
            }
            catch {
                this.handleError(response, `The file does not exist. URI: ${uri}.`, http_status_codes_1.NOT_FOUND);
                return;
            }
        }
        try {
            const downloadId = (0, uuid_1.v4)();
            const outputRootPath = await this.createTempDir(downloadId);
            const distinctUris = Array.from(new Set(body.uris.map(uri => new uri_1.default(uri))));
            const tarPaths = [];
            // We should have one key in the map per FS drive.
            for (const [rootUri, uris] of (await this.directoryArchiver.findCommonParents(distinctUris)).entries()) {
                const rootPath = file_uri_1.FileUri.fsPath(rootUri);
                const entries = uris.map(file_uri_1.FileUri.fsPath).map(p => path.relative(rootPath, p));
                const outputPath = path.join(outputRootPath, `${path.basename(rootPath)}.tar`);
                await this.archive(rootPath, outputPath, entries);
                tarPaths.push(outputPath);
            }
            const options = { filePath: '', downloadId, remove: true, root: outputRootPath };
            if (tarPaths.length === 1) {
                // tslint:disable-next-line:whitespace
                const [outputPath,] = tarPaths;
                options.filePath = outputPath;
                await this.prepareDownload(request, response, options);
            }
            else {
                // We need to tar the tars.
                const outputPath = path.join(outputRootPath, `theia-archive-${Date.now()}.tar`);
                options.filePath = outputPath;
                await this.archive(outputRootPath, outputPath, tarPaths.map(p => path.relative(outputRootPath, p)));
                await this.prepareDownload(request, response, options);
            }
        }
        catch (e) {
            this.handleError(response, e, http_status_codes_1.INTERNAL_SERVER_ERROR);
        }
    }
};
MultiFileDownloadHandler = __decorate([
    (0, inversify_1.injectable)()
], MultiFileDownloadHandler);
exports.MultiFileDownloadHandler = MultiFileDownloadHandler;


/***/ }),

/***/ "../../packages/filesystem/lib/node/filesystem-backend-module.js":
/*!***********************************************************************!*\
  !*** ../../packages/filesystem/lib/node/filesystem-backend-module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.spawnNsfwFileSystemWatcherServiceProcess = exports.createNsfwFileSystemWatcherService = exports.bindFileSystemWatcherServer = exports.NsfwFileSystemWatcherServiceProcessOptions = exports.NSFW_WATCHER_VERBOSE = exports.NSFW_SINGLE_THREADED = void 0;
const path = __webpack_require__(/*! path */ "path");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const filesystem_watcher_protocol_1 = __webpack_require__(/*! ../common/filesystem-watcher-protocol */ "../../packages/filesystem/lib/common/filesystem-watcher-protocol.js");
const filesystem_watcher_client_1 = __webpack_require__(/*! ./filesystem-watcher-client */ "../../packages/filesystem/lib/node/filesystem-watcher-client.js");
const nsfw_filesystem_service_1 = __webpack_require__(/*! ./nsfw-watcher/nsfw-filesystem-service */ "../../packages/filesystem/lib/node/nsfw-watcher/nsfw-filesystem-service.js");
const node_file_upload_service_1 = __webpack_require__(/*! ./node-file-upload-service */ "../../packages/filesystem/lib/node/node-file-upload-service.js");
const nsfw_options_1 = __webpack_require__(/*! ./nsfw-watcher/nsfw-options */ "../../packages/filesystem/lib/node/nsfw-watcher/nsfw-options.js");
const disk_file_system_provider_1 = __webpack_require__(/*! ./disk-file-system-provider */ "../../packages/filesystem/lib/node/disk-file-system-provider.js");
const remote_file_system_provider_1 = __webpack_require__(/*! ../common/remote-file-system-provider */ "../../packages/filesystem/lib/common/remote-file-system-provider.js");
const files_1 = __webpack_require__(/*! ../common/files */ "../../packages/filesystem/lib/common/files.js");
const encoding_service_1 = __webpack_require__(/*! @theia/core/lib/common/encoding-service */ "../../packages/core/lib/common/encoding-service.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const filesystem_watcher_dispatcher_1 = __webpack_require__(/*! ./filesystem-watcher-dispatcher */ "../../packages/filesystem/lib/node/filesystem-watcher-dispatcher.js");
exports.NSFW_SINGLE_THREADED = process.argv.includes('--no-cluster');
exports.NSFW_WATCHER_VERBOSE = process.argv.includes('--nsfw-watcher-verbose');
exports.NsfwFileSystemWatcherServiceProcessOptions = Symbol('NsfwFileSystemWatcherServiceProcessOptions');
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(encoding_service_1.EncodingService).toSelf().inSingletonScope();
    bindFileSystemWatcherServer(bind);
    bind(disk_file_system_provider_1.DiskFileSystemProvider).toSelf();
    bind(files_1.FileSystemProvider).toService(disk_file_system_provider_1.DiskFileSystemProvider);
    bind(remote_file_system_provider_1.FileSystemProviderServer).toSelf();
    bind(remote_file_system_provider_1.RemoteFileSystemServer).toService(remote_file_system_provider_1.FileSystemProviderServer);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(remote_file_system_provider_1.remoteFileSystemPath, client => {
        const server = ctx.container.get(remote_file_system_provider_1.RemoteFileSystemServer);
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    }, remote_file_system_provider_1.RemoteFileSystemProxyFactory)).inSingletonScope();
    bind(node_file_upload_service_1.NodeFileUploadService).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(node_file_upload_service_1.NodeFileUploadService);
});
function bindFileSystemWatcherServer(bind) {
    bind(nsfw_options_1.NsfwOptions).toConstantValue({});
    bind(filesystem_watcher_dispatcher_1.FileSystemWatcherServiceDispatcher).toSelf().inSingletonScope();
    bind(filesystem_watcher_client_1.FileSystemWatcherServerClient).toSelf();
    bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).toService(filesystem_watcher_client_1.FileSystemWatcherServerClient);
    bind(exports.NsfwFileSystemWatcherServiceProcessOptions).toDynamicValue(ctx => ({
        entryPoint: path.join(__dirname, 'nsfw-watcher'),
    })).inSingletonScope();
    bind(nsfw_filesystem_service_1.NsfwFileSystemWatcherServerOptions).toDynamicValue(ctx => {
        const logger = ctx.container.get(common_1.ILogger);
        const nsfwOptions = ctx.container.get(nsfw_options_1.NsfwOptions);
        return {
            nsfwOptions,
            verbose: exports.NSFW_WATCHER_VERBOSE,
            info: (message, ...args) => logger.info(message, ...args),
            error: (message, ...args) => logger.error(message, ...args),
        };
    }).inSingletonScope();
    bind(filesystem_watcher_protocol_1.FileSystemWatcherService).toDynamicValue(ctx => exports.NSFW_SINGLE_THREADED
        ? createNsfwFileSystemWatcherService(ctx)
        : spawnNsfwFileSystemWatcherServiceProcess(ctx)).inSingletonScope();
}
exports.bindFileSystemWatcherServer = bindFileSystemWatcherServer;
/**
 * Run the watch server in the current process.
 */
function createNsfwFileSystemWatcherService(ctx) {
    const options = ctx.container.get(nsfw_filesystem_service_1.NsfwFileSystemWatcherServerOptions);
    const dispatcher = ctx.container.get(filesystem_watcher_dispatcher_1.FileSystemWatcherServiceDispatcher);
    const server = new nsfw_filesystem_service_1.NsfwFileSystemWatcherService(options);
    server.setClient(dispatcher);
    return server;
}
exports.createNsfwFileSystemWatcherService = createNsfwFileSystemWatcherService;
/**
 * Run the watch server in a child process.
 * Return a proxy forwarding calls to the child process.
 */
function spawnNsfwFileSystemWatcherServiceProcess(ctx) {
    const options = ctx.container.get(exports.NsfwFileSystemWatcherServiceProcessOptions);
    const dispatcher = ctx.container.get(filesystem_watcher_dispatcher_1.FileSystemWatcherServiceDispatcher);
    const serverName = 'nsfw-watcher';
    const logger = ctx.container.get(common_1.ILogger);
    const nsfwOptions = ctx.container.get(nsfw_options_1.NsfwOptions);
    const ipcConnectionProvider = ctx.container.get(node_1.IPCConnectionProvider);
    const proxyFactory = new core_1.RpcProxyFactory();
    const serverProxy = proxyFactory.createProxy();
    // We need to call `.setClient` before listening, else the JSON-RPC calls won't go through.
    serverProxy.setClient(dispatcher);
    const args = [
        `--nsfwOptions=${JSON.stringify(nsfwOptions)}`
    ];
    if (exports.NSFW_WATCHER_VERBOSE) {
        args.push('--verbose');
    }
    ipcConnectionProvider.listen({
        serverName,
        entryPoint: options.entryPoint,
        errorHandler: new core_1.ConnectionErrorHandler({
            serverName,
            logger,
        }),
        env: process.env,
        args,
    }, connection => proxyFactory.listen(connection));
    return serverProxy;
}
exports.spawnNsfwFileSystemWatcherServiceProcess = spawnNsfwFileSystemWatcherServiceProcess;


/***/ }),

/***/ "../../packages/filesystem/lib/node/filesystem-watcher-client.js":
/*!***********************************************************************!*\
  !*** ../../packages/filesystem/lib/node/filesystem-watcher-client.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FileSystemWatcherServerClient_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemWatcherServerClient = exports.NSFW_WATCHER = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const filesystem_watcher_protocol_1 = __webpack_require__(/*! ../common/filesystem-watcher-protocol */ "../../packages/filesystem/lib/common/filesystem-watcher-protocol.js");
const filesystem_watcher_dispatcher_1 = __webpack_require__(/*! ./filesystem-watcher-dispatcher */ "../../packages/filesystem/lib/node/filesystem-watcher-dispatcher.js");
exports.NSFW_WATCHER = 'nsfw-watcher';
/**
 * Wraps the NSFW singleton service for each frontend.
 */
let FileSystemWatcherServerClient = FileSystemWatcherServerClient_1 = class FileSystemWatcherServerClient {
    constructor() {
        /**
         * Track allocated watcherIds to de-allocate on disposal.
         */
        this.watcherIds = new Set();
        /**
         * @todo make this number precisely map to one specific frontend.
         */
        this.clientId = FileSystemWatcherServerClient_1.clientIdSequence++;
    }
    async watchFileChanges(uri, options) {
        const watcherId = await this.watcherService.watchFileChanges(this.clientId, uri, options);
        this.watcherIds.add(watcherId);
        return watcherId;
    }
    async unwatchFileChanges(watcherId) {
        this.watcherIds.delete(watcherId);
        return this.watcherService.unwatchFileChanges(watcherId);
    }
    setClient(client) {
        if (client !== undefined) {
            this.watcherDispatcher.registerClient(this.clientId, client);
        }
        else {
            this.watcherDispatcher.unregisterClient(this.clientId);
        }
    }
    dispose() {
        this.setClient(undefined);
        for (const watcherId of this.watcherIds) {
            this.unwatchFileChanges(watcherId);
        }
    }
};
FileSystemWatcherServerClient.clientIdSequence = 0;
__decorate([
    (0, inversify_1.inject)(filesystem_watcher_dispatcher_1.FileSystemWatcherServiceDispatcher),
    __metadata("design:type", filesystem_watcher_dispatcher_1.FileSystemWatcherServiceDispatcher)
], FileSystemWatcherServerClient.prototype, "watcherDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(filesystem_watcher_protocol_1.FileSystemWatcherService),
    __metadata("design:type", Object)
], FileSystemWatcherServerClient.prototype, "watcherService", void 0);
FileSystemWatcherServerClient = FileSystemWatcherServerClient_1 = __decorate([
    (0, inversify_1.injectable)()
], FileSystemWatcherServerClient);
exports.FileSystemWatcherServerClient = FileSystemWatcherServerClient;


/***/ }),

/***/ "../../packages/filesystem/lib/node/filesystem-watcher-dispatcher.js":
/*!***************************************************************************!*\
  !*** ../../packages/filesystem/lib/node/filesystem-watcher-dispatcher.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemWatcherServiceDispatcher = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
/**
 * This component routes watch events to the right clients.
 */
let FileSystemWatcherServiceDispatcher = class FileSystemWatcherServiceDispatcher {
    constructor() {
        /**
         * Mapping of `clientId` to actual clients.
         */
        this.clients = new Map();
    }
    onDidFilesChanged(event) {
        for (const client of this.iterRegisteredClients(event.clients)) {
            client.onDidFilesChanged(event);
        }
    }
    onError(event) {
        for (const client of this.iterRegisteredClients(event.clients)) {
            client.onError();
        }
    }
    /**
     * Listen for events targeted at `clientId`.
     */
    registerClient(clientId, client) {
        if (this.clients.has(clientId)) {
            console.warn(`FileSystemWatcherServer2Dispatcher: a client was already registered! clientId=${clientId}`);
        }
        this.clients.set(clientId, client);
    }
    unregisterClient(clientId) {
        if (!this.clients.has(clientId)) {
            console.warn(`FileSystemWatcherServer2Dispatcher: tried to remove unknown client! clientId=${clientId}`);
        }
        this.clients.delete(clientId);
    }
    /**
     * Only yield registered clients for the given `clientIds`.
     *
     * If clientIds is empty, will return all clients.
     */
    *iterRegisteredClients(clientIds) {
        if (!Array.isArray(clientIds) || clientIds.length === 0) {
            // If we receive an event targeted to "no client",
            // interpret that as notifying all clients:
            yield* this.clients.values();
        }
        else {
            for (const clientId of clientIds) {
                const client = this.clients.get(clientId);
                if (client !== undefined) {
                    yield client;
                }
            }
        }
    }
};
FileSystemWatcherServiceDispatcher = __decorate([
    (0, inversify_1.injectable)()
], FileSystemWatcherServiceDispatcher);
exports.FileSystemWatcherServiceDispatcher = FileSystemWatcherServiceDispatcher;


/***/ }),

/***/ "../../packages/filesystem/lib/node/node-file-upload-service.js":
/*!**********************************************************************!*\
  !*** ../../packages/filesystem/lib/node/node-file-upload-service.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NodeFileUploadService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeFileUploadService = void 0;
const multer = __webpack_require__(/*! multer */ "../../node_modules/multer/index.js");
const path = __webpack_require__(/*! path */ "path");
const os = __webpack_require__(/*! os */ "os");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const file_upload_1 = __webpack_require__(/*! ../common/file-upload */ "../../packages/filesystem/lib/common/file-upload.js");
let NodeFileUploadService = NodeFileUploadService_1 = class NodeFileUploadService {
    async configure(app) {
        const [dest, http_path] = await Promise.all([
            this.getTemporaryUploadDest(),
            this.getHttpFileUploadPath()
        ]);
        console.debug(`HTTP file upload URL path: ${http_path}`);
        console.debug(`Backend file upload cache path: ${dest}`);
        app.post(http_path, 
        // `multer` handles `multipart/form-data` containing our file to upload.
        multer({ dest }).single('file'), (request, response, next) => this.handleFileUpload(request, response));
    }
    /**
     * @returns URL path on which to accept file uploads.
     */
    async getHttpFileUploadPath() {
        return file_upload_1.HTTP_FILE_UPLOAD_PATH;
    }
    /**
     * @returns Path to a folder where to temporarily store uploads.
     */
    async getTemporaryUploadDest() {
        return path.join(os.tmpdir(), NodeFileUploadService_1.UPLOAD_DIR);
    }
    async handleFileUpload(request, response) {
        const fields = request.body;
        if (!request.file || typeof fields !== 'object' || typeof fields.uri !== 'string') {
            response.sendStatus(400); // bad request
            return;
        }
        try {
            const target = node_1.FileUri.fsPath(fields.uri);
            if (!fields.leaveInTemp) {
                await fs.move(request.file.path, target, { overwrite: true });
            }
            else {
                // leave the file where it is, just rename it to its original name
                fs.rename(request.file.path, request.file.path.replace(request.file.filename, request.file.originalname));
            }
            response.status(200).send(target); // ok
        }
        catch (error) {
            console.error(error);
            response.sendStatus(500); // internal server error
        }
    }
};
NodeFileUploadService.UPLOAD_DIR = 'theia_upload';
NodeFileUploadService = NodeFileUploadService_1 = __decorate([
    (0, inversify_1.injectable)()
], NodeFileUploadService);
exports.NodeFileUploadService = NodeFileUploadService;


/***/ }),

/***/ "../../packages/filesystem/lib/node/nsfw-watcher/nsfw-options.js":
/*!***********************************************************************!*\
  !*** ../../packages/filesystem/lib/node/nsfw-watcher/nsfw-options.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NsfwOptions = void 0;
/**
 * Inversify service identifier allowing extensions to override options passed to nsfw by the file watcher.
 */
exports.NsfwOptions = Symbol('NsfwOptions');


/***/ }),

/***/ "../../packages/git/lib/common/git-model.js":
/*!**************************************************!*\
  !*** ../../packages/git/lib/common/git-model.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitError = exports.BranchType = exports.Repository = exports.GitFileStatus = exports.WorkingDirectoryStatus = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
var WorkingDirectoryStatus;
(function (WorkingDirectoryStatus) {
    /**
     * `true` if the directory statuses are deep equal, otherwise `false`.
     */
    function equals(left, right) {
        if (left && right) {
            return left.exists === right.exists
                && left.branch === right.branch
                && left.upstreamBranch === right.upstreamBranch
                && left.currentHead === right.currentHead
                && (left.aheadBehind ? left.aheadBehind.ahead : -1) === (right.aheadBehind ? right.aheadBehind.ahead : -1)
                && (left.aheadBehind ? left.aheadBehind.behind : -1) === (right.aheadBehind ? right.aheadBehind.behind : -1)
                && left.changes.length === right.changes.length
                && !!left.incomplete === !!right.incomplete
                && JSON.stringify(left) === JSON.stringify(right);
        }
        else {
            return left === right;
        }
    }
    WorkingDirectoryStatus.equals = equals;
})(WorkingDirectoryStatus = exports.WorkingDirectoryStatus || (exports.WorkingDirectoryStatus = {}));
/**
 * Enumeration of states that a file resource can have in the working directory.
 */
var GitFileStatus;
(function (GitFileStatus) {
    GitFileStatus[GitFileStatus["New"] = 0] = "New";
    GitFileStatus[GitFileStatus["Copied"] = 1] = "Copied";
    GitFileStatus[GitFileStatus["Modified"] = 2] = "Modified";
    GitFileStatus[GitFileStatus["Renamed"] = 3] = "Renamed";
    GitFileStatus[GitFileStatus["Deleted"] = 4] = "Deleted";
    GitFileStatus[GitFileStatus["Conflicted"] = 5] = "Conflicted";
})(GitFileStatus = exports.GitFileStatus || (exports.GitFileStatus = {}));
(function (GitFileStatus) {
    /**
     * Compares the statuses based on the natural order of the enumeration.
     */
    GitFileStatus.statusCompare = (left, right) => left - right;
    /**
     * Returns with human readable representation of the Git file status argument. If the `staged` argument is `undefined`,
     * it will be treated as `false`.
     */
    GitFileStatus.toString = (status, staged) => {
        switch (status) {
            case GitFileStatus.New: return !!staged ? core_1.nls.localize('theia/git/added', 'Added') : core_1.nls.localize('theia/git/unstaged', 'Unstaged');
            case GitFileStatus.Renamed: return core_1.nls.localize('theia/git/renamed', 'Renamed');
            case GitFileStatus.Copied: return core_1.nls.localize('theia/git/copied', 'Copied');
            // eslint-disable-next-line @theia/localization-check
            case GitFileStatus.Modified: return core_1.nls.localize('vscode.git/repository/modified', 'Modified');
            // eslint-disable-next-line @theia/localization-check
            case GitFileStatus.Deleted: return core_1.nls.localize('vscode.git/repository/deleted', 'Deleted');
            case GitFileStatus.Conflicted: return core_1.nls.localize('theia/git/conflicted', 'Conflicted');
            default: throw new Error(`Unexpected Git file stats: ${status}.`);
        }
    };
    /**
     * Returns with the human readable abbreviation of the Git file status argument. `staged` argument defaults to `false`.
     */
    GitFileStatus.toAbbreviation = (status, staged) => {
        switch (status) {
            case GitFileStatus.New: return !!staged ? 'A' : 'U';
            case GitFileStatus.Renamed: return 'R';
            case GitFileStatus.Copied: return 'C';
            case GitFileStatus.Modified: return 'M';
            case GitFileStatus.Deleted: return 'D';
            case GitFileStatus.Conflicted: return 'C';
            default: throw new Error(`Unexpected Git file stats: ${status}.`);
        }
    };
    /**
     * It should be aligned with https://github.com/microsoft/vscode/blob/0dfa355b3ad185a6289ba28a99c141ab9e72d2be/extensions/git/src/repository.ts#L197
     */
    function getColor(status, staged) {
        switch (status) {
            case GitFileStatus.New: {
                if (!staged) {
                    return 'var(--theia-gitDecoration-untrackedResourceForeground)';
                }
                return 'var(--theia-gitDecoration-addedResourceForeground)';
            }
            case GitFileStatus.Renamed: return 'var(--theia-gitDecoration-untrackedResourceForeground)';
            case GitFileStatus.Copied: // Fall through.
            case GitFileStatus.Modified: return 'var(--theia-gitDecoration-modifiedResourceForeground)';
            case GitFileStatus.Deleted: return 'var(--theia-gitDecoration-deletedResourceForeground)';
            case GitFileStatus.Conflicted: return 'var(--theia-gitDecoration-conflictingResourceForeground)';
        }
    }
    GitFileStatus.getColor = getColor;
    function toStrikethrough(status) {
        return status === GitFileStatus.Deleted;
    }
    GitFileStatus.toStrikethrough = toStrikethrough;
})(GitFileStatus = exports.GitFileStatus || (exports.GitFileStatus = {}));
var Repository;
(function (Repository) {
    function equal(repository, repository2) {
        if (repository && repository2) {
            return repository.localUri === repository2.localUri;
        }
        return repository === repository2;
    }
    Repository.equal = equal;
    function is(repository) {
        return (0, core_1.isObject)(repository) && 'localUri' in repository;
    }
    Repository.is = is;
    function relativePath(repository, uri) {
        const repositoryUri = new uri_1.default(Repository.is(repository) ? repository.localUri : String(repository));
        return repositoryUri.relative(new uri_1.default(String(uri)));
    }
    Repository.relativePath = relativePath;
})(Repository = exports.Repository || (exports.Repository = {}));
/**
 * The branch type. Either local or remote.
 * The order matters.
 */
var BranchType;
(function (BranchType) {
    /**
     * The local branch type.
     */
    BranchType[BranchType["Local"] = 0] = "Local";
    /**
     * The remote branch type.
     */
    BranchType[BranchType["Remote"] = 1] = "Remote";
})(BranchType = exports.BranchType || (exports.BranchType = {}));
/**
 * The Git errors which can be parsed from failed Git commands.
 */
var GitError;
(function (GitError) {
    GitError[GitError["SSHKeyAuditUnverified"] = 0] = "SSHKeyAuditUnverified";
    GitError[GitError["SSHAuthenticationFailed"] = 1] = "SSHAuthenticationFailed";
    GitError[GitError["SSHPermissionDenied"] = 2] = "SSHPermissionDenied";
    GitError[GitError["HTTPSAuthenticationFailed"] = 3] = "HTTPSAuthenticationFailed";
    GitError[GitError["RemoteDisconnection"] = 4] = "RemoteDisconnection";
    GitError[GitError["HostDown"] = 5] = "HostDown";
    GitError[GitError["RebaseConflicts"] = 6] = "RebaseConflicts";
    GitError[GitError["MergeConflicts"] = 7] = "MergeConflicts";
    GitError[GitError["HTTPSRepositoryNotFound"] = 8] = "HTTPSRepositoryNotFound";
    GitError[GitError["SSHRepositoryNotFound"] = 9] = "SSHRepositoryNotFound";
    GitError[GitError["PushNotFastForward"] = 10] = "PushNotFastForward";
    GitError[GitError["BranchDeletionFailed"] = 11] = "BranchDeletionFailed";
    GitError[GitError["DefaultBranchDeletionFailed"] = 12] = "DefaultBranchDeletionFailed";
    GitError[GitError["RevertConflicts"] = 13] = "RevertConflicts";
    GitError[GitError["EmptyRebasePatch"] = 14] = "EmptyRebasePatch";
    GitError[GitError["NoMatchingRemoteBranch"] = 15] = "NoMatchingRemoteBranch";
    GitError[GitError["NoExistingRemoteBranch"] = 16] = "NoExistingRemoteBranch";
    GitError[GitError["NothingToCommit"] = 17] = "NothingToCommit";
    GitError[GitError["NoSubmoduleMapping"] = 18] = "NoSubmoduleMapping";
    GitError[GitError["SubmoduleRepositoryDoesNotExist"] = 19] = "SubmoduleRepositoryDoesNotExist";
    GitError[GitError["InvalidSubmoduleSHA"] = 20] = "InvalidSubmoduleSHA";
    GitError[GitError["LocalPermissionDenied"] = 21] = "LocalPermissionDenied";
    GitError[GitError["InvalidMerge"] = 22] = "InvalidMerge";
    GitError[GitError["InvalidRebase"] = 23] = "InvalidRebase";
    GitError[GitError["NonFastForwardMergeIntoEmptyHead"] = 24] = "NonFastForwardMergeIntoEmptyHead";
    GitError[GitError["PatchDoesNotApply"] = 25] = "PatchDoesNotApply";
    GitError[GitError["BranchAlreadyExists"] = 26] = "BranchAlreadyExists";
    GitError[GitError["BadRevision"] = 27] = "BadRevision";
    GitError[GitError["NotAGitRepository"] = 28] = "NotAGitRepository";
    GitError[GitError["CannotMergeUnrelatedHistories"] = 29] = "CannotMergeUnrelatedHistories";
    GitError[GitError["LFSAttributeDoesNotMatch"] = 30] = "LFSAttributeDoesNotMatch";
    GitError[GitError["BranchRenameFailed"] = 31] = "BranchRenameFailed";
    GitError[GitError["PathDoesNotExist"] = 32] = "PathDoesNotExist";
    GitError[GitError["InvalidObjectName"] = 33] = "InvalidObjectName";
    GitError[GitError["OutsideRepository"] = 34] = "OutsideRepository";
    GitError[GitError["LockFileAlreadyExists"] = 35] = "LockFileAlreadyExists";
    GitError[GitError["NoMergeToAbort"] = 36] = "NoMergeToAbort";
    GitError[GitError["LocalChangesOverwritten"] = 37] = "LocalChangesOverwritten";
    GitError[GitError["UnresolvedConflicts"] = 38] = "UnresolvedConflicts";
    GitError[GitError["GPGFailedToSignData"] = 39] = "GPGFailedToSignData";
    GitError[GitError["ConflictModifyDeletedInBranch"] = 40] = "ConflictModifyDeletedInBranch";
    // GitHub-specific error codes
    GitError[GitError["PushWithFileSizeExceedingLimit"] = 41] = "PushWithFileSizeExceedingLimit";
    GitError[GitError["HexBranchNameRejected"] = 42] = "HexBranchNameRejected";
    GitError[GitError["ForcePushRejected"] = 43] = "ForcePushRejected";
    GitError[GitError["InvalidRefLength"] = 44] = "InvalidRefLength";
    GitError[GitError["ProtectedBranchRequiresReview"] = 45] = "ProtectedBranchRequiresReview";
    GitError[GitError["ProtectedBranchForcePush"] = 46] = "ProtectedBranchForcePush";
    GitError[GitError["ProtectedBranchDeleteRejected"] = 47] = "ProtectedBranchDeleteRejected";
    GitError[GitError["ProtectedBranchRequiredStatus"] = 48] = "ProtectedBranchRequiredStatus";
    GitError[GitError["PushWithPrivateEmail"] = 49] = "PushWithPrivateEmail";
    // End of GitHub-specific error codes
    GitError[GitError["ConfigLockFileAlreadyExists"] = 50] = "ConfigLockFileAlreadyExists";
    GitError[GitError["RemoteAlreadyExists"] = 51] = "RemoteAlreadyExists";
    GitError[GitError["TagAlreadyExists"] = 52] = "TagAlreadyExists";
    GitError[GitError["MergeWithLocalChanges"] = 53] = "MergeWithLocalChanges";
    GitError[GitError["RebaseWithLocalChanges"] = 54] = "RebaseWithLocalChanges";
    GitError[GitError["MergeCommitNoMainlineOption"] = 55] = "MergeCommitNoMainlineOption";
    GitError[GitError["UnsafeDirectory"] = 56] = "UnsafeDirectory";
    GitError[GitError["PathExistsButNotInRef"] = 57] = "PathExistsButNotInRef";
})(GitError = exports.GitError || (exports.GitError = {}));


/***/ }),

/***/ "../../packages/git/lib/common/git-prompt.js":
/*!***************************************************!*\
  !*** ../../packages/git/lib/common/git-prompt.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GitPrompt_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitPromptServerImpl = exports.GitPromptClient = exports.GitPrompt = exports.GitPromptServerProxy = exports.GitPromptServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
exports.GitPromptServer = Symbol('GitPromptServer');
exports.GitPromptServerProxy = Symbol('GitPromptServerProxy');
let GitPrompt = GitPrompt_1 = class GitPrompt {
    constructor() {
        this.toDispose = new disposable_1.DisposableCollection();
    }
    init() {
        this.server.setClient(this);
    }
    dispose() {
        this.toDispose.dispose();
    }
    async ask(question) {
        return GitPrompt_1.Failure.create('Interactive Git prompt is not supported in the browser.');
    }
};
__decorate([
    (0, inversify_1.inject)(exports.GitPromptServer),
    __metadata("design:type", Object)
], GitPrompt.prototype, "server", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GitPrompt.prototype, "init", null);
GitPrompt = GitPrompt_1 = __decorate([
    (0, inversify_1.injectable)()
], GitPrompt);
exports.GitPrompt = GitPrompt;
(function (GitPrompt) {
    /**
     * Unique WS endpoint path for the Git prompt service.
     */
    GitPrompt.WS_PATH = 'services/git-prompt';
    let Success;
    (function (Success) {
        function is(answer) {
            return answer.type === Answer.Type.SUCCESS
                && 'result' in answer
                && ((typeof answer.result) === 'string' || (typeof answer.result) === 'boolean');
        }
        Success.is = is;
        function create(result) {
            return {
                type: Answer.Type.SUCCESS,
                result
            };
        }
        Success.create = create;
    })(Success = GitPrompt.Success || (GitPrompt.Success = {}));
    let Cancel;
    (function (Cancel) {
        function is(answer) {
            return answer.type === Answer.Type.CANCEL;
        }
        Cancel.is = is;
        function create() {
            return {
                type: Answer.Type.CANCEL
            };
        }
        Cancel.create = create;
    })(Cancel = GitPrompt.Cancel || (GitPrompt.Cancel = {}));
    let Failure;
    (function (Failure) {
        function is(answer) {
            return answer.type === Answer.Type.FAILURE
                && 'error' in answer
                && ((typeof answer.error) === 'string' || answer.error instanceof Error);
        }
        Failure.is = is;
        function create(error) {
            return {
                type: Answer.Type.FAILURE,
                error
            };
        }
        Failure.create = create;
    })(Failure = GitPrompt.Failure || (GitPrompt.Failure = {}));
    let Answer;
    (function (Answer) {
        let Type;
        (function (Type) {
            Type[Type["SUCCESS"] = 0] = "SUCCESS";
            Type[Type["CANCEL"] = 1] = "CANCEL";
            Type[Type["FAILURE"] = 2] = "FAILURE";
        })(Type = Answer.Type || (Answer.Type = {}));
    })(Answer = GitPrompt.Answer || (GitPrompt.Answer = {}));
})(GitPrompt = exports.GitPrompt || (exports.GitPrompt = {}));
exports.GitPrompt = GitPrompt;
exports.GitPromptClient = Symbol('GitPromptClient');
/**
 * Note: This implementation is not reconnecting.
 * Git prompting is not supported in the browser. In electron, there's no need to reconnect.
 */
let GitPromptServerImpl = class GitPromptServerImpl {
    setClient(client) {
        this.proxy.setClient(client);
    }
    dispose() {
        this.proxy.dispose();
    }
};
__decorate([
    (0, inversify_1.inject)(exports.GitPromptServerProxy),
    __metadata("design:type", Object)
], GitPromptServerImpl.prototype, "proxy", void 0);
GitPromptServerImpl = __decorate([
    (0, inversify_1.injectable)()
], GitPromptServerImpl);
exports.GitPromptServerImpl = GitPromptServerImpl;


/***/ }),

/***/ "../../packages/git/lib/common/git-watcher.js":
/*!****************************************************!*\
  !*** ../../packages/git/lib/common/git-watcher.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitWatcher = exports.GitWatcherPath = exports.ReconnectingGitWatcherServer = exports.GitWatcherServerProxy = exports.GitWatcherServer = exports.GitStatusChangeEvent = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
var GitStatusChangeEvent;
(function (GitStatusChangeEvent) {
    /**
     * `true` if the argument is a `GitStatusEvent`, otherwise `false`.
     * @param event the argument to check whether it is a Git status change event or not.
     */
    function is(event) {
        return (0, core_1.isObject)(event) && ('source' in event) && ('status' in event);
    }
    GitStatusChangeEvent.is = is;
})(GitStatusChangeEvent = exports.GitStatusChangeEvent || (exports.GitStatusChangeEvent = {}));
/**
 * The symbol of the Git watcher backend for DI.
 */
exports.GitWatcherServer = Symbol('GitWatcherServer');
exports.GitWatcherServerProxy = Symbol('GitWatcherServerProxy');
let ReconnectingGitWatcherServer = class ReconnectingGitWatcherServer {
    constructor(proxy) {
        this.proxy = proxy;
        this.watcherSequence = 1;
        this.watchParams = new Map();
        this.localToRemoteWatcher = new Map();
        this.proxy.onDidOpenConnection(() => this.reconnect());
    }
    async watchGitChanges(repository) {
        const watcher = this.watcherSequence++;
        this.watchParams.set(watcher, repository);
        return this.doWatchGitChanges([watcher, repository]);
    }
    async unwatchGitChanges(watcher) {
        this.watchParams.delete(watcher);
        const remote = this.localToRemoteWatcher.get(watcher);
        if (remote) {
            this.localToRemoteWatcher.delete(remote);
            return this.proxy.unwatchGitChanges(remote);
        }
        else {
            throw new Error(`No Git watchers were registered with ID: ${watcher}.`);
        }
    }
    dispose() {
        this.proxy.dispose();
    }
    setClient(client) {
        this.proxy.setClient(client);
    }
    reconnect() {
        [...this.watchParams.entries()].forEach(entry => this.doWatchGitChanges(entry));
    }
    async doWatchGitChanges(entry) {
        const [watcher, repository] = entry;
        const remote = await this.proxy.watchGitChanges(repository);
        this.localToRemoteWatcher.set(watcher, remote);
        return watcher;
    }
};
ReconnectingGitWatcherServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.GitWatcherServerProxy)),
    __metadata("design:paramtypes", [Object])
], ReconnectingGitWatcherServer);
exports.ReconnectingGitWatcherServer = ReconnectingGitWatcherServer;
/**
 * Unique WS endpoint path to the Git watcher service.
 */
exports.GitWatcherPath = '/services/git-watcher';
let GitWatcher = class GitWatcher {
    constructor(server) {
        this.server = server;
        this.toDispose = new common_1.DisposableCollection();
        this.onGitEventEmitter = new common_1.Emitter();
        this.toDispose.push(this.onGitEventEmitter);
        this.server.setClient({ onGitChanged: e => this.onGitChanged(e) });
    }
    dispose() {
        this.toDispose.dispose();
    }
    get onGitEvent() {
        return this.onGitEventEmitter.event;
    }
    async onGitChanged(event) {
        this.onGitEventEmitter.fire(event);
    }
    async watchGitChanges(repository) {
        const watcher = await this.server.watchGitChanges(repository);
        const toDispose = new common_1.DisposableCollection();
        toDispose.push(common_1.Disposable.create(() => this.server.unwatchGitChanges(watcher)));
        return toDispose;
    }
};
GitWatcher = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.GitWatcherServer)),
    __metadata("design:paramtypes", [Object])
], GitWatcher);
exports.GitWatcher = GitWatcher;


/***/ }),

/***/ "../../packages/git/lib/common/git.js":
/*!********************************************!*\
  !*** ../../packages/git/lib/common/git.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitUtils = exports.Git = exports.GitPath = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const git_model_1 = __webpack_require__(/*! ./git-model */ "../../packages/git/lib/common/git-model.js");
/**
 * The WS endpoint path to the Git service.
 */
exports.GitPath = '/services/git';
/**
 * Git symbol for DI.
 */
exports.Git = Symbol('Git');
/**
 * Contains a set of utility functions for {@link Git}.
 */
var GitUtils;
(function (GitUtils) {
    /**
     * `true` if the argument is an option for renaming an existing branch in the repository.
     */
    function isBranchRename(arg) {
        return (0, core_1.isObject)(arg) && 'newName' in arg;
    }
    GitUtils.isBranchRename = isBranchRename;
    /**
     * `true` if the argument is an option for deleting an existing branch in the repository.
     */
    function isBranchDelete(arg) {
        return (0, core_1.isObject)(arg) && 'toDelete' in arg;
    }
    GitUtils.isBranchDelete = isBranchDelete;
    /**
     * `true` if the argument is an option for creating a new branch in the repository.
     */
    function isBranchCreate(arg) {
        return (0, core_1.isObject)(arg) && 'toCreate' in arg;
    }
    GitUtils.isBranchCreate = isBranchCreate;
    /**
     * `true` if the argument is an option for listing the branches in a repository.
     */
    function isBranchList(arg) {
        return (0, core_1.isObject)(arg) && 'type' in arg;
    }
    GitUtils.isBranchList = isBranchList;
    /**
     * `true` if the argument is an option for checking out a new local branch.
     */
    function isBranchCheckout(arg) {
        return (0, core_1.isObject)(arg) && 'branch' in arg;
    }
    GitUtils.isBranchCheckout = isBranchCheckout;
    /**
     * `true` if the argument is an option for checking out a working tree file.
     */
    function isWorkingTreeFileCheckout(arg) {
        return (0, core_1.isObject)(arg) && 'paths' in arg;
    }
    GitUtils.isWorkingTreeFileCheckout = isWorkingTreeFileCheckout;
    /**
     * The error code for when the path to a repository doesn't exist.
     */
    const RepositoryDoesNotExistErrorCode = 'repository-does-not-exist-error';
    /**
     * `true` if the argument is an error indicating the absence of a local Git repository.
     * Otherwise, `false`.
     */
    function isRepositoryDoesNotExistError(error) {
        // TODO this is odd here.This piece of code is already implementation specific, so this should go to the Git API.
        // But how can we ensure that the `any` type error is serializable?
        if (error instanceof Error && ('code' in error)) {
            return error.code === RepositoryDoesNotExistErrorCode;
        }
        return false;
    }
    GitUtils.isRepositoryDoesNotExistError = isRepositoryDoesNotExistError;
    /**
     * Maps the raw status text from Git to a Git file status enumeration.
     */
    function mapStatus(rawStatus) {
        const status = rawStatus.trim();
        if (status === 'M') {
            return git_model_1.GitFileStatus.Modified;
        } // modified
        if (status === 'A') {
            return git_model_1.GitFileStatus.New;
        } // added
        if (status === 'D') {
            return git_model_1.GitFileStatus.Deleted;
        } // deleted
        if (status === 'R') {
            return git_model_1.GitFileStatus.Renamed;
        } // renamed
        if (status === 'C') {
            return git_model_1.GitFileStatus.Copied;
        } // copied
        // git log -M --name-status will return a RXXX - where XXX is a percentage
        if (status.match(/R[0-9]+/)) {
            return git_model_1.GitFileStatus.Renamed;
        }
        // git log -C --name-status will return a CXXX - where XXX is a percentage
        if (status.match(/C[0-9]+/)) {
            return git_model_1.GitFileStatus.Copied;
        }
        return git_model_1.GitFileStatus.Modified;
    }
    GitUtils.mapStatus = mapStatus;
    /**
     * `true` if the argument is a raw Git status with similarity percentage. Otherwise, `false`.
     */
    function isSimilarityStatus(rawStatus) {
        return !!rawStatus.match(/R[0-9][0-9][0-9]/) || !!rawStatus.match(/C[0-9][0-9][0-9]/);
    }
    GitUtils.isSimilarityStatus = isSimilarityStatus;
})(GitUtils = exports.GitUtils || (exports.GitUtils = {}));


/***/ }),

/***/ "../../packages/git/lib/common/index.js":
/*!**********************************************!*\
  !*** ../../packages/git/lib/common/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./git */ "../../packages/git/lib/common/git.js"), exports);
__exportStar(__webpack_require__(/*! ./git-model */ "../../packages/git/lib/common/git-model.js"), exports);
__exportStar(__webpack_require__(/*! ./git-watcher */ "../../packages/git/lib/common/git-watcher.js"), exports);


/***/ }),

/***/ "../../packages/git/lib/node/dugite-git-prompt.js":
/*!********************************************************!*\
  !*** ../../packages/git/lib/node/dugite-git-prompt.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DugiteGitPromptServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const git_prompt_1 = __webpack_require__(/*! ../common/git-prompt */ "../../packages/git/lib/common/git-prompt.js");
let DugiteGitPromptServer = class DugiteGitPromptServer {
    dispose() {
    }
    setClient(client) {
        this.client = client;
    }
    async ask(question) {
        if (this.client) {
            return this.client.ask(question);
        }
        return git_prompt_1.GitPrompt.Failure.create('Not yet available.');
    }
};
DugiteGitPromptServer = __decorate([
    (0, inversify_1.injectable)()
], DugiteGitPromptServer);
exports.DugiteGitPromptServer = DugiteGitPromptServer;


/***/ }),

/***/ "../../packages/git/lib/node/dugite-git-watcher.js":
/*!*********************************************************!*\
  !*** ../../packages/git/lib/node/dugite-git-watcher.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DugiteGitWatcherServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const git_repository_manager_1 = __webpack_require__(/*! ./git-repository-manager */ "../../packages/git/lib/node/git-repository-manager.js");
let DugiteGitWatcherServer = class DugiteGitWatcherServer {
    constructor(manager) {
        this.manager = manager;
        this.watcherSequence = 1;
        this.watchers = new Map();
        this.subscriptions = new Map();
    }
    dispose() {
        for (const watcher of this.watchers.values()) {
            watcher.dispose();
        }
        this.watchers.clear();
        this.subscriptions.clear();
    }
    async watchGitChanges(repository) {
        const reference = await this.manager.getWatcher(repository);
        const watcher = reference.object;
        const repositoryUri = repository.localUri;
        let subscriptions = this.subscriptions.get(repositoryUri);
        if (subscriptions === undefined) {
            const unsubscribe = watcher.onGitStatusChanged(e => {
                if (this.client) {
                    this.client.onGitChanged(e);
                }
            });
            subscriptions = new core_1.DisposableCollection();
            subscriptions.onDispose(() => {
                unsubscribe.dispose();
                this.subscriptions.delete(repositoryUri);
            });
            this.subscriptions.set(repositoryUri, subscriptions);
        }
        watcher.watch();
        subscriptions.push(reference);
        const watcherId = this.watcherSequence++;
        this.watchers.set(watcherId, reference);
        return watcherId;
    }
    async unwatchGitChanges(watcher) {
        const disposable = this.watchers.get(watcher);
        if (disposable) {
            disposable.dispose();
            this.watchers.delete(watcher);
        }
        else {
            throw new Error(`No Git watchers were registered with ID: ${watcher}.`);
        }
    }
    setClient(client) {
        this.client = client;
    }
};
DugiteGitWatcherServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(git_repository_manager_1.GitRepositoryManager)),
    __metadata("design:paramtypes", [git_repository_manager_1.GitRepositoryManager])
], DugiteGitWatcherServer);
exports.DugiteGitWatcherServer = DugiteGitWatcherServer;


/***/ }),

/***/ "../../packages/git/lib/node/dugite-git.js":
/*!*************************************************!*\
  !*** ../../packages/git/lib/node/dugite-git.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CommitDetailsParser_1, GitBlameParser_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DugiteGit = exports.GitBlameParser = exports.CommitDetailsParser = exports.CommitPlaceholders = exports.NameStatusParser = exports.OutputParser = void 0;
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const Path = __webpack_require__(/*! path */ "path");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const git_1 = __webpack_require__(/*! dugite-extra/lib/core/git */ "../../node_modules/dugite-extra/lib/core/git.js");
const push_1 = __webpack_require__(/*! dugite-extra/lib/command/push */ "../../node_modules/dugite-extra/lib/command/push.js");
const pull_1 = __webpack_require__(/*! dugite-extra/lib/command/pull */ "../../node_modules/dugite-extra/lib/command/pull.js");
const clone_1 = __webpack_require__(/*! dugite-extra/lib/command/clone */ "../../node_modules/dugite-extra/lib/command/clone.js");
const fetch_1 = __webpack_require__(/*! dugite-extra/lib/command/fetch */ "../../node_modules/dugite-extra/lib/command/fetch.js");
const stash_1 = __webpack_require__(/*! dugite-extra/lib/command/stash */ "../../node_modules/dugite-extra/lib/command/stash.js");
const merge_1 = __webpack_require__(/*! dugite-extra/lib/command/merge */ "../../node_modules/dugite-extra/lib/command/merge.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const status_1 = __webpack_require__(/*! dugite-extra/lib/command/status */ "../../node_modules/dugite-extra/lib/command/status.js");
const commit_1 = __webpack_require__(/*! dugite-extra/lib/command/commit */ "../../node_modules/dugite-extra/lib/command/commit.js");
const stage_1 = __webpack_require__(/*! dugite-extra/lib/command/stage */ "../../node_modules/dugite-extra/lib/command/stage.js");
const reset_1 = __webpack_require__(/*! dugite-extra/lib/command/reset */ "../../node_modules/dugite-extra/lib/command/reset.js");
const show_1 = __webpack_require__(/*! dugite-extra/lib/command/show */ "../../node_modules/dugite-extra/lib/command/show.js");
const checkout_1 = __webpack_require__(/*! dugite-extra/lib/command/checkout */ "../../node_modules/dugite-extra/lib/command/checkout.js");
const branch_1 = __webpack_require__(/*! dugite-extra/lib/command/branch */ "../../node_modules/dugite-extra/lib/command/branch.js");
const status_2 = __webpack_require__(/*! dugite-extra/lib/model/status */ "../../node_modules/dugite-extra/lib/model/status.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const strings = __webpack_require__(/*! @theia/core/lib/common/strings */ "../../packages/core/lib/common/strings.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/git/lib/common/index.js");
const git_repository_manager_1 = __webpack_require__(/*! ./git-repository-manager */ "../../packages/git/lib/node/git-repository-manager.js");
const git_locator_protocol_1 = __webpack_require__(/*! ./git-locator/git-locator-protocol */ "../../packages/git/lib/node/git-locator/git-locator-protocol.js");
const git_exec_provider_1 = __webpack_require__(/*! ./git-exec-provider */ "../../packages/git/lib/node/git-exec-provider.js");
const git_env_provider_1 = __webpack_require__(/*! ./env/git-env-provider */ "../../packages/git/lib/node/env/git-env-provider.js");
const git_init_1 = __webpack_require__(/*! ./init/git-init */ "../../packages/git/lib/node/init/git-init.js");
/**
 * Parsing and converting raw Git output into Git model instances.
 */
let OutputParser = class OutputParser {
    toUri(repositoryUri, pathSegment) {
        return file_uri_1.FileUri.create(Path.join(file_uri_1.FileUri.fsPath(repositoryUri), pathSegment)).toString();
    }
    split(input, delimiter) {
        return (Array.isArray(input) ? input : input.split(delimiter)).filter(item => item && item.length > 0);
    }
};
/** This is the `NUL` delimiter. Equals `%x00`. */
OutputParser.LINE_DELIMITER = '\0';
OutputParser = __decorate([
    (0, inversify_1.injectable)()
], OutputParser);
exports.OutputParser = OutputParser;
/**
 * Status parser for converting raw Git `--name-status` output into file change objects.
 */
let NameStatusParser = class NameStatusParser extends OutputParser {
    parse(repositoryUri, input, delimiter = OutputParser.LINE_DELIMITER) {
        const items = this.split(input, delimiter);
        const changes = [];
        let index = 0;
        while (index < items.length) {
            const rawStatus = items[index];
            const status = common_1.GitUtils.mapStatus(rawStatus);
            if (common_1.GitUtils.isSimilarityStatus(rawStatus)) {
                const uri = this.toUri(repositoryUri, items[index + 2]);
                const oldUri = this.toUri(repositoryUri, items[index + 1]);
                changes.push({
                    status,
                    uri,
                    oldUri,
                    staged: true
                });
                index = index + 3;
            }
            else {
                const uri = this.toUri(repositoryUri, items[index + 1]);
                changes.push({
                    status,
                    uri,
                    staged: true
                });
                index = index + 2;
            }
        }
        return changes;
    }
};
NameStatusParser = __decorate([
    (0, inversify_1.injectable)()
], NameStatusParser);
exports.NameStatusParser = NameStatusParser;
/**
 * Built-in Git placeholders for tuning the `--format` option for `git diff` or `git log`.
 */
var CommitPlaceholders;
(function (CommitPlaceholders) {
    CommitPlaceholders["HASH"] = "%H";
    CommitPlaceholders["SHORT_HASH"] = "%h";
    CommitPlaceholders["AUTHOR_EMAIL"] = "%aE";
    CommitPlaceholders["AUTHOR_NAME"] = "%aN";
    CommitPlaceholders["AUTHOR_DATE"] = "%aI";
    CommitPlaceholders["AUTHOR_RELATIVE_DATE"] = "%ar";
    CommitPlaceholders["SUBJECT"] = "%s";
    CommitPlaceholders["BODY"] = "%b";
})(CommitPlaceholders = exports.CommitPlaceholders || (exports.CommitPlaceholders = {}));
/**
 * Parser for converting raw, Git commit details into `CommitWithChanges` instances.
 */
let CommitDetailsParser = CommitDetailsParser_1 = class CommitDetailsParser extends OutputParser {
    parse(repositoryUri, input, delimiter = CommitDetailsParser_1.COMMIT_CHUNK_DELIMITER) {
        const chunks = this.split(input, delimiter);
        const changes = [];
        for (const chunk of chunks) {
            const [sha, email, name, timestamp, authorDateRelative, summary, body, rawChanges] = chunk.trim().split(CommitDetailsParser_1.ENTRY_DELIMITER);
            const fileChanges = this.nameStatusParser.parse(repositoryUri, (rawChanges || '').trim());
            changes.push({
                sha,
                author: { timestamp, email, name },
                authorDateRelative,
                summary,
                body,
                fileChanges
            });
        }
        return changes;
    }
    getFormat(...placeholders) {
        return '%x02' + placeholders.join('%x01') + '%x01';
    }
};
CommitDetailsParser.ENTRY_DELIMITER = '\x01';
CommitDetailsParser.COMMIT_CHUNK_DELIMITER = '\x02';
CommitDetailsParser.DEFAULT_PLACEHOLDERS = [
    CommitPlaceholders.HASH,
    CommitPlaceholders.AUTHOR_EMAIL,
    CommitPlaceholders.AUTHOR_NAME,
    CommitPlaceholders.AUTHOR_DATE,
    CommitPlaceholders.AUTHOR_RELATIVE_DATE,
    CommitPlaceholders.SUBJECT,
    CommitPlaceholders.BODY
];
__decorate([
    (0, inversify_1.inject)(NameStatusParser),
    __metadata("design:type", NameStatusParser)
], CommitDetailsParser.prototype, "nameStatusParser", void 0);
CommitDetailsParser = CommitDetailsParser_1 = __decorate([
    (0, inversify_1.injectable)()
], CommitDetailsParser);
exports.CommitDetailsParser = CommitDetailsParser;
let GitBlameParser = GitBlameParser_1 = class GitBlameParser {
    async parse(fileUri, gitBlameOutput, commitBody) {
        if (!gitBlameOutput) {
            return undefined;
        }
        const parsedEntries = this.parseEntries(gitBlameOutput);
        return this.createFileBlame(fileUri, parsedEntries, commitBody);
    }
    parseEntries(rawOutput) {
        const result = [];
        let current;
        for (const line of strings.split(rawOutput, '\n')) {
            if (current === undefined) {
                current = {};
            }
            if (GitBlameParser_1.pumpEntry(current, line)) {
                result.push(current);
                current = undefined;
            }
        }
        return result;
    }
    async createFileBlame(uri, blameEntries, commitBody) {
        const commits = new Map();
        const lines = [];
        for (const entry of blameEntries) {
            const sha = entry.sha;
            let commit = commits.get(sha);
            if (!commit) {
                commit = {
                    sha,
                    author: {
                        name: entry.author,
                        email: entry.authorMail,
                        timestamp: entry.authorTime ? new Date(entry.authorTime * 1000).toISOString() : '',
                    },
                    summary: entry.summary,
                    body: await commitBody(sha)
                };
                commits.set(sha, commit);
            }
            const lineCount = entry.lineCount;
            for (let lineOffset = 0; lineOffset < lineCount; lineOffset++) {
                const line = {
                    sha,
                    line: entry.line + lineOffset
                };
                lines[line.line] = line;
            }
        }
        const fileBlame = { uri, commits: Array.from(commits.values()), lines };
        return fileBlame;
    }
};
GitBlameParser = GitBlameParser_1 = __decorate([
    (0, inversify_1.injectable)()
], GitBlameParser);
exports.GitBlameParser = GitBlameParser;
(function (GitBlameParser) {
    function isUncommittedSha(sha) {
        return (sha || '').startsWith('0000000');
    }
    GitBlameParser.isUncommittedSha = isUncommittedSha;
    function pumpEntry(entry, outputLine) {
        const parts = outputLine.split(' ');
        if (parts.length < 2) {
            return false;
        }
        const uncommitted = isUncommittedSha(entry.sha);
        const firstPart = parts[0];
        if (entry.sha === undefined) {
            entry.sha = firstPart;
            entry.line = parseInt(parts[2], 10) - 1; // to zero based
            entry.lineCount = parseInt(parts[3], 10);
        }
        else if (firstPart === 'author') {
            entry.author = uncommitted ? 'You' : parts.slice(1).join(' ');
        }
        else if (firstPart === 'author-mail') {
            const rest = parts.slice(1).join(' ');
            const matches = rest.match(/(<(.*)>)/);
            entry.authorMail = matches ? matches[2] : rest;
        }
        else if (firstPart === 'author-time') {
            entry.authorTime = parseInt(parts[1], 10);
        }
        else if (firstPart === 'summary') {
            let summary = parts.slice(1).join(' ');
            if (summary.startsWith('"') && summary.endsWith('"')) {
                summary = summary.substring(1, summary.length - 1);
            }
            entry.summary = uncommitted ? 'uncommitted' : summary;
        }
        else if (firstPart === 'previous') {
            entry.previousSha = parts[1];
        }
        else if (firstPart === 'filename') {
            entry.fileName = parts.slice(1).join(' ');
            return true;
        }
        return false;
    }
    GitBlameParser.pumpEntry = pumpEntry;
})(GitBlameParser = exports.GitBlameParser || (exports.GitBlameParser = {}));
exports.GitBlameParser = GitBlameParser;
/**
 * `dugite-extra` based Git implementation.
 */
let DugiteGit = class DugiteGit {
    constructor() {
        this.limit = 1000;
        this.ready = new promise_util_1.Deferred();
        this.gitEnv = new promise_util_1.Deferred();
    }
    init() {
        this.envProvider.getEnv().then(env => this.gitEnv.resolve(env));
        this.gitInit.init()
            .catch(err => {
            this.logger.error('An error occurred during the Git initialization.', err);
            this.ready.resolve();
        })
            .then(() => this.ready.resolve());
    }
    dispose() {
        this.locator.dispose();
        this.execProvider.dispose();
        this.gitInit.dispose();
    }
    async clone(remoteUrl, options) {
        await this.ready.promise;
        const { localUri, branch } = options;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        await (0, clone_1.clone)(remoteUrl, this.getFsPath(localUri), { branch }, { exec, env });
        return { localUri };
    }
    async repositories(workspaceRootUri, options) {
        await this.ready.promise;
        const workspaceRootPath = this.getFsPath(workspaceRootUri);
        const repositories = [];
        const containingPath = await this.resolveContainingPath(workspaceRootPath);
        if (containingPath) {
            repositories.push({
                localUri: this.getUri(containingPath)
            });
        }
        const maxCount = typeof options.maxCount === 'number' ? options.maxCount - repositories.length : undefined;
        if (typeof maxCount === 'number' && maxCount <= 0) {
            return repositories;
        }
        for (const repositoryPath of await this.locator.locate(workspaceRootPath, {
            maxCount
        })) {
            if (containingPath !== repositoryPath) {
                repositories.push({
                    localUri: this.getUri(repositoryPath)
                });
            }
        }
        return repositories;
    }
    async status(repository) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const dugiteStatus = await (0, status_1.getStatus)(repositoryPath, true, this.limit, { exec, env });
        return this.mapStatus(dugiteStatus, repository);
    }
    async add(repository, uri) {
        await this.ready.promise;
        const paths = (Array.isArray(uri) ? uri : [uri]).map(file_uri_1.FileUri.fsPath);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => (0, stage_1.stage)(this.getFsPath(repository), paths, { exec, env }));
    }
    async unstage(repository, uri, options) {
        await this.ready.promise;
        const paths = (Array.isArray(uri) ? uri : [uri]).map(file_uri_1.FileUri.fsPath);
        const treeish = options && options.treeish ? options.treeish : undefined;
        const where = options && options.reset ? options.reset : undefined;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => (0, stage_1.unstage)(this.getFsPath(repository), paths, treeish, where, { exec, env }));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async branch(repository, options) {
        await this.ready.promise;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const repositoryPath = this.getFsPath(repository);
        if (common_1.GitUtils.isBranchList(options)) {
            if (options.type === 'current') {
                const currentBranch = await (0, branch_1.listBranch)(repositoryPath, options.type, { exec, env });
                return currentBranch ? this.mapBranch(currentBranch) : undefined;
            }
            const branches = await (0, branch_1.listBranch)(repositoryPath, options.type, { exec, env });
            return Promise.all(branches.map(branch => this.mapBranch(branch)));
        }
        return this.manager.run(repository, () => {
            if (common_1.GitUtils.isBranchCreate(options)) {
                return (0, branch_1.createBranch)(repositoryPath, options.toCreate, { startPoint: options.startPoint }, { exec, env });
            }
            if (common_1.GitUtils.isBranchRename(options)) {
                return (0, branch_1.renameBranch)(repositoryPath, options.newName, options.newName, { force: !!options.force }, { exec, env });
            }
            if (common_1.GitUtils.isBranchDelete(options)) {
                return (0, branch_1.deleteBranch)(repositoryPath, options.toDelete, { force: !!options.force, remote: !!options.remote }, { exec, env });
            }
            return this.fail(repository, `Unexpected git branch options: ${options}.`);
        });
    }
    async checkout(repository, options) {
        await this.ready.promise;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => {
            const repositoryPath = this.getFsPath(repository);
            if (common_1.GitUtils.isBranchCheckout(options)) {
                return (0, checkout_1.checkoutBranch)(repositoryPath, options.branch, { exec, env });
            }
            if (common_1.GitUtils.isWorkingTreeFileCheckout(options)) {
                const paths = (Array.isArray(options.paths) ? options.paths : [options.paths]).map(file_uri_1.FileUri.fsPath);
                return (0, checkout_1.checkoutPaths)(repositoryPath, paths, { exec, env });
            }
            return this.fail(repository, `Unexpected git checkout options: ${options}.`);
        });
    }
    async commit(repository, message, options) {
        await this.ready.promise;
        const signOff = options && options.signOff;
        const amend = options && options.amend;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => (0, commit_1.createCommit)(this.getFsPath(repository), message || '', signOff, amend, { exec, env }));
    }
    async fetch(repository, options) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const r = await this.getDefaultRemote(repositoryPath, options ? options.remote : undefined);
        if (r) {
            const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
            return this.manager.run(repository, () => (0, fetch_1.fetch)(repositoryPath, r, { exec, env }));
        }
        this.fail(repository, 'No remote repository specified. Please, specify either a URL or a remote name from which new revisions should be fetched.');
    }
    async push(repository, { remote, localBranch, remoteBranch, setUpstream, force } = {}) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const currentRemote = await this.getDefaultRemote(repositoryPath, remote);
        if (currentRemote === undefined) {
            this.fail(repository, 'No configured push destination.');
        }
        const branch = await this.getCurrentBranch(repositoryPath, localBranch);
        const branchName = typeof branch === 'string' ? branch : branch.name;
        if (setUpstream || force) {
            const args = ['push'];
            if (force) {
                args.push('--force');
            }
            if (setUpstream) {
                args.push('--set-upstream');
            }
            if (currentRemote) {
                args.push(currentRemote);
            }
            args.push(branchName + (remoteBranch ? `:${remoteBranch}` : ''));
            await this.exec(repository, args);
        }
        else {
            const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
            return this.manager.run(repository, () => (0, push_1.push)(repositoryPath, currentRemote, branchName, remoteBranch, { exec, env }));
        }
    }
    async pull(repository, { remote, branch, rebase } = {}) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const currentRemote = await this.getDefaultRemote(repositoryPath, remote);
        if (currentRemote === undefined) {
            this.fail(repository, 'No remote repository specified. Please, specify either a URL or a remote name from which new revisions should be fetched.');
        }
        if (rebase) {
            const args = ['pull'];
            if (rebase) {
                args.push('-r');
            }
            if (currentRemote) {
                args.push(currentRemote);
            }
            if (branch) {
                args.push(branch);
            }
            await this.exec(repository, args);
        }
        else {
            const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
            return this.manager.run(repository, () => (0, pull_1.pull)(repositoryPath, currentRemote, branch, { exec, env }));
        }
    }
    async reset(repository, options) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const mode = this.getResetMode(options.mode);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => (0, reset_1.reset)(repositoryPath, mode, options.ref ? options.ref : 'HEAD', { exec, env }));
    }
    async merge(repository, options) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        return this.manager.run(repository, () => (0, merge_1.merge)(repositoryPath, options.branch, { exec, env }));
    }
    async show(repository, uri, options) {
        await this.ready.promise;
        const encoding = options ? options.encoding || 'utf8' : 'utf8';
        const commitish = this.getCommitish(options);
        const repositoryPath = this.getFsPath(repository);
        const path = this.getFsPath(uri);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        if (encoding === 'binary') {
            return (await (0, show_1.getBlobContents)(repositoryPath, commitish, path, { exec, env })).toString();
        }
        return (await (0, show_1.getTextContents)(repositoryPath, commitish, path, { exec, env })).toString();
    }
    async stash(repository, options) {
        const repositoryPath = this.getFsPath(repository);
        try {
            if (!options || (options && !options.action)) {
                await stash_1.stash.push(repositoryPath, options ? options.message : undefined);
                return;
            }
            switch (options.action) {
                case 'push':
                    await stash_1.stash.push(repositoryPath, options.message);
                    break;
                case 'apply':
                    await stash_1.stash.apply(repositoryPath, options.id);
                    break;
                case 'pop':
                    await stash_1.stash.pop(repositoryPath, options.id);
                    break;
                case 'list':
                    const stashList = await stash_1.stash.list(repositoryPath);
                    const stashes = [];
                    stashList.forEach(stashItem => {
                        const splitIndex = stashItem.indexOf(':');
                        stashes.push({
                            id: stashItem.substring(0, splitIndex),
                            message: stashItem.substring(splitIndex + 1)
                        });
                    });
                    return stashes;
                case 'drop':
                    await stash_1.stash.drop(repositoryPath, options.id);
                    break;
            }
        }
        catch (err) {
            this.fail(repository, err);
        }
    }
    async remote(repository, options) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        const remotes = await this.getRemotes(repositoryPath);
        const names = remotes.map(a => a.name);
        return (options && options.verbose === true) ? remotes : names;
    }
    async exec(repository, args, options) {
        await this.ready.promise;
        const repositoryPath = this.getFsPath(repository);
        return this.manager.run(repository, async () => {
            const name = options && options.name ? options.name : '';
            const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
            let opts = {};
            if (options) {
                opts = {
                    ...options
                };
                if (options.successExitCodes) {
                    opts = { ...opts, successExitCodes: new Set(options.successExitCodes) };
                }
                if (options.expectedErrors) {
                    opts = { ...opts, expectedErrors: new Set(options.expectedErrors) };
                }
            }
            opts = {
                ...opts,
                exec,
                env
            };
            return (0, git_1.git)(args, repositoryPath, name, opts);
        });
    }
    async diff(repository, options) {
        await this.ready.promise;
        const args = ['diff', '--name-status', '-C', '-M', '-z'];
        args.push(this.mapRange((options || {}).range));
        if (options && options.uri) {
            const relativePath = Path.relative(this.getFsPath(repository), this.getFsPath(options.uri));
            args.push(...['--', relativePath !== '' ? relativePath : '.']);
        }
        const result = await this.exec(repository, args);
        return this.nameStatusParser.parse(repository.localUri, result.stdout.trim());
    }
    async log(repository, options) {
        await this.ready.promise;
        // If remaining commits should be calculated by the backend, then run `git rev-list --count ${fromRevision | HEAD~fromRevision}`.
        // How to use `mailmap` to map authors: https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html.
        const args = ['log'];
        if (options && options.branch) {
            args.push(options.branch);
        }
        const range = this.mapRange((options || {}).range);
        args.push(...[range, '-C', '-M', '-m', '--first-parent']);
        const maxCount = options && options.maxCount ? options.maxCount : 0;
        if (Number.isInteger(maxCount) && maxCount > 0) {
            args.push(...['-n', `${maxCount}`]);
        }
        const placeholders = options && options.shortSha ?
            [CommitPlaceholders.SHORT_HASH, ...CommitDetailsParser.DEFAULT_PLACEHOLDERS.slice(1)] : CommitDetailsParser.DEFAULT_PLACEHOLDERS;
        args.push(...['--name-status', '--date=unix', `--format=${this.commitDetailsParser.getFormat(...placeholders)}`, '-z', '--']);
        if (options && options.uri) {
            const file = Path.relative(this.getFsPath(repository), this.getFsPath(options.uri)) || '.';
            args.push(...[file]);
        }
        const successExitCodes = [0, 128];
        let result = await this.exec(repository, args, { successExitCodes });
        if (result.exitCode !== 0) {
            // Note that if no range specified then the 'to revision' defaults to HEAD
            const rangeInvolvesHead = !options || !options.range || options.range.toRevision === 'HEAD';
            const repositoryHasNoHead = !await this.revParse(repository, { ref: 'HEAD' });
            // The 'log' command could potentially be valid when no HEAD if the revision range does not involve HEAD */
            if (rangeInvolvesHead && repositoryHasNoHead) {
                // The range involves HEAD but there is no HEAD.  'no head' most likely means a newly created repository with
                // no commits, but could potentially have commits with no HEAD.  This is effectively an empty repository.
                return [];
            }
            // Either the range did not involve HEAD or HEAD exists.  The error must be something else,
            // so re-run but this time we don't ignore the error.
            result = await this.exec(repository, args);
        }
        return this.commitDetailsParser.parse(repository.localUri, result.stdout.trim()
            .split(CommitDetailsParser.COMMIT_CHUNK_DELIMITER)
            .filter(item => item && item.length > 0));
    }
    async revParse(repository, options) {
        const ref = options.ref;
        const successExitCodes = [0, 128];
        const result = await this.exec(repository, ['rev-parse', ref], { successExitCodes });
        if (result.exitCode === 0) {
            return result.stdout; // sha
        }
    }
    async blame(repository, uri, options) {
        await this.ready.promise;
        const args = ['blame', '--root', '--incremental'];
        const file = Path.relative(this.getFsPath(repository), this.getFsPath(uri));
        const repositoryPath = this.getFsPath(repository);
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const status = await (0, status_1.getStatus)(repositoryPath, true, this.limit, { exec, env });
        const isUncommitted = (change) => change.status === status_2.AppFileStatus.New && change.path === file;
        const changes = status.workingDirectory.files;
        if (changes.some(isUncommitted)) {
            return undefined;
        }
        const stdin = options ? options.content : undefined;
        if (stdin) {
            args.push('--contents', '-');
        }
        const gitResult = await this.exec(repository, [...args, '--', file], { stdin });
        const output = gitResult.stdout.trim();
        const commitBodyReader = async (sha) => {
            if (GitBlameParser.isUncommittedSha(sha)) {
                return '';
            }
            const revResult = await this.exec(repository, ['rev-list', '--format=%B', '--max-count=1', sha]);
            const revOutput = revResult.stdout;
            let nl = revOutput.indexOf('\n');
            if (nl > 0) {
                nl = revOutput.indexOf('\n', nl + 1);
            }
            return revOutput.substring(Math.max(0, nl)).trim();
        };
        const blame = await this.blameParser.parse(uri, output, commitBodyReader);
        return blame;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async lsFiles(repository, uri, options) {
        await this.ready.promise;
        const args = ['ls-files'];
        const relativePath = Path.relative(this.getFsPath(repository), this.getFsPath(uri));
        const file = (relativePath === '') ? '.' : relativePath;
        if (options && options.errorUnmatch) {
            args.push('--error-unmatch', file);
            const successExitCodes = [0, 1];
            const expectedErrors = [common_1.GitError.OutsideRepository];
            const result = await this.exec(repository, args, { successExitCodes, expectedErrors });
            const { exitCode } = result;
            return exitCode === 0;
        }
    }
    getCommitish(options) {
        if (options && options.commitish) {
            return 'index' === options.commitish ? '' : options.commitish;
        }
        return '';
    }
    // TODO: akitta what about symlinks? What if the workspace root is a symlink?
    // Maybe, we should use `--show-cdup` here instead of `--show-toplevel` because `show-toplevel` dereferences symlinks.
    async resolveContainingPath(repositoryPath) {
        await this.ready.promise;
        // Do not log an error if we are not contained in a Git repository. Treat exit code 128 as a success too.
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const options = { successExitCodes: new Set([0, 128]), exec, env };
        const result = await (0, git_1.git)(['rev-parse', '--show-toplevel'], repositoryPath, 'rev-parse', options);
        const out = result.stdout;
        if (out && out.length !== 0) {
            try {
                const realpath = await fs.realpath(out.trim());
                return realpath;
            }
            catch (e) {
                this.logger.error(e);
                return undefined;
            }
        }
        return undefined;
    }
    async getRemotes(repositoryPath) {
        await this.ready.promise;
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const result = await (0, git_1.git)(['remote', '-v'], repositoryPath, 'remote', { exec, env });
        const out = result.stdout || '';
        const results = out.trim().match(/\S+/g);
        if (results) {
            const values = [];
            for (let i = 0; i < results.length; i += 6) {
                values.push({ name: results[i], fetch: results[i + 1], push: results[i + 4] });
            }
            return values;
        }
        else {
            return [];
        }
    }
    async getDefaultRemote(repositoryPath, remote) {
        if (remote === undefined) {
            const remotes = await this.getRemotes(repositoryPath);
            const name = remotes.map(a => a.name);
            return name.shift();
        }
        return remote;
    }
    async getCurrentBranch(repositoryPath, localBranch) {
        await this.ready.promise;
        if (localBranch !== undefined) {
            return localBranch;
        }
        const [exec, env] = await Promise.all([this.execProvider.exec(), this.gitEnv.promise]);
        const branch = await (0, branch_1.listBranch)(repositoryPath, 'current', { exec, env });
        if (branch === undefined) {
            return this.fail(repositoryPath, 'No current branch.');
        }
        if (Array.isArray(branch)) {
            return this.fail(repositoryPath, `Implementation error. Listing branch with the 'current' flag must return with single value. Was: ${branch}`);
        }
        return this.mapBranch(branch);
    }
    getResetMode(mode) {
        switch (mode) {
            case 'hard': return 0 /* Hard */;
            case 'soft': return 1 /* Soft */;
            case 'mixed': return 2 /* Mixed */;
            default: throw new Error(`Unexpected Git reset mode: ${mode}.`);
        }
    }
    async mapBranch(toMap) {
        const tip = await this.mapTip(toMap.tip);
        return {
            name: toMap.name,
            nameWithoutRemote: toMap.nameWithoutRemote,
            remote: toMap.remote,
            type: toMap.type,
            upstream: toMap.upstream,
            upstreamWithoutRemote: toMap.upstreamWithoutRemote,
            tip
        };
    }
    async mapTip(toMap) {
        const author = await this.mapCommitIdentity(toMap.author);
        return {
            author,
            body: toMap.body,
            parentSHAs: [...toMap.parentSHAs],
            sha: toMap.sha,
            summary: toMap.summary
        };
    }
    async mapCommitIdentity(toMap) {
        return {
            timestamp: toMap.date.toISOString(),
            email: toMap.email,
            name: toMap.name,
        };
    }
    async mapStatus(toMap, repository) {
        const repositoryPath = this.getFsPath(repository);
        const [aheadBehind, changes] = await Promise.all([this.mapAheadBehind(toMap.branchAheadBehind), this.mapFileChanges(toMap.workingDirectory, repositoryPath)]);
        return {
            exists: toMap.exists,
            branch: toMap.currentBranch,
            upstreamBranch: toMap.currentUpstreamBranch,
            aheadBehind,
            changes,
            currentHead: toMap.currentTip,
            incomplete: toMap.incomplete
        };
    }
    async mapAheadBehind(toMap) {
        return toMap ? { ...toMap } : undefined;
    }
    async mapFileChanges(toMap, repositoryPath) {
        return Promise.all(toMap.files
            .filter(file => !this.isNestedGitRepository(file))
            .map(file => this.mapFileChange(file, repositoryPath)));
    }
    isNestedGitRepository(fileChange) {
        return fileChange.path.endsWith('/');
    }
    async mapFileChange(toMap, repositoryPath) {
        const [uri, status, oldUri] = await Promise.all([
            this.getUri(Path.join(repositoryPath, toMap.path)),
            this.mapFileStatus(toMap.status),
            toMap.oldPath ? this.getUri(Path.join(repositoryPath, toMap.oldPath)) : undefined
        ]);
        return {
            uri,
            status,
            oldUri,
            staged: toMap.staged
        };
    }
    mapFileStatus(toMap) {
        switch (toMap) {
            case status_2.AppFileStatus.Conflicted: return common_1.GitFileStatus.Conflicted;
            case status_2.AppFileStatus.Copied: return common_1.GitFileStatus.Copied;
            case status_2.AppFileStatus.Deleted: return common_1.GitFileStatus.Deleted;
            case status_2.AppFileStatus.Modified: return common_1.GitFileStatus.Modified;
            case status_2.AppFileStatus.New: return common_1.GitFileStatus.New;
            case status_2.AppFileStatus.Renamed: return common_1.GitFileStatus.Renamed;
            default: throw new Error(`Unexpected application file status: ${toMap}`);
        }
    }
    mapRange(toMap) {
        let range = 'HEAD';
        if (toMap) {
            if (typeof toMap.fromRevision === 'number') {
                const toRevision = toMap.toRevision || 'HEAD';
                range = `${toRevision}~${toMap.fromRevision}..${toRevision}`;
            }
            else if (typeof toMap.fromRevision === 'string') {
                range = `${toMap.fromRevision}${toMap.toRevision ? '..' + toMap.toRevision : ''}`;
            }
            else if (toMap.toRevision) {
                range = toMap.toRevision;
            }
        }
        return range;
    }
    getFsPath(repository) {
        const uri = typeof repository === 'string' ? repository : repository.localUri;
        return file_uri_1.FileUri.fsPath(uri);
    }
    getUri(path) {
        return file_uri_1.FileUri.create(path).toString();
    }
    fail(repository, message) {
        const p = typeof repository === 'string' ? repository : repository.localUri;
        const m = message ? `${message} ` : '';
        throw new Error(`${m}[${p}]`);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], DugiteGit.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(git_locator_protocol_1.GitLocator),
    __metadata("design:type", Object)
], DugiteGit.prototype, "locator", void 0);
__decorate([
    (0, inversify_1.inject)(git_repository_manager_1.GitRepositoryManager),
    __metadata("design:type", git_repository_manager_1.GitRepositoryManager)
], DugiteGit.prototype, "manager", void 0);
__decorate([
    (0, inversify_1.inject)(NameStatusParser),
    __metadata("design:type", NameStatusParser)
], DugiteGit.prototype, "nameStatusParser", void 0);
__decorate([
    (0, inversify_1.inject)(CommitDetailsParser),
    __metadata("design:type", CommitDetailsParser)
], DugiteGit.prototype, "commitDetailsParser", void 0);
__decorate([
    (0, inversify_1.inject)(GitBlameParser),
    __metadata("design:type", GitBlameParser)
], DugiteGit.prototype, "blameParser", void 0);
__decorate([
    (0, inversify_1.inject)(git_exec_provider_1.GitExecProvider),
    __metadata("design:type", git_exec_provider_1.GitExecProvider)
], DugiteGit.prototype, "execProvider", void 0);
__decorate([
    (0, inversify_1.inject)(git_env_provider_1.GitEnvProvider),
    __metadata("design:type", Object)
], DugiteGit.prototype, "envProvider", void 0);
__decorate([
    (0, inversify_1.inject)(git_init_1.GitInit),
    __metadata("design:type", Object)
], DugiteGit.prototype, "gitInit", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DugiteGit.prototype, "init", null);
DugiteGit = __decorate([
    (0, inversify_1.injectable)()
], DugiteGit);
exports.DugiteGit = DugiteGit;


/***/ }),

/***/ "../../packages/git/lib/node/env/git-env-module.js":
/*!*********************************************************!*\
  !*** ../../packages/git/lib/node/env/git-env-module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const git_env_provider_1 = __webpack_require__(/*! ./git-env-provider */ "../../packages/git/lib/node/env/git-env-provider.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(git_env_provider_1.DefaultGitEnvProvider).toSelf().inSingletonScope();
    bind(git_env_provider_1.GitEnvProvider).toService(git_env_provider_1.DefaultGitEnvProvider);
});


/***/ }),

/***/ "../../packages/git/lib/node/env/git-env-provider.js":
/*!***********************************************************!*\
  !*** ../../packages/git/lib/node/env/git-env-provider.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultGitEnvProvider = exports.GitEnvProvider = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
/**
 * Provides an additional environment object when executing every single Git command.
 */
exports.GitEnvProvider = Symbol('GitEnvProvider');
/**
 * The default Git environment provider. Does nothing.
 */
let DefaultGitEnvProvider = class DefaultGitEnvProvider {
    constructor() {
        this.toDispose = new disposable_1.DisposableCollection();
    }
    init() {
        // NOOP
    }
    async getEnv() {
        return {};
    }
    dispose() {
        if (!this.toDispose.disposed) {
            this.toDispose.dispose();
        }
    }
};
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultGitEnvProvider.prototype, "init", null);
DefaultGitEnvProvider = __decorate([
    (0, inversify_1.injectable)()
], DefaultGitEnvProvider);
exports.DefaultGitEnvProvider = DefaultGitEnvProvider;


/***/ }),

/***/ "../../packages/git/lib/node/git-backend-module.js":
/*!*********************************************************!*\
  !*** ../../packages/git/lib/node/git-backend-module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindPrompt = exports.bindRepositoryWatcher = exports.bindGit = exports.GitBindingOptions = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const git_1 = __webpack_require__(/*! ../common/git */ "../../packages/git/lib/common/git.js");
const git_watcher_1 = __webpack_require__(/*! ../common/git-watcher */ "../../packages/git/lib/common/git-watcher.js");
const dugite_git_1 = __webpack_require__(/*! ./dugite-git */ "../../packages/git/lib/node/dugite-git.js");
const dugite_git_watcher_1 = __webpack_require__(/*! ./dugite-git-watcher */ "../../packages/git/lib/node/dugite-git-watcher.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const git_repository_manager_1 = __webpack_require__(/*! ./git-repository-manager */ "../../packages/git/lib/node/git-repository-manager.js");
const git_repository_watcher_1 = __webpack_require__(/*! ./git-repository-watcher */ "../../packages/git/lib/node/git-repository-watcher.js");
const git_locator_protocol_1 = __webpack_require__(/*! ./git-locator/git-locator-protocol */ "../../packages/git/lib/node/git-locator/git-locator-protocol.js");
const git_locator_client_1 = __webpack_require__(/*! ./git-locator/git-locator-client */ "../../packages/git/lib/node/git-locator/git-locator-client.js");
const git_locator_impl_1 = __webpack_require__(/*! ./git-locator/git-locator-impl */ "../../packages/git/lib/node/git-locator/git-locator-impl.js");
const git_exec_provider_1 = __webpack_require__(/*! ./git-exec-provider */ "../../packages/git/lib/node/git-exec-provider.js");
const git_prompt_1 = __webpack_require__(/*! ../common/git-prompt */ "../../packages/git/lib/common/git-prompt.js");
const dugite_git_prompt_1 = __webpack_require__(/*! ./dugite-git-prompt */ "../../packages/git/lib/node/dugite-git-prompt.js");
const connection_container_module_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const git_init_1 = __webpack_require__(/*! ./init/git-init */ "../../packages/git/lib/node/init/git-init.js");
const SINGLE_THREADED = process.argv.indexOf('--no-cluster') !== -1;
var GitBindingOptions;
(function (GitBindingOptions) {
    GitBindingOptions.Default = {
        bindManager(binding) {
            return binding.to(git_repository_manager_1.GitRepositoryManager).inSingletonScope();
        }
    };
})(GitBindingOptions = exports.GitBindingOptions || (exports.GitBindingOptions = {}));
function bindGit(bind, bindingOptions = GitBindingOptions.Default) {
    bindingOptions.bindManager(bind(git_repository_manager_1.GitRepositoryManager));
    bind(git_repository_watcher_1.GitRepositoryWatcherFactory).toFactory(ctx => (options) => {
        // GitRepositoryWatcherFactory is injected into the singleton GitRepositoryManager only.
        // GitRepositoryWatcher instances created there should be able to access the (singleton) Git.
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(git_repository_watcher_1.GitRepositoryWatcher).toSelf();
        child.bind(git_repository_watcher_1.GitRepositoryWatcherOptions).toConstantValue(options);
        return child.get(git_repository_watcher_1.GitRepositoryWatcher);
    });
    if (SINGLE_THREADED) {
        bind(git_locator_protocol_1.GitLocator).toDynamicValue(ctx => {
            const logger = ctx.container.get(common_1.ILogger);
            return new git_locator_impl_1.GitLocatorImpl({
                info: (message, ...args) => logger.info(message, ...args),
                error: (message, ...args) => logger.error(message, ...args)
            });
        });
    }
    else {
        bind(git_locator_protocol_1.GitLocator).to(git_locator_client_1.GitLocatorClient);
    }
    bind(dugite_git_1.OutputParser).toSelf().inSingletonScope();
    bind(dugite_git_1.NameStatusParser).toSelf().inSingletonScope();
    bind(dugite_git_1.CommitDetailsParser).toSelf().inSingletonScope();
    bind(dugite_git_1.GitBlameParser).toSelf().inSingletonScope();
    bind(git_exec_provider_1.GitExecProvider).toSelf().inSingletonScope();
    bind(dugite_git_1.DugiteGit).toSelf().inSingletonScope();
    bind(git_1.Git).toService(dugite_git_1.DugiteGit);
    bind(git_init_1.DefaultGitInit).toSelf();
    bind(git_init_1.GitInit).toService(git_init_1.DefaultGitInit);
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(gitConnectionModule);
}
exports.bindGit = bindGit;
const gitConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind, bindBackendService }) => {
    // DugiteGit is bound in singleton scope; each connection should use a proxy for that.
    const GitProxy = Symbol('GitProxy');
    bind(GitProxy).toDynamicValue(ctx => new Proxy(ctx.container.get(dugite_git_1.DugiteGit), {}));
    bindBackendService(git_1.GitPath, GitProxy);
});
function bindRepositoryWatcher(bind) {
    bind(dugite_git_watcher_1.DugiteGitWatcherServer).toSelf();
    bind(git_watcher_1.GitWatcherServer).toService(dugite_git_watcher_1.DugiteGitWatcherServer);
}
exports.bindRepositoryWatcher = bindRepositoryWatcher;
function bindPrompt(bind) {
    bind(dugite_git_prompt_1.DugiteGitPromptServer).toSelf().inSingletonScope();
    bind(git_prompt_1.GitPromptServer).toDynamicValue(context => context.container.get(dugite_git_prompt_1.DugiteGitPromptServer));
}
exports.bindPrompt = bindPrompt;
exports["default"] = new inversify_1.ContainerModule(bind => {
    bindGit(bind);
    bindRepositoryWatcher(bind);
    bind(common_1.ConnectionHandler).toDynamicValue(context => new common_1.RpcConnectionHandler(git_watcher_1.GitWatcherPath, client => {
        const server = context.container.get(git_watcher_1.GitWatcherServer);
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    })).inSingletonScope();
    bindPrompt(bind);
    bind(common_1.ConnectionHandler).toDynamicValue(context => new common_1.RpcConnectionHandler(git_prompt_1.GitPrompt.WS_PATH, client => {
        const server = context.container.get(git_prompt_1.GitPromptServer);
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    })).inSingletonScope();
});


/***/ }),

/***/ "../../packages/git/lib/node/git-exec-provider.js":
/*!********************************************************!*\
  !*** ../../packages/git/lib/node/git-exec-provider.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitExecProvider = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
/**
 * Provides an execution function that will be used to perform the Git commands.
 * This is the default, `NOOP`, provider and always resoles to `undefined`.
 *
 * If you would like to use, for instance, Git over SSH, you could rebind this default provider and have something like this:
 * ```typescript
 * @injectable()
 * export class GitSshExecProvider extends GitExecProvider {
 *
 *     // eslint-disable-next-line @typescript-eslint/no-explicit-any
 *     protected deferred = new Deferred<any>();
 *
 *     @postConstruct()
 *     protected init(): void {
 *         this.doInit();
 *     }
 *
 *     protected async doInit(): Promise<void> {
 *         const connection = await new SSH().connect({
 *             host: 'your-host',
 *             username: 'your-username',
 *             password: 'your-password'
 *         });
 *         const { stdout } = await connection.execCommand('which git');
 *         process.env.LOCAL_GIT_PATH = stdout.trim();
 *         this.deferred.resolve(connection);
 *     }
 *
 *     async exec(): Promise<IGitExecutionOptions.ExecFunc> {
 *         const connection = await this.deferred.promise;
 *         const gitPath = process.env.LOCAL_GIT_PATH;
 *         if (!gitPath) {
 *             throw new Error("The 'LOCAL_GIT_PATH' must be set.");
 *         }
 *         return async (
 *             args: string[],
 *             options: { cwd: string, stdin?: string },
 *             callback: (error: Error | null, stdout: string, stderr: string) => void) => {
 *
 *             const command = `${gitPath} ${args.join(' ')}`;
 *             const { stdout, stderr, code } = await connection.execCommand(command, options);
 *             // eslint-disable-next-line no-null/no-null
 *             let error: Error | null = null;
 *             if (code) {
 *                 error = new Error(stderr || `Unknown error when executing the Git command. ${args}.`);
 *                 // eslint-disable-next-line @typescript-eslint/no-explicit-any
 *                 (error as any).code = code;
 *             }
 *             callback(error, stdout, stderr);
 *         };
 *     }
 *
 *     dispose(): void {
 *         super.dispose();
 *         // Dispose your connection.
 *         this.deferred.promise.then(connection => {
 *             if (connection && 'dispose' in connection && typeof connection.dispose === 'function') {
 *                 connection.dispose();
 *             }
 *         });
 *     }
 *
 * }
 * ```
 */
let GitExecProvider = class GitExecProvider {
    /**
     * Provides a function that will be used to execute the Git commands. If resolves to `undefined`, then
     * the embedded Git executable will be used from [dugite](https://github.com/desktop/dugite).
     */
    exec() {
        return undefined;
    }
    dispose() {
        // NOOP
    }
};
GitExecProvider = __decorate([
    (0, inversify_1.injectable)()
], GitExecProvider);
exports.GitExecProvider = GitExecProvider;


/***/ }),

/***/ "../../packages/git/lib/node/git-locator/git-locator-client.js":
/*!*********************************************************************!*\
  !*** ../../packages/git/lib/node/git-locator/git-locator-client.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitLocatorClient = void 0;
const paths = __webpack_require__(/*! path */ "path");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
let GitLocatorClient = class GitLocatorClient {
    constructor() {
        this.toDispose = new core_1.DisposableCollection();
    }
    dispose() {
        this.toDispose.dispose();
    }
    locate(path, options) {
        return new Promise((resolve, reject) => {
            const toStop = this.ipcConnectionProvider.listen({
                serverName: 'git-locator',
                entryPoint: paths.join(__dirname, 'git-locator-host'),
            }, async (connection) => {
                const proxyFactory = new core_1.RpcProxyFactory();
                const remote = proxyFactory.createProxy();
                proxyFactory.listen(connection);
                try {
                    resolve(await remote.locate(path, options));
                }
                catch (e) {
                    reject(e);
                }
                finally {
                    toStop.dispose();
                }
            });
            this.toDispose.push(toStop);
        });
    }
};
__decorate([
    (0, inversify_1.inject)(node_1.IPCConnectionProvider),
    __metadata("design:type", node_1.IPCConnectionProvider)
], GitLocatorClient.prototype, "ipcConnectionProvider", void 0);
GitLocatorClient = __decorate([
    (0, inversify_1.injectable)()
], GitLocatorClient);
exports.GitLocatorClient = GitLocatorClient;


/***/ }),

/***/ "../../packages/git/lib/node/git-locator/git-locator-impl.js":
/*!*******************************************************************!*\
  !*** ../../packages/git/lib/node/git-locator/git-locator-impl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitLocatorImpl = void 0;
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const findGitRepositories = __webpack_require__(/*! find-git-repositories */ "../../node_modules/find-git-repositories/dist/index.js");
class GitLocatorImpl {
    constructor(options) {
        this.options = {
            info: (message, ...args) => console.info(message, ...args),
            error: (message, ...args) => console.error(message, ...args),
            ...options
        };
    }
    dispose() {
    }
    async locate(basePath, options) {
        return this.doLocate(basePath, {
            maxCount: typeof options.maxCount === 'number' ? options.maxCount : -1,
            visited: new Map()
        });
    }
    async doLocate(basePath, context) {
        const realBasePath = await fs.realpath(basePath);
        if (context.visited.has(realBasePath)) {
            return [];
        }
        context.visited.set(realBasePath, true);
        try {
            const stat = await fs.stat(realBasePath);
            if (!stat.isDirectory()) {
                return [];
            }
            const progress = [];
            const paths = await findGitRepositories(realBasePath, repositories => {
                progress.push(...repositories);
                if (context.maxCount >= 0 && progress.length >= context.maxCount) {
                    return progress.slice(0, context.maxCount).map(GitLocatorImpl.map);
                }
            });
            if (context.maxCount >= 0 && paths.length >= context.maxCount) {
                return await Promise.all(paths.slice(0, context.maxCount).map(GitLocatorImpl.map));
            }
            const repositoryPaths = await Promise.all(paths.map(GitLocatorImpl.map));
            return this.locateFrom(newContext => this.generateNested(repositoryPaths, newContext), context, repositoryPaths);
        }
        catch (e) {
            return [];
        }
    }
    *generateNested(repositoryPaths, context) {
        for (const repository of repositoryPaths) {
            yield this.locateNested(repository, context);
        }
    }
    locateNested(repositoryPath, context) {
        return new Promise(resolve => {
            fs.readdir(repositoryPath, async (err, files) => {
                if (err) {
                    this.options.error(err.message, err);
                    resolve([]);
                }
                else {
                    resolve(this.locateFrom(newContext => this.generateRepositories(repositoryPath, files, newContext), context));
                }
            });
        });
    }
    *generateRepositories(repositoryPath, files, context) {
        for (const file of files) {
            if (file !== '.git') {
                yield this.doLocate(path.join(repositoryPath, file), {
                    ...context
                });
            }
        }
    }
    async locateFrom(generator, parentContext, initial) {
        const result = [];
        if (initial) {
            result.push(...initial);
        }
        const context = {
            ...parentContext,
            maxCount: parentContext.maxCount - result.length
        };
        for (const locateRepositories of generator(context)) {
            const repositories = await locateRepositories;
            result.push(...repositories);
            if (context.maxCount >= 0) {
                if (result.length >= context.maxCount) {
                    return result.slice(0, context.maxCount);
                }
                context.maxCount -= repositories.length;
            }
        }
        return result;
    }
    static async map(repository) {
        return fs.realpath(path.dirname(repository));
    }
}
exports.GitLocatorImpl = GitLocatorImpl;


/***/ }),

/***/ "../../packages/git/lib/node/git-locator/git-locator-protocol.js":
/*!***********************************************************************!*\
  !*** ../../packages/git/lib/node/git-locator/git-locator-protocol.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitLocator = void 0;
exports.GitLocator = Symbol('GitLocator');


/***/ }),

/***/ "../../packages/git/lib/node/git-repository-manager.js":
/*!*************************************************************!*\
  !*** ../../packages/git/lib/node/git-repository-manager.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitRepositoryManager = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const git_repository_watcher_1 = __webpack_require__(/*! ./git-repository-watcher */ "../../packages/git/lib/node/git-repository-watcher.js");
let GitRepositoryManager = class GitRepositoryManager {
    constructor() {
        this.watchers = new core_1.ReferenceCollection(repository => this.watcherFactory({ repository }));
    }
    run(repository, op) {
        const result = op();
        result.then(() => this.sync(repository).catch(e => console.log(e)));
        return result;
    }
    getWatcher(repository) {
        return this.watchers.acquire(repository);
    }
    async sync(repository) {
        const reference = await this.getWatcher(repository);
        const watcher = reference.object;
        // dispose the reference once the next sync cycle is actually completed
        watcher.sync().then(() => reference.dispose());
    }
};
__decorate([
    (0, inversify_1.inject)(git_repository_watcher_1.GitRepositoryWatcherFactory),
    __metadata("design:type", Function)
], GitRepositoryManager.prototype, "watcherFactory", void 0);
GitRepositoryManager = __decorate([
    (0, inversify_1.injectable)()
], GitRepositoryManager);
exports.GitRepositoryManager = GitRepositoryManager;


/***/ }),

/***/ "../../packages/git/lib/node/git-repository-watcher.js":
/*!*************************************************************!*\
  !*** ../../packages/git/lib/node/git-repository-watcher.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitRepositoryWatcher = exports.GitRepositoryWatcherOptions = exports.GitRepositoryWatcherFactory = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/git/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
exports.GitRepositoryWatcherFactory = Symbol('GitRepositoryWatcherFactory');
let GitRepositoryWatcherOptions = class GitRepositoryWatcherOptions {
};
GitRepositoryWatcherOptions = __decorate([
    (0, inversify_1.injectable)()
], GitRepositoryWatcherOptions);
exports.GitRepositoryWatcherOptions = GitRepositoryWatcherOptions;
let GitRepositoryWatcher = class GitRepositoryWatcher {
    constructor() {
        this.onGitStatusChangedEmitter = new core_1.Emitter();
        this.onGitStatusChanged = this.onGitStatusChangedEmitter.event;
        this.syncWorkPromises = [];
        this.disposed = false;
        this.watching = false;
        this.idle = true;
        this.skipNextIdle = false;
    }
    init() {
        this.spinTheLoop();
    }
    watch() {
        if (this.watching) {
            console.debug('Repository watcher is already active.');
            return;
        }
        this.watching = true;
        this.sync();
    }
    sync() {
        if (this.idle) {
            if (this.interruptIdle) {
                this.interruptIdle();
            }
        }
        else {
            this.skipNextIdle = true;
        }
        const result = new promise_util_1.Deferred();
        this.syncWorkPromises.push(result);
        return result.promise;
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            if (this.idle) {
                if (this.interruptIdle) {
                    this.interruptIdle();
                }
            }
        }
    }
    async spinTheLoop() {
        while (!this.disposed) {
            // idle
            if (this.skipNextIdle) {
                this.skipNextIdle = false;
            }
            else {
                const idleTimeout = this.watching ? 5000 : /* super long */ 1000 * 60 * 60 * 24;
                await new Promise(resolve => {
                    const id = setTimeout(resolve, idleTimeout);
                    this.interruptIdle = () => { clearTimeout(id); resolve(); };
                }).then(() => {
                    this.interruptIdle = undefined;
                });
            }
            // work
            await this.syncStatus();
            this.syncWorkPromises.splice(0, this.syncWorkPromises.length).forEach(d => d.resolve());
        }
    }
    async syncStatus() {
        try {
            const source = this.options.repository;
            const oldStatus = this.status;
            const newStatus = await this.git.status(source);
            if (!common_1.WorkingDirectoryStatus.equals(newStatus, oldStatus)) {
                this.status = newStatus;
                this.onGitStatusChangedEmitter.fire({ source, status: newStatus, oldStatus });
            }
        }
        catch (error) {
            if (!common_1.GitUtils.isRepositoryDoesNotExistError(error)) {
                const { localUri } = this.options.repository;
                this.logger.error('Error occurred while synchronizing the status of the repository.', localUri, error);
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.Git),
    __metadata("design:type", Object)
], GitRepositoryWatcher.prototype, "git", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], GitRepositoryWatcher.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(GitRepositoryWatcherOptions),
    __metadata("design:type", GitRepositoryWatcherOptions)
], GitRepositoryWatcher.prototype, "options", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GitRepositoryWatcher.prototype, "init", null);
GitRepositoryWatcher = __decorate([
    (0, inversify_1.injectable)()
], GitRepositoryWatcher);
exports.GitRepositoryWatcher = GitRepositoryWatcher;


/***/ }),

/***/ "../../packages/git/lib/node/init/git-init.js":
/*!****************************************************!*\
  !*** ../../packages/git/lib/node/init/git-init.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultGitInit = exports.GitInit = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const find_git_exec_1 = __webpack_require__(/*! find-git-exec */ "../../node_modules/find-git-exec/lib/find-git-exec.js");
const path_1 = __webpack_require__(/*! path */ "path");
const fs_extra_1 = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const disposable_1 = __webpack_require__(/*! @theia/core/lib/common/disposable */ "../../packages/core/lib/common/disposable.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
/**
 * Initializer hook for Git.
 */
exports.GitInit = Symbol('GitInit');
/**
 * The default initializer. It is used in the browser.
 *
 * Configures the Git extension to use the Git executable from the `PATH`.
 */
let DefaultGitInit = class DefaultGitInit {
    constructor() {
        this.toDispose = new disposable_1.DisposableCollection();
    }
    async init() {
        const { env } = process;
        try {
            const { execPath, path, version } = await (0, find_git_exec_1.default)();
            if (!!execPath && !!path && !!version) {
                // https://github.com/desktop/dugite/issues/111#issuecomment-323222834
                // Instead of the executable path, we need the root directory of Git.
                const dir = (0, path_1.dirname)((0, path_1.dirname)(path));
                const [execPathOk, pathOk, dirOk] = await Promise.all([(0, fs_extra_1.pathExists)(execPath), (0, fs_extra_1.pathExists)(path), (0, fs_extra_1.pathExists)(dir)]);
                if (execPathOk && pathOk && dirOk) {
                    if (typeof env.LOCAL_GIT_DIRECTORY !== 'undefined' && env.LOCAL_GIT_DIRECTORY !== dir) {
                        this.logger.error(`Misconfigured env.LOCAL_GIT_DIRECTORY: ${env.LOCAL_GIT_DIRECTORY}. dir was: ${dir}`);
                        this.messages.error('The LOCAL_GIT_DIRECTORY env variable was already set to a different value.', { timeout: 0 });
                        return;
                    }
                    if (typeof env.GIT_EXEC_PATH !== 'undefined' && env.GIT_EXEC_PATH !== execPath) {
                        this.logger.error(`Misconfigured env.GIT_EXEC_PATH: ${env.GIT_EXEC_PATH}. execPath was: ${execPath}`);
                        this.messages.error('The GIT_EXEC_PATH env variable was already set to a different value.', { timeout: 0 });
                        return;
                    }
                    process.env.LOCAL_GIT_DIRECTORY = dir;
                    process.env.GIT_EXEC_PATH = execPath;
                    this.logger.info(`Using Git [${version}] from the PATH. (${path})`);
                    return;
                }
            }
            this.messages.error('Could not find Git on the PATH.', { timeout: 0 });
        }
        catch (err) {
            this.logger.error(err);
            this.messages.error('An unexpected error occurred when locating the Git executable.', { timeout: 0 });
        }
    }
    dispose() {
        this.toDispose.dispose();
    }
};
__decorate([
    (0, inversify_1.inject)(logger_1.ILogger),
    __metadata("design:type", Object)
], DefaultGitInit.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], DefaultGitInit.prototype, "messages", void 0);
DefaultGitInit = __decorate([
    (0, inversify_1.injectable)()
], DefaultGitInit);
exports.DefaultGitInit = DefaultGitInit;


/***/ }),

/***/ "../../packages/metrics/lib/common/index.js":
/*!**************************************************!*\
  !*** ../../packages/metrics/lib/common/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./measurement-notification-service */ "../../packages/metrics/lib/common/measurement-notification-service.js"), exports);


/***/ }),

/***/ "../../packages/metrics/lib/common/measurement-notification-service.js":
/*!*****************************************************************************!*\
  !*** ../../packages/metrics/lib/common/measurement-notification-service.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeasurementNotificationService = exports.measurementNotificationServicePath = void 0;
exports.measurementNotificationServicePath = '/services/measurement-notification';
exports.MeasurementNotificationService = Symbol('MeasurementNotificationService');


/***/ }),

/***/ "../../packages/metrics/lib/node/extensions-metrics-contribution.js":
/*!**************************************************************************!*\
  !*** ../../packages/metrics/lib/node/extensions-metrics-contribution.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionMetricsContribution = void 0;
// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const application_package_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package */ "../../packages/core/shared/@theia/application-package/index.js");
const prometheus_1 = __webpack_require__(/*! ./prometheus */ "../../packages/metrics/lib/node/prometheus.js");
const metricsName = 'theia_extension_version';
let ExtensionMetricsContribution = class ExtensionMetricsContribution {
    constructor() {
        this.metrics = '';
    }
    getMetrics() {
        return this.metrics;
    }
    startCollecting() {
        let latestMetrics = '';
        const installedExtensions = this.applicationPackage.extensionPackages;
        latestMetrics += `# HELP ${metricsName} Theia extension version info.\n`;
        latestMetrics += `# TYPE ${metricsName} gauge\n`;
        installedExtensions.forEach(extensionInfo => {
            let extensionName = extensionInfo.name;
            if (!prometheus_1.PROMETHEUS_REGEXP.test(extensionName)) {
                extensionName = (0, prometheus_1.toPrometheusValidName)(extensionName);
            }
            const metricsValue = metricsName + `{extension="${extensionName}",version="${extensionInfo.version}"} 1`;
            latestMetrics += metricsValue + '\n';
        });
        this.metrics = latestMetrics;
    }
};
__decorate([
    (0, inversify_1.inject)(application_package_1.ApplicationPackage),
    __metadata("design:type", application_package_1.ApplicationPackage)
], ExtensionMetricsContribution.prototype, "applicationPackage", void 0);
ExtensionMetricsContribution = __decorate([
    (0, inversify_1.injectable)()
], ExtensionMetricsContribution);
exports.ExtensionMetricsContribution = ExtensionMetricsContribution;


/***/ }),

/***/ "../../packages/metrics/lib/node/measurement-metrics-contribution.js":
/*!***************************************************************************!*\
  !*** ../../packages/metrics/lib/node/measurement-metrics-contribution.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeasurementMetricsBackendContribution = void 0;
// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const logger_cli_contribution_1 = __webpack_require__(/*! @theia/core/lib/node/logger-cli-contribution */ "../../packages/core/lib/node/logger-cli-contribution.js");
const backendId = 'backend';
const metricsName = 'theia_measurements';
let MeasurementMetricsBackendContribution = class MeasurementMetricsBackendContribution {
    constructor() {
        this.metrics = '';
        this.frontendCounters = new Map();
    }
    startCollecting() {
        if (this.logLevelCli.defaultLogLevel !== core_1.LogLevel.DEBUG) {
            return;
        }
        this.metrics += `# HELP ${metricsName} Theia stopwatch measurement results.\n`;
        this.metrics += `# TYPE ${metricsName} gauge\n`;
        this.backendStopwatch.storedMeasurements.forEach(result => this.onBackendMeasurement(result));
        this.backendStopwatch.onDidAddMeasurementResult(result => this.onBackendMeasurement(result));
    }
    getMetrics() {
        return this.metrics;
    }
    appendMetricsValue(id, result) {
        const { name, elapsed, startTime, owner } = result;
        const labels = `id="${id}", name="${name}", startTime="${startTime}", owner="${owner}"`;
        const metricsValue = `${metricsName}{${labels}} ${elapsed}`;
        this.metrics += (metricsValue + '\n');
    }
    onBackendMeasurement(result) {
        this.appendMetricsValue(backendId, result);
    }
    createFrontendCounterId(frontendId) {
        const counterId = `frontend-${this.frontendCounters.size + 1}`;
        this.frontendCounters.set(frontendId, counterId);
        return counterId;
    }
    toCounterId(frontendId) {
        var _a;
        return (_a = this.frontendCounters.get(frontendId)) !== null && _a !== void 0 ? _a : this.createFrontendCounterId(frontendId);
    }
    onFrontendMeasurement(frontendId, result) {
        this.appendMetricsValue(this.toCounterId(frontendId), result);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.Stopwatch),
    __metadata("design:type", core_1.Stopwatch)
], MeasurementMetricsBackendContribution.prototype, "backendStopwatch", void 0);
__decorate([
    (0, inversify_1.inject)(logger_cli_contribution_1.LogLevelCliContribution),
    __metadata("design:type", logger_cli_contribution_1.LogLevelCliContribution)
], MeasurementMetricsBackendContribution.prototype, "logLevelCli", void 0);
MeasurementMetricsBackendContribution = __decorate([
    (0, inversify_1.injectable)()
], MeasurementMetricsBackendContribution);
exports.MeasurementMetricsBackendContribution = MeasurementMetricsBackendContribution;


/***/ }),

/***/ "../../packages/metrics/lib/node/metrics-backend-application-contribution.js":
/*!***********************************************************************************!*\
  !*** ../../packages/metrics/lib/node/metrics-backend-application-contribution.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MetricsBackendApplicationContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const metrics_contribution_1 = __webpack_require__(/*! ./metrics-contribution */ "../../packages/metrics/lib/node/metrics-contribution.js");
let MetricsBackendApplicationContribution = class MetricsBackendApplicationContribution {
    constructor(metricsProviders) {
        this.metricsProviders = metricsProviders;
    }
    configure(app) {
        app.get('/metrics', (req, res) => {
            const lastMetrics = this.fetchMetricsFromProviders();
            res.send(lastMetrics);
        });
    }
    onStart(server) {
        this.metricsProviders.getContributions().forEach(contribution => {
            contribution.startCollecting();
        });
    }
    fetchMetricsFromProviders() {
        return this.metricsProviders.getContributions().reduce((total, contribution) => total += contribution.getMetrics() + '\n', '');
    }
};
MetricsBackendApplicationContribution = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(common_1.ContributionProvider)),
    __param(0, (0, inversify_1.named)(metrics_contribution_1.MetricsContribution)),
    __metadata("design:paramtypes", [Object])
], MetricsBackendApplicationContribution);
exports.MetricsBackendApplicationContribution = MetricsBackendApplicationContribution;


/***/ }),

/***/ "../../packages/metrics/lib/node/metrics-backend-module.js":
/*!*****************************************************************!*\
  !*** ../../packages/metrics/lib/node/metrics-backend-module.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const metrics_contribution_1 = __webpack_require__(/*! ./metrics-contribution */ "../../packages/metrics/lib/node/metrics-contribution.js");
const node_metrics_contribution_1 = __webpack_require__(/*! ./node-metrics-contribution */ "../../packages/metrics/lib/node/node-metrics-contribution.js");
const extensions_metrics_contribution_1 = __webpack_require__(/*! ./extensions-metrics-contribution */ "../../packages/metrics/lib/node/extensions-metrics-contribution.js");
const metrics_backend_application_contribution_1 = __webpack_require__(/*! ./metrics-backend-application-contribution */ "../../packages/metrics/lib/node/metrics-backend-application-contribution.js");
const common_2 = __webpack_require__(/*! ../common */ "../../packages/metrics/lib/common/index.js");
const measurement_metrics_contribution_1 = __webpack_require__(/*! ./measurement-metrics-contribution */ "../../packages/metrics/lib/node/measurement-metrics-contribution.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    (0, common_1.bindContributionProvider)(bind, metrics_contribution_1.MetricsContribution);
    bind(metrics_contribution_1.MetricsContribution).to(node_metrics_contribution_1.NodeMetricsContribution).inSingletonScope();
    bind(metrics_contribution_1.MetricsContribution).to(extensions_metrics_contribution_1.ExtensionMetricsContribution).inSingletonScope();
    bind(measurement_metrics_contribution_1.MeasurementMetricsBackendContribution).toSelf().inSingletonScope();
    bind(metrics_contribution_1.MetricsContribution).toService(measurement_metrics_contribution_1.MeasurementMetricsBackendContribution);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(common_2.measurementNotificationServicePath, () => ctx.container.get(measurement_metrics_contribution_1.MeasurementMetricsBackendContribution)));
    bind(node_1.BackendApplicationContribution).to(metrics_backend_application_contribution_1.MetricsBackendApplicationContribution).inSingletonScope();
});


/***/ }),

/***/ "../../packages/metrics/lib/node/metrics-contribution.js":
/*!***************************************************************!*\
  !*** ../../packages/metrics/lib/node/metrics-contribution.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MetricsContribution = void 0;
// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
exports.MetricsContribution = Symbol('MetricsContribution');


/***/ }),

/***/ "../../packages/metrics/lib/node/node-metrics-contribution.js":
/*!********************************************************************!*\
  !*** ../../packages/metrics/lib/node/node-metrics-contribution.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeMetricsContribution = void 0;
const prom = __webpack_require__(/*! prom-client */ "../../node_modules/prom-client/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let NodeMetricsContribution = class NodeMetricsContribution {
    getMetrics() {
        return prom.register.metrics().toString();
    }
    startCollecting() {
        const collectDefaultMetrics = prom.collectDefaultMetrics;
        // Probe every 5th second.
        collectDefaultMetrics({ timeout: 5000 });
    }
};
NodeMetricsContribution = __decorate([
    (0, inversify_1.injectable)()
], NodeMetricsContribution);
exports.NodeMetricsContribution = NodeMetricsContribution;


/***/ }),

/***/ "../../packages/metrics/lib/node/prometheus.js":
/*!*****************************************************!*\
  !*** ../../packages/metrics/lib/node/prometheus.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PROMETHEUS_REGEXP = exports.toPrometheusValidName = void 0;
function toPrometheusValidName(name) {
    /* Make sure that start of name is valid and respect [a-zA-Z_:] */
    const validFirstCharString = name.replace(/(^[^a-zA-Z_:]+)/gi, '');
    /* Make sure that rest of the name respect [a-zA-Z0-9_:]* */
    const validPrometheusName = validFirstCharString.replace(/([^a-zA-Z0-9_:])/gi, '_');
    return validPrometheusName;
}
exports.toPrometheusValidName = toPrometheusValidName;
exports.PROMETHEUS_REGEXP = /^[a-zA-Z_:][a-zA-Z0-9_:]*/;


/***/ }),

/***/ "../../packages/mini-browser/lib/common/mini-browser-endpoint.js":
/*!***********************************************************************!*\
  !*** ../../packages/mini-browser/lib/common/mini-browser-endpoint.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MiniBrowserEndpoint = void 0;
/**
 * The mini-browser can now serve content on its own host/origin.
 *
 * The virtual host can be configured with this `THEIA_MINI_BROWSER_HOST_PATTERN`
 * environment variable. `{{hostname}}` represents the current host, and `{{uuid}}`
 * will be replace by a random uuid value.
 */
var MiniBrowserEndpoint;
(function (MiniBrowserEndpoint) {
    MiniBrowserEndpoint.PATH = '/mini-browser';
    MiniBrowserEndpoint.HOST_PATTERN_ENV = 'THEIA_MINI_BROWSER_HOST_PATTERN';
    MiniBrowserEndpoint.HOST_PATTERN_DEFAULT = '{{uuid}}.mini-browser.{{hostname}}';
})(MiniBrowserEndpoint = exports.MiniBrowserEndpoint || (exports.MiniBrowserEndpoint = {}));


/***/ }),

/***/ "../../packages/mini-browser/lib/common/mini-browser-service.js":
/*!**********************************************************************!*\
  !*** ../../packages/mini-browser/lib/common/mini-browser-service.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MiniBrowserService = exports.MiniBrowserServicePath = void 0;
exports.MiniBrowserServicePath = '/services/mini-browser-service';
exports.MiniBrowserService = Symbol('MiniBrowserService');


/***/ }),

/***/ "../../packages/mini-browser/lib/node/mini-browser-backend-module.js":
/*!***************************************************************************!*\
  !*** ../../packages/mini-browser/lib/node/mini-browser-backend-module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const contribution_provider_1 = __webpack_require__(/*! @theia/core/lib/common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
const backend_application_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application */ "../../packages/core/lib/node/backend-application.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const mini_browser_service_1 = __webpack_require__(/*! ../common/mini-browser-service */ "../../packages/mini-browser/lib/common/mini-browser-service.js");
const mini_browser_endpoint_1 = __webpack_require__(/*! ./mini-browser-endpoint */ "../../packages/mini-browser/lib/node/mini-browser-endpoint.js");
const ws_request_validators_1 = __webpack_require__(/*! @theia/core/lib/node/ws-request-validators */ "../../packages/core/lib/node/ws-request-validators.js");
const mini_browser_ws_validator_1 = __webpack_require__(/*! ./mini-browser-ws-validator */ "../../packages/mini-browser/lib/node/mini-browser-ws-validator.js");
const mini_browser_backend_security_warnings_1 = __webpack_require__(/*! ./mini-browser-backend-security-warnings */ "../../packages/mini-browser/lib/node/mini-browser-backend-security-warnings.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(mini_browser_endpoint_1.MiniBrowserEndpoint).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(mini_browser_endpoint_1.MiniBrowserEndpoint);
    bind(mini_browser_ws_validator_1.MiniBrowserWsRequestValidator).toSelf().inSingletonScope();
    bind(ws_request_validators_1.WsRequestValidatorContribution).toService(mini_browser_ws_validator_1.MiniBrowserWsRequestValidator);
    bind(mini_browser_service_1.MiniBrowserService).toService(mini_browser_endpoint_1.MiniBrowserEndpoint);
    bind(common_1.ConnectionHandler).toDynamicValue(context => new common_1.RpcConnectionHandler(mini_browser_service_1.MiniBrowserServicePath, () => context.container.get(mini_browser_service_1.MiniBrowserService))).inSingletonScope();
    (0, contribution_provider_1.bindContributionProvider)(bind, mini_browser_endpoint_1.MiniBrowserEndpointHandler);
    bind(mini_browser_endpoint_1.MiniBrowserEndpointHandler).to(mini_browser_endpoint_1.HtmlHandler).inSingletonScope();
    bind(mini_browser_endpoint_1.MiniBrowserEndpointHandler).to(mini_browser_endpoint_1.ImageHandler).inSingletonScope();
    bind(mini_browser_endpoint_1.MiniBrowserEndpointHandler).to(mini_browser_endpoint_1.PdfHandler).inSingletonScope();
    bind(mini_browser_endpoint_1.MiniBrowserEndpointHandler).to(mini_browser_endpoint_1.SvgHandler).inSingletonScope();
    bind(mini_browser_backend_security_warnings_1.MiniBrowserBackendSecurityWarnings).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(mini_browser_backend_security_warnings_1.MiniBrowserBackendSecurityWarnings);
});


/***/ }),

/***/ "../../packages/mini-browser/lib/node/mini-browser-backend-security-warnings.js":
/*!**************************************************************************************!*\
  !*** ../../packages/mini-browser/lib/node/mini-browser-backend-security-warnings.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MiniBrowserBackendSecurityWarnings = void 0;
const backend_application_config_provider_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application-config-provider */ "../../packages/core/lib/node/backend-application-config-provider.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const mini_browser_endpoint_1 = __webpack_require__(/*! ../common/mini-browser-endpoint */ "../../packages/mini-browser/lib/common/mini-browser-endpoint.js");
let MiniBrowserBackendSecurityWarnings = class MiniBrowserBackendSecurityWarnings {
    initialize() {
        this.checkHostPattern();
    }
    async checkHostPattern() {
        if (backend_application_config_provider_1.BackendApplicationConfigProvider.get()['warnOnPotentiallyInsecureHostPattern'] === false) {
            return;
        }
        const envHostPattern = process.env[mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_ENV];
        if (envHostPattern && envHostPattern !== mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_DEFAULT) {
            console.warn(`\
MINI BROWSER SECURITY WARNING

    Changing the @theia/mini-browser host pattern can lead to security vulnerabilities.
        Current pattern: "${envHostPattern}"
    Please read @theia/mini-browser/README.md for more information.
`);
        }
    }
};
MiniBrowserBackendSecurityWarnings = __decorate([
    (0, inversify_1.injectable)()
], MiniBrowserBackendSecurityWarnings);
exports.MiniBrowserBackendSecurityWarnings = MiniBrowserBackendSecurityWarnings;


/***/ }),

/***/ "../../packages/mini-browser/lib/node/mini-browser-endpoint.js":
/*!*********************************************************************!*\
  !*** ../../packages/mini-browser/lib/node/mini-browser-endpoint.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SvgHandler = exports.PdfHandler = exports.ImageHandler = exports.HtmlHandler = exports.MiniBrowserEndpoint = exports.MiniBrowserEndpointHandler = void 0;
const vhost = __webpack_require__(/*! vhost */ "../../node_modules/vhost/index.js");
const express = __webpack_require__(/*! @theia/core/shared/express */ "../../packages/core/shared/express/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const mime_types_1 = __webpack_require__(/*! mime-types */ "../../node_modules/mime-types/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const contribution_provider_1 = __webpack_require__(/*! @theia/core/lib/common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
const mini_browser_endpoint_1 = __webpack_require__(/*! ../common/mini-browser-endpoint */ "../../packages/mini-browser/lib/common/mini-browser-endpoint.js");
/**
 * Endpoint handler contribution for the `MiniBrowserEndpoint`.
 */
exports.MiniBrowserEndpointHandler = Symbol('MiniBrowserEndpointHandler');
let MiniBrowserEndpoint = class MiniBrowserEndpoint {
    constructor() {
        this.handlers = new Map();
    }
    configure(app) {
        this.attachRequestHandlerPromise = this.attachRequestHandler(app);
    }
    async onStart() {
        await Promise.all(Array.from(this.getContributions(), async (handler) => {
            const extensions = await handler.supportedExtensions();
            for (const extension of (Array.isArray(extensions) ? extensions : [extensions]).map(e => e.toLocaleLowerCase())) {
                const existingHandler = this.handlers.get(extension);
                if (!existingHandler || handler.priority > existingHandler.priority) {
                    this.handlers.set(extension, handler);
                }
            }
        }));
        await this.attachRequestHandlerPromise;
    }
    async supportedFileExtensions() {
        return Array.from(this.handlers.entries(), ([extension, handler]) => ({ extension, priority: handler.priority() }));
    }
    async attachRequestHandler(app) {
        const miniBrowserApp = express();
        miniBrowserApp.get('*', async (request, response) => this.response(await this.getUri(request), response));
        app.use(mini_browser_endpoint_1.MiniBrowserEndpoint.PATH, vhost(await this.getVirtualHostRegExp(), miniBrowserApp));
    }
    async response(uri, response) {
        const exists = await fs.pathExists(file_uri_1.FileUri.fsPath(uri));
        if (!exists) {
            return this.missingResourceHandler()(uri, response);
        }
        const statWithContent = await this.readContent(uri);
        try {
            if (!statWithContent.stat.isDirectory()) {
                const extension = uri.split('.').pop();
                if (!extension) {
                    return this.defaultHandler()(statWithContent, response);
                }
                const handler = this.handlers.get(extension.toString().toLocaleLowerCase());
                if (!handler) {
                    return this.defaultHandler()(statWithContent, response);
                }
                return handler.respond(statWithContent, response);
            }
        }
        catch (e) {
            return this.errorHandler()(e, uri, response);
        }
        return this.defaultHandler()(statWithContent, response);
    }
    getContributions() {
        return this.contributions.getContributions();
    }
    getUri(request) {
        return file_uri_1.FileUri.create(request.path).toString(true);
    }
    async readContent(uri) {
        const fsPath = file_uri_1.FileUri.fsPath(uri);
        const [stat, content] = await Promise.all([fs.stat(fsPath), fs.readFile(fsPath, 'utf8')]);
        return { stat: Object.assign(stat, { uri }), content };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    errorHandler() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return async (error, uri, response) => {
            const details = error.toString ? error.toString() : error;
            this.logger.error(`Error occurred while handling request for ${uri}. Details: ${details}`);
            if (error instanceof Error) {
                let message = error.message;
                if (error.stack) {
                    message += `\n${error.stack}`;
                }
                this.logger.error(message);
            }
            else if (typeof error === 'string') {
                this.logger.error(error);
            }
            else {
                this.logger.error(`${error}`);
            }
            return response.send(500);
        };
    }
    missingResourceHandler() {
        return async (uri, response) => {
            this.logger.error(`Cannot handle missing resource. URI: ${uri}.`);
            return response.sendStatus(404);
        };
    }
    defaultHandler() {
        return async (statWithContent, response) => {
            const { content } = statWithContent;
            const mimeType = (0, mime_types_1.lookup)(file_uri_1.FileUri.fsPath(statWithContent.stat.uri));
            if (!mimeType) {
                this.logger.warn(`Cannot handle unexpected resource. URI: ${statWithContent.stat.uri}.`);
                response.contentType('application/octet-stream');
            }
            else {
                response.contentType(mimeType);
            }
            return response.send(content);
        };
    }
    async getVirtualHostRegExp() {
        const pattern = process.env[mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_ENV] || mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_DEFAULT;
        const vhostRe = pattern
            .replace(/\./g, '\\.')
            .replace('{{uuid}}', '.+')
            .replace('{{hostname}}', '.+');
        return new RegExp(vhostRe, 'i');
    }
};
__decorate([
    (0, inversify_1.inject)(logger_1.ILogger),
    __metadata("design:type", Object)
], MiniBrowserEndpoint.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(exports.MiniBrowserEndpointHandler),
    __metadata("design:type", Object)
], MiniBrowserEndpoint.prototype, "contributions", void 0);
MiniBrowserEndpoint = __decorate([
    (0, inversify_1.injectable)()
], MiniBrowserEndpoint);
exports.MiniBrowserEndpoint = MiniBrowserEndpoint;
// See `EditorManager#canHandle`.
const CODE_EDITOR_PRIORITY = 100;
/**
 * Endpoint handler contribution for HTML files.
 */
let HtmlHandler = class HtmlHandler {
    supportedExtensions() {
        return ['html', 'xhtml', 'htm'];
    }
    priority() {
        // Prefer Code Editor over Mini Browser
        // https://github.com/eclipse-theia/theia/issues/2051
        return 1;
    }
    respond(statWithContent, response) {
        response.contentType('text/html');
        return response.send(statWithContent.content);
    }
};
HtmlHandler = __decorate([
    (0, inversify_1.injectable)()
], HtmlHandler);
exports.HtmlHandler = HtmlHandler;
/**
 * Handler for JPG resources.
 */
let ImageHandler = class ImageHandler {
    supportedExtensions() {
        return ['jpg', 'jpeg', 'png', 'bmp', 'gif'];
    }
    priority() {
        return CODE_EDITOR_PRIORITY + 1;
    }
    respond(statWithContent, response) {
        fs.readFile(file_uri_1.FileUri.fsPath(statWithContent.stat.uri), (error, data) => {
            if (error) {
                throw error;
            }
            response.contentType('image/jpeg');
            response.send(data);
        });
        return response;
    }
};
ImageHandler = __decorate([
    (0, inversify_1.injectable)()
], ImageHandler);
exports.ImageHandler = ImageHandler;
/**
 * PDF endpoint handler.
 */
let PdfHandler = class PdfHandler {
    supportedExtensions() {
        return 'pdf';
    }
    priority() {
        return CODE_EDITOR_PRIORITY + 1;
    }
    respond(statWithContent, response) {
        // https://stackoverflow.com/questions/11598274/display-pdf-in-browser-using-express-js
        const encodeRFC5987ValueChars = (input) => encodeURIComponent(input).
            // Note that although RFC3986 reserves "!", RFC5987 does not, so we do not need to escape it.
            replace(/['()]/g, escape). // i.e., %27 %28 %29
            replace(/\*/g, '%2A').
            // The following are not required for percent-encoding per RFC5987, so we can allow for a little better readability over the wire: |`^.
            replace(/%(?:7C|60|5E)/g, unescape);
        const fileName = file_uri_1.FileUri.create(statWithContent.stat.uri).path.base;
        fs.readFile(file_uri_1.FileUri.fsPath(statWithContent.stat.uri), (error, data) => {
            if (error) {
                throw error;
            }
            // Change `inline` to `attachment` if you would like to force downloading the PDF instead of previewing in the browser.
            response.setHeader('Content-disposition', `inline; filename*=UTF-8''${encodeRFC5987ValueChars(fileName)}`);
            response.contentType('application/pdf');
            response.send(data);
        });
        return response;
    }
};
PdfHandler = __decorate([
    (0, inversify_1.injectable)()
], PdfHandler);
exports.PdfHandler = PdfHandler;
/**
 * Endpoint contribution for SVG resources.
 */
let SvgHandler = class SvgHandler {
    supportedExtensions() {
        return 'svg';
    }
    priority() {
        return 1;
    }
    respond(statWithContent, response) {
        response.contentType('image/svg+xml');
        return response.send(statWithContent.content);
    }
};
SvgHandler = __decorate([
    (0, inversify_1.injectable)()
], SvgHandler);
exports.SvgHandler = SvgHandler;


/***/ }),

/***/ "../../packages/mini-browser/lib/node/mini-browser-ws-validator.js":
/*!*************************************************************************!*\
  !*** ../../packages/mini-browser/lib/node/mini-browser-ws-validator.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MiniBrowserWsRequestValidator = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const url = __webpack_require__(/*! url */ "url");
const mini_browser_endpoint_1 = __webpack_require__(/*! ../common/mini-browser-endpoint */ "../../packages/mini-browser/lib/common/mini-browser-endpoint.js");
/**
 * Prevents explicit WebSocket connections from the mini-browser virtual host.
 */
let MiniBrowserWsRequestValidator = class MiniBrowserWsRequestValidator {
    constructor() {
        this.serveSameOrigin = false;
    }
    init() {
        const pattern = process.env[mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_ENV] || mini_browser_endpoint_1.MiniBrowserEndpoint.HOST_PATTERN_DEFAULT;
        if (pattern === '{{hostname}}') {
            this.serveSameOrigin = true;
        }
        const vhostRe = pattern
            .replace(/\./g, '\\.')
            .replace('{{uuid}}', '.+')
            .replace('{{hostname}}', '.+');
        this.miniBrowserHostRe = new RegExp(vhostRe, 'i');
    }
    async allowWsUpgrade(request) {
        if (request.headers.origin && !this.serveSameOrigin) {
            const origin = url.parse(request.headers.origin);
            if (origin.host && this.miniBrowserHostRe.test(origin.host)) {
                // If the origin comes from the WebViews, refuse:
                return false;
            }
        }
        return true;
    }
};
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MiniBrowserWsRequestValidator.prototype, "init", null);
MiniBrowserWsRequestValidator = __decorate([
    (0, inversify_1.injectable)()
], MiniBrowserWsRequestValidator);
exports.MiniBrowserWsRequestValidator = MiniBrowserWsRequestValidator;


/***/ }),

/***/ "../../packages/plugin-dev/lib/common/plugin-dev-protocol.js":
/*!*******************************************************************!*\
  !*** ../../packages/plugin-dev/lib/common/plugin-dev-protocol.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDevServer = exports.pluginDevServicePath = void 0;
exports.pluginDevServicePath = '/services/plugin-dev';
exports.PluginDevServer = Symbol('PluginDevServer');


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/hosted-instance-manager.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/hosted-instance-manager.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElectronNodeHostedPluginRunner = exports.NodeHostedPluginRunner = exports.AbstractHostedInstanceManager = exports.HostedInstanceManager = void 0;
const request_1 = __webpack_require__(/*! @theia/core/shared/@theia/request */ "../../packages/core/shared/@theia/request/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const cp = __webpack_require__(/*! child_process */ "child_process");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const net = __webpack_require__(/*! net */ "net");
const path = __webpack_require__(/*! path */ "path");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const contribution_provider_1 = __webpack_require__(/*! @theia/core/lib/common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
const hosted_plugin_uri_postprocessor_1 = __webpack_require__(/*! ./hosted-plugin-uri-postprocessor */ "../../packages/plugin-dev/lib/node/hosted-plugin-uri-postprocessor.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const types_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/types */ "../../packages/plugin-ext/lib/common/types.js");
const hosted_plugin_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/hosted-plugin */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js");
const metadata_scanner_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/metadata-scanner */ "../../packages/plugin-ext/lib/hosted/node/metadata-scanner.js");
const hosted_plugin_process_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/hosted-plugin-process */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-process.js");
const errors_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/errors */ "../../packages/plugin-ext/lib/common/errors.js");
const DEFAULT_HOSTED_PLUGIN_PORT = 3030;
exports.HostedInstanceManager = Symbol('HostedInstanceManager');
const HOSTED_INSTANCE_START_TIMEOUT_MS = 30000;
const THEIA_INSTANCE_REGEX = /.*Theia app listening on (.*).*\./;
const PROCESS_OPTIONS = {
    cwd: process.cwd(),
    env: { ...process.env }
};
let AbstractHostedInstanceManager = class AbstractHostedInstanceManager {
    constructor() {
        this.isPluginRunning = false;
    }
    isRunning() {
        return this.isPluginRunning;
    }
    async run(pluginUri, port) {
        return this.doRun(pluginUri, port);
    }
    async debug(pluginUri, debugConfig) {
        return this.doRun(pluginUri, undefined, debugConfig);
    }
    async doRun(pluginUri, port, debugConfig) {
        if (this.isPluginRunning) {
            this.hostedPluginSupport.sendLog({ data: 'Hosted plugin instance is already running.', type: types_1.LogType.Info });
            throw new Error('Hosted instance is already running.');
        }
        let command;
        let processOptions;
        if (pluginUri.scheme === 'file') {
            processOptions = { ...PROCESS_OPTIONS };
            // get filesystem path that work cross operating systems
            processOptions.env.HOSTED_PLUGIN = file_uri_1.FileUri.fsPath(pluginUri.toString());
            // Disable all the other plugins on this instance
            processOptions.env.THEIA_PLUGINS = '';
            command = await this.getStartCommand(port, debugConfig);
        }
        else {
            throw new Error('Not supported plugin location: ' + pluginUri.toString());
        }
        this.instanceUri = await this.postProcessInstanceUri(await this.runHostedPluginTheiaInstance(command, processOptions));
        this.pluginUri = pluginUri;
        // disable redirect to grab the release
        this.instanceOptions = {
            followRedirects: 0
        };
        this.instanceOptions = await this.postProcessInstanceOptions(this.instanceOptions);
        await this.checkInstanceUriReady();
        return this.instanceUri;
    }
    terminate() {
        if (this.isPluginRunning && !!this.hostedInstanceProcess.pid) {
            this.hostedPluginProcess.killProcessTree(this.hostedInstanceProcess.pid);
            this.hostedPluginSupport.sendLog({ data: 'Hosted instance has been terminated', type: types_1.LogType.Info });
            this.isPluginRunning = false;
        }
        else {
            throw new Error('Hosted plugin instance is not running.');
        }
    }
    getInstanceURI() {
        if (this.isPluginRunning) {
            return this.instanceUri;
        }
        throw new Error('Hosted plugin instance is not running.');
    }
    getPluginURI() {
        if (this.isPluginRunning) {
            return this.pluginUri;
        }
        throw new Error('Hosted plugin instance is not running.');
    }
    /**
     * Checks that the `instanceUri` is responding before exiting method
     */
    async checkInstanceUriReady() {
        return new Promise((resolve, reject) => this.pingLoop(60, resolve, reject));
    }
    /**
     * Start a loop to ping, if ping is OK return immediately, else start a new ping after 1second. We iterate for the given amount of loops provided in remainingCount
     * @param remainingCount the number of occurrence to check
     * @param resolve resolve function if ok
     * @param reject reject function if error
     */
    async pingLoop(remainingCount, resolve, reject) {
        const isOK = await this.ping();
        if (isOK) {
            resolve();
        }
        else {
            if (remainingCount > 0) {
                setTimeout(() => this.pingLoop(--remainingCount, resolve, reject), 1000);
            }
            else {
                reject(new Error('Unable to ping the remote server'));
            }
        }
    }
    /**
     * Ping the plugin URI (checking status of the head)
     */
    async ping() {
        try {
            const url = this.instanceUri.toString();
            // Wait that the status is OK
            const response = await this.request.request({ url, type: 'HEAD', ...this.instanceOptions });
            return response.res.statusCode === 200;
        }
        catch {
            return false;
        }
    }
    async isPluginValid(uri) {
        const pckPath = path.join(file_uri_1.FileUri.fsPath(uri), 'package.json');
        try {
            const pck = await fs.readJSON(pckPath);
            this.metadata.getScanner(pck);
            return true;
        }
        catch (err) {
            if (!(0, errors_1.isENOENT)(err)) {
                console.error(err);
            }
            return false;
        }
    }
    async getStartCommand(port, debugConfig) {
        const processArguments = process.argv;
        let command;
        if (core_1.environment.electron.is()) {
            command = ['yarn', 'theia', 'start'];
        }
        else {
            command = processArguments.filter((arg, index, args) => {
                // remove --port=X and --port X arguments if set
                // remove --plugins arguments
                if (arg.startsWith('--port') || args[index - 1] === '--port') {
                    return;
                }
                else {
                    return arg;
                }
            });
        }
        if (process.env.HOSTED_PLUGIN_HOSTNAME) {
            command.push('--hostname=' + process.env.HOSTED_PLUGIN_HOSTNAME);
        }
        if (port) {
            await this.validatePort(port);
            command.push('--port=' + port);
        }
        if (debugConfig) {
            command.push(`--hosted-plugin-${debugConfig.debugMode || 'inspect'}=0.0.0.0${debugConfig.debugPort ? ':' + debugConfig.debugPort : ''}`);
        }
        return command;
    }
    async postProcessInstanceUri(uri) {
        return uri;
    }
    async postProcessInstanceOptions(options) {
        return options;
    }
    runHostedPluginTheiaInstance(command, options) {
        this.isPluginRunning = true;
        return new Promise((resolve, reject) => {
            let started = false;
            const outputListener = (data) => {
                const line = data.toString();
                const match = THEIA_INSTANCE_REGEX.exec(line);
                if (match) {
                    this.hostedInstanceProcess.stdout.removeListener('data', outputListener);
                    started = true;
                    resolve(new uri_1.default(match[1]));
                }
            };
            if (core_1.isWindows) {
                // Has to be set for running on windows (electron).
                // See also: https://github.com/nodejs/node/issues/3675
                options.shell = true;
            }
            this.hostedInstanceProcess = cp.spawn(command.shift(), command, options);
            this.hostedInstanceProcess.on('error', () => { this.isPluginRunning = false; });
            this.hostedInstanceProcess.on('exit', () => { this.isPluginRunning = false; });
            this.hostedInstanceProcess.stdout.addListener('data', outputListener);
            this.hostedInstanceProcess.stdout.addListener('data', data => {
                this.hostedPluginSupport.sendLog({ data: data.toString(), type: types_1.LogType.Info });
            });
            this.hostedInstanceProcess.stderr.addListener('data', data => {
                this.hostedPluginSupport.sendLog({ data: data.toString(), type: types_1.LogType.Error });
            });
            setTimeout(() => {
                if (!started) {
                    this.terminate();
                    this.isPluginRunning = false;
                    reject(new Error('Timeout.'));
                }
            }, HOSTED_INSTANCE_START_TIMEOUT_MS);
        });
    }
    async validatePort(port) {
        if (port < 1 || port > 65535) {
            throw new Error('Port value is incorrect.');
        }
        if (!await this.isPortFree(port)) {
            throw new Error('Port ' + port + ' is already in use.');
        }
    }
    isPortFree(port) {
        return new Promise(resolve => {
            const server = net.createServer();
            server.listen(port, '0.0.0.0');
            server.on('error', () => {
                resolve(false);
            });
            server.on('listening', () => {
                server.close();
                resolve(true);
            });
        });
    }
};
__decorate([
    (0, inversify_1.inject)(hosted_plugin_1.HostedPluginSupport),
    __metadata("design:type", hosted_plugin_1.HostedPluginSupport)
], AbstractHostedInstanceManager.prototype, "hostedPluginSupport", void 0);
__decorate([
    (0, inversify_1.inject)(metadata_scanner_1.MetadataScanner),
    __metadata("design:type", metadata_scanner_1.MetadataScanner)
], AbstractHostedInstanceManager.prototype, "metadata", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_process_1.HostedPluginProcess),
    __metadata("design:type", hosted_plugin_process_1.HostedPluginProcess)
], AbstractHostedInstanceManager.prototype, "hostedPluginProcess", void 0);
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], AbstractHostedInstanceManager.prototype, "request", void 0);
AbstractHostedInstanceManager = __decorate([
    (0, inversify_1.injectable)()
], AbstractHostedInstanceManager);
exports.AbstractHostedInstanceManager = AbstractHostedInstanceManager;
let NodeHostedPluginRunner = class NodeHostedPluginRunner extends AbstractHostedInstanceManager {
    async postProcessInstanceUri(uri) {
        for (const uriPostProcessor of this.uriPostProcessors.getContributions()) {
            uri = await uriPostProcessor.processUri(uri);
        }
        return uri;
    }
    async postProcessInstanceOptions(options) {
        for (const uriPostProcessor of this.uriPostProcessors.getContributions()) {
            options = await uriPostProcessor.processOptions(options);
        }
        return options;
    }
    async getStartCommand(port, debugConfig) {
        if (!port) {
            port = process.env.HOSTED_PLUGIN_PORT ?
                Number(process.env.HOSTED_PLUGIN_PORT) :
                ((debugConfig === null || debugConfig === void 0 ? void 0 : debugConfig.debugPort) ? Number(debugConfig.debugPort) : DEFAULT_HOSTED_PLUGIN_PORT);
        }
        return super.getStartCommand(port, debugConfig);
    }
};
__decorate([
    (0, inversify_1.inject)(contribution_provider_1.ContributionProvider),
    (0, inversify_1.named)(Symbol.for(hosted_plugin_uri_postprocessor_1.HostedPluginUriPostProcessorSymbolName)),
    __metadata("design:type", Object)
], NodeHostedPluginRunner.prototype, "uriPostProcessors", void 0);
NodeHostedPluginRunner = __decorate([
    (0, inversify_1.injectable)()
], NodeHostedPluginRunner);
exports.NodeHostedPluginRunner = NodeHostedPluginRunner;
let ElectronNodeHostedPluginRunner = class ElectronNodeHostedPluginRunner extends AbstractHostedInstanceManager {
};
ElectronNodeHostedPluginRunner = __decorate([
    (0, inversify_1.injectable)()
], ElectronNodeHostedPluginRunner);
exports.ElectronNodeHostedPluginRunner = ElectronNodeHostedPluginRunner;


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/hosted-plugin-reader.js":
/*!******************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/hosted-plugin-reader.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginReader = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_reader_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/plugin-reader */ "../../packages/plugin-ext/lib/hosted/node/plugin-reader.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const plugin_deployer_entry_impl_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/plugin-deployer-entry-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js");
const hosted_plugin_deployer_handler_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler.js");
let HostedPluginReader = class HostedPluginReader {
    constructor() {
        this.hostedPlugin = new promise_util_1.Deferred();
    }
    async initialize() {
        this.pluginReader.getPluginMetadata(process.env.HOSTED_PLUGIN)
            .then(this.hostedPlugin.resolve.bind(this.hostedPlugin));
        const pluginPath = process.env.HOSTED_PLUGIN;
        if (pluginPath) {
            const hostedPlugin = new plugin_deployer_entry_impl_1.PluginDeployerEntryImpl('Hosted Plugin', pluginPath, pluginPath);
            hostedPlugin.storeValue('isUnderDevelopment', true);
            const hostedMetadata = await this.hostedPlugin.promise;
            if (hostedMetadata.model.entryPoint && hostedMetadata.model.entryPoint.backend) {
                this.deployerHandler.deployBackendPlugins([hostedPlugin]);
            }
            if (hostedMetadata.model.entryPoint && hostedMetadata.model.entryPoint.frontend) {
                this.deployerHandler.deployFrontendPlugins([hostedPlugin]);
            }
        }
    }
    async getPlugin() {
        return this.hostedPlugin.promise;
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_reader_1.HostedPluginReader),
    __metadata("design:type", plugin_reader_1.HostedPluginReader)
], HostedPluginReader.prototype, "pluginReader", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler),
    __metadata("design:type", hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler)
], HostedPluginReader.prototype, "deployerHandler", void 0);
HostedPluginReader = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginReader);
exports.HostedPluginReader = HostedPluginReader;


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/hosted-plugin-uri-postprocessor.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/hosted-plugin-uri-postprocessor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginUriPostProcessorSymbolName = void 0;
// We export symbol name instead of symbol itself here because we need to provide
// a contribution point to which any extensions could contribute.
// In case of just symbols, symbol inside an extension won't be the same as here
// even if the extension imports this module.
// To solve this problem we should provide global symbol. So right way to use the contribution point is:
// ...
// bind(Symbol.for(HostedPluginUriPostProcessorSymbolName)).to(AContribution);
// ...
exports.HostedPluginUriPostProcessorSymbolName = 'HostedPluginUriPostProcessor';


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/hosted-plugins-manager.js":
/*!********************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/hosted-plugins-manager.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginsManagerImpl = exports.HostedPluginsManager = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const cp = __webpack_require__(/*! child_process */ "child_process");
const processTree = __webpack_require__(/*! ps-tree */ "../../node_modules/ps-tree/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const hosted_plugin_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/hosted-plugin */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js");
const types_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/types */ "../../packages/plugin-ext/lib/common/types.js");
exports.HostedPluginsManager = Symbol('HostedPluginsManager');
let HostedPluginsManagerImpl = class HostedPluginsManagerImpl {
    constructor() {
        this.watchCompilationRegistry = new Map();
    }
    runWatchCompilation(uri) {
        const pluginRootPath = node_1.FileUri.fsPath(uri);
        if (this.watchCompilationRegistry.has(pluginRootPath)) {
            throw new Error('Watcher is already running in ' + pluginRootPath);
        }
        if (!this.checkWatchScript(pluginRootPath)) {
            this.hostedPluginSupport.sendLog({
                data: 'Plugin in ' + uri + ' doesn\'t have watch script',
                type: types_1.LogType.Error
            });
            throw new Error('Watch script doesn\'t exist in ' + pluginRootPath + 'package.json');
        }
        return this.runWatchScript(pluginRootPath);
    }
    killProcessTree(parentPid) {
        processTree(parentPid, (err, childProcesses) => {
            childProcesses.forEach((p) => {
                process.kill(parseInt(p.PID));
            });
            process.kill(parentPid);
        });
    }
    stopWatchCompilation(uri) {
        const pluginPath = node_1.FileUri.fsPath(uri);
        const watchProcess = this.watchCompilationRegistry.get(pluginPath);
        if (!watchProcess) {
            throw new Error('Watcher is not running in ' + pluginPath);
        }
        this.killProcessTree(watchProcess.pid);
        return Promise.resolve();
    }
    isWatchCompilationRunning(uri) {
        const pluginPath = node_1.FileUri.fsPath(uri);
        return new Promise(resolve => resolve(this.watchCompilationRegistry.has(pluginPath)));
    }
    runWatchScript(pluginRootPath) {
        const watchProcess = cp.spawn('yarn', ['run', 'watch'], { cwd: pluginRootPath, shell: true });
        watchProcess.on('exit', () => this.unregisterWatchScript(pluginRootPath));
        this.watchCompilationRegistry.set(pluginRootPath, watchProcess);
        this.hostedPluginSupport.sendLog({
            data: 'Compilation watcher has been started in ' + pluginRootPath,
            type: types_1.LogType.Info
        });
        return Promise.resolve();
    }
    unregisterWatchScript(pluginRootPath) {
        this.watchCompilationRegistry.delete(pluginRootPath);
        this.hostedPluginSupport.sendLog({
            data: 'Compilation watcher has been stopped in ' + pluginRootPath,
            type: types_1.LogType.Info
        });
    }
    /**
     * Checks whether watch script is present into package.json by given parent folder.
     *
     * @param pluginPath path to plugin's root directory
     */
    async checkWatchScript(pluginPath) {
        const pluginPackageJsonPath = path.join(pluginPath, 'package.json');
        try {
            const packageJson = await fs.readJSON(pluginPackageJsonPath);
            const scripts = packageJson['scripts'];
            if (scripts && scripts['watch']) {
                return true;
            }
        }
        catch { }
        return false;
    }
};
__decorate([
    (0, inversify_1.inject)(hosted_plugin_1.HostedPluginSupport),
    __metadata("design:type", hosted_plugin_1.HostedPluginSupport)
], HostedPluginsManagerImpl.prototype, "hostedPluginSupport", void 0);
HostedPluginsManagerImpl = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], HostedPluginsManagerImpl);
exports.HostedPluginsManagerImpl = HostedPluginsManagerImpl;


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/plugin-dev-backend-module.js":
/*!***********************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/plugin-dev-backend-module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCommonHostedBackend = void 0;
const hosted_instance_manager_1 = __webpack_require__(/*! ./hosted-instance-manager */ "../../packages/plugin-dev/lib/node/hosted-instance-manager.js");
const hosted_plugin_uri_postprocessor_1 = __webpack_require__(/*! ./hosted-plugin-uri-postprocessor */ "../../packages/plugin-dev/lib/node/hosted-plugin-uri-postprocessor.js");
const hosted_plugins_manager_1 = __webpack_require__(/*! ./hosted-plugins-manager */ "../../packages/plugin-dev/lib/node/hosted-plugins-manager.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const connection_container_module_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const contribution_provider_1 = __webpack_require__(/*! @theia/core/lib/common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
const plugin_dev_service_1 = __webpack_require__(/*! ./plugin-dev-service */ "../../packages/plugin-dev/lib/node/plugin-dev-service.js");
const plugin_dev_protocol_1 = __webpack_require__(/*! ../common/plugin-dev-protocol */ "../../packages/plugin-dev/lib/common/plugin-dev-protocol.js");
const hosted_plugin_reader_1 = __webpack_require__(/*! ./hosted-plugin-reader */ "../../packages/plugin-dev/lib/node/hosted-plugin-reader.js");
const backend_application_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application */ "../../packages/core/lib/node/backend-application.js");
const commonHostedConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind, bindBackendService }) => {
    bind(hosted_plugins_manager_1.HostedPluginsManagerImpl).toSelf().inSingletonScope();
    bind(hosted_plugins_manager_1.HostedPluginsManager).toService(hosted_plugins_manager_1.HostedPluginsManagerImpl);
    bind(plugin_dev_service_1.PluginDevServerImpl).toSelf().inSingletonScope();
    bind(plugin_dev_protocol_1.PluginDevServer).toService(plugin_dev_service_1.PluginDevServerImpl);
    bindBackendService(plugin_dev_protocol_1.pluginDevServicePath, plugin_dev_protocol_1.PluginDevServer, (server, client) => {
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    });
});
function bindCommonHostedBackend(bind) {
    bind(hosted_plugin_reader_1.HostedPluginReader).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(hosted_plugin_reader_1.HostedPluginReader);
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(commonHostedConnectionModule);
}
exports.bindCommonHostedBackend = bindCommonHostedBackend;
const hostedBackendConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind }) => {
    (0, contribution_provider_1.bindContributionProvider)(bind, Symbol.for(hosted_plugin_uri_postprocessor_1.HostedPluginUriPostProcessorSymbolName));
    bind(hosted_instance_manager_1.HostedInstanceManager).to(hosted_instance_manager_1.NodeHostedPluginRunner).inSingletonScope();
});
exports["default"] = new inversify_1.ContainerModule(bind => {
    bindCommonHostedBackend(bind);
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(hostedBackendConnectionModule);
});


/***/ }),

/***/ "../../packages/plugin-dev/lib/node/plugin-dev-service.js":
/*!****************************************************************!*\
  !*** ../../packages/plugin-dev/lib/node/plugin-dev-service.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDevServerImpl = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const hosted_instance_manager_1 = __webpack_require__(/*! ./hosted-instance-manager */ "../../packages/plugin-dev/lib/node/hosted-instance-manager.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const hosted_plugin_reader_1 = __webpack_require__(/*! ./hosted-plugin-reader */ "../../packages/plugin-dev/lib/node/hosted-plugin-reader.js");
const hosted_plugins_manager_1 = __webpack_require__(/*! ./hosted-plugins-manager */ "../../packages/plugin-dev/lib/node/hosted-plugins-manager.js");
const hosted_plugin_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/hosted-plugin */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js");
let PluginDevServerImpl = class PluginDevServerImpl {
    dispose() {
        // Terminate the hosted instance if it is currently running.
        if (this.hostedInstanceManager.isRunning()) {
            this.hostedInstanceManager.terminate();
        }
    }
    setClient(client) {
    }
    async getHostedPlugin() {
        const pluginMetadata = await this.reader.getPlugin();
        if (pluginMetadata) {
            this.hostedPlugin.runPlugin(pluginMetadata.model);
        }
        return Promise.resolve(this.reader.getPlugin());
    }
    isPluginValid(uri) {
        return Promise.resolve(this.hostedInstanceManager.isPluginValid(new uri_1.default(uri)));
    }
    runHostedPluginInstance(uri) {
        return this.uriToStrPromise(this.hostedInstanceManager.run(new uri_1.default(uri)));
    }
    runDebugHostedPluginInstance(uri, debugConfig) {
        return this.uriToStrPromise(this.hostedInstanceManager.debug(new uri_1.default(uri), debugConfig));
    }
    terminateHostedPluginInstance() {
        this.hostedInstanceManager.terminate();
        return Promise.resolve();
    }
    isHostedPluginInstanceRunning() {
        return Promise.resolve(this.hostedInstanceManager.isRunning());
    }
    getHostedPluginInstanceURI() {
        return Promise.resolve(this.hostedInstanceManager.getInstanceURI().toString());
    }
    getHostedPluginURI() {
        return Promise.resolve(this.hostedInstanceManager.getPluginURI().toString());
    }
    uriToStrPromise(promise) {
        return new Promise((resolve, reject) => {
            promise.then((uri) => {
                resolve(uri.toString());
            }).catch(error => reject(error));
        });
    }
    runWatchCompilation(path) {
        return this.hostedPluginsManager.runWatchCompilation(path);
    }
    stopWatchCompilation(path) {
        return this.hostedPluginsManager.stopWatchCompilation(path);
    }
    isWatchCompilationRunning(path) {
        return this.hostedPluginsManager.isWatchCompilationRunning(path);
    }
};
__decorate([
    (0, inversify_1.inject)(hosted_plugins_manager_1.HostedPluginsManager),
    __metadata("design:type", Object)
], PluginDevServerImpl.prototype, "hostedPluginsManager", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_instance_manager_1.HostedInstanceManager),
    __metadata("design:type", Object)
], PluginDevServerImpl.prototype, "hostedInstanceManager", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_reader_1.HostedPluginReader),
    __metadata("design:type", hosted_plugin_reader_1.HostedPluginReader)
], PluginDevServerImpl.prototype, "reader", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_1.HostedPluginSupport),
    __metadata("design:type", hosted_plugin_1.HostedPluginSupport)
], PluginDevServerImpl.prototype, "hostedPlugin", void 0);
PluginDevServerImpl = __decorate([
    (0, inversify_1.injectable)()
], PluginDevServerImpl);
exports.PluginDevServerImpl = PluginDevServerImpl;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js":
/*!********************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeEnvironment = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
let PluginVSCodeEnvironment = class PluginVSCodeEnvironment {
    async getExtensionsDirUri() {
        if (!this._extensionsDirUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._extensionsDirUri = configDir.resolve('extensions');
        }
        return this._extensionsDirUri;
    }
};
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginVSCodeEnvironment.prototype, "environments", void 0);
PluginVSCodeEnvironment = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeEnvironment);
exports.PluginVSCodeEnvironment = PluginVSCodeEnvironment;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-types.js":
/*!**************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/common/plugin-vscode-types.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSX_REGISTRY_URL_DEFAULT = exports.VSCODE_DEFAULT_API_VERSION = void 0;
const api_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package/lib/api */ "../../packages/core/shared/@theia/application-package/lib/api/index.js");
exports.VSCODE_DEFAULT_API_VERSION = api_1.DEFAULT_SUPPORTED_API_VERSION;
exports.VSX_REGISTRY_URL_DEFAULT = 'https://open-vsx.org';


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js":
/*!************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSCodeExtensionUri = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
/**
 * Static methods for identifying a plugin as the target of the VSCode deployment system.
 * In practice, this means that it will be resolved and deployed by the Open-VSX system.
 */
var VSCodeExtensionUri;
(function (VSCodeExtensionUri) {
    VSCodeExtensionUri.VSCODE_PREFIX = 'vscode:extension/';
    /**
     * Should be used to prefix a plugin's ID to ensure that it is identified as a VSX Extension.
     * @returns `vscode:extension/${id}`
     */
    function toVsxExtensionUriString(id) {
        return `${VSCodeExtensionUri.VSCODE_PREFIX}${id}`;
    }
    VSCodeExtensionUri.toVsxExtensionUriString = toVsxExtensionUriString;
    function toUri(idOrName, namespace) {
        if (typeof namespace === 'string') {
            return new uri_1.default(toVsxExtensionUriString(`${namespace}.${idOrName}`));
        }
        else {
            return new uri_1.default(toVsxExtensionUriString(idOrName));
        }
    }
    VSCodeExtensionUri.toUri = toUri;
    function toId(uri) {
        if (uri.scheme === 'vscode' && uri.path.dir.toString() === 'extension') {
            return uri.path.base;
        }
        return undefined;
    }
    VSCodeExtensionUri.toId = toId;
})(VSCodeExtensionUri = exports.VSCodeExtensionUri || (exports.VSCodeExtensionUri = {}));


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/local-vsix-file-plugin-deployer-resolver.js":
/*!*********************************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/local-vsix-file-plugin-deployer-resolver.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var LocalVSIXFilePluginDeployerResolver_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalVSIXFilePluginDeployerResolver = void 0;
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const local_plugin_deployer_resolver_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/resolvers/local-plugin-deployer-resolver */ "../../packages/plugin-ext/lib/main/node/resolvers/local-plugin-deployer-resolver.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const plugin_vscode_file_handler_1 = __webpack_require__(/*! ./plugin-vscode-file-handler */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-file-handler.js");
let LocalVSIXFilePluginDeployerResolver = LocalVSIXFilePluginDeployerResolver_1 = class LocalVSIXFilePluginDeployerResolver extends local_plugin_deployer_resolver_1.LocalPluginDeployerResolver {
    get supportedScheme() {
        return LocalVSIXFilePluginDeployerResolver_1.LOCAL_FILE;
    }
    accept(pluginId) {
        return super.accept(pluginId) && (0, plugin_vscode_file_handler_1.isVSCodePluginFile)(pluginId);
    }
    async resolveFromLocalPath(pluginResolverContext, localPath) {
        const fileName = path.basename(localPath);
        const pathInUserExtensionsDirectory = await this.ensureDiscoverability(localPath);
        pluginResolverContext.addPlugin(fileName, pathInUserExtensionsDirectory);
    }
    /**
     * Ensures that a user-installed plugin file is transferred to the user extension folder.
     */
    async ensureDiscoverability(localPath) {
        const userExtensionsDir = await this.environment.getExtensionsDirUri();
        if (!userExtensionsDir.isEqualOrParent(node_1.FileUri.create(localPath))) {
            try {
                const newPath = node_1.FileUri.fsPath(userExtensionsDir.resolve(path.basename(localPath)));
                await fs.mkdirp(node_1.FileUri.fsPath(userExtensionsDir));
                await new Promise((resolve, reject) => {
                    fs.copyFile(localPath, newPath, error => error ? reject(error) : resolve());
                });
                return newPath;
            }
            catch (e) {
                console.warn(`Problem copying plugin at ${localPath}:`, e);
            }
        }
        return localPath;
    }
};
LocalVSIXFilePluginDeployerResolver.LOCAL_FILE = 'local-file';
__decorate([
    (0, inversify_1.inject)(plugin_vscode_environment_1.PluginVSCodeEnvironment),
    __metadata("design:type", plugin_vscode_environment_1.PluginVSCodeEnvironment)
], LocalVSIXFilePluginDeployerResolver.prototype, "environment", void 0);
LocalVSIXFilePluginDeployerResolver = LocalVSIXFilePluginDeployerResolver_1 = __decorate([
    (0, inversify_1.injectable)()
], LocalVSIXFilePluginDeployerResolver);
exports.LocalVSIXFilePluginDeployerResolver = LocalVSIXFilePluginDeployerResolver;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-backend-module.js":
/*!*********************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/plugin-vscode-backend-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_ext_1 = __webpack_require__(/*! @theia/plugin-ext */ "../../packages/plugin-ext/lib/common/index.js");
const plugin_vscode_file_handler_1 = __webpack_require__(/*! ./plugin-vscode-file-handler */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-file-handler.js");
const plugin_vscode_directory_handler_1 = __webpack_require__(/*! ./plugin-vscode-directory-handler */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-directory-handler.js");
const scanner_vscode_1 = __webpack_require__(/*! ./scanner-vscode */ "../../packages/plugin-ext-vscode/lib/node/scanner-vscode.js");
const plugin_vscode_cli_contribution_1 = __webpack_require__(/*! ./plugin-vscode-cli-contribution */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-cli-contribution.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const common_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common */ "../../packages/plugin-ext/lib/common/index.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const plugin_vscode_deployer_participant_1 = __webpack_require__(/*! ./plugin-vscode-deployer-participant */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-deployer-participant.js");
const local_vsix_file_plugin_deployer_resolver_1 = __webpack_require__(/*! ./local-vsix-file-plugin-deployer-resolver */ "../../packages/plugin-ext-vscode/lib/node/local-vsix-file-plugin-deployer-resolver.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(plugin_vscode_environment_1.PluginVSCodeEnvironment).toSelf().inSingletonScope();
    bind(plugin_vscode_deployer_participant_1.PluginVSCodeDeployerParticipant).toSelf().inSingletonScope();
    bind(plugin_ext_1.PluginDeployerParticipant).toService(plugin_vscode_deployer_participant_1.PluginVSCodeDeployerParticipant);
    bind(plugin_ext_1.PluginDeployerFileHandler).to(plugin_vscode_file_handler_1.PluginVsCodeFileHandler).inSingletonScope();
    bind(plugin_ext_1.PluginDeployerDirectoryHandler).to(plugin_vscode_directory_handler_1.PluginVsCodeDirectoryHandler).inSingletonScope();
    bind(plugin_ext_1.PluginScanner).to(scanner_vscode_1.VsCodePluginScanner).inSingletonScope();
    bind(plugin_vscode_cli_contribution_1.PluginVsCodeCliContribution).toSelf().inSingletonScope();
    bind(node_1.CliContribution).toService(plugin_vscode_cli_contribution_1.PluginVsCodeCliContribution);
    bind(common_1.PluginHostEnvironmentVariable).toService(plugin_vscode_cli_contribution_1.PluginVsCodeCliContribution);
    bind(plugin_ext_1.PluginDeployerResolver).to(local_vsix_file_plugin_deployer_resolver_1.LocalVSIXFilePluginDeployerResolver).inSingletonScope();
});


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-cli-contribution.js":
/*!***********************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/plugin-vscode-cli-contribution.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PluginVsCodeCliContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVsCodeCliContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_vscode_types_1 = __webpack_require__(/*! ../common/plugin-vscode-types */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-types.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
/**
 * CLI Contribution allowing to override the VS Code API version which is returned by `vscode.version` API call.
 */
let PluginVsCodeCliContribution = PluginVsCodeCliContribution_1 = class PluginVsCodeCliContribution {
    constructor() {
        this.vsCodeApiVersionDeferred = new promise_util_1.Deferred();
    }
    get vsCodeApiVersionPromise() {
        return this.vsCodeApiVersionDeferred.promise;
    }
    configure(conf) {
        conf.option(PluginVsCodeCliContribution_1.VSCODE_API_VERSION, {
            // eslint-disable-next-line max-len
            description: `Overrides the version returned by VSCode API 'vscode.version'. Example: --${PluginVsCodeCliContribution_1.VSCODE_API_VERSION}=<Wanted Version>. Default [${plugin_vscode_types_1.VSCODE_DEFAULT_API_VERSION}]`,
            type: 'string',
            nargs: 1
        });
    }
    setArguments(args) {
        var _a;
        const arg = args[PluginVsCodeCliContribution_1.VSCODE_API_VERSION];
        this.vsCodeApiVersion = (arg === null || arg === void 0 ? void 0 : arg.trim()) || ((_a = process.env['VSCODE_API_VERSION']) === null || _a === void 0 ? void 0 : _a.trim()) || plugin_vscode_types_1.VSCODE_DEFAULT_API_VERSION;
        process.env['VSCODE_API_VERSION'] = this.vsCodeApiVersion;
        this.vsCodeApiVersionDeferred.resolve(this.vsCodeApiVersion);
    }
    process(env) {
        if (this.vsCodeApiVersion) {
            env['VSCODE_API_VERSION'] = this.vsCodeApiVersion;
        }
    }
};
/**
 * CLI argument name to define the supported VS Code API version.
 */
PluginVsCodeCliContribution.VSCODE_API_VERSION = 'vscode-api-version';
PluginVsCodeCliContribution = PluginVsCodeCliContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], PluginVsCodeCliContribution);
exports.PluginVsCodeCliContribution = PluginVsCodeCliContribution;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-deployer-participant.js":
/*!***************************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/plugin-vscode-deployer-participant.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeDeployerParticipant = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
let PluginVSCodeDeployerParticipant = class PluginVSCodeDeployerParticipant {
    async onWillStart(context) {
        const extensionsDirUri = await this.environments.getExtensionsDirUri();
        context.userEntries.push(extensionsDirUri.withScheme('local-dir').toString());
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_vscode_environment_1.PluginVSCodeEnvironment),
    __metadata("design:type", plugin_vscode_environment_1.PluginVSCodeEnvironment)
], PluginVSCodeDeployerParticipant.prototype, "environments", void 0);
PluginVSCodeDeployerParticipant = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeDeployerParticipant);
exports.PluginVSCodeDeployerParticipant = PluginVSCodeDeployerParticipant;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-directory-handler.js":
/*!************************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/plugin-vscode-directory-handler.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVsCodeDirectoryHandler = void 0;
const path = __webpack_require__(/*! path */ "path");
const filenamify = __webpack_require__(/*! filenamify */ "../../node_modules/filenamify/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const temp_dir_util_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
const plugin_ext_1 = __webpack_require__(/*! @theia/plugin-ext */ "../../packages/plugin-ext/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const plugin_cli_contribution_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/plugin-cli-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js");
let PluginVsCodeDirectoryHandler = class PluginVsCodeDirectoryHandler {
    constructor() {
        this.deploymentDirectory = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('vscode-copied')
            .then(deploymentDirectoryPath => this.deploymentDirectory.resolve(node_1.FileUri.create(deploymentDirectoryPath)));
    }
    async accept(plugin) {
        console.debug(`Resolving "${plugin.id()}" as a VS Code extension...`);
        return this.attemptResolution(plugin);
    }
    async attemptResolution(plugin) {
        if (this.resolvePackage(plugin)) {
            return true;
        }
        return this.deriveMetadata(plugin);
    }
    async deriveMetadata(plugin) {
        return (0, promise_util_1.firstTrue)(this.resolveFromSources(plugin), this.resolveFromVSIX(plugin), this.resolveFromNpmTarball(plugin));
    }
    async handle(context) {
        await this.copyDirectory(context);
        const types = [];
        const packageJson = context.pluginEntry().getValue('package.json');
        if (packageJson.browser) {
            types.push(plugin_ext_1.PluginDeployerEntryType.FRONTEND);
        }
        if (packageJson.main || !packageJson.browser) {
            types.push(plugin_ext_1.PluginDeployerEntryType.BACKEND);
        }
        context.pluginEntry().accept(...types);
    }
    async copyDirectory(context) {
        if (this.pluginCli.copyUncompressedPlugins() && context.pluginEntry().type === plugin_ext_1.PluginType.User) {
            const entry = context.pluginEntry();
            const id = entry.id();
            const pathToRestore = entry.path();
            const origin = entry.originalPath();
            const targetDir = await this.getExtensionDir(context);
            try {
                if (await fs.pathExists(targetDir) || !entry.path().startsWith(origin)) {
                    console.log(`[${id}]: already copied.`);
                }
                else {
                    console.log(`[${id}]: copying to "${targetDir}"`);
                    const deploymentDirectory = await this.deploymentDirectory.promise;
                    await fs.mkdirp(node_1.FileUri.fsPath(deploymentDirectory));
                    await context.copy(origin, targetDir);
                    entry.updatePath(targetDir);
                    if (!this.deriveMetadata(entry)) {
                        throw new Error('Unable to resolve plugin metadata after copying');
                    }
                }
            }
            catch (e) {
                console.warn(`[${id}]: Error when copying.`, e);
                entry.updatePath(pathToRestore);
            }
        }
    }
    async resolveFromSources(plugin) {
        const pluginPath = plugin.path();
        const pck = await this.requirePackage(pluginPath);
        return this.resolvePackage(plugin, { pluginPath, pck });
    }
    async resolveFromVSIX(plugin) {
        if (!(await fs.pathExists(path.join(plugin.path(), 'extension.vsixmanifest')))) {
            return false;
        }
        const pluginPath = path.join(plugin.path(), 'extension');
        const pck = await this.requirePackage(pluginPath);
        return this.resolvePackage(plugin, { pluginPath, pck });
    }
    async resolveFromNpmTarball(plugin) {
        const pluginPath = path.join(plugin.path(), 'package');
        const pck = await this.requirePackage(pluginPath);
        return this.resolvePackage(plugin, { pluginPath, pck });
    }
    resolvePackage(plugin, options) {
        var _a;
        const { pluginPath, pck } = options || {
            pluginPath: plugin.path(),
            pck: plugin.getValue('package.json')
        };
        if (!pck || !pck.name || !pck.version || !pck.engines || !pck.engines.vscode) {
            return false;
        }
        (_a = pck.publisher) !== null && _a !== void 0 ? _a : (pck.publisher = plugin_ext_1.PluginIdentifiers.UNPUBLISHED);
        if (options) {
            plugin.storeValue('package.json', pck);
            plugin.rootPath = plugin.path();
            plugin.updatePath(pluginPath);
        }
        console.debug(`Resolved "${plugin.id()}" to a VS Code extension "${pck.name}@${pck.version}" with engines:`, pck.engines);
        return true;
    }
    async requirePackage(pluginPath) {
        var _a;
        try {
            const plugin = await fs.readJSON(path.join(pluginPath, 'package.json'));
            (_a = plugin.publisher) !== null && _a !== void 0 ? _a : (plugin.publisher = plugin_ext_1.PluginIdentifiers.UNPUBLISHED);
            return plugin;
        }
        catch {
            return undefined;
        }
    }
    async getExtensionDir(context) {
        const deploymentDirectory = await this.deploymentDirectory.promise;
        return node_1.FileUri.fsPath(deploymentDirectory.resolve(filenamify(context.pluginEntry().id(), { replacement: '_' })));
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_cli_contribution_1.PluginCliContribution),
    __metadata("design:type", plugin_cli_contribution_1.PluginCliContribution)
], PluginVsCodeDirectoryHandler.prototype, "pluginCli", void 0);
PluginVsCodeDirectoryHandler = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PluginVsCodeDirectoryHandler);
exports.PluginVsCodeDirectoryHandler = PluginVsCodeDirectoryHandler;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-file-handler.js":
/*!*******************************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/plugin-vscode-file-handler.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVsCodeFileHandler = exports.isVSCodePluginFile = void 0;
const plugin_ext_1 = __webpack_require__(/*! @theia/plugin-ext */ "../../packages/plugin-ext/lib/common/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const filenamify = __webpack_require__(/*! filenamify */ "../../node_modules/filenamify/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const temp_dir_util_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const isVSCodePluginFile = (pluginPath) => Boolean(pluginPath && (pluginPath.endsWith('.vsix') || pluginPath.endsWith('.tgz')));
exports.isVSCodePluginFile = isVSCodePluginFile;
let PluginVsCodeFileHandler = class PluginVsCodeFileHandler {
    constructor() {
        this.systemExtensionsDirUri = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('vscode-unpacked')
            .then(systemExtensionsDirPath => this.systemExtensionsDirUri.resolve(file_uri_1.FileUri.create(systemExtensionsDirPath)));
    }
    async accept(resolvedPlugin) {
        return resolvedPlugin.isFile().then(file => {
            if (!file) {
                return false;
            }
            return (0, exports.isVSCodePluginFile)(resolvedPlugin.path());
        });
    }
    async handle(context) {
        const id = context.pluginEntry().id();
        const extensionDir = await this.getExtensionDir(context);
        console.log(`[${id}]: trying to decompress into "${extensionDir}"...`);
        if (context.pluginEntry().type === plugin_ext_1.PluginType.User && await fs.pathExists(extensionDir)) {
            console.log(`[${id}]: already found`);
            context.pluginEntry().updatePath(extensionDir);
            return;
        }
        await this.decompress(extensionDir, context);
        console.log(`[${id}]: decompressed`);
        context.pluginEntry().updatePath(extensionDir);
    }
    async getExtensionDir(context) {
        const systemExtensionsDirUri = await this.systemExtensionsDirUri.promise;
        return file_uri_1.FileUri.fsPath(systemExtensionsDirUri.resolve(filenamify(context.pluginEntry().id(), { replacement: '_' })));
    }
    async decompress(extensionDir, context) {
        await context.unzip(context.pluginEntry().path(), extensionDir);
        if (context.pluginEntry().path().endsWith('.tgz')) {
            const extensionPath = path.join(extensionDir, 'package');
            const vscodeNodeModulesPath = path.join(extensionPath, 'vscode_node_modules.zip');
            if (await fs.pathExists(vscodeNodeModulesPath)) {
                await context.unzip(vscodeNodeModulesPath, path.join(extensionPath, 'node_modules'));
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_vscode_environment_1.PluginVSCodeEnvironment),
    __metadata("design:type", plugin_vscode_environment_1.PluginVSCodeEnvironment)
], PluginVsCodeFileHandler.prototype, "environment", void 0);
PluginVsCodeFileHandler = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PluginVsCodeFileHandler);
exports.PluginVsCodeFileHandler = PluginVsCodeFileHandler;


/***/ }),

/***/ "../../packages/plugin-ext-vscode/lib/node/scanner-vscode.js":
/*!*******************************************************************!*\
  !*** ../../packages/plugin-ext-vscode/lib/node/scanner-vscode.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2015-2021 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VsCodePluginScanner = void 0;
const path = __webpack_require__(/*! path */ "path");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_ext_1 = __webpack_require__(/*! @theia/plugin-ext */ "../../packages/plugin-ext/lib/common/index.js");
const scanner_theia_1 = __webpack_require__(/*! @theia/plugin-ext/lib/hosted/node/scanners/scanner-theia */ "../../packages/plugin-ext/lib/hosted/node/scanners/scanner-theia.js");
const environment_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package/lib/environment */ "../../packages/core/shared/@theia/application-package/lib/environment/index.js");
const plugin_vscode_uri_1 = __webpack_require__(/*! ../common/plugin-vscode-uri */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js");
const uiKind = environment_1.environment.electron.is() ? plugin_ext_1.UIKind.Desktop : plugin_ext_1.UIKind.Web;
let VsCodePluginScanner = class VsCodePluginScanner extends scanner_theia_1.TheiaPluginScanner {
    constructor() {
        super(...arguments);
        this.VSCODE_TYPE = 'vscode';
    }
    get apiType() {
        return this.VSCODE_TYPE;
    }
    getModel(plugin) {
        var _a, _b;
        // publisher can be empty on vscode extension development
        const publisher = (_a = plugin.publisher) !== null && _a !== void 0 ? _a : plugin_ext_1.PluginIdentifiers.UNPUBLISHED;
        // Only one entrypoint is valid in vscode extensions
        // Mimic choosing frontend (web extension) and backend (local/remote extension) as described here:
        // https://code.visualstudio.com/api/advanced-topics/extension-host#preferred-extension-location
        const entryPoint = {};
        // Act like codespaces when run in the browser (UIKind === 'web' and extensionKind is ['ui'])
        const preferFrontend = uiKind === plugin_ext_1.UIKind.Web && (((_b = plugin.extensionKind) === null || _b === void 0 ? void 0 : _b.length) === 1 && plugin.extensionKind[0] === 'ui');
        if (plugin.browser && (!plugin.main || preferFrontend)) {
            // Use frontend if available and there is no backend or frontend is preferred
            entryPoint.frontend = plugin.browser;
        }
        else {
            // Default to using backend
            entryPoint.backend = plugin.main;
        }
        const result = {
            packagePath: plugin.packagePath,
            packageUri: this.pluginUriFactory.createUri(plugin).toString(),
            // see id definition: https://github.com/microsoft/vscode/blob/15916055fe0cb9411a5f36119b3b012458fe0a1d/src/vs/platform/extensions/common/extensions.ts#L167-L169
            id: `${publisher.toLowerCase()}.${plugin.name.toLowerCase()}`,
            name: plugin.name,
            publisher: publisher,
            version: plugin.version,
            displayName: plugin.displayName,
            description: plugin.description,
            engine: {
                type: this.VSCODE_TYPE,
                version: plugin.engines[this.VSCODE_TYPE]
            },
            entryPoint,
            iconUrl: plugin.icon && plugin_ext_1.PluginPackage.toPluginUrl(plugin, plugin.icon),
            l10n: plugin.l10n,
            readmeUrl: plugin_ext_1.PluginPackage.toPluginUrl(plugin, './README.md'),
            licenseUrl: plugin_ext_1.PluginPackage.toPluginUrl(plugin, './LICENSE')
        };
        return result;
    }
    /**
     * Maps extension dependencies to deployable extension dependencies.
     */
    getDependencies(plugin) {
        // Store the list of dependencies.
        const dependencies = new Map();
        // Iterate through the list of dependencies from `extensionDependencies` and `extensionPack`.
        for (const dependency of [plugin.extensionDependencies, plugin.extensionPack]) {
            if (dependency !== undefined) {
                // Iterate over the list of dependencies present, and add them to the collection.
                dependency.forEach((dep) => {
                    const dependencyId = dep.toLowerCase();
                    dependencies.set(dependencyId, plugin_vscode_uri_1.VSCodeExtensionUri.toVsxExtensionUriString(dependencyId));
                });
            }
        }
        // Return the map of dependencies if present, else `undefined`.
        return dependencies.size > 0 ? dependencies : undefined;
    }
    getLifecycle(plugin) {
        return {
            startMethod: 'activate',
            stopMethod: 'deactivate',
            frontendModuleName: (0, plugin_ext_1.buildFrontendModuleName)(plugin),
            frontendInitPath: 'plugin-vscode-init-fe.js',
            backendInitPath: path.join(__dirname, 'plugin-vscode-init'),
        };
    }
};
VsCodePluginScanner = __decorate([
    (0, inversify_1.injectable)()
], VsCodePluginScanner);
exports.VsCodePluginScanner = VsCodePluginScanner;


/***/ }),

/***/ "../../packages/plugin-ext/lib/common/language-pack-service.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-ext/lib/common/language-pack-service.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguagePackService = exports.languagePackServicePath = void 0;
exports.languagePackServicePath = '/services/languagePackService';
exports.LanguagePackService = Symbol('LanguagePackService');


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-cli-contribution.js":
/*!***********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin-cli-contribution.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HostedPluginCliContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginCliContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let pluginHostTerminateTimeout = 10 * 1000;
if (process.env.PLUGIN_HOST_TERMINATE_TIMEOUT) {
    pluginHostTerminateTimeout = Number.parseInt(process.env.PLUGIN_HOST_TERMINATE_TIMEOUT);
}
let pluginHostStopTimeout = 4 * 1000;
if (process.env.PLUGIN_HOST_STOP_TIMEOUT) {
    pluginHostStopTimeout = Number.parseInt(process.env.PLUGIN_HOST_STOP_TIMEOUT);
}
let HostedPluginCliContribution = HostedPluginCliContribution_1 = class HostedPluginCliContribution {
    constructor() {
        this._pluginHostTerminateTimeout = pluginHostTerminateTimeout;
        this._pluginHostStopTimeout = pluginHostStopTimeout;
    }
    get extensionTestsPath() {
        return this._extensionTestsPath;
    }
    get pluginHostTerminateTimeout() {
        return this._pluginHostTerminateTimeout;
    }
    get pluginHostStopTimeout() {
        return this._pluginHostStopTimeout;
    }
    configure(conf) {
        conf.option(HostedPluginCliContribution_1.EXTENSION_TESTS_PATH, {
            type: 'string'
        });
        conf.option(HostedPluginCliContribution_1.PLUGIN_HOST_TERMINATE_TIMEOUT, {
            type: 'number',
            default: pluginHostTerminateTimeout,
            description: 'Timeout in milliseconds to wait for the plugin host process to terminate before killing it. Use 0 for no timeout.'
        });
        conf.option(HostedPluginCliContribution_1.PLUGIN_HOST_STOP_TIMEOUT, {
            type: 'number',
            default: pluginHostStopTimeout,
            description: 'Timeout in milliseconds to wait for the plugin host process to stop internal services. Use 0 for no timeout.'
        });
    }
    setArguments(args) {
        this._extensionTestsPath = args[HostedPluginCliContribution_1.EXTENSION_TESTS_PATH];
        this._pluginHostTerminateTimeout = args[HostedPluginCliContribution_1.PLUGIN_HOST_TERMINATE_TIMEOUT];
        this._pluginHostStopTimeout = args[HostedPluginCliContribution_1.PLUGIN_HOST_STOP_TIMEOUT];
    }
};
HostedPluginCliContribution.EXTENSION_TESTS_PATH = 'extensionTestsPath';
HostedPluginCliContribution.PLUGIN_HOST_TERMINATE_TIMEOUT = 'pluginHostTerminateTimeout';
HostedPluginCliContribution.PLUGIN_HOST_STOP_TIMEOUT = 'pluginHostStopTimeout';
HostedPluginCliContribution = HostedPluginCliContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginCliContribution);
exports.HostedPluginCliContribution = HostedPluginCliContribution;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler.js":
/*!***********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 RedHat and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginDeployerHandler = void 0;
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_reader_1 = __webpack_require__(/*! ./plugin-reader */ "../../packages/plugin-ext/lib/hosted/node/plugin-reader.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const hosted_plugin_localization_service_1 = __webpack_require__(/*! ./hosted-plugin-localization-service */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const plugin_uninstallation_manager_1 = __webpack_require__(/*! ../../main/node/plugin-uninstallation-manager */ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js");
let HostedPluginDeployerHandler = class HostedPluginDeployerHandler {
    constructor() {
        this.deployedLocations = new Map();
        this.sourceLocations = new Map();
        /**
         * Managed plugin metadata backend entries.
         */
        this.deployedBackendPlugins = new Map();
        /**
         * Managed plugin metadata frontend entries.
         */
        this.deployedFrontendPlugins = new Map();
        this.backendPluginsMetadataDeferred = new promise_util_1.Deferred();
        this.frontendPluginsMetadataDeferred = new promise_util_1.Deferred();
    }
    async getDeployedFrontendPluginIds() {
        // await first deploy
        await this.frontendPluginsMetadataDeferred.promise;
        // fetch the last deployed state
        return Array.from(this.deployedFrontendPlugins.keys());
    }
    async getDeployedBackendPluginIds() {
        // await first deploy
        await this.backendPluginsMetadataDeferred.promise;
        // fetch the last deployed state
        return Array.from(this.deployedBackendPlugins.keys());
    }
    getDeployedPluginsById(pluginId) {
        const matches = [];
        const handle = (plugins) => {
            for (const plugin of plugins) {
                if (plugin_protocol_1.PluginIdentifiers.componentsToVersionWithId(plugin.metadata.model).id === pluginId) {
                    matches.push(plugin);
                }
            }
        };
        handle(this.deployedFrontendPlugins.values());
        handle(this.deployedBackendPlugins.values());
        return matches;
    }
    getDeployedPlugin(pluginId) {
        var _a;
        return (_a = this.deployedBackendPlugins.get(pluginId)) !== null && _a !== void 0 ? _a : this.deployedFrontendPlugins.get(pluginId);
    }
    /**
     * @throws never! in order to isolate plugin deployment
     */
    async getPluginDependencies(entry) {
        const pluginPath = entry.path();
        try {
            const manifest = await this.reader.readPackage(pluginPath);
            if (!manifest) {
                return undefined;
            }
            const metadata = this.reader.readMetadata(manifest);
            const dependencies = { metadata };
            // Do not resolve system (aka builtin) plugins because it should be done statically at build time.
            if (entry.type !== plugin_protocol_1.PluginType.System) {
                dependencies.mapping = this.reader.readDependencies(manifest);
            }
            return dependencies;
        }
        catch (e) {
            console.error(`Failed to load plugin dependencies from '${pluginPath}' path`, e);
            return undefined;
        }
    }
    async deployFrontendPlugins(frontendPlugins) {
        let successes = 0;
        for (const plugin of frontendPlugins) {
            if (await this.deployPlugin(plugin, 'frontend')) {
                successes++;
            }
        }
        // resolve on first deploy
        this.frontendPluginsMetadataDeferred.resolve(undefined);
        return successes;
    }
    async deployBackendPlugins(backendPlugins) {
        let successes = 0;
        for (const plugin of backendPlugins) {
            if (await this.deployPlugin(plugin, 'backend')) {
                successes++;
            }
        }
        // rebuild translation config after deployment
        await this.localizationService.buildTranslationConfig([...this.deployedBackendPlugins.values()]);
        // resolve on first deploy
        this.backendPluginsMetadataDeferred.resolve(undefined);
        return successes;
    }
    /**
     * @throws never! in order to isolate plugin deployment.
     * @returns whether the plugin is deployed after running this function. If the plugin was already installed, will still return `true`.
     */
    async deployPlugin(entry, entryPoint) {
        var _a, _b;
        const pluginPath = entry.path();
        const deployPlugin = this.stopwatch.start('deployPlugin');
        let id;
        let success = true;
        try {
            const manifest = await this.reader.readPackage(pluginPath);
            if (!manifest) {
                deployPlugin.error(`Failed to read ${entryPoint} plugin manifest from '${pluginPath}''`);
                return success = false;
            }
            const metadata = this.reader.readMetadata(manifest);
            metadata.isUnderDevelopment = (_a = entry.getValue('isUnderDevelopment')) !== null && _a !== void 0 ? _a : false;
            id = plugin_protocol_1.PluginIdentifiers.componentsToVersionedId(metadata.model);
            const deployedLocations = (_b = this.deployedLocations.get(id)) !== null && _b !== void 0 ? _b : new Set();
            deployedLocations.add(entry.rootPath);
            this.deployedLocations.set(id, deployedLocations);
            this.setSourceLocationsForPlugin(id, entry);
            const deployedPlugins = entryPoint === 'backend' ? this.deployedBackendPlugins : this.deployedFrontendPlugins;
            if (deployedPlugins.has(id)) {
                deployPlugin.debug(`Skipped ${entryPoint} plugin ${metadata.model.name} already deployed`);
                return true;
            }
            const { type } = entry;
            const deployed = { metadata, type };
            deployed.contributes = await this.reader.readContribution(manifest);
            await this.localizationService.deployLocalizations(deployed);
            deployedPlugins.set(id, deployed);
            deployPlugin.debug(`Deployed ${entryPoint} plugin "${id}" from "${metadata.model.entryPoint[entryPoint] || pluginPath}"`);
        }
        catch (e) {
            deployPlugin.error(`Failed to deploy ${entryPoint} plugin from '${pluginPath}' path`, e);
            return success = false;
        }
        finally {
            if (success && id) {
                this.markAsInstalled(id);
            }
        }
        return success;
    }
    async uninstallPlugin(pluginId) {
        try {
            const sourceLocations = this.sourceLocations.get(pluginId);
            if (!sourceLocations) {
                return false;
            }
            await Promise.all(Array.from(sourceLocations, location => fs.remove(location).catch(err => console.error(`Failed to remove source for ${pluginId} at ${location}`, err))));
            this.sourceLocations.delete(pluginId);
            this.localizationService.undeployLocalizations(pluginId);
            this.uninstallationManager.markAsUninstalled(pluginId);
            return true;
        }
        catch (e) {
            console.error('Error uninstalling plugin', e);
            return false;
        }
    }
    markAsInstalled(id) {
        const metadata = plugin_protocol_1.PluginIdentifiers.idAndVersionFromVersionedId(id);
        if (metadata) {
            const toMarkAsUninstalled = [];
            const checkForDifferentVersions = (others) => {
                for (const other of others) {
                    const otherMetadata = plugin_protocol_1.PluginIdentifiers.idAndVersionFromVersionedId(other);
                    if (metadata.id === (otherMetadata === null || otherMetadata === void 0 ? void 0 : otherMetadata.id) && metadata.version !== otherMetadata.version) {
                        toMarkAsUninstalled.push(other);
                    }
                }
            };
            checkForDifferentVersions(this.deployedFrontendPlugins.keys());
            checkForDifferentVersions(this.deployedBackendPlugins.keys());
            this.uninstallationManager.markAsUninstalled(...toMarkAsUninstalled);
            this.uninstallationManager.markAsInstalled(id);
            toMarkAsUninstalled.forEach(pluginToUninstall => this.uninstallPlugin(pluginToUninstall));
        }
    }
    async undeployPlugin(pluginId) {
        this.deployedBackendPlugins.delete(pluginId);
        this.deployedFrontendPlugins.delete(pluginId);
        const deployedLocations = this.deployedLocations.get(pluginId);
        if (!deployedLocations) {
            return false;
        }
        const undeployPlugin = this.stopwatch.start('undeployPlugin');
        this.deployedLocations.delete(pluginId);
        for (const location of deployedLocations) {
            try {
                await fs.remove(location);
                undeployPlugin.log(`[${pluginId}]: undeployed from "${location}"`);
            }
            catch (e) {
                undeployPlugin.error(`[${pluginId}]: failed to undeploy from location "${location}". reason:`, e);
            }
        }
        return true;
    }
    setSourceLocationsForPlugin(id, entry) {
        var _a;
        const knownLocations = (_a = this.sourceLocations.get(id)) !== null && _a !== void 0 ? _a : new Set();
        const maybeStoredLocations = entry.getValue('sourceLocations');
        const storedLocations = Array.isArray(maybeStoredLocations) && maybeStoredLocations.every(location => typeof location === 'string')
            ? maybeStoredLocations.concat(entry.originalPath())
            : [entry.originalPath()];
        storedLocations.forEach(location => knownLocations.add(location));
        this.sourceLocations.set(id, knownLocations);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], HostedPluginDeployerHandler.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_reader_1.HostedPluginReader),
    __metadata("design:type", plugin_reader_1.HostedPluginReader)
], HostedPluginDeployerHandler.prototype, "reader", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_localization_service_1.HostedPluginLocalizationService),
    __metadata("design:type", hosted_plugin_localization_service_1.HostedPluginLocalizationService)
], HostedPluginDeployerHandler.prototype, "localizationService", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.Stopwatch),
    __metadata("design:type", common_1.Stopwatch)
], HostedPluginDeployerHandler.prototype, "stopwatch", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_uninstallation_manager_1.PluginUninstallationManager),
    __metadata("design:type", plugin_uninstallation_manager_1.PluginUninstallationManager)
], HostedPluginDeployerHandler.prototype, "uninstallationManager", void 0);
HostedPluginDeployerHandler = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginDeployerHandler);
exports.HostedPluginDeployerHandler = HostedPluginDeployerHandler;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js":
/*!***************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginLocalizationService = void 0;
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const localization_provider_1 = __webpack_require__(/*! @theia/core/lib/node/i18n/localization-provider */ "../../packages/core/lib/node/i18n/localization-provider.js");
const localization_1 = __webpack_require__(/*! @theia/core/lib/common/i18n/localization */ "../../packages/core/lib/common/i18n/localization.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../../packages/plugin-ext/lib/common/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const language_pack_service_1 = __webpack_require__(/*! ../../common/language-pack-service */ "../../packages/plugin-ext/lib/common/language-pack-service.js");
let HostedPluginLocalizationService = class HostedPluginLocalizationService {
    constructor() {
        this.localizationDisposeMap = new Map();
        this.translationConfigFiles = new Map();
        this._ready = new promise_util_1.Deferred();
        /**
         * This promise resolves when the cache has been cleaned up after starting the backend server.
         * Once resolved, the service allows to cache localization files for plugins.
         */
        this.ready = this._ready.promise;
    }
    initialize() {
        this.getLocalizationCacheDir()
            .then(cacheDir => fs.emptyDir(cacheDir))
            .then(() => this._ready.resolve());
    }
    async deployLocalizations(plugin) {
        var _a, _b;
        const disposable = new core_1.DisposableCollection();
        if ((_a = plugin.contributes) === null || _a === void 0 ? void 0 : _a.localizations) {
            // Indicator that this plugin is a vscode language pack
            // Language packs translate Theia and some builtin vscode extensions
            const localizations = buildLocalizations(plugin.contributes.localizations);
            disposable.push(core_1.Disposable.create(() => {
                this.localizationProvider.removeLocalizations(...localizations);
            }));
            this.localizationProvider.addLocalizations(...localizations);
        }
        if (plugin.metadata.model.l10n || ((_b = plugin.contributes) === null || _b === void 0 ? void 0 : _b.localizations)) {
            // Indicator that this plugin is a vscode language pack or has its own localization bundles
            // These bundles are purely used for translating plugins
            // The branch above builds localizations for Theia's own strings
            disposable.push(await this.updateLanguagePackBundles(plugin));
        }
        if (!disposable.disposed) {
            const versionedId = common_1.PluginIdentifiers.componentsToVersionedId(plugin.metadata.model);
            disposable.push(core_1.Disposable.create(() => {
                this.localizationDisposeMap.delete(versionedId);
            }));
            this.localizationDisposeMap.set(versionedId, disposable);
        }
    }
    undeployLocalizations(plugin) {
        var _a;
        (_a = this.localizationDisposeMap.get(plugin)) === null || _a === void 0 ? void 0 : _a.dispose();
    }
    async updateLanguagePackBundles(plugin) {
        var _a;
        const disposable = new core_1.DisposableCollection();
        const pluginId = plugin.metadata.model.id;
        const packageUri = new core_1.URI(plugin.metadata.model.packageUri);
        if ((_a = plugin.contributes) === null || _a === void 0 ? void 0 : _a.localizations) {
            for (const localization of plugin.contributes.localizations) {
                for (const translation of localization.translations) {
                    const l10n = getL10nTranslation(translation);
                    if (l10n) {
                        const translatedPluginId = translation.id;
                        const translationUri = packageUri.resolve(translation.path);
                        const locale = localization.languageId;
                        // We store a bundle for another extension in here
                        // Hence we use `translatedPluginId` instead of `pluginId`
                        this.languagePackService.storeBundle(translatedPluginId, locale, {
                            contents: processL10nBundle(l10n),
                            uri: translationUri.toString()
                        });
                        disposable.push(core_1.Disposable.create(() => {
                            // Only dispose the deleted locale for the specific plugin
                            this.languagePackService.deleteBundle(translatedPluginId, locale);
                        }));
                    }
                }
            }
        }
        // The `l10n` field of the plugin model points to a relative directory path within the plugin
        // It is supposed to contain localization bundles that contain translations of the plugin strings into different languages
        if (plugin.metadata.model.l10n) {
            const bundleDirectory = packageUri.resolve(plugin.metadata.model.l10n);
            const bundles = await loadPluginBundles(bundleDirectory);
            if (bundles) {
                for (const [locale, bundle] of Object.entries(bundles)) {
                    this.languagePackService.storeBundle(pluginId, locale, bundle);
                }
                disposable.push(core_1.Disposable.create(() => {
                    // Dispose all bundles contributed by the deleted plugin
                    this.languagePackService.deleteBundle(pluginId);
                }));
            }
        }
        return disposable;
    }
    /**
     * Performs localization of the plugin model. Translates entries such as command names, view names and other items.
     *
     * Translatable items are indicated with a `%id%` value.
     * The `id` is the translation key that gets replaced with the localized value for the currently selected language.
     *
     * Returns a copy of the plugin argument and does not modify the argument.
     * This is done to preserve the original `%id%` values for subsequent invocations of this method.
     */
    async localizePlugin(plugin) {
        const currentLanguage = this.localizationProvider.getCurrentLanguage();
        const localization = this.localizationProvider.loadLocalization(currentLanguage);
        const pluginPath = new core_1.URI(plugin.metadata.model.packageUri).path.fsPath();
        const pluginId = plugin.metadata.model.id;
        try {
            const translations = await loadPackageTranslations(pluginPath, currentLanguage);
            plugin = localizePackage(plugin, translations, (key, original) => {
                const fullKey = `${pluginId}/package/${key}`;
                return localization_1.Localization.localize(localization, fullKey, original);
            });
        }
        catch (err) {
            console.error(`Failed to localize plugin '${pluginId}'.`, err);
        }
        return plugin;
    }
    getNlsConfig() {
        const locale = this.localizationProvider.getCurrentLanguage();
        const configFile = this.translationConfigFiles.get(locale);
        if (locale === core_1.nls.defaultLocale || !configFile) {
            return { locale, availableLanguages: {} };
        }
        const cache = path.dirname(configFile);
        return {
            locale,
            availableLanguages: { '*': locale },
            _languagePackSupport: true,
            _cacheRoot: cache,
            _languagePackId: locale,
            _translationsConfigFile: configFile
        };
    }
    async buildTranslationConfig(plugins) {
        var _a;
        await this.ready;
        const cacheDir = await this.getLocalizationCacheDir();
        const configs = new Map();
        for (const plugin of plugins) {
            if ((_a = plugin.contributes) === null || _a === void 0 ? void 0 : _a.localizations) {
                const pluginPath = new core_1.URI(plugin.metadata.model.packageUri).path.fsPath();
                for (const localization of plugin.contributes.localizations) {
                    const config = configs.get(localization.languageId) || {};
                    for (const translation of localization.translations) {
                        const fullPath = path.join(pluginPath, translation.path);
                        config[translation.id] = fullPath;
                    }
                    configs.set(localization.languageId, config);
                }
            }
        }
        for (const [language, config] of configs.entries()) {
            const languageConfigDir = path.join(cacheDir, language);
            await fs.mkdirs(languageConfigDir);
            const configFile = path.join(languageConfigDir, `nls.config.${language}.json`);
            this.translationConfigFiles.set(language, configFile);
            await fs.writeJson(configFile, config);
        }
    }
    async getLocalizationCacheDir() {
        const configDir = new core_1.URI(await this.envVariables.getConfigDirUri()).path.fsPath();
        const cacheDir = path.join(configDir, 'localization-cache');
        return cacheDir;
    }
};
__decorate([
    (0, inversify_1.inject)(localization_provider_1.LocalizationProvider),
    __metadata("design:type", localization_provider_1.LocalizationProvider)
], HostedPluginLocalizationService.prototype, "localizationProvider", void 0);
__decorate([
    (0, inversify_1.inject)(language_pack_service_1.LanguagePackService),
    __metadata("design:type", Object)
], HostedPluginLocalizationService.prototype, "languagePackService", void 0);
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], HostedPluginLocalizationService.prototype, "envVariables", void 0);
HostedPluginLocalizationService = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginLocalizationService);
exports.HostedPluginLocalizationService = HostedPluginLocalizationService;
// New plugin localization logic using vscode.l10n
function getL10nTranslation(translation) {
    // 'bundle' is a special key that contains all translations for the l10n vscode API
    // If that doesn't exist, we can assume that the language pack is using the old vscode-nls API
    return translation.contents.bundle;
}
async function loadPluginBundles(l10nUri) {
    try {
        const directory = l10nUri.path.fsPath();
        const files = await fs.readdir(directory);
        const result = {};
        await Promise.all(files.map(async (fileName) => {
            const match = fileName.match(/^bundle\.l10n\.([\w\-]+)\.json$/);
            if (match) {
                const locale = match[1];
                const contents = await fs.readJSON(path.join(directory, fileName));
                result[locale] = {
                    contents,
                    uri: l10nUri.resolve(fileName).toString()
                };
            }
        }));
        return result;
    }
    catch (err) {
        // The directory either doesn't exist or its contents cannot be parsed
        console.error(`Failed to load plugin localization bundles from ${l10nUri}.`, err);
        // In any way we should just safely return undefined
        return undefined;
    }
}
function processL10nBundle(bundle) {
    const processedBundle = {};
    for (const [name, value] of Object.entries(bundle)) {
        const stringValue = typeof value === 'string' ? value : value.message;
        processedBundle[name] = stringValue;
    }
    return processedBundle;
}
// Old plugin localization logic for vscode-nls
// vscode-nls was used until version 1.73 of VSCode to translate extensions
function buildLocalizations(localizations) {
    const theiaLocalizations = [];
    for (const localization of localizations) {
        const theiaLocalization = {
            languageId: localization.languageId,
            languageName: localization.languageName,
            localizedLanguageName: localization.localizedLanguageName,
            languagePack: true,
            translations: {}
        };
        for (const translation of localization.translations) {
            for (const [scope, value] of Object.entries(translation.contents)) {
                for (const [key, item] of Object.entries(value)) {
                    const translationKey = buildTranslationKey(translation.id, scope, key);
                    theiaLocalization.translations[translationKey] = item;
                }
            }
        }
        theiaLocalizations.push(theiaLocalization);
    }
    return theiaLocalizations;
}
function buildTranslationKey(pluginId, scope, key) {
    return `${pluginId}/${localization_1.Localization.transformKey(scope)}/${key}`;
}
async function loadPackageTranslations(pluginPath, locale) {
    const localizedPluginPath = path.join(pluginPath, `package.nls.${locale}.json`);
    try {
        const defaultValue = coerceLocalizations(await fs.readJson(path.join(pluginPath, 'package.nls.json')));
        if (await fs.pathExists(localizedPluginPath)) {
            return {
                translation: coerceLocalizations(await fs.readJson(localizedPluginPath)),
                default: defaultValue
            };
        }
        return {
            default: defaultValue
        };
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            throw e;
        }
        return {};
    }
}
function isLocalizeInfo(obj) {
    return (0, core_1.isObject)(obj) && 'message' in obj || false;
}
function coerceLocalizations(translations) {
    for (const [key, value] of Object.entries(translations)) {
        if (isLocalizeInfo(value)) {
            translations[key] = value.message;
        }
        else if (typeof value !== 'string') {
            // Only strings or LocalizeInfo values are valid
            translations[key] = 'INVALID TRANSLATION VALUE';
        }
    }
    return translations;
}
const NLS_REGEX = /^%([\w\d.-]+)%$/i;
function localizePackage(value, translations, callback) {
    if (typeof value === 'string') {
        const match = NLS_REGEX.exec(value);
        let result = value;
        if (match) {
            const key = match[1];
            if (translations.translation) {
                result = translations.translation[key];
            }
            else if (translations.default) {
                result = callback(key, translations.default[key]);
            }
        }
        return result;
    }
    if (Array.isArray(value)) {
        const result = [];
        for (const item of value) {
            result.push(localizePackage(item, translations, callback));
        }
        return result;
    }
    if ((0, core_1.isObject)(value)) {
        const result = {};
        for (const [name, item] of Object.entries(value)) {
            result[name] = localizePackage(item, translations, callback);
        }
        return result;
    }
    return value;
}


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-process.js":
/*!**************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin-process.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginProcess = exports.HostedPluginProcessConfiguration = void 0;
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const ipc_protocol_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/ipc-protocol */ "../../packages/core/lib/node/messaging/ipc-protocol.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const cp = __webpack_require__(/*! child_process */ "child_process");
const hosted_plugin_cli_contribution_1 = __webpack_require__(/*! ./hosted-plugin-cli-contribution */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-cli-contribution.js");
const hosted_plugin_localization_service_1 = __webpack_require__(/*! ./hosted-plugin-localization-service */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js");
const hosted_plugin_protocol_1 = __webpack_require__(/*! ./hosted-plugin-protocol */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-protocol.js");
const binary_message_pipe_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/binary-message-pipe */ "../../packages/core/lib/node/messaging/binary-message-pipe.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const psTree = __webpack_require__(/*! ps-tree */ "../../node_modules/ps-tree/index.js");
exports.HostedPluginProcessConfiguration = Symbol('HostedPluginProcessConfiguration');
let HostedPluginProcess = class HostedPluginProcess {
    constructor() {
        this.terminatingPluginServer = false;
        this.HOSTED_PLUGIN_ENV_REGEXP_EXCLUSION = new RegExp('HOSTED_PLUGIN*');
    }
    setClient(client) {
        if (this.client) {
            if (this.childProcess) {
                this.runPluginServer();
            }
        }
        this.client = client;
    }
    clientClosed() {
    }
    setDefault(defaultRunner) {
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    acceptMessage(pluginHostId, message) {
        return pluginHostId === 'main';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    onMessage(pluginHostId, message) {
        if (this.messagePipe) {
            this.messagePipe.send(message);
        }
    }
    async terminatePluginServer() {
        if (this.childProcess === undefined) {
            return;
        }
        this.terminatingPluginServer = true;
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const cp = this.childProcess;
        this.childProcess = undefined;
        const waitForTerminated = new promise_util_1.Deferred();
        cp.on('message', message => {
            const msg = JSON.parse(message);
            if (hosted_plugin_protocol_1.ProcessTerminatedMessage.is(msg)) {
                waitForTerminated.resolve();
            }
        });
        const stopTimeout = this.cli.pluginHostStopTimeout;
        cp.send(JSON.stringify({ type: hosted_plugin_protocol_1.ProcessTerminateMessage.TYPE, stopTimeout }));
        const terminateTimeout = this.cli.pluginHostTerminateTimeout;
        if (terminateTimeout) {
            await Promise.race([
                waitForTerminated.promise,
                new Promise(resolve => setTimeout(resolve, terminateTimeout))
            ]);
        }
        else {
            await waitForTerminated.promise;
        }
        this.killProcessTree(cp.pid);
    }
    killProcessTree(parentPid) {
        psTree(parentPid, (_, childProcesses) => {
            childProcesses.forEach(childProcess => this.killProcess(parseInt(childProcess.PID)));
            this.killProcess(parentPid);
        });
    }
    killProcess(pid) {
        try {
            process.kill(pid);
        }
        catch (e) {
            if (e && 'code' in e && e.code === 'ESRCH') {
                return;
            }
            this.logger.error(`[${pid}] failed to kill`, e);
        }
    }
    runPluginServer() {
        if (this.childProcess) {
            this.terminatePluginServer();
        }
        this.terminatingPluginServer = false;
        this.childProcess = this.fork({
            serverName: 'hosted-plugin',
            logger: this.logger,
            args: []
        });
        this.messagePipe = new binary_message_pipe_1.BinaryMessagePipe(this.childProcess.stdio[4]);
        this.messagePipe.onMessage(buffer => {
            if (this.client) {
                this.client.postMessage(plugin_protocol_1.PLUGIN_HOST_BACKEND, buffer);
            }
        });
    }
    fork(options) {
        // create env and add PATH to it so any executable from root process is available
        const env = (0, ipc_protocol_1.createIpcEnv)({ env: process.env });
        for (const key of Object.keys(env)) {
            if (this.HOSTED_PLUGIN_ENV_REGEXP_EXCLUSION.test(key)) {
                delete env[key];
            }
        }
        env['VSCODE_NLS_CONFIG'] = JSON.stringify(this.localizationService.getNlsConfig());
        // apply external env variables
        this.pluginHostEnvironmentVariables.getContributions().forEach(envVar => envVar.process(env));
        if (this.cli.extensionTestsPath) {
            env.extensionTestsPath = this.cli.extensionTestsPath;
        }
        const forkOptions = {
            silent: true,
            env: env,
            execArgv: [],
            // 5th element MUST be 'overlapped' for it to work properly on Windows.
            // 'overlapped' works just like 'pipe' on non-Windows platforms.
            // See: https://nodejs.org/docs/latest-v14.x/api/child_process.html#child_process_options_stdio
            // Note: For some reason `@types/node` does not know about 'overlapped'.
            stdio: ['pipe', 'pipe', 'pipe', 'ipc', 'overlapped']
        };
        const inspectArgPrefix = `--${options.serverName}-inspect`;
        const inspectArg = process.argv.find(v => v.startsWith(inspectArgPrefix));
        if (inspectArg !== undefined) {
            forkOptions.execArgv = ['--nolazy', `--inspect${inspectArg.substring(inspectArgPrefix.length)}`];
        }
        const childProcess = cp.fork(this.configuration.path, options.args, forkOptions);
        childProcess.stdout.on('data', data => this.logger.info(`[${options.serverName}: ${childProcess.pid}] ${data.toString().trim()}`));
        childProcess.stderr.on('data', data => this.logger.error(`[${options.serverName}: ${childProcess.pid}] ${data.toString().trim()}`));
        this.logger.debug(`[${options.serverName}: ${childProcess.pid}] IPC started`);
        childProcess.once('exit', (code, signal) => this.onChildProcessExit(options.serverName, childProcess.pid, code, signal));
        childProcess.on('error', err => this.onChildProcessError(err));
        return childProcess;
    }
    onChildProcessExit(serverName, pid, code, signal) {
        if (this.terminatingPluginServer) {
            return;
        }
        this.logger.error(`[${serverName}: ${pid}] IPC exited, with signal: ${signal}, and exit code: ${code}`);
        const message = 'Plugin runtime crashed unexpectedly, all plugins are not working, please reload the page.';
        let hintMessage = 'If it doesn\'t help, please check Theia server logs.';
        if (signal && signal.toUpperCase() === 'SIGKILL') {
            // May happen in case of OOM or manual force stop.
            hintMessage = 'Probably there is not enough memory for the plugins. ' + hintMessage;
        }
        this.messageService.error(message + ' ' + hintMessage, { timeout: 15 * 60 * 1000 });
    }
    onChildProcessError(err) {
        this.logger.error(`Error from plugin host: ${err.message}`);
    }
    /**
     * Provides additional plugin ids.
     */
    async getExtraDeployedPluginIds() {
        return [];
    }
    /**
     * Provides additional deployed plugins.
     */
    async getExtraDeployedPlugins() {
        return [];
    }
};
__decorate([
    (0, inversify_1.inject)(exports.HostedPluginProcessConfiguration),
    __metadata("design:type", Object)
], HostedPluginProcess.prototype, "configuration", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    __metadata("design:type", Object)
], HostedPluginProcess.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_cli_contribution_1.HostedPluginCliContribution),
    __metadata("design:type", hosted_plugin_cli_contribution_1.HostedPluginCliContribution)
], HostedPluginProcess.prototype, "cli", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(plugin_protocol_1.PluginHostEnvironmentVariable),
    __metadata("design:type", Object)
], HostedPluginProcess.prototype, "pluginHostEnvironmentVariables", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.MessageService),
    __metadata("design:type", common_1.MessageService)
], HostedPluginProcess.prototype, "messageService", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_localization_service_1.HostedPluginLocalizationService),
    __metadata("design:type", hosted_plugin_localization_service_1.HostedPluginLocalizationService)
], HostedPluginProcess.prototype, "localizationService", void 0);
HostedPluginProcess = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginProcess);
exports.HostedPluginProcess = HostedPluginProcess;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js":
/*!******************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginSupport = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const hosted_plugin_process_1 = __webpack_require__(/*! ./hosted-plugin-process */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-process.js");
let HostedPluginSupport = class HostedPluginSupport {
    constructor() {
        this.isPluginProcessRunning = false;
    }
    init() {
        this.pluginRunners.forEach(runner => {
            runner.setDefault(this.hostedPluginProcess);
        });
    }
    setClient(client) {
        this.client = client;
        this.hostedPluginProcess.setClient(client);
        this.pluginRunners.forEach(runner => runner.setClient(client));
    }
    clientClosed() {
        this.isPluginProcessRunning = false;
        this.terminatePluginServer();
        this.isPluginProcessRunning = false;
        this.pluginRunners.forEach(runner => runner.clientClosed());
    }
    runPlugin(plugin) {
        if (!plugin.entryPoint.frontend) {
            this.runPluginServer();
        }
    }
    onMessage(pluginHostId, message) {
        // need to perform routing
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.pluginRunners.length > 0) {
            this.pluginRunners.forEach(runner => {
                if (runner.acceptMessage(pluginHostId, message)) {
                    runner.onMessage(pluginHostId, message);
                }
            });
        }
        else {
            this.hostedPluginProcess.onMessage(pluginHostId, message);
        }
    }
    runPluginServer() {
        if (!this.isPluginProcessRunning) {
            this.hostedPluginProcess.runPluginServer();
            this.isPluginProcessRunning = true;
        }
    }
    /**
     * Provides additional plugin ids.
     */
    async getExtraDeployedPluginIds() {
        return [].concat.apply([], await Promise.all(this.pluginRunners.map(runner => runner.getExtraDeployedPluginIds())));
    }
    /**
     * Provides additional deployed plugins.
     */
    async getExtraDeployedPlugins() {
        return [].concat.apply([], await Promise.all(this.pluginRunners.map(runner => runner.getExtraDeployedPlugins())));
    }
    sendLog(logPart) {
        this.client.log(logPart);
    }
    terminatePluginServer() {
        this.hostedPluginProcess.terminatePluginServer();
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    __metadata("design:type", Object)
], HostedPluginSupport.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_process_1.HostedPluginProcess),
    __metadata("design:type", hosted_plugin_process_1.HostedPluginProcess)
], HostedPluginSupport.prototype, "hostedPluginProcess", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.multiInject)(plugin_protocol_1.ServerPluginRunner),
    __metadata("design:type", Array)
], HostedPluginSupport.prototype, "pluginRunners", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HostedPluginSupport.prototype, "init", null);
HostedPluginSupport = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginSupport);
exports.HostedPluginSupport = HostedPluginSupport;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/metadata-scanner.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/metadata-scanner.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2015-2018 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MetadataScanner = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_uninstallation_manager_1 = __webpack_require__(/*! ../../main/node/plugin-uninstallation-manager */ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js");
let MetadataScanner = class MetadataScanner {
    constructor(scanners) {
        this.scanners = new Map();
        scanners.forEach((scanner) => {
            this.scanners.set(scanner.apiType, scanner);
        });
    }
    getPluginMetadata(plugin) {
        const scanner = this.getScanner(plugin);
        return {
            host: plugin_protocol_1.PLUGIN_HOST_BACKEND,
            model: scanner.getModel(plugin),
            lifecycle: scanner.getLifecycle(plugin),
            outOfSync: this.uninstallationManager.isUninstalled(plugin_protocol_1.PluginIdentifiers.componentsToVersionedId(plugin)),
        };
    }
    /**
     * Returns the first suitable scanner.
     *
     * Throws if no scanner was found.
     *
     * @param {PluginPackage} plugin
     * @returns {PluginScanner}
     */
    getScanner(plugin) {
        let scanner;
        if (plugin && plugin.engines) {
            const scanners = Object.keys(plugin.engines)
                .filter(engineName => this.scanners.has(engineName))
                .map(engineName => this.scanners.get(engineName));
            // get the first suitable scanner from the list
            scanner = scanners[0];
        }
        if (!scanner) {
            throw new Error('There is no suitable scanner found for ' + plugin.name);
        }
        return scanner;
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_uninstallation_manager_1.PluginUninstallationManager),
    __metadata("design:type", plugin_uninstallation_manager_1.PluginUninstallationManager)
], MetadataScanner.prototype, "uninstallationManager", void 0);
MetadataScanner = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(plugin_protocol_1.PluginScanner)),
    __metadata("design:paramtypes", [Array])
], MetadataScanner);
exports.MetadataScanner = MetadataScanner;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-ext-hosted-backend-module.js":
/*!*************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-ext-hosted-backend-module.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018-2021 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindHostedBackend = exports.bindCommonHostedBackend = void 0;
const path = __webpack_require__(/*! path */ "path");
const contribution_provider_1 = __webpack_require__(/*! @theia/core/lib/common/contribution-provider */ "../../packages/core/lib/common/contribution-provider.js");
const cli_1 = __webpack_require__(/*! @theia/core/lib/node/cli */ "../../packages/core/lib/node/cli.js");
const connection_container_module_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/connection-container-module */ "../../packages/core/lib/node/messaging/connection-container-module.js");
const backend_application_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application */ "../../packages/core/lib/node/backend-application.js");
const metadata_scanner_1 = __webpack_require__(/*! ./metadata-scanner */ "../../packages/plugin-ext/lib/hosted/node/metadata-scanner.js");
const plugin_service_1 = __webpack_require__(/*! ./plugin-service */ "../../packages/plugin-ext/lib/hosted/node/plugin-service.js");
const plugin_reader_1 = __webpack_require__(/*! ./plugin-reader */ "../../packages/plugin-ext/lib/hosted/node/plugin-reader.js");
const hosted_plugin_1 = __webpack_require__(/*! ./hosted-plugin */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js");
const scanner_theia_1 = __webpack_require__(/*! ./scanners/scanner-theia */ "../../packages/plugin-ext/lib/hosted/node/scanners/scanner-theia.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const grammars_reader_1 = __webpack_require__(/*! ./scanners/grammars-reader */ "../../packages/plugin-ext/lib/hosted/node/scanners/grammars-reader.js");
const hosted_plugin_process_1 = __webpack_require__(/*! ./hosted-plugin-process */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-process.js");
const plugin_ext_api_contribution_1 = __webpack_require__(/*! ../../common/plugin-ext-api-contribution */ "../../packages/plugin-ext/lib/common/plugin-ext-api-contribution.js");
const hosted_plugin_cli_contribution_1 = __webpack_require__(/*! ./hosted-plugin-cli-contribution */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-cli-contribution.js");
const hosted_plugin_deployer_handler_1 = __webpack_require__(/*! ./hosted-plugin-deployer-handler */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler.js");
const plugin_uri_factory_1 = __webpack_require__(/*! ./scanners/plugin-uri-factory */ "../../packages/plugin-ext/lib/hosted/node/scanners/plugin-uri-factory.js");
const file_plugin_uri_factory_1 = __webpack_require__(/*! ./scanners/file-plugin-uri-factory */ "../../packages/plugin-ext/lib/hosted/node/scanners/file-plugin-uri-factory.js");
const hosted_plugin_localization_service_1 = __webpack_require__(/*! ./hosted-plugin-localization-service */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js");
const language_pack_service_1 = __webpack_require__(/*! ../../common/language-pack-service */ "../../packages/plugin-ext/lib/common/language-pack-service.js");
const plugin_language_pack_service_1 = __webpack_require__(/*! ./plugin-language-pack-service */ "../../packages/plugin-ext/lib/hosted/node/plugin-language-pack-service.js");
const proxy_factory_1 = __webpack_require__(/*! @theia/core/lib/common/messaging/proxy-factory */ "../../packages/core/lib/common/messaging/proxy-factory.js");
const handler_1 = __webpack_require__(/*! @theia/core/lib/common/messaging/handler */ "../../packages/core/lib/common/messaging/handler.js");
const commonHostedConnectionModule = connection_container_module_1.ConnectionContainerModule.create(({ bind, bindBackendService }) => {
    bind(hosted_plugin_process_1.HostedPluginProcess).toSelf().inSingletonScope();
    bind(hosted_plugin_1.HostedPluginSupport).toSelf().inSingletonScope();
    (0, contribution_provider_1.bindContributionProvider)(bind, Symbol.for(plugin_ext_api_contribution_1.ExtPluginApiProvider));
    (0, contribution_provider_1.bindContributionProvider)(bind, plugin_protocol_1.PluginHostEnvironmentVariable);
    bind(plugin_service_1.HostedPluginServerImpl).toSelf().inSingletonScope();
    bind(plugin_protocol_1.HostedPluginServer).toService(plugin_service_1.HostedPluginServerImpl);
    bindBackendService(plugin_protocol_1.hostedServicePath, plugin_protocol_1.HostedPluginServer, (server, client) => {
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    });
});
function bindCommonHostedBackend(bind) {
    bind(hosted_plugin_cli_contribution_1.HostedPluginCliContribution).toSelf().inSingletonScope();
    bind(cli_1.CliContribution).toService(hosted_plugin_cli_contribution_1.HostedPluginCliContribution);
    bind(metadata_scanner_1.MetadataScanner).toSelf().inSingletonScope();
    bind(plugin_reader_1.HostedPluginReader).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(plugin_reader_1.HostedPluginReader);
    bind(hosted_plugin_localization_service_1.HostedPluginLocalizationService).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(hosted_plugin_localization_service_1.HostedPluginLocalizationService);
    bind(hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler).toSelf().inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerHandler).toService(hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler);
    bind(plugin_language_pack_service_1.PluginLanguagePackService).toSelf().inSingletonScope();
    bind(language_pack_service_1.LanguagePackService).toService(plugin_language_pack_service_1.PluginLanguagePackService);
    bind(handler_1.ConnectionHandler).toDynamicValue(ctx => new proxy_factory_1.RpcConnectionHandler(language_pack_service_1.languagePackServicePath, () => ctx.container.get(language_pack_service_1.LanguagePackService))).inSingletonScope();
    bind(grammars_reader_1.GrammarsReader).toSelf().inSingletonScope();
    bind(hosted_plugin_process_1.HostedPluginProcessConfiguration).toConstantValue({
        path: path.join(__dirname, 'plugin-host'),
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(commonHostedConnectionModule);
    bind(plugin_uri_factory_1.PluginUriFactory).to(file_plugin_uri_factory_1.FilePluginUriFactory).inSingletonScope();
}
exports.bindCommonHostedBackend = bindCommonHostedBackend;
function bindHostedBackend(bind) {
    bindCommonHostedBackend(bind);
    bind(plugin_protocol_1.PluginScanner).to(scanner_theia_1.TheiaPluginScanner).inSingletonScope();
}
exports.bindHostedBackend = bindHostedBackend;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-language-pack-service.js":
/*!*********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-language-pack-service.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginLanguagePackService = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginLanguagePackService = class PluginLanguagePackService {
    constructor() {
        this.storage = new Map();
    }
    storeBundle(pluginId, locale, bundle) {
        if (!this.storage.has(pluginId)) {
            this.storage.set(pluginId, new Map());
        }
        this.storage.get(pluginId).set(locale, bundle);
    }
    deleteBundle(pluginId, locale) {
        var _a;
        if (locale) {
            (_a = this.storage.get(pluginId)) === null || _a === void 0 ? void 0 : _a.delete(locale);
        }
        else {
            this.storage.delete(pluginId);
        }
    }
    async getBundle(pluginId, locale) {
        var _a;
        return (_a = this.storage.get(pluginId)) === null || _a === void 0 ? void 0 : _a.get(locale);
    }
};
PluginLanguagePackService = __decorate([
    (0, inversify_1.injectable)()
], PluginLanguagePackService);
exports.PluginLanguagePackService = PluginLanguagePackService;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-reader.js":
/*!******************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-reader.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginReader = void 0;
const path = __webpack_require__(/*! path */ "path");
const escape_html = __webpack_require__(/*! escape-html */ "../../node_modules/escape-html/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const metadata_scanner_1 = __webpack_require__(/*! ./metadata-scanner */ "../../packages/plugin-ext/lib/hosted/node/metadata-scanner.js");
const plugin_manifest_loader_1 = __webpack_require__(/*! ./plugin-manifest-loader */ "../../packages/plugin-ext/lib/hosted/node/plugin-manifest-loader.js");
let HostedPluginReader = class HostedPluginReader {
    constructor() {
        /**
         * Map between a plugin id and its local storage
         */
        this.pluginsIdsFiles = new Map();
    }
    configure(app) {
        app.get('/hostedPlugin/:pluginId/:path(*)', async (req, res) => {
            const pluginId = req.params.pluginId;
            const filePath = req.params.path;
            const localPath = this.pluginsIdsFiles.get(pluginId);
            if (localPath) {
                res.sendFile(filePath, { root: localPath }, e => {
                    if (!e) {
                        // the file was found and successfully transferred
                        return;
                    }
                    console.error(`Could not transfer '${filePath}' file from '${pluginId}'`, e);
                    if (res.headersSent) {
                        // the request was already closed
                        return;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (e['code'] === 'ENOENT') {
                        res.status(404).send(`No such file found in '${escape_html(pluginId)}' plugin.`);
                    }
                    else {
                        res.status(500).send(`Failed to transfer a file from '${escape_html(pluginId)}' plugin.`);
                    }
                });
            }
            else {
                await this.handleMissingResource(req, res);
            }
        });
    }
    async handleMissingResource(req, res) {
        const pluginId = req.params.pluginId;
        res.status(404).send(`The plugin with id '${escape_html(pluginId)}' does not exist.`);
    }
    /**
     * @throws never
     */
    async getPluginMetadata(pluginPath) {
        try {
            const manifest = await this.readPackage(pluginPath);
            return manifest && this.readMetadata(manifest);
        }
        catch (e) {
            this.logger.error(`Failed to load plugin metadata from "${pluginPath}"`, e);
            return undefined;
        }
    }
    async readPackage(pluginPath) {
        if (!pluginPath) {
            return undefined;
        }
        const manifest = await (0, plugin_manifest_loader_1.loadManifest)(pluginPath);
        if (!manifest) {
            return undefined;
        }
        manifest.packagePath = pluginPath;
        return manifest;
    }
    readMetadata(plugin) {
        const pluginMetadata = this.scanner.getPluginMetadata(plugin);
        if (pluginMetadata.model.entryPoint.backend) {
            pluginMetadata.model.entryPoint.backend = path.resolve(plugin.packagePath, pluginMetadata.model.entryPoint.backend);
        }
        if (pluginMetadata) {
            // Add post processor
            if (this.metadataProcessors) {
                this.metadataProcessors.forEach(metadataProcessor => {
                    metadataProcessor.process(pluginMetadata);
                });
            }
            this.pluginsIdsFiles.set((0, plugin_protocol_1.getPluginId)(pluginMetadata.model), plugin.packagePath);
        }
        return pluginMetadata;
    }
    async readContribution(plugin) {
        const scanner = this.scanner.getScanner(plugin);
        return scanner.getContribution(plugin);
    }
    readDependencies(plugin) {
        const scanner = this.scanner.getScanner(plugin);
        return scanner.getDependencies(plugin);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], HostedPluginReader.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(metadata_scanner_1.MetadataScanner),
    __metadata("design:type", metadata_scanner_1.MetadataScanner)
], HostedPluginReader.prototype, "scanner", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.multiInject)(plugin_protocol_1.MetadataProcessor),
    __metadata("design:type", Array)
], HostedPluginReader.prototype, "metadataProcessors", void 0);
HostedPluginReader = __decorate([
    (0, inversify_1.injectable)()
], HostedPluginReader);
exports.HostedPluginReader = HostedPluginReader;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/plugin-service.js":
/*!*******************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/plugin-service.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostedPluginServerImpl = void 0;
// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const hosted_plugin_1 = __webpack_require__(/*! ./hosted-plugin */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const plugin_ext_api_contribution_1 = __webpack_require__(/*! ../../common/plugin-ext-api-contribution */ "../../packages/plugin-ext/lib/common/plugin-ext-api-contribution.js");
const hosted_plugin_deployer_handler_1 = __webpack_require__(/*! ./hosted-plugin-deployer-handler */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-deployer-handler.js");
const plugin_deployer_impl_1 = __webpack_require__(/*! ../../main/node/plugin-deployer-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js");
const hosted_plugin_localization_service_1 = __webpack_require__(/*! ./hosted-plugin-localization-service */ "../../packages/plugin-ext/lib/hosted/node/hosted-plugin-localization-service.js");
const plugin_uninstallation_manager_1 = __webpack_require__(/*! ../../main/node/plugin-uninstallation-manager */ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js");
let HostedPluginServerImpl = class HostedPluginServerImpl {
    constructor(hostedPlugin) {
        this.hostedPlugin = hostedPlugin;
        this.toDispose = new core_1.DisposableCollection();
        this.pluginVersions = new Map();
    }
    // We ignore any plugins that are marked as uninstalled the first time the frontend requests information about deployed plugins.
    get ignoredPlugins() {
        if (!this._ignoredPlugins) {
            this._ignoredPlugins = new Set(this.uninstallationManager.getUninstalledPluginIds());
        }
        return this._ignoredPlugins;
    }
    init() {
        this.toDispose.pushAll([
            this.pluginDeployer.onDidDeploy(() => { var _a; return (_a = this.client) === null || _a === void 0 ? void 0 : _a.onDidDeploy(); }),
            this.uninstallationManager.onDidChangeUninstalledPlugins(currentUninstalled => {
                var _a;
                if (this._ignoredPlugins) {
                    const uninstalled = new Set(currentUninstalled);
                    for (const previouslyUninstalled of this._ignoredPlugins) {
                        if (!uninstalled.has(previouslyUninstalled)) {
                            this._ignoredPlugins.delete(previouslyUninstalled);
                        }
                    }
                }
                (_a = this.client) === null || _a === void 0 ? void 0 : _a.onDidDeploy();
            }),
            core_1.Disposable.create(() => this.hostedPlugin.clientClosed()),
        ]);
    }
    dispose() {
        this.toDispose.dispose();
    }
    setClient(client) {
        this.client = client;
        this.hostedPlugin.setClient(client);
    }
    async getDeployedPluginIds() {
        const backendMetadata = await this.deployerHandler.getDeployedBackendPluginIds();
        if (backendMetadata.length > 0) {
            this.hostedPlugin.runPluginServer();
        }
        const plugins = new Set();
        const addIds = async (identifiers) => {
            for (const pluginId of identifiers) {
                if (this.isRelevantPlugin(pluginId)) {
                    plugins.add(pluginId);
                }
            }
        };
        addIds(await this.deployerHandler.getDeployedFrontendPluginIds());
        addIds(backendMetadata);
        addIds(await this.hostedPlugin.getExtraDeployedPluginIds());
        return Array.from(plugins);
    }
    /**
     * Ensures that the plugin was not uninstalled when this session was started
     * and that it matches the first version of the given plugin seen by this session.
     *
     * The deployment system may have multiple versions of the same plugin available, but
     * a single session should only ever activate one of them.
     */
    isRelevantPlugin(identifier) {
        const versionAndId = plugin_protocol_1.PluginIdentifiers.idAndVersionFromVersionedId(identifier);
        if (!versionAndId) {
            return false;
        }
        const knownVersion = this.pluginVersions.get(versionAndId.id);
        if (knownVersion !== undefined && knownVersion !== versionAndId.version) {
            return false;
        }
        if (this.ignoredPlugins.has(identifier)) {
            return false;
        }
        if (knownVersion === undefined) {
            this.pluginVersions.set(versionAndId.id, versionAndId.version);
        }
        return true;
    }
    getUninstalledPluginIds() {
        return Promise.resolve(this.uninstallationManager.getUninstalledPluginIds());
    }
    async getDeployedPlugins({ pluginIds }) {
        if (!pluginIds.length) {
            return [];
        }
        const plugins = [];
        let extraDeployedPlugins;
        for (const versionedId of pluginIds) {
            if (!this.isRelevantPlugin(versionedId)) {
                continue;
            }
            let plugin = this.deployerHandler.getDeployedPlugin(versionedId);
            if (!plugin) {
                if (!extraDeployedPlugins) {
                    extraDeployedPlugins = new Map();
                    for (const extraDeployedPlugin of await this.hostedPlugin.getExtraDeployedPlugins()) {
                        extraDeployedPlugins.set(plugin_protocol_1.PluginIdentifiers.componentsToVersionedId(extraDeployedPlugin.metadata.model), extraDeployedPlugin);
                    }
                }
                plugin = extraDeployedPlugins.get(versionedId);
            }
            if (plugin) {
                plugins.push(plugin);
            }
        }
        return Promise.all(plugins.map(plugin => this.localizationService.localizePlugin(plugin)));
    }
    onMessage(pluginHostId, message) {
        this.hostedPlugin.onMessage(pluginHostId, message);
        return Promise.resolve();
    }
    getExtPluginAPI() {
        return Promise.resolve(this.extPluginAPIContributions.getContributions().map(p => p.provideApi()));
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], HostedPluginServerImpl.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler),
    __metadata("design:type", hosted_plugin_deployer_handler_1.HostedPluginDeployerHandler)
], HostedPluginServerImpl.prototype, "deployerHandler", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployer),
    __metadata("design:type", plugin_deployer_impl_1.PluginDeployerImpl)
], HostedPluginServerImpl.prototype, "pluginDeployer", void 0);
__decorate([
    (0, inversify_1.inject)(hosted_plugin_localization_service_1.HostedPluginLocalizationService),
    __metadata("design:type", hosted_plugin_localization_service_1.HostedPluginLocalizationService)
], HostedPluginServerImpl.prototype, "localizationService", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(Symbol.for(plugin_ext_api_contribution_1.ExtPluginApiProvider)),
    __metadata("design:type", Object)
], HostedPluginServerImpl.prototype, "extPluginAPIContributions", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_uninstallation_manager_1.PluginUninstallationManager),
    __metadata("design:type", plugin_uninstallation_manager_1.PluginUninstallationManager)
], HostedPluginServerImpl.prototype, "uninstallationManager", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HostedPluginServerImpl.prototype, "init", null);
HostedPluginServerImpl = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(hosted_plugin_1.HostedPluginSupport)),
    __metadata("design:paramtypes", [hosted_plugin_1.HostedPluginSupport])
], HostedPluginServerImpl);
exports.HostedPluginServerImpl = HostedPluginServerImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/scanners/file-plugin-uri-factory.js":
/*!*************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/scanners/file-plugin-uri-factory.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilePluginUriFactory = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const path = __webpack_require__(/*! path */ "path");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
/**
 * The default implementation of PluginUriFactory simply returns a File URI from the concatenated
 * package path and relative path.
 */
let FilePluginUriFactory = class FilePluginUriFactory {
    createUri(pkg, pkgRelativePath) {
        return file_uri_1.FileUri.create(pkgRelativePath ? path.join(pkg.packagePath, pkgRelativePath) : pkg.packagePath);
    }
};
FilePluginUriFactory = __decorate([
    (0, inversify_1.injectable)()
], FilePluginUriFactory);
exports.FilePluginUriFactory = FilePluginUriFactory;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/scanners/grammars-reader.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/scanners/grammars-reader.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2015-2018 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GrammarsReader = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
let GrammarsReader = class GrammarsReader {
    async readGrammars(rawGrammars, pluginPath) {
        const result = new Array();
        for (const rawGrammar of rawGrammars) {
            const grammar = await this.readGrammar(rawGrammar, pluginPath);
            if (grammar) {
                result.push(grammar);
            }
        }
        return result;
    }
    async readGrammar(rawGrammar, pluginPath) {
        // TODO: validate inputs
        let grammar;
        if (rawGrammar.path.endsWith('json')) {
            grammar = await fs.readJSON(path.resolve(pluginPath, rawGrammar.path));
        }
        else {
            grammar = await fs.readFile(path.resolve(pluginPath, rawGrammar.path), 'utf8');
        }
        return {
            language: rawGrammar.language,
            scope: rawGrammar.scopeName,
            format: rawGrammar.path.endsWith('json') ? 'json' : 'plist',
            grammar: grammar,
            grammarLocation: rawGrammar.path,
            injectTo: rawGrammar.injectTo,
            embeddedLanguages: rawGrammar.embeddedLanguages,
            tokenTypes: rawGrammar.tokenTypes
        };
    }
};
GrammarsReader = __decorate([
    (0, inversify_1.injectable)()
], GrammarsReader);
exports.GrammarsReader = GrammarsReader;


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/scanners/plugin-uri-factory.js":
/*!********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/scanners/plugin-uri-factory.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginUriFactory = void 0;
exports.PluginUriFactory = Symbol('PluginUriFactory');


/***/ }),

/***/ "../../packages/plugin-ext/lib/hosted/node/scanners/scanner-theia.js":
/*!***************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/hosted/node/scanners/scanner-theia.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2015-2021 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaPluginScanner = void 0;
/* eslint-disable @theia/localization-check */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const types_1 = __webpack_require__(/*! @theia/core/lib/common/types */ "../../packages/core/lib/common/types.js");
const grammars_reader_1 = __webpack_require__(/*! ./grammars-reader */ "../../packages/plugin-ext/lib/hosted/node/scanners/grammars-reader.js");
const errors_1 = __webpack_require__(/*! ../../../common/errors */ "../../packages/plugin-ext/lib/common/errors.js");
const jsoncparser = __webpack_require__(/*! jsonc-parser */ "../../node_modules/jsonc-parser/lib/esm/main.js");
const objects_1 = __webpack_require__(/*! @theia/core/lib/common/objects */ "../../packages/core/lib/common/objects.js");
const preference_schema_1 = __webpack_require__(/*! @theia/core/lib/common/preferences/preference-schema */ "../../packages/core/lib/common/preferences/preference-schema.js");
const plugin_uri_factory_1 = __webpack_require__(/*! ./plugin-uri-factory */ "../../packages/plugin-ext/lib/hosted/node/scanners/plugin-uri-factory.js");
var nls;
(function (nls) {
    function localize(key, _default) {
        return _default;
    }
    nls.localize = localize;
})(nls || (nls = {}));
const INTERNAL_CONSOLE_OPTIONS_SCHEMA = {
    enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],
    default: 'openOnFirstSessionStart',
    description: nls.localize('internalConsoleOptions', 'Controls when the internal debug console should open.')
};
const colorIdPattern = '^\\w+[.\\w+]*$';
let TheiaPluginScanner = class TheiaPluginScanner {
    constructor() {
        this._apiType = 'theiaPlugin';
    }
    get apiType() {
        return this._apiType;
    }
    getModel(plugin) {
        var _a;
        const publisher = (_a = plugin.publisher) !== null && _a !== void 0 ? _a : plugin_protocol_1.PluginIdentifiers.UNPUBLISHED;
        const result = {
            packagePath: plugin.packagePath,
            packageUri: this.pluginUriFactory.createUri(plugin).toString(),
            // see id definition: https://github.com/microsoft/vscode/blob/15916055fe0cb9411a5f36119b3b012458fe0a1d/src/vs/platform/extensions/common/extensions.ts#L167-L169
            id: `${publisher.toLowerCase()}.${plugin.name.toLowerCase()}`,
            name: plugin.name,
            publisher,
            version: plugin.version,
            displayName: plugin.displayName,
            description: plugin.description,
            l10n: plugin.l10n,
            engine: {
                type: this._apiType,
                version: plugin.engines[this._apiType]
            },
            entryPoint: {
                frontend: plugin.theiaPlugin.frontend,
                backend: plugin.theiaPlugin.backend
            }
        };
        return result;
    }
    getLifecycle(plugin) {
        return {
            startMethod: 'start',
            stopMethod: 'stop',
            frontendModuleName: (0, plugin_protocol_1.buildFrontendModuleName)(plugin),
            backendInitPath: path.join(__dirname, 'backend-init-theia')
        };
    }
    getDependencies(rawPlugin) {
        // skip it since there is no way to load transitive dependencies for Theia plugins yet
        return undefined;
    }
    async getContribution(rawPlugin) {
        if (!rawPlugin.contributes && !rawPlugin.activationEvents) {
            return undefined;
        }
        const contributions = {
            activationEvents: rawPlugin.activationEvents
        };
        if (!rawPlugin.contributes) {
            return contributions;
        }
        try {
            if (rawPlugin.contributes.configuration) {
                const configurations = Array.isArray(rawPlugin.contributes.configuration) ? rawPlugin.contributes.configuration : [rawPlugin.contributes.configuration];
                contributions.configuration = [];
                for (const c of configurations) {
                    const config = this.readConfiguration(c, rawPlugin.packagePath);
                    if (config) {
                        contributions.configuration.push(config);
                    }
                }
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'configuration'.`, rawPlugin.contributes.configuration, err);
        }
        const configurationDefaults = rawPlugin.contributes.configurationDefaults;
        contributions.configurationDefaults = preference_schema_1.PreferenceSchemaProperties.is(configurationDefaults) ? configurationDefaults : undefined;
        try {
            if (rawPlugin.contributes.submenus) {
                contributions.submenus = this.readSubmenus(rawPlugin.contributes.submenus, rawPlugin);
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'submenus'.`, rawPlugin.contributes.submenus, err);
        }
        try {
            if (rawPlugin.contributes.customEditors) {
                const customEditors = this.readCustomEditors(rawPlugin.contributes.customEditors);
                contributions.customEditors = customEditors;
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'customEditors'.`, rawPlugin.contributes.customEditors, err);
        }
        try {
            if (rawPlugin.contributes.viewsContainers) {
                const viewsContainers = rawPlugin.contributes.viewsContainers;
                contributions.viewsContainers = {};
                for (const location of Object.keys(viewsContainers)) {
                    const containers = this.readViewsContainers(viewsContainers[location], rawPlugin);
                    const loc = location === 'activitybar' ? 'left' : location === 'panel' ? 'bottom' : location;
                    if (contributions.viewsContainers[loc]) {
                        contributions.viewsContainers[loc] = contributions.viewsContainers[loc].concat(containers);
                    }
                    else {
                        contributions.viewsContainers[loc] = containers;
                    }
                }
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'viewsContainers'.`, rawPlugin.contributes.viewsContainers, err);
        }
        try {
            if (rawPlugin.contributes.views) {
                contributions.views = {};
                for (const location of Object.keys(rawPlugin.contributes.views)) {
                    const views = this.readViews(rawPlugin.contributes.views[location]);
                    contributions.views[location] = views;
                }
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'views'.`, rawPlugin.contributes.views, err);
        }
        try {
            if (rawPlugin.contributes.viewsWelcome) {
                contributions.viewsWelcome = this.readViewsWelcome(rawPlugin.contributes.viewsWelcome, rawPlugin.contributes.views);
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'viewsWelcome'.`, rawPlugin.contributes.viewsWelcome, err);
        }
        try {
            const pluginCommands = rawPlugin.contributes.commands;
            if (pluginCommands) {
                const commands = Array.isArray(pluginCommands) ? pluginCommands : [pluginCommands];
                contributions.commands = commands.map(command => this.readCommand(command, rawPlugin));
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'commands'.`, rawPlugin.contributes.commands, err);
        }
        try {
            if (rawPlugin.contributes.menus) {
                contributions.menus = {};
                for (const location of Object.keys(rawPlugin.contributes.menus)) {
                    const menus = this.readMenus(rawPlugin.contributes.menus[location]);
                    contributions.menus[location] = menus;
                }
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'menus'.`, rawPlugin.contributes.menus, err);
        }
        try {
            if (rawPlugin.contributes.keybindings) {
                const rawKeybindings = Array.isArray(rawPlugin.contributes.keybindings) ? rawPlugin.contributes.keybindings : [rawPlugin.contributes.keybindings];
                contributions.keybindings = rawKeybindings.map(rawKeybinding => this.readKeybinding(rawKeybinding));
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'keybindings'.`, rawPlugin.contributes.keybindings, err);
        }
        try {
            if (rawPlugin.contributes.debuggers) {
                const debuggers = this.readDebuggers(rawPlugin.contributes.debuggers);
                contributions.debuggers = debuggers;
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'debuggers'.`, rawPlugin.contributes.debuggers, err);
        }
        try {
            if (rawPlugin.contributes.taskDefinitions) {
                const definitions = rawPlugin.contributes.taskDefinitions;
                contributions.taskDefinitions = definitions.map(definitionContribution => this.readTaskDefinition(rawPlugin.name, definitionContribution));
            }
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'taskDefinitions'.`, rawPlugin.contributes.taskDefinitions, err);
        }
        try {
            contributions.problemMatchers = rawPlugin.contributes.problemMatchers;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'problemMatchers'.`, rawPlugin.contributes.problemMatchers, err);
        }
        try {
            contributions.problemPatterns = rawPlugin.contributes.problemPatterns;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'problemPatterns'.`, rawPlugin.contributes.problemPatterns, err);
        }
        try {
            contributions.resourceLabelFormatters = rawPlugin.contributes.resourceLabelFormatters;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'resourceLabelFormatters'.`, rawPlugin.contributes.resourceLabelFormatters, err);
        }
        try {
            contributions.authentication = rawPlugin.contributes.authentication;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'authentication'.`, rawPlugin.contributes.authentication, err);
        }
        try {
            contributions.notebooks = rawPlugin.contributes.notebooks;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'notebooks'.`, rawPlugin.contributes.authentication, err);
        }
        try {
            contributions.notebookRenderer = rawPlugin.contributes.notebookRenderer;
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'notebooks'.`, rawPlugin.contributes.authentication, err);
        }
        try {
            contributions.snippets = this.readSnippets(rawPlugin);
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'snippets'.`, rawPlugin.contributes.snippets, err);
        }
        try {
            contributions.themes = this.readThemes(rawPlugin);
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'themes'.`, rawPlugin.contributes.themes, err);
        }
        try {
            contributions.iconThemes = this.readIconThemes(rawPlugin);
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'iconThemes'.`, rawPlugin.contributes.iconThemes, err);
        }
        try {
            contributions.colors = this.readColors(rawPlugin);
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'colors'.`, rawPlugin.contributes.colors, err);
        }
        try {
            contributions.terminalProfiles = this.readTerminals(rawPlugin);
        }
        catch (err) {
            console.error(`Could not read '${rawPlugin.name}' contribution 'terminals'.`, rawPlugin.contributes.terminal, err);
        }
        const [localizationsResult, languagesResult, grammarsResult] = await Promise.allSettled([
            this.readLocalizations(rawPlugin),
            rawPlugin.contributes.languages ? this.readLanguages(rawPlugin.contributes.languages, rawPlugin.packagePath) : undefined,
            rawPlugin.contributes.grammars ? this.grammarsReader.readGrammars(rawPlugin.contributes.grammars, rawPlugin.packagePath) : undefined
        ]);
        if (localizationsResult.status === 'fulfilled') {
            contributions.localizations = localizationsResult.value;
        }
        else {
            console.error(`Could not read '${rawPlugin.name}' contribution 'localizations'.`, rawPlugin.contributes.localizations, localizationsResult.reason);
        }
        if (rawPlugin.contributes.languages) {
            if (languagesResult.status === 'fulfilled') {
                contributions.languages = languagesResult.value;
            }
            else {
                console.error(`Could not read '${rawPlugin.name}' contribution 'languages'.`, rawPlugin.contributes.languages, languagesResult.reason);
            }
        }
        if (rawPlugin.contributes.grammars) {
            if (grammarsResult.status === 'fulfilled') {
                contributions.grammars = grammarsResult.value;
            }
            else {
                console.error(`Could not read '${rawPlugin.name}' contribution 'grammars'.`, rawPlugin.contributes.grammars, grammarsResult.reason);
            }
        }
        return contributions;
    }
    readTerminals(pck) {
        var _a, _b;
        if (!((_b = (_a = pck === null || pck === void 0 ? void 0 : pck.contributes) === null || _a === void 0 ? void 0 : _a.terminal) === null || _b === void 0 ? void 0 : _b.profiles)) {
            return undefined;
        }
        return pck.contributes.terminal.profiles.filter(profile => profile.id && profile.title);
    }
    async readLocalizations(pck) {
        if (!pck.contributes || !pck.contributes.localizations) {
            return undefined;
        }
        return Promise.all(pck.contributes.localizations.map(e => this.readLocalization(e, pck.packagePath)));
    }
    async readLocalization({ languageId, languageName, localizedLanguageName, translations }, pluginPath) {
        const local = {
            languageId,
            languageName,
            localizedLanguageName,
            translations: []
        };
        local.translations = await Promise.all(translations.map(e => this.readTranslation(e, pluginPath)));
        return local;
    }
    async readTranslation(packageTranslation, pluginPath) {
        const translation = await this.readJson(path.resolve(pluginPath, packageTranslation.path));
        if (!translation) {
            throw new Error(`Could not read json file '${packageTranslation.path}'.`);
        }
        translation.id = packageTranslation.id;
        translation.path = packageTranslation.path;
        return translation;
    }
    readCommand({ command, title, original, category, icon, enablement }, pck) {
        var _a;
        const { themeIcon, iconUrl } = (_a = this.transformIconUrl(pck, icon)) !== null && _a !== void 0 ? _a : {};
        return { command, title, originalTitle: original, category, iconUrl, themeIcon, enablement };
    }
    transformIconUrl(plugin, original) {
        if (original) {
            if (typeof original === 'string') {
                if (original.startsWith('$(')) {
                    return { themeIcon: original };
                }
                else {
                    return { iconUrl: this.toPluginUrl(plugin, original) };
                }
            }
            else {
                return {
                    iconUrl: {
                        light: this.toPluginUrl(plugin, original.light),
                        dark: this.toPluginUrl(plugin, original.dark)
                    }
                };
            }
        }
    }
    toPluginUrl(pck, relativePath) {
        return plugin_protocol_1.PluginPackage.toPluginUrl(pck, relativePath);
    }
    readColors(pck) {
        if (!pck.contributes || !pck.contributes.colors) {
            return undefined;
        }
        const result = [];
        for (const contribution of pck.contributes.colors) {
            if (typeof contribution.id !== 'string' || contribution.id.length === 0) {
                console.error("'configuration.colors.id' must be defined and can not be empty");
                continue;
            }
            if (!contribution.id.match(colorIdPattern)) {
                console.error("'configuration.colors.id' must follow the word[.word]*");
                continue;
            }
            if (typeof contribution.description !== 'string' || contribution.id.length === 0) {
                console.error("'configuration.colors.description' must be defined and can not be empty");
                continue;
            }
            const defaults = contribution.defaults;
            if (!defaults || typeof defaults !== 'object' || typeof defaults.light !== 'string' || typeof defaults.dark !== 'string' || typeof defaults.highContrast !== 'string') {
                console.error("'configuration.colors.defaults' must be defined and must contain 'light', 'dark' and 'highContrast'");
                continue;
            }
            result.push({
                id: contribution.id,
                description: contribution.description,
                defaults: {
                    light: defaults.light,
                    dark: defaults.dark,
                    hc: defaults.highContrast
                }
            });
        }
        return result;
    }
    readThemes(pck) {
        if (!pck.contributes || !pck.contributes.themes) {
            return undefined;
        }
        const result = [];
        for (const contribution of pck.contributes.themes) {
            if (contribution.path) {
                result.push({
                    id: contribution.id,
                    uri: this.pluginUriFactory.createUri(pck, contribution.path).toString(),
                    description: contribution.description,
                    label: contribution.label,
                    uiTheme: contribution.uiTheme
                });
            }
        }
        return result;
    }
    readIconThemes(pck) {
        if (!pck.contributes || !pck.contributes.iconThemes) {
            return undefined;
        }
        const result = [];
        for (const contribution of pck.contributes.iconThemes) {
            if (typeof contribution.id !== 'string') {
                console.error('Expected string in `contributes.iconThemes.id`. Provided value:', contribution.id);
                continue;
            }
            if (typeof contribution.path !== 'string') {
                console.error('Expected string in `contributes.iconThemes.path`. Provided value:', contribution.path);
                continue;
            }
            result.push({
                id: contribution.id,
                uri: this.pluginUriFactory.createUri(pck, contribution.path).toString(),
                description: contribution.description,
                label: contribution.label,
                uiTheme: contribution.uiTheme
            });
        }
        return result;
    }
    readSnippets(pck) {
        if (!pck.contributes || !pck.contributes.snippets) {
            return undefined;
        }
        const result = [];
        for (const contribution of pck.contributes.snippets) {
            if (contribution.path) {
                result.push({
                    language: contribution.language,
                    source: pck.displayName || pck.name,
                    uri: this.pluginUriFactory.createUri(pck, contribution.path).toString()
                });
            }
        }
        return result;
    }
    async readJson(filePath) {
        const content = await this.readFile(filePath);
        return content ? jsoncparser.parse(content, undefined, { disallowComments: false }) : undefined;
    }
    async readFile(filePath) {
        try {
            const content = await fs_1.promises.readFile(filePath, { encoding: 'utf8' });
            return content;
        }
        catch (e) {
            if (!(0, errors_1.isENOENT)(e)) {
                console.error(e);
            }
            return '';
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    readConfiguration(rawConfiguration, pluginPath) {
        return preference_schema_1.PreferenceSchema.is(rawConfiguration) ? rawConfiguration : undefined;
    }
    readKeybinding(rawKeybinding) {
        return {
            keybinding: rawKeybinding.key,
            command: rawKeybinding.command,
            when: rawKeybinding.when,
            mac: rawKeybinding.mac,
            linux: rawKeybinding.linux,
            win: rawKeybinding.win,
            args: rawKeybinding.args
        };
    }
    readCustomEditors(rawCustomEditors) {
        return rawCustomEditors.map(rawCustomEditor => this.readCustomEditor(rawCustomEditor));
    }
    readCustomEditor(rawCustomEditor) {
        return {
            viewType: rawCustomEditor.viewType,
            displayName: rawCustomEditor.displayName,
            selector: rawCustomEditor.selector || [],
            priority: rawCustomEditor.priority || plugin_protocol_1.CustomEditorPriority.default
        };
    }
    readViewsContainers(rawViewsContainers, pck) {
        return rawViewsContainers.map(rawViewContainer => this.readViewContainer(rawViewContainer, pck));
    }
    readViewContainer(rawViewContainer, pck) {
        const themeIcon = rawViewContainer.icon.startsWith('$(') ? rawViewContainer.icon : undefined;
        const iconUrl = this.toPluginUrl(pck, rawViewContainer.icon);
        return {
            id: rawViewContainer.id,
            title: rawViewContainer.title,
            iconUrl,
            themeIcon,
        };
    }
    readViews(rawViews) {
        return rawViews.map(rawView => this.readView(rawView));
    }
    readView(rawView) {
        const result = {
            id: rawView.id,
            name: rawView.name,
            when: rawView.when,
            type: rawView.type
        };
        return result;
    }
    readViewsWelcome(rawViewsWelcome, rowViews) {
        return rawViewsWelcome.map(rawViewWelcome => this.readViewWelcome(rawViewWelcome, this.extractPluginViewsIds(rowViews)));
    }
    readViewWelcome(rawViewWelcome, pluginViewsIds) {
        const result = {
            view: rawViewWelcome.view,
            content: rawViewWelcome.contents,
            when: rawViewWelcome.when,
            // if the plugin contributes Welcome view to its own view - it will be ordered first
            order: pluginViewsIds.findIndex(v => v === rawViewWelcome.view) > -1 ? 0 : 1
        };
        return result;
    }
    extractPluginViewsIds(views) {
        const pluginViewsIds = [];
        if (views) {
            for (const location of Object.keys(views)) {
                const viewsIds = views[location].map(view => view.id);
                pluginViewsIds.push(...viewsIds);
            }
            ;
        }
        return pluginViewsIds;
    }
    readMenus(rawMenus) {
        return rawMenus.map(rawMenu => this.readMenu(rawMenu));
    }
    readMenu(rawMenu) {
        const result = {
            command: rawMenu.command,
            submenu: rawMenu.submenu,
            alt: rawMenu.alt,
            group: rawMenu.group,
            when: rawMenu.when
        };
        return result;
    }
    async readLanguages(rawLanguages, pluginPath) {
        return Promise.all(rawLanguages.map(language => this.readLanguage(language, pluginPath)));
    }
    readSubmenus(rawSubmenus, plugin) {
        return rawSubmenus.map(submenu => this.readSubmenu(submenu, plugin));
    }
    readSubmenu(rawSubmenu, plugin) {
        var _a;
        const icon = this.transformIconUrl(plugin, rawSubmenu.icon);
        return {
            icon: (_a = icon === null || icon === void 0 ? void 0 : icon.iconUrl) !== null && _a !== void 0 ? _a : icon === null || icon === void 0 ? void 0 : icon.themeIcon,
            id: rawSubmenu.id,
            label: rawSubmenu.label
        };
    }
    async readLanguage(rawLang, pluginPath) {
        // TODO: add validation to all parameters
        const result = {
            id: rawLang.id,
            aliases: rawLang.aliases,
            extensions: rawLang.extensions,
            filenamePatterns: rawLang.filenamePatterns,
            filenames: rawLang.filenames,
            firstLine: rawLang.firstLine,
            mimetypes: rawLang.mimetypes
        };
        if (rawLang.configuration) {
            const rawConfiguration = await this.readJson(path.resolve(pluginPath, rawLang.configuration));
            if (rawConfiguration) {
                const configuration = {
                    brackets: rawConfiguration.brackets,
                    comments: rawConfiguration.comments,
                    folding: rawConfiguration.folding,
                    wordPattern: rawConfiguration.wordPattern,
                    autoClosingPairs: this.extractValidAutoClosingPairs(rawLang.id, rawConfiguration),
                    indentationRules: rawConfiguration.indentationRules,
                    surroundingPairs: this.extractValidSurroundingPairs(rawLang.id, rawConfiguration),
                    onEnterRules: rawConfiguration.onEnterRules,
                };
                result.configuration = configuration;
            }
        }
        return result;
    }
    readDebuggers(rawDebuggers) {
        return rawDebuggers.map(rawDebug => this.readDebugger(rawDebug));
    }
    readDebugger(rawDebugger) {
        const result = {
            type: rawDebugger.type,
            label: rawDebugger.label,
            languages: rawDebugger.languages,
            enableBreakpointsFor: rawDebugger.enableBreakpointsFor,
            variables: rawDebugger.variables,
            adapterExecutableCommand: rawDebugger.adapterExecutableCommand,
            configurationSnippets: rawDebugger.configurationSnippets,
            win: rawDebugger.win,
            winx86: rawDebugger.winx86,
            windows: rawDebugger.windows,
            osx: rawDebugger.osx,
            linux: rawDebugger.linux,
            program: rawDebugger.program,
            args: rawDebugger.args,
            runtime: rawDebugger.runtime,
            runtimeArgs: rawDebugger.runtimeArgs
        };
        result.configurationAttributes = rawDebugger.configurationAttributes
            && this.resolveSchemaAttributes(rawDebugger.type, rawDebugger.configurationAttributes);
        return result;
    }
    readTaskDefinition(pluginName, definitionContribution) {
        const propertyKeys = definitionContribution.properties ? Object.keys(definitionContribution.properties) : [];
        const schema = this.toSchema(definitionContribution);
        return {
            taskType: definitionContribution.type,
            source: pluginName,
            properties: {
                required: definitionContribution.required || [],
                all: propertyKeys,
                schema
            }
        };
    }
    toSchema(definition) {
        const reconciliation = { ...definition, type: 'object' };
        const schema = (0, objects_1.deepClone)(reconciliation);
        if (schema.properties === undefined) {
            schema.properties = Object.create(null);
        }
        schema.type = 'object';
        schema.properties.type = { type: 'string', const: definition.type };
        return schema;
    }
    resolveSchemaAttributes(type, configurationAttributes) {
        const taskSchema = {};
        return Object.keys(configurationAttributes).map(request => {
            const attributes = (0, objects_1.deepClone)(configurationAttributes[request]);
            const defaultRequired = ['name', 'type', 'request'];
            attributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;
            attributes.additionalProperties = false;
            attributes.type = 'object';
            if (!attributes.properties) {
                attributes.properties = {};
            }
            const properties = attributes.properties;
            properties['type'] = {
                enum: [type],
                description: nls.localize('debugType', 'Type of configuration.'),
                pattern: '^(?!node2)',
                errorMessage: nls.localize('debugTypeNotRecognised', 'The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.'),
                patternErrorMessage: nls.localize('node2NotSupported', '"node2" is no longer supported, use "node" instead and set the "protocol" attribute to "inspector".')
            };
            properties['name'] = {
                type: 'string',
                description: nls.localize('debugName', 'Name of configuration; appears in the launch configuration drop down menu.'),
                default: 'Launch'
            };
            properties['request'] = {
                enum: [request],
                description: nls.localize('debugRequest', 'Request type of configuration. Can be "launch" or "attach".'),
            };
            properties['debugServer'] = {
                type: 'number',
                description: nls.localize('debugServer', 'For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode'),
                default: 4711
            };
            properties['preLaunchTask'] = {
                anyOf: [taskSchema, {
                        type: ['string'],
                    }],
                default: '',
                description: nls.localize('debugPrelaunchTask', 'Task to run before debug session starts.')
            };
            properties['postDebugTask'] = {
                anyOf: [taskSchema, {
                        type: ['string'],
                    }],
                default: '',
                description: nls.localize('debugPostDebugTask', 'Task to run after debug session ends.')
            };
            properties['internalConsoleOptions'] = INTERNAL_CONSOLE_OPTIONS_SCHEMA;
            const osProperties = Object.assign({}, properties);
            properties['windows'] = {
                type: 'object',
                description: nls.localize('debugWindowsConfiguration', 'Windows specific launch configuration attributes.'),
                properties: osProperties
            };
            properties['osx'] = {
                type: 'object',
                description: nls.localize('debugOSXConfiguration', 'OS X specific launch configuration attributes.'),
                properties: osProperties
            };
            properties['linux'] = {
                type: 'object',
                description: nls.localize('debugLinuxConfiguration', 'Linux specific launch configuration attributes.'),
                properties: osProperties
            };
            Object.keys(attributes.properties).forEach(name => {
                // Use schema allOf property to get independent error reporting #21113
                attributes.properties[name].pattern = attributes.properties[name].pattern || '^(?!.*\\$\\{(env|config|command)\\.)';
                attributes.properties[name].patternErrorMessage = attributes.properties[name].patternErrorMessage ||
                    nls.localize('deprecatedVariables', "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead.");
            });
            return attributes;
        });
    }
    extractValidAutoClosingPairs(langId, configuration) {
        const source = configuration.autoClosingPairs;
        if (typeof source === 'undefined') {
            return undefined;
        }
        if (!Array.isArray(source)) {
            console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs\` to be an array.`);
            return undefined;
        }
        let result = undefined;
        for (let i = 0, len = source.length; i < len; i++) {
            const pair = source[i];
            if (Array.isArray(pair)) {
                if (!isCharacterPair(pair)) {
                    console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs[${i}]\` to be an array of two strings or an object.`);
                    continue;
                }
                result = result || [];
                result.push({ open: pair[0], close: pair[1] });
            }
            else {
                if (!(0, types_1.isObject)(pair)) {
                    console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs[${i}]\` to be an array of two strings or an object.`);
                    continue;
                }
                if (typeof pair.open !== 'string') {
                    console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs[${i}].open\` to be a string.`);
                    continue;
                }
                if (typeof pair.close !== 'string') {
                    console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs[${i}].close\` to be a string.`);
                    continue;
                }
                if (typeof pair.notIn !== 'undefined') {
                    if (!(0, types_1.isStringArray)(pair.notIn)) {
                        console.warn(`[${langId}]: language configuration: expected \`autoClosingPairs[${i}].notIn\` to be a string array.`);
                        continue;
                    }
                }
                result = result || [];
                result.push({ open: pair.open, close: pair.close, notIn: pair.notIn });
            }
        }
        return result;
    }
    extractValidSurroundingPairs(langId, configuration) {
        const source = configuration.surroundingPairs;
        if (typeof source === 'undefined') {
            return undefined;
        }
        if (!Array.isArray(source)) {
            console.warn(`[${langId}]: language configuration: expected \`surroundingPairs\` to be an array.`);
            return undefined;
        }
        let result = undefined;
        for (let i = 0, len = source.length; i < len; i++) {
            const pair = source[i];
            if (Array.isArray(pair)) {
                if (!isCharacterPair(pair)) {
                    console.warn(`[${langId}]: language configuration: expected \`surroundingPairs[${i}]\` to be an array of two strings or an object.`);
                    continue;
                }
                result = result || [];
                result.push({ open: pair[0], close: pair[1] });
            }
            else {
                if (!(0, types_1.isObject)(pair)) {
                    console.warn(`[${langId}]: language configuration: expected \`surroundingPairs[${i}]\` to be an array of two strings or an object.`);
                    continue;
                }
                if (typeof pair.open !== 'string') {
                    console.warn(`[${langId}]: language configuration: expected \`surroundingPairs[${i}].open\` to be a string.`);
                    continue;
                }
                if (typeof pair.close !== 'string') {
                    console.warn(`[${langId}]: language configuration: expected \`surroundingPairs[${i}].close\` to be a string.`);
                    continue;
                }
                result = result || [];
                result.push({ open: pair.open, close: pair.close });
            }
        }
        return result;
    }
};
__decorate([
    (0, inversify_1.inject)(grammars_reader_1.GrammarsReader),
    __metadata("design:type", grammars_reader_1.GrammarsReader)
], TheiaPluginScanner.prototype, "grammarsReader", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_uri_factory_1.PluginUriFactory),
    __metadata("design:type", Object)
], TheiaPluginScanner.prototype, "pluginUriFactory", void 0);
TheiaPluginScanner = __decorate([
    (0, inversify_1.injectable)()
], TheiaPluginScanner);
exports.TheiaPluginScanner = TheiaPluginScanner;
function isCharacterPair(something) {
    return ((0, types_1.isStringArray)(something)
        && something.length === 2);
}


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/common/plugin-paths-protocol.js":
/*!**************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/common/plugin-paths-protocol.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginPathsService = exports.pluginPathsServicePath = void 0;
exports.pluginPathsServicePath = '/services/plugin-paths';
// Service to create plugin configuration folders for different purpose.
exports.PluginPathsService = Symbol('PluginPathsService');


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/common/plugin-theia-environment.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/common/plugin-theia-environment.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginTheiaEnvironment = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
let PluginTheiaEnvironment = class PluginTheiaEnvironment {
    async getPluginsDirUri() {
        if (!this._pluginsDirUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._pluginsDirUri = configDir.resolve('plugins');
        }
        return this._pluginsDirUri;
    }
};
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginTheiaEnvironment.prototype, "environments", void 0);
PluginTheiaEnvironment = __decorate([
    (0, inversify_1.injectable)()
], PluginTheiaEnvironment);
exports.PluginTheiaEnvironment = PluginTheiaEnvironment;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/common/webview-protocol.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/common/webview-protocol.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebviewExternalEndpoint = void 0;
/**
 * Each webview should be deployed on a unique origin (https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)
 * to ensure isolation from browser shared state as cookies, local storage and so on.
 *
 * Default hostname pattern of a origin is `{{uuid}}.webview.{{hostname}}`. Where `{{uuid}}` is a placeholder for a webview global id.
 * For electron target the default pattern is always used.
 * For the browser target use `THEIA_WEBVIEW_EXTERNAL_ENDPOINT` env variable to customize it.
 */
var WebviewExternalEndpoint;
(function (WebviewExternalEndpoint) {
    WebviewExternalEndpoint.pattern = 'THEIA_WEBVIEW_EXTERNAL_ENDPOINT';
    WebviewExternalEndpoint.defaultPattern = '{{uuid}}.webview.{{hostname}}';
})(WebviewExternalEndpoint = exports.WebviewExternalEndpoint || (exports.WebviewExternalEndpoint = {}));


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-directory-handler.js":
/*!******************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-directory-handler.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginTheiaDirectoryHandler = void 0;
const path = __webpack_require__(/*! path */ "path");
const filenamify = __webpack_require__(/*! filenamify */ "../../node_modules/filenamify/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_cli_contribution_1 = __webpack_require__(/*! ../plugin-cli-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js");
const temp_dir_util_1 = __webpack_require__(/*! ../temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
let PluginTheiaDirectoryHandler = class PluginTheiaDirectoryHandler {
    constructor() {
        this.deploymentDirectory = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('theia-copied')
            .then(deploymentDirectory => this.deploymentDirectory.resolve(node_1.FileUri.create(deploymentDirectory)));
    }
    async accept(resolvedPlugin) {
        var _a, _b;
        console.debug('PluginTheiaDirectoryHandler: accepting plugin with path', resolvedPlugin.path());
        // handle only directories
        if (await resolvedPlugin.isFile()) {
            return false;
        }
        // is there a package.json ?
        const packageJsonPath = path.resolve(resolvedPlugin.path(), 'package.json');
        try {
            let packageJson = resolvedPlugin.getValue('package.json');
            if (!packageJson) {
                packageJson = await fs.readJSON(packageJsonPath);
                (_a = packageJson.publisher) !== null && _a !== void 0 ? _a : (packageJson.publisher = plugin_protocol_1.PluginIdentifiers.UNPUBLISHED);
                resolvedPlugin.storeValue('package.json', packageJson);
            }
            if ((_b = packageJson === null || packageJson === void 0 ? void 0 : packageJson.engines) === null || _b === void 0 ? void 0 : _b.theiaPlugin) {
                return true;
            }
        }
        catch { /* Failed to read file. Fall through. */ }
        return false;
    }
    async handle(context) {
        await this.copyDirectory(context);
        const types = [];
        const packageJson = context.pluginEntry().getValue('package.json');
        if (packageJson.theiaPlugin && packageJson.theiaPlugin.backend) {
            types.push(plugin_protocol_1.PluginDeployerEntryType.BACKEND);
        }
        if (packageJson.theiaPlugin && packageJson.theiaPlugin.frontend) {
            types.push(plugin_protocol_1.PluginDeployerEntryType.FRONTEND);
        }
        context.pluginEntry().accept(...types);
    }
    async copyDirectory(context) {
        if (this.pluginCli.copyUncompressedPlugins() && context.pluginEntry().type === plugin_protocol_1.PluginType.User) {
            const entry = context.pluginEntry();
            const id = entry.id();
            const pathToRestore = entry.path();
            const origin = entry.originalPath();
            const targetDir = await this.getExtensionDir(context);
            try {
                if (await fs.pathExists(targetDir) || !entry.path().startsWith(origin)) {
                    console.log(`[${id}]: already copied.`);
                }
                else {
                    console.log(`[${id}]: copying to "${targetDir}"`);
                    const deploymentDirectory = await this.deploymentDirectory.promise;
                    await fs.mkdirp(node_1.FileUri.fsPath(deploymentDirectory));
                    await context.copy(origin, targetDir);
                    entry.updatePath(targetDir);
                    if (!this.accept(entry)) {
                        throw new Error('Unable to resolve plugin metadata after copying');
                    }
                }
            }
            catch (e) {
                console.warn(`[${id}]: Error when copying.`, e);
                entry.updatePath(pathToRestore);
            }
        }
    }
    async getExtensionDir(context) {
        const deploymentDirectory = await this.deploymentDirectory.promise;
        return node_1.FileUri.fsPath(deploymentDirectory.resolve(filenamify(context.pluginEntry().id(), { replacement: '_' })));
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_cli_contribution_1.PluginCliContribution),
    __metadata("design:type", plugin_cli_contribution_1.PluginCliContribution)
], PluginTheiaDirectoryHandler.prototype, "pluginCli", void 0);
PluginTheiaDirectoryHandler = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PluginTheiaDirectoryHandler);
exports.PluginTheiaDirectoryHandler = PluginTheiaDirectoryHandler;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-file-handler.js":
/*!*************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-file-handler.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginTheiaFileHandler = void 0;
const plugin_protocol_1 = __webpack_require__(/*! ../../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const temp_dir_util_1 = __webpack_require__(/*! ../temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const filenamify = __webpack_require__(/*! filenamify */ "../../node_modules/filenamify/index.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const plugin_theia_environment_1 = __webpack_require__(/*! ../../common/plugin-theia-environment */ "../../packages/plugin-ext/lib/main/common/plugin-theia-environment.js");
let PluginTheiaFileHandler = class PluginTheiaFileHandler {
    constructor() {
        this.systemPluginsDirUri = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('theia-unpacked')
            .then(systemPluginsDirPath => this.systemPluginsDirUri.resolve(file_uri_1.FileUri.create(systemPluginsDirPath)));
    }
    async accept(resolvedPlugin) {
        if (resolvedPlugin.path() !== null && resolvedPlugin.path().endsWith('.theia')) {
            return resolvedPlugin.isFile();
        }
        return false;
    }
    async handle(context) {
        const id = context.pluginEntry().id();
        const pluginDir = await this.getPluginDir(context);
        console.log(`[${id}]: trying to decompress into "${pluginDir}"...`);
        if (context.pluginEntry().type === plugin_protocol_1.PluginType.User && await fs.pathExists(pluginDir)) {
            console.log(`[${id}]: already found`);
            context.pluginEntry().updatePath(pluginDir);
            return;
        }
        await context.unzip(context.pluginEntry().path(), pluginDir);
        console.log(`[${id}]: decompressed`);
        context.pluginEntry().updatePath(pluginDir);
    }
    async getPluginDir(context) {
        const systemPluginsDirUri = await this.systemPluginsDirUri.promise;
        return file_uri_1.FileUri.fsPath(systemPluginsDirUri.resolve(filenamify(context.pluginEntry().id(), { replacement: '_' })));
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_theia_environment_1.PluginTheiaEnvironment),
    __metadata("design:type", plugin_theia_environment_1.PluginTheiaEnvironment)
], PluginTheiaFileHandler.prototype, "environment", void 0);
PluginTheiaFileHandler = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PluginTheiaFileHandler);
exports.PluginTheiaFileHandler = PluginTheiaFileHandler;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/paths/const.js":
/*!**************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/paths/const.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginPaths = void 0;
var PluginPaths;
(function (PluginPaths) {
    PluginPaths.PLUGINS_LOGS_DIR = 'logs';
    PluginPaths.PLUGINS_GLOBAL_STORAGE_DIR = 'plugin-storage';
    PluginPaths.PLUGINS_WORKSPACE_STORAGE_DIR = 'workspace-storage';
})(PluginPaths = exports.PluginPaths || (exports.PluginPaths = {}));


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/paths/plugin-paths-service.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/paths/plugin-paths-service.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginPathsServiceImpl = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const promises_1 = __webpack_require__(/*! fs/promises */ "fs/promises");
const fs_extra_1 = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const crypto = __webpack_require__(/*! crypto */ "crypto");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const const_1 = __webpack_require__(/*! ./const */ "../../packages/plugin-ext/lib/main/node/paths/const.js");
const common_1 = __webpack_require__(/*! @theia/workspace/lib/common */ "../../packages/workspace/lib/common/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const plugin_cli_contribution_1 = __webpack_require__(/*! ../plugin-cli-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js");
const SESSION_TIMESTAMP_PATTERN = /^\d{8}T\d{6}$/;
// Service to provide configuration paths for plugin api.
let PluginPathsServiceImpl = class PluginPathsServiceImpl {
    async getHostLogPath() {
        const parentLogsDir = await this.getLogsDirPath();
        if (!parentLogsDir) {
            throw new Error('Unable to get parent log directory');
        }
        const pluginDirPath = path.join(parentLogsDir, this.generateTimeFolderName(), 'host');
        await fs.mkdirs(pluginDirPath);
        // no `await` as We should never wait for the cleanup
        this.cleanupOldLogs(parentLogsDir);
        return pluginDirPath;
    }
    async getHostStoragePath(workspaceUri, rootUris) {
        const parentStorageDir = await this.getWorkspaceStorageDirPath();
        if (!parentStorageDir) {
            throw new Error('Unable to get parent storage directory');
        }
        if (!workspaceUri) {
            return undefined;
        }
        await fs.mkdirs(parentStorageDir);
        const storageDirName = await this.buildWorkspaceId(workspaceUri, rootUris);
        const storageDirPath = path.join(parentStorageDir, storageDirName);
        await fs.mkdirs(storageDirPath);
        return storageDirPath;
    }
    async buildWorkspaceId(workspaceUri, rootUris) {
        const configDirUri = await this.envServer.getConfigDirUri();
        const untitledWorkspace = await this.untitledWorkspaceService.getUntitledWorkspaceUri(new uri_1.default(configDirUri), async (uri) => !await fs.pathExists(uri.path.fsPath()));
        if (untitledWorkspace.toString() === workspaceUri) {
            // if workspace is temporary
            // then let create a storage path for each set of workspace roots
            const rootsStr = rootUris.sort().join(',');
            return this.createHash(rootsStr);
        }
        else {
            return this.createHash(workspaceUri);
        }
    }
    /**
     * Creates a hash digest of the given string.
     */
    createHash(str) {
        try {
            // md5 is not FIPS-approved but we have to continue use it as there're existing storage folders based on it
            return crypto.createHash('md5').update(str).digest('hex');
        }
        catch (e) {
            if (e.message.indexOf('disabled for FIPS') > -1) {
                // SHA256 is FIPS-compliant
                return crypto.createHash('sha256').update(str).digest('hex');
            }
            else {
                throw e;
            }
        }
        // see more details in the issues 8378
    }
    /**
     * Generate time folder name in format: YYYYMMDDTHHMMSS, for example: 20181205T093828
     */
    generateTimeFolderName() {
        const timeStamp = new Date().toISOString().replace(/[-:]|(\..*)/g, '');
        // Helps ensure our timestamp generation logic is "valid".
        // Changes to the timestamp structure may break old logs deletion logic.
        if (!SESSION_TIMESTAMP_PATTERN.test(timeStamp)) {
            this.logger.error(`Generated log folder name: "${timeStamp}" does not match expected pattern: ${SESSION_TIMESTAMP_PATTERN}`);
        }
        return timeStamp;
    }
    async getLogsDirPath() {
        const configDirUri = await this.envServer.getConfigDirUri();
        return path.join(node_1.FileUri.fsPath(configDirUri), const_1.PluginPaths.PLUGINS_LOGS_DIR);
    }
    async getWorkspaceStorageDirPath() {
        const configDirUri = await this.envServer.getConfigDirUri();
        return path.join(node_1.FileUri.fsPath(configDirUri), const_1.PluginPaths.PLUGINS_WORKSPACE_STORAGE_DIR);
    }
    async cleanupOldLogs(parentLogsDir) {
        const dirEntries = await (0, promises_1.readdir)(parentLogsDir, { withFileTypes: true });
        const subDirEntries = dirEntries.filter(dirent => dirent.isDirectory());
        const subDirNames = subDirEntries.map(dirent => dirent.name);
        // We never clean a folder that is not a Theia logs session folder.
        // Even if it does appears under the `parentLogsDir`...
        const sessionSubDirNames = subDirNames.filter((dirName) => SESSION_TIMESTAMP_PATTERN.test(dirName));
        // [].sort is ascending order and we need descending order (newest first).
        const sortedSessionSubDirNames = sessionSubDirNames.sort().reverse();
        const maxSessionLogsFolders = this.cliContribution.maxSessionLogsFolders();
        // [5,4,3,2,1].slice(2) --> [2,1] --> only keep N latest session folders.
        const oldSessionSubDirNames = sortedSessionSubDirNames.slice(maxSessionLogsFolders);
        oldSessionSubDirNames.forEach((sessionDir) => {
            const sessionDirPath = path.resolve(parentLogsDir, sessionDir);
            // we are not waiting for the async `remove` to finish before returning
            // in order to minimize impact on Theia startup time.
            (0, fs_extra_1.remove)(sessionDirPath);
        });
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], PluginPathsServiceImpl.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginPathsServiceImpl.prototype, "envServer", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_cli_contribution_1.PluginCliContribution),
    __metadata("design:type", plugin_cli_contribution_1.PluginCliContribution)
], PluginPathsServiceImpl.prototype, "cliContribution", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.UntitledWorkspaceService),
    __metadata("design:type", common_1.UntitledWorkspaceService)
], PluginPathsServiceImpl.prototype, "untitledWorkspaceService", void 0);
PluginPathsServiceImpl = __decorate([
    (0, inversify_1.injectable)()
], PluginPathsServiceImpl);
exports.PluginPathsServiceImpl = PluginPathsServiceImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js":
/*!**************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PluginCliContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginCliContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const local_directory_plugin_deployer_resolver_1 = __webpack_require__(/*! ./resolvers/local-directory-plugin-deployer-resolver */ "../../packages/plugin-ext/lib/main/node/resolvers/local-directory-plugin-deployer-resolver.js");
let PluginCliContribution = PluginCliContribution_1 = class PluginCliContribution {
    constructor() {
        this._keepUncompressedInPlace = false;
    }
    configure(conf) {
        conf.option(PluginCliContribution_1.PLUGINS, {
            // eslint-disable-next-line max-len
            description: `Provides further refinement for the plugins. Example: --${PluginCliContribution_1.PLUGINS}=${local_directory_plugin_deployer_resolver_1.LocalDirectoryPluginDeployerResolver.LOCAL_DIR}:path/to/your/plugins`,
            type: 'string',
            nargs: 1
        });
        const maxLogSessionExample = `Example: --${PluginCliContribution_1.PLUGIN_MAX_SESSION_LOGS_FOLDERS}=5`;
        conf.option(PluginCliContribution_1.PLUGIN_MAX_SESSION_LOGS_FOLDERS, {
            description: `The maximum number of plugin logs sessions folders to retain. ${maxLogSessionExample}`,
            type: 'number',
            default: PluginCliContribution_1.DEFAULT_PLUGIN_MAX_SESSION_LOGS_FOLDERS,
            nargs: 1
        });
        conf.option(PluginCliContribution_1.UNCOMPRESSED_PLUGINS_IN_PLACE, {
            description: 'Whether user plugins that are stored on disk as uncompressed directories should be run in place or copied to temporary folder.',
            type: 'boolean',
            default: false,
        });
    }
    setArguments(args) {
        const pluginsArg = args[PluginCliContribution_1.PLUGINS];
        if (pluginsArg && String(pluginsArg).startsWith(`${local_directory_plugin_deployer_resolver_1.LocalDirectoryPluginDeployerResolver.LOCAL_DIR}:`)) {
            this._localDir = pluginsArg;
        }
        const maxSessionLogsFoldersArg = args[PluginCliContribution_1.PLUGIN_MAX_SESSION_LOGS_FOLDERS];
        if (maxSessionLogsFoldersArg && Number.isInteger(maxSessionLogsFoldersArg) && maxSessionLogsFoldersArg > 0) {
            this._maxSessionLogsFolders = maxSessionLogsFoldersArg;
        }
        this._keepUncompressedInPlace = Boolean(args[PluginCliContribution_1.UNCOMPRESSED_PLUGINS_IN_PLACE]);
    }
    localDir() {
        return this._localDir;
    }
    maxSessionLogsFolders() {
        return this._maxSessionLogsFolders;
    }
    copyUncompressedPlugins() {
        return !this._keepUncompressedInPlace;
    }
};
PluginCliContribution.PLUGINS = 'plugins';
PluginCliContribution.PLUGIN_MAX_SESSION_LOGS_FOLDERS = 'plugin-max-session-logs-folders';
PluginCliContribution.UNCOMPRESSED_PLUGINS_IN_PLACE = 'uncompressed-plugins-in-place';
/**
 * This is the default value used in VSCode, see:
 * - https://github.com/Microsoft/vscode/blob/613447d6b3f458ef7fee227e3876303bf5184580/src/vs/code/electron-browser/sharedProcess/contrib/logsDataCleaner.ts#L32
 */
PluginCliContribution.DEFAULT_PLUGIN_MAX_SESSION_LOGS_FOLDERS = 10;
PluginCliContribution = PluginCliContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], PluginCliContribution);
exports.PluginCliContribution = PluginCliContribution;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-contribution.js":
/*!*******************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-contribution.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
let PluginDeployerContribution = class PluginDeployerContribution {
    initialize() {
        this.pluginDeployer.start();
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], PluginDeployerContribution.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployer),
    __metadata("design:type", Object)
], PluginDeployerContribution.prototype, "pluginDeployer", void 0);
PluginDeployerContribution = __decorate([
    (0, inversify_1.injectable)()
], PluginDeployerContribution);
exports.PluginDeployerContribution = PluginDeployerContribution;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-directory-handler-context-impl.js":
/*!*************************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-directory-handler-context-impl.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerDirectoryHandlerContextImpl = void 0;
const path = __webpack_require__(/*! path */ "path");
const fs_1 = __webpack_require__(/*! fs */ "fs");
class PluginDeployerDirectoryHandlerContextImpl {
    constructor(pluginDeployerEntry) {
        this.pluginDeployerEntry = pluginDeployerEntry;
    }
    async copy(origin, target) {
        const entries = await fs_1.promises.readdir(origin, { withFileTypes: true });
        await fs_1.promises.mkdir(target, { recursive: true });
        await Promise.all(entries.map(async (entry) => {
            const item = entry.name;
            const itemPath = path.resolve(origin, item);
            const targetPath = path.resolve(target, item);
            if (entry.isDirectory()) {
                return this.copy(itemPath, targetPath);
            }
            if (entry.isFile()) {
                return fs_1.promises.copyFile(itemPath, targetPath);
            }
        }));
    }
    pluginEntry() {
        return this.pluginDeployerEntry;
    }
}
exports.PluginDeployerDirectoryHandlerContextImpl = PluginDeployerDirectoryHandlerContextImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerEntryImpl = void 0;
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const fs_1 = __webpack_require__(/*! fs */ "fs");
class PluginDeployerEntryImpl {
    constructor(originId, pluginId, initPath) {
        this.originId = originId;
        this.pluginId = pluginId;
        this._type = plugin_protocol_1.PluginType.System;
        this.map = new Map();
        this.changes = [];
        this.acceptedTypes = [];
        if (initPath) {
            this.currentPath = initPath;
            this.initPath = initPath;
            this.resolved = true;
        }
        else {
            this.resolved = false;
        }
    }
    id() {
        return this.pluginId;
    }
    originalPath() {
        return this.initPath;
    }
    path() {
        return this.currentPath;
    }
    getValue(key) {
        return this.map.get(key);
    }
    storeValue(key, value) {
        this.map.set(key, value);
    }
    updatePath(newPath, transformerName) {
        if (transformerName) {
            this.changes.push(transformerName);
        }
        this.currentPath = newPath;
    }
    getChanges() {
        return this.changes;
    }
    async isFile() {
        try {
            const stat = await fs_1.promises.stat(this.currentPath);
            return stat.isFile();
        }
        catch {
            return false;
        }
    }
    async isDirectory() {
        try {
            const stat = await fs_1.promises.stat(this.currentPath);
            return stat.isDirectory();
        }
        catch {
            return false;
        }
    }
    hasError() {
        throw new Error('Method not implemented.');
    }
    isResolved() {
        return this.resolved;
    }
    accept(...types) {
        this.acceptedTypes = types;
    }
    isAccepted(...types) {
        return types.some(type => this.acceptedTypes.indexOf(type) >= 0);
    }
    setResolvedBy(name) {
        this.resolvedByName = name;
    }
    resolvedBy() {
        return this.resolvedByName;
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
    }
    get rootPath() {
        return !!this._rootPath ? this._rootPath : this.path();
    }
    set rootPath(rootPath) {
        this._rootPath = rootPath;
    }
}
exports.PluginDeployerEntryImpl = PluginDeployerEntryImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-file-handler-context-impl.js":
/*!********************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-file-handler-context-impl.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerFileHandlerContextImpl = void 0;
const decompress = __webpack_require__(/*! decompress */ "../../node_modules/decompress/index.js");
class PluginDeployerFileHandlerContextImpl {
    constructor(pluginDeployerEntry) {
        this.pluginDeployerEntry = pluginDeployerEntry;
    }
    async unzip(sourcePath, destPath) {
        await decompress(sourcePath, destPath);
    }
    pluginEntry() {
        return this.pluginDeployerEntry;
    }
}
exports.PluginDeployerFileHandlerContextImpl = PluginDeployerFileHandlerContextImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js":
/*!***********************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerImpl = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const semver = __webpack_require__(/*! semver */ "../../node_modules/semver/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_deployer_entry_impl_1 = __webpack_require__(/*! ./plugin-deployer-entry-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js");
const plugin_deployer_resolver_context_impl_1 = __webpack_require__(/*! ./plugin-deployer-resolver-context-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-resolver-context-impl.js");
const plugin_deployer_proxy_entry_impl_1 = __webpack_require__(/*! ./plugin-deployer-proxy-entry-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-proxy-entry-impl.js");
const plugin_deployer_file_handler_context_impl_1 = __webpack_require__(/*! ./plugin-deployer-file-handler-context-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-file-handler-context-impl.js");
const plugin_deployer_directory_handler_context_impl_1 = __webpack_require__(/*! ./plugin-deployer-directory-handler-context-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-directory-handler-context-impl.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const plugin_cli_contribution_1 = __webpack_require__(/*! ./plugin-cli-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
let PluginDeployerImpl = class PluginDeployerImpl {
    constructor() {
        this.onDidDeployEmitter = new core_1.Emitter();
        this.onDidDeploy = this.onDidDeployEmitter.event;
    }
    start() {
        this.logger.debug('Starting the deployer with the list of resolvers', this.pluginResolvers);
        this.doStart();
    }
    async initResolvers() {
        // call init on each resolver
        const pluginDeployerResolverInit = new plugin_deployer_resolver_context_impl_1.PluginDeployerResolverInitImpl();
        const promises = this.pluginResolvers.map(async (pluginResolver) => {
            if (pluginResolver.init) {
                pluginResolver.init(pluginDeployerResolverInit);
            }
        });
        return Promise.all(promises);
    }
    async doStart() {
        // init resolvers
        await this.initResolvers();
        // check THEIA_DEFAULT_PLUGINS or THEIA_PLUGINS env var
        const defaultPluginsValue = process.env.THEIA_DEFAULT_PLUGINS || undefined;
        const pluginsValue = process.env.THEIA_PLUGINS || undefined;
        // check the `--plugins` CLI option
        const defaultPluginsValueViaCli = this.cliContribution.localDir();
        this.logger.debug('Found the list of default plugins ID on env:', defaultPluginsValue);
        this.logger.debug('Found the list of plugins ID on env:', pluginsValue);
        this.logger.debug('Found the list of default plugins ID from CLI:', defaultPluginsValueViaCli);
        // transform it to array
        const defaultPluginIdList = defaultPluginsValue ? defaultPluginsValue.split(',') : [];
        const pluginIdList = pluginsValue ? pluginsValue.split(',') : [];
        const systemEntries = defaultPluginIdList.concat(pluginIdList).concat(defaultPluginsValueViaCli ? defaultPluginsValueViaCli.split(',') : []);
        const userEntries = [];
        const context = { userEntries, systemEntries };
        for (const contribution of this.participants.getContributions()) {
            if (contribution.onWillStart) {
                await contribution.onWillStart(context);
            }
        }
        const deployPlugins = this.measure('deployPlugins');
        const unresolvedUserEntries = context.userEntries.map(id => ({
            id,
            type: plugin_protocol_1.PluginType.User
        }));
        const unresolvedSystemEntries = context.systemEntries.map(id => ({
            id,
            type: plugin_protocol_1.PluginType.System
        }));
        const plugins = await this.resolvePlugins([...unresolvedUserEntries, ...unresolvedSystemEntries]);
        deployPlugins.log('Resolve plugins list');
        await this.deployPlugins(plugins);
        deployPlugins.log('Deploy plugins list');
    }
    async uninstall(pluginId) {
        await this.pluginDeployerHandler.uninstallPlugin(pluginId);
    }
    async undeploy(pluginId) {
        if (await this.pluginDeployerHandler.undeployPlugin(pluginId)) {
            this.onDidDeployEmitter.fire();
        }
    }
    async deploy(plugin, options) {
        const deploy = this.measure('deploy');
        const numDeployedPlugins = await this.deployMultipleEntries([plugin], options);
        deploy.log(`Deploy plugin ${plugin.id}`);
        return numDeployedPlugins;
    }
    async deployMultipleEntries(plugins, options) {
        const pluginsToDeploy = await this.resolvePlugins(plugins, options);
        return this.deployPlugins(pluginsToDeploy);
    }
    /**
     * Resolves plugins for the given type.
     *
     * Only call it a single time before triggering a single deploy to prevent re-resolving of extension dependencies, i.e.
     * ```ts
     * const deployer: PluginDeployer;
     * deployer.deployPlugins(await deployer.resolvePlugins(allPluginEntries));
     * ```
     */
    async resolvePlugins(plugins, options) {
        const visited = new Set();
        const hasBeenVisited = (id) => visited.has(id) || (visited.add(id), false);
        const pluginsToDeploy = new Map();
        const unversionedIdsHandled = new Map();
        const queue = [...plugins];
        while (queue.length) {
            const pendingDependencies = [];
            await Promise.all(queue.map(async (entry) => {
                var _a, _b;
                if (hasBeenVisited(entry.id)) {
                    return;
                }
                const type = (_a = entry.type) !== null && _a !== void 0 ? _a : plugin_protocol_1.PluginType.System;
                try {
                    const pluginDeployerEntries = await this.resolveAndHandle(entry.id, type, options);
                    for (const deployerEntry of pluginDeployerEntries) {
                        const pluginData = await this.pluginDeployerHandler.getPluginDependencies(deployerEntry);
                        const versionedId = pluginData && plugin_protocol_1.PluginIdentifiers.componentsToVersionedId(pluginData.metadata.model);
                        const unversionedId = versionedId && plugin_protocol_1.PluginIdentifiers.componentsToUnversionedId(pluginData.metadata.model);
                        if (unversionedId && !pluginsToDeploy.has(versionedId)) {
                            pluginsToDeploy.set(versionedId, deployerEntry);
                            if (pluginData.mapping) {
                                pendingDependencies.push({ dependencies: pluginData.mapping, type });
                            }
                            const otherVersions = (_b = unversionedIdsHandled.get(unversionedId)) !== null && _b !== void 0 ? _b : [];
                            otherVersions.push(pluginData.metadata.model.version);
                            if (otherVersions.length === 1) {
                                unversionedIdsHandled.set(unversionedId, otherVersions);
                            }
                            else {
                                this.findBestVersion(unversionedId, otherVersions, pluginsToDeploy);
                            }
                        }
                    }
                }
                catch (e) {
                    console.error(`Failed to resolve plugins from '${entry.id}'`, e);
                }
            }));
            queue.length = 0;
            for (const { dependencies, type } of pendingDependencies) {
                for (const [dependency, deployableDependency] of dependencies) {
                    if (!unversionedIdsHandled.has(dependency)) {
                        queue.push({
                            id: deployableDependency,
                            type
                        });
                    }
                }
            }
        }
        return [...pluginsToDeploy.values()];
    }
    async resolveAndHandle(id, type, options) {
        const entries = await this.resolvePlugin(id, type, options);
        await this.applyFileHandlers(entries);
        await this.applyDirectoryFileHandlers(entries);
        return entries;
    }
    findBestVersion(unversionedId, versions, knownPlugins) {
        // If left better, return negative. Then best is index 0.
        versions.map(version => ({ version, plugin: knownPlugins.get(plugin_protocol_1.PluginIdentifiers.idAndVersionToVersionedId({ version, id: unversionedId })) }))
            .sort((left, right) => {
            const leftPlugin = left.plugin;
            const rightPlugin = right.plugin;
            if (!leftPlugin && !rightPlugin) {
                return 0;
            }
            if (!rightPlugin) {
                return -1;
            }
            if (!leftPlugin) {
                return 1;
            }
            if (leftPlugin.type === plugin_protocol_1.PluginType.System && rightPlugin.type === plugin_protocol_1.PluginType.User) {
                return -1;
            }
            if (leftPlugin.type === plugin_protocol_1.PluginType.User && rightPlugin.type === plugin_protocol_1.PluginType.System) {
                return 1;
            }
            if (semver.gtr(left.version, right.version)) {
                return -1;
            }
            return 1;
        }).forEach((versionedEntry, index) => {
            var _a;
            if (index !== 0) {
                // Mark as not accepted to prevent deployment of all but the winner.
                (_a = versionedEntry.plugin) === null || _a === void 0 ? void 0 : _a.accept();
            }
        });
    }
    /**
     * deploy all plugins that have been accepted
     */
    async deployPlugins(pluginsToDeploy) {
        const acceptedPlugins = pluginsToDeploy.filter(pluginDeployerEntry => pluginDeployerEntry.isAccepted());
        const acceptedFrontendPlugins = pluginsToDeploy.filter(pluginDeployerEntry => pluginDeployerEntry.isAccepted(plugin_protocol_1.PluginDeployerEntryType.FRONTEND));
        const acceptedBackendPlugins = pluginsToDeploy.filter(pluginDeployerEntry => pluginDeployerEntry.isAccepted(plugin_protocol_1.PluginDeployerEntryType.BACKEND));
        this.logger.debug('the accepted plugins are', acceptedPlugins);
        this.logger.debug('the acceptedFrontendPlugins plugins are', acceptedFrontendPlugins);
        this.logger.debug('the acceptedBackendPlugins plugins are', acceptedBackendPlugins);
        acceptedPlugins.forEach(plugin => {
            this.logger.debug('will deploy plugin', plugin.id(), 'with changes', JSON.stringify(plugin.getChanges()), 'and this plugin has been resolved by', plugin.resolvedBy());
        });
        // local path to launch
        const pluginPaths = acceptedBackendPlugins.map(pluginEntry => pluginEntry.path());
        this.logger.debug('local path to deploy on remote instance', pluginPaths);
        const deployments = await Promise.all([
            // start the backend plugins
            this.pluginDeployerHandler.deployBackendPlugins(acceptedBackendPlugins),
            this.pluginDeployerHandler.deployFrontendPlugins(acceptedFrontendPlugins)
        ]);
        this.onDidDeployEmitter.fire(undefined);
        return deployments.reduce((accumulated, current) => accumulated += current !== null && current !== void 0 ? current : 0, 0);
    }
    /**
     * If there are some single files, try to see if we can work on these files (like unpacking it, etc)
     */
    async applyFileHandlers(pluginDeployerEntries) {
        const waitPromises = pluginDeployerEntries.filter(pluginDeployerEntry => pluginDeployerEntry.isResolved()).flatMap(pluginDeployerEntry => this.pluginDeployerFileHandlers.map(async (pluginFileHandler) => {
            const proxyPluginDeployerEntry = new plugin_deployer_proxy_entry_impl_1.ProxyPluginDeployerEntry(pluginFileHandler, (pluginDeployerEntry));
            if (await pluginFileHandler.accept(proxyPluginDeployerEntry)) {
                const pluginDeployerFileHandlerContext = new plugin_deployer_file_handler_context_impl_1.PluginDeployerFileHandlerContextImpl(proxyPluginDeployerEntry);
                await pluginFileHandler.handle(pluginDeployerFileHandlerContext);
            }
        }));
        await Promise.all(waitPromises);
    }
    /**
     * Check for all registered directories to see if there are some plugins that can be accepted to be deployed.
     */
    async applyDirectoryFileHandlers(pluginDeployerEntries) {
        const waitPromises = pluginDeployerEntries.filter(pluginDeployerEntry => pluginDeployerEntry.isResolved()).flatMap(pluginDeployerEntry => this.pluginDeployerDirectoryHandlers.map(async (pluginDirectoryHandler) => {
            const proxyPluginDeployerEntry = new plugin_deployer_proxy_entry_impl_1.ProxyPluginDeployerEntry(pluginDirectoryHandler, (pluginDeployerEntry));
            if (await pluginDirectoryHandler.accept(proxyPluginDeployerEntry)) {
                const pluginDeployerDirectoryHandlerContext = new plugin_deployer_directory_handler_context_impl_1.PluginDeployerDirectoryHandlerContextImpl(proxyPluginDeployerEntry);
                await pluginDirectoryHandler.handle(pluginDeployerDirectoryHandlerContext);
            }
        }));
        await Promise.all(waitPromises);
    }
    /**
     * Check a plugin ID see if there are some resolvers that can handle it. If there is a matching resolver, then we resolve the plugin
     */
    async resolvePlugin(pluginId, type = plugin_protocol_1.PluginType.System, options) {
        const pluginDeployerEntries = [];
        const foundPluginResolver = this.pluginResolvers.find(pluginResolver => pluginResolver.accept(pluginId));
        // there is a resolver for the input
        if (foundPluginResolver) {
            // create context object
            const context = new plugin_deployer_resolver_context_impl_1.PluginDeployerResolverContextImpl(foundPluginResolver, pluginId);
            await foundPluginResolver.resolve(context, options);
            context.getPlugins().forEach(entry => {
                entry.type = type;
                pluginDeployerEntries.push(entry);
            });
        }
        else {
            // log it for now
            this.logger.error('No plugin resolver found for the entry', pluginId);
            const unresolvedEntry = new plugin_deployer_entry_impl_1.PluginDeployerEntryImpl(pluginId, pluginId);
            unresolvedEntry.type = type;
            pluginDeployerEntries.push(unresolvedEntry);
        }
        return pluginDeployerEntries;
    }
    measure(name) {
        return this.stopwatch.start(name);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    __metadata("design:type", Object)
], PluginDeployerImpl.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployerHandler),
    __metadata("design:type", Object)
], PluginDeployerImpl.prototype, "pluginDeployerHandler", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_cli_contribution_1.PluginCliContribution),
    __metadata("design:type", plugin_cli_contribution_1.PluginCliContribution)
], PluginDeployerImpl.prototype, "cliContribution", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.Stopwatch),
    __metadata("design:type", common_1.Stopwatch)
], PluginDeployerImpl.prototype, "stopwatch", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.multiInject)(plugin_protocol_1.PluginDeployerResolver),
    __metadata("design:type", Array)
], PluginDeployerImpl.prototype, "pluginResolvers", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.multiInject)(plugin_protocol_1.PluginDeployerFileHandler),
    __metadata("design:type", Array)
], PluginDeployerImpl.prototype, "pluginDeployerFileHandlers", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.multiInject)(plugin_protocol_1.PluginDeployerDirectoryHandler),
    __metadata("design:type", Array)
], PluginDeployerImpl.prototype, "pluginDeployerDirectoryHandlers", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(plugin_protocol_1.PluginDeployerParticipant),
    __metadata("design:type", Object)
], PluginDeployerImpl.prototype, "participants", void 0);
PluginDeployerImpl = __decorate([
    (0, inversify_1.injectable)()
], PluginDeployerImpl);
exports.PluginDeployerImpl = PluginDeployerImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-proxy-entry-impl.js":
/*!***********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-proxy-entry-impl.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProxyPluginDeployerEntry = void 0;
// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_deployer_entry_impl_1 = __webpack_require__(/*! ./plugin-deployer-entry-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js");
/**
 * Proxify call to plugin deployer entry by adding the deployer name as part of the updating path
 */
let ProxyPluginDeployerEntry = class ProxyPluginDeployerEntry {
    constructor(deployer, delegate) {
        this.deployer = deployer;
        this.delegate = delegate;
        this.deployerName = this.deployer.constructor.name;
    }
    id() {
        return this.delegate.id();
    }
    originalPath() {
        return this.delegate.originalPath();
    }
    path() {
        return this.delegate.path();
    }
    getValue(key) {
        return this.delegate.getValue(key);
    }
    storeValue(key, value) {
        this.delegate.storeValue(key, value);
    }
    updatePath(newPath) {
        this.delegate.updatePath(newPath, this.deployerName);
    }
    getChanges() {
        return this.delegate.getChanges();
    }
    isFile() {
        return this.delegate.isFile();
    }
    isDirectory() {
        return this.delegate.isDirectory();
    }
    isResolved() {
        return this.delegate.isResolved();
    }
    isAccepted(...types) {
        return this.delegate.isAccepted(...types);
    }
    accept(...types) {
        this.delegate.accept(...types);
    }
    hasError() {
        return this.delegate.hasError();
    }
    resolvedBy() {
        return this.delegate.resolvedBy();
    }
    get type() {
        return this.delegate.type;
    }
    set type(type) {
        this.delegate.type = type;
    }
    get rootPath() {
        return this.delegate.rootPath;
    }
    set rootPath(rootPath) {
        this.delegate.rootPath = rootPath;
    }
};
ProxyPluginDeployerEntry = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [Object, plugin_deployer_entry_impl_1.PluginDeployerEntryImpl])
], ProxyPluginDeployerEntry);
exports.ProxyPluginDeployerEntry = ProxyPluginDeployerEntry;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-deployer-resolver-context-impl.js":
/*!****************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-deployer-resolver-context-impl.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginDeployerResolverInitImpl = exports.PluginDeployerResolverContextImpl = void 0;
const plugin_deployer_entry_impl_1 = __webpack_require__(/*! ./plugin-deployer-entry-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-entry-impl.js");
class PluginDeployerResolverContextImpl {
    constructor(resolver, sourceId) {
        this.sourceId = sourceId;
        this.pluginEntries = [];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.resolverName = resolver.constructor.name;
    }
    addPlugin(pluginId, path) {
        const pluginEntry = new plugin_deployer_entry_impl_1.PluginDeployerEntryImpl(this.sourceId, pluginId, path);
        pluginEntry.setResolvedBy(this.resolverName);
        this.pluginEntries.push(pluginEntry);
    }
    getPlugins() {
        return this.pluginEntries;
    }
    getOriginId() {
        return this.sourceId;
    }
}
exports.PluginDeployerResolverContextImpl = PluginDeployerResolverContextImpl;
class PluginDeployerResolverInitImpl {
}
exports.PluginDeployerResolverInitImpl = PluginDeployerResolverInitImpl;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-ext-backend-module.js":
/*!****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-ext-backend-module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindMainBackend = void 0;
const plugin_service_1 = __webpack_require__(/*! ./plugin-service */ "../../packages/plugin-ext/lib/main/node/plugin-service.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const ws_request_validators_1 = __webpack_require__(/*! @theia/core/lib/node/ws-request-validators */ "../../packages/core/lib/node/ws-request-validators.js");
const plugins_key_value_storage_1 = __webpack_require__(/*! ./plugins-key-value-storage */ "../../packages/plugin-ext/lib/main/node/plugins-key-value-storage.js");
const plugin_deployer_contribution_1 = __webpack_require__(/*! ./plugin-deployer-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-contribution.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_deployer_impl_1 = __webpack_require__(/*! ./plugin-deployer-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js");
const local_directory_plugin_deployer_resolver_1 = __webpack_require__(/*! ./resolvers/local-directory-plugin-deployer-resolver */ "../../packages/plugin-ext/lib/main/node/resolvers/local-directory-plugin-deployer-resolver.js");
const plugin_theia_file_handler_1 = __webpack_require__(/*! ./handlers/plugin-theia-file-handler */ "../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-file-handler.js");
const plugin_theia_directory_handler_1 = __webpack_require__(/*! ./handlers/plugin-theia-directory-handler */ "../../packages/plugin-ext/lib/main/node/handlers/plugin-theia-directory-handler.js");
const plugin_github_resolver_1 = __webpack_require__(/*! ./plugin-github-resolver */ "../../packages/plugin-ext/lib/main/node/plugin-github-resolver.js");
const plugin_http_resolver_1 = __webpack_require__(/*! ./plugin-http-resolver */ "../../packages/plugin-ext/lib/main/node/plugin-http-resolver.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const plugin_paths_protocol_1 = __webpack_require__(/*! ../common/plugin-paths-protocol */ "../../packages/plugin-ext/lib/main/common/plugin-paths-protocol.js");
const plugin_paths_service_1 = __webpack_require__(/*! ./paths/plugin-paths-service */ "../../packages/plugin-ext/lib/main/node/paths/plugin-paths-service.js");
const plugin_server_handler_1 = __webpack_require__(/*! ./plugin-server-handler */ "../../packages/plugin-ext/lib/main/node/plugin-server-handler.js");
const plugin_cli_contribution_1 = __webpack_require__(/*! ./plugin-cli-contribution */ "../../packages/plugin-ext/lib/main/node/plugin-cli-contribution.js");
const plugin_theia_environment_1 = __webpack_require__(/*! ../common/plugin-theia-environment */ "../../packages/plugin-ext/lib/main/common/plugin-theia-environment.js");
const plugin_theia_deployer_participant_1 = __webpack_require__(/*! ./plugin-theia-deployer-participant */ "../../packages/plugin-ext/lib/main/node/plugin-theia-deployer-participant.js");
const webview_backend_security_warnings_1 = __webpack_require__(/*! ./webview-backend-security-warnings */ "../../packages/plugin-ext/lib/main/node/webview-backend-security-warnings.js");
const plugin_uninstallation_manager_1 = __webpack_require__(/*! ./plugin-uninstallation-manager */ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js");
const localization_server_1 = __webpack_require__(/*! @theia/core/lib/node/i18n/localization-server */ "../../packages/core/lib/node/i18n/localization-server.js");
const plugin_localization_server_1 = __webpack_require__(/*! ./plugin-localization-server */ "../../packages/plugin-ext/lib/main/node/plugin-localization-server.js");
function bindMainBackend(bind, unbind, isBound, rebind) {
    bind(plugin_service_1.PluginApiContribution).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(plugin_service_1.PluginApiContribution);
    bind(ws_request_validators_1.WsRequestValidatorContribution).toService(plugin_service_1.PluginApiContribution);
    (0, core_1.bindContributionProvider)(bind, plugin_protocol_1.PluginDeployerParticipant);
    bind(plugin_protocol_1.PluginDeployer).to(plugin_deployer_impl_1.PluginDeployerImpl).inSingletonScope();
    bind(plugin_deployer_contribution_1.PluginDeployerContribution).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(plugin_deployer_contribution_1.PluginDeployerContribution);
    bind(plugin_uninstallation_manager_1.PluginUninstallationManager).toSelf().inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerResolver).to(local_directory_plugin_deployer_resolver_1.LocalDirectoryPluginDeployerResolver).inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerResolver).to(plugin_github_resolver_1.GithubPluginDeployerResolver).inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerResolver).to(plugin_http_resolver_1.HttpPluginDeployerResolver).inSingletonScope();
    bind(plugin_theia_environment_1.PluginTheiaEnvironment).toSelf().inSingletonScope();
    bind(plugin_theia_deployer_participant_1.PluginTheiaDeployerParticipant).toSelf().inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerParticipant).toService(plugin_theia_deployer_participant_1.PluginTheiaDeployerParticipant);
    bind(plugin_protocol_1.PluginDeployerFileHandler).to(plugin_theia_file_handler_1.PluginTheiaFileHandler).inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerDirectoryHandler).to(plugin_theia_directory_handler_1.PluginTheiaDirectoryHandler).inSingletonScope();
    bind(plugin_protocol_1.PluginServer).to(plugin_server_handler_1.PluginServerHandler).inSingletonScope();
    bind(plugins_key_value_storage_1.PluginsKeyValueStorage).toSelf().inSingletonScope();
    bind(plugin_paths_protocol_1.PluginPathsService).to(plugin_paths_service_1.PluginPathsServiceImpl).inSingletonScope();
    bind(core_1.ConnectionHandler).toDynamicValue(ctx => new core_1.RpcConnectionHandler(plugin_paths_protocol_1.pluginPathsServicePath, () => ctx.container.get(plugin_paths_protocol_1.PluginPathsService))).inSingletonScope();
    bind(core_1.ConnectionHandler).toDynamicValue(ctx => new core_1.RpcConnectionHandler(plugin_protocol_1.pluginServerJsonRpcPath, () => ctx.container.get(plugin_protocol_1.PluginServer))).inSingletonScope();
    bind(plugin_cli_contribution_1.PluginCliContribution).toSelf().inSingletonScope();
    bind(node_1.CliContribution).toService(plugin_cli_contribution_1.PluginCliContribution);
    bind(webview_backend_security_warnings_1.WebviewBackendSecurityWarnings).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(webview_backend_security_warnings_1.WebviewBackendSecurityWarnings);
    rebind(localization_server_1.LocalizationServerImpl).to(plugin_localization_server_1.PluginLocalizationServer).inSingletonScope();
}
exports.bindMainBackend = bindMainBackend;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-github-resolver.js":
/*!*************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-github-resolver.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GithubPluginDeployerResolver_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GithubPluginDeployerResolver = void 0;
const request_1 = __webpack_require__(/*! @theia/core/shared/@theia/request */ "../../packages/core/shared/@theia/request/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const temp_dir_util_1 = __webpack_require__(/*! ./temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
/**
 * Resolver that handle the github: protocol
 * github:<org>/<repo>/<filename>@latest
 * github:<org>/<repo>/<filename>@<version>
 */
let GithubPluginDeployerResolver = GithubPluginDeployerResolver_1 = class GithubPluginDeployerResolver {
    constructor() {
        this.unpackedFolder = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('github-remote').then(async (unpackedFolder) => {
            try {
                await fs_1.promises.mkdir(unpackedFolder, { recursive: true });
                this.unpackedFolder.resolve(unpackedFolder);
            }
            catch (err) {
                this.unpackedFolder.reject(err);
            }
        });
    }
    /**
     * Grab the remote file specified by Github URL
     */
    async resolve(pluginResolverContext) {
        // download the file
        // extract data
        const extracted = /^github:(.*)\/(.*)\/(.*)$/gm.exec(pluginResolverContext.getOriginId());
        if (!extracted || extracted === null || extracted.length !== 4) {
            throw new Error('Invalid extension' + pluginResolverContext.getOriginId());
        }
        const orgName = extracted[1];
        const repoName = extracted[2];
        const file = extracted[3];
        // get version if any
        const splitFile = file.split('@');
        let version;
        let filename;
        if (splitFile.length === 1) {
            filename = file;
            version = 'latest';
        }
        else {
            filename = splitFile[0];
            version = splitFile[1];
        }
        // latest version, need to get the redirect
        const url = GithubPluginDeployerResolver_1.GITHUB_ENDPOINT + orgName + '/' + repoName + '/releases/latest';
        // if latest, resolve first the real version
        if (version === 'latest') {
            // disable redirect to grab the release
            const followRedirects = 0;
            const response = await this.request.request({ url, followRedirects });
            // should have a redirect
            if (response.res.statusCode === 302) {
                const redirectLocation = response.res.headers.location;
                if (!redirectLocation) {
                    throw new Error('Invalid github link with latest not being found');
                }
                // parse redirect link
                const taggedValueArray = /^https:\/\/.*tag\/(.*)/gm.exec(redirectLocation);
                if (!taggedValueArray || taggedValueArray.length !== 2) {
                    throw new Error('The redirect link for latest is invalid ' + redirectLocation);
                }
                // grab version of tag
                return this.grabGithubFile(pluginResolverContext, orgName, repoName, filename, taggedValueArray[1]);
            }
        }
        else {
            return this.grabGithubFile(pluginResolverContext, orgName, repoName, filename, version);
        }
    }
    /*
     * Grab the github file specified by the plugin's ID
     */
    async grabGithubFile(pluginResolverContext, orgName, repoName, filename, version) {
        const unpackedFolder = await this.unpackedFolder.promise;
        const unpackedPath = path.resolve(unpackedFolder, path.basename(version + filename));
        try {
            await fs_1.promises.access(unpackedPath);
            // use of cache. If file is already there use it directly
            return;
        }
        catch { }
        const url = GithubPluginDeployerResolver_1.GITHUB_ENDPOINT + orgName + '/' + repoName + '/releases/download/' + version + '/' + filename;
        const response = await this.request.request({ url });
        if (request_1.RequestContext.isSuccess(response)) {
            await fs_1.promises.writeFile(unpackedPath, response.buffer);
            pluginResolverContext.addPlugin(pluginResolverContext.getOriginId(), unpackedPath);
        }
        else {
            throw new Error(`Could not download the plugin from GitHub. URL: ${url}. HTTP status code: ${response.res.statusCode}`);
        }
    }
    /**
     * Handle only the plugins that starts with github:
     */
    accept(pluginId) {
        return pluginId.startsWith(GithubPluginDeployerResolver_1.PREFIX);
    }
};
GithubPluginDeployerResolver.PREFIX = 'github:';
GithubPluginDeployerResolver.GITHUB_ENDPOINT = 'https://github.com/';
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], GithubPluginDeployerResolver.prototype, "request", void 0);
GithubPluginDeployerResolver = GithubPluginDeployerResolver_1 = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], GithubPluginDeployerResolver);
exports.GithubPluginDeployerResolver = GithubPluginDeployerResolver;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-http-resolver.js":
/*!***********************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-http-resolver.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpPluginDeployerResolver = void 0;
const request_1 = __webpack_require__(/*! @theia/core/shared/@theia/request */ "../../packages/core/shared/@theia/request/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const url = __webpack_require__(/*! url */ "url");
const temp_dir_util_1 = __webpack_require__(/*! ./temp-dir-util */ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js");
/**
 * Resolver that handle the http(s): protocol
 * http://path/to/my.plugin
 * https://path/to/my.plugin
 */
let HttpPluginDeployerResolver = class HttpPluginDeployerResolver {
    constructor() {
        this.unpackedFolder = new promise_util_1.Deferred();
        (0, temp_dir_util_1.getTempDirPathAsync)('http-remote').then(async (unpackedFolder) => {
            try {
                await fs_1.promises.mkdir(unpackedFolder, { recursive: true });
                this.unpackedFolder.resolve(unpackedFolder);
            }
            catch (err) {
                this.unpackedFolder.reject(err);
            }
        });
    }
    /**
     * Grab the remote file specified by the given URL
     */
    async resolve(pluginResolverContext) {
        // download the file
        // keep filename of the url
        const urlPath = pluginResolverContext.getOriginId();
        const link = url.parse(urlPath);
        if (!link.pathname) {
            throw new Error('invalid link URI' + urlPath);
        }
        const dirname = path.dirname(link.pathname);
        const basename = path.basename(link.pathname);
        const filename = dirname.replace(/\W/g, '_') + ('-') + basename;
        const unpackedFolder = await this.unpackedFolder.promise;
        const unpackedPath = path.resolve(unpackedFolder, path.basename(filename));
        try {
            await fs_1.promises.access(unpackedPath);
            // use of cache. If file is already there use it directly
            return;
        }
        catch { }
        const response = await this.request.request({ url: pluginResolverContext.getOriginId() });
        if (request_1.RequestContext.isSuccess(response)) {
            await fs_1.promises.writeFile(unpackedPath, response.buffer);
            pluginResolverContext.addPlugin(pluginResolverContext.getOriginId(), unpackedPath);
        }
        else {
            throw new Error(`Could not download the plugin from ${pluginResolverContext.getOriginId()}. HTTP status code: ${response.res.statusCode}`);
        }
    }
    /**
     * Handle only the plugins that starts with http or https:
     */
    accept(pluginId) {
        return /^http[s]?:\/\/.*$/gm.test(pluginId);
    }
};
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], HttpPluginDeployerResolver.prototype, "request", void 0);
HttpPluginDeployerResolver = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], HttpPluginDeployerResolver);
exports.HttpPluginDeployerResolver = HttpPluginDeployerResolver;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-localization-server.js":
/*!*****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-localization-server.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginLocalizationServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_deployer_impl_1 = __webpack_require__(/*! ./plugin-deployer-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const localization_server_1 = __webpack_require__(/*! @theia/core/lib/node/i18n/localization-server */ "../../packages/core/lib/node/i18n/localization-server.js");
let PluginLocalizationServer = class PluginLocalizationServer extends localization_server_1.LocalizationServerImpl {
    constructor() {
        super(...arguments);
        this.pluginsDeployed = new promise_util_1.Deferred();
    }
    async initialize() {
        this.pluginDeployer.onDidDeploy(() => {
            this.pluginsDeployed.resolve();
        });
        await super.initialize();
    }
    async waitForInitialization() {
        await Promise.all([
            super.waitForInitialization(),
            this.pluginsDeployed.promise,
        ]);
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployer),
    __metadata("design:type", plugin_deployer_impl_1.PluginDeployerImpl)
], PluginLocalizationServer.prototype, "pluginDeployer", void 0);
PluginLocalizationServer = __decorate([
    (0, inversify_1.injectable)()
], PluginLocalizationServer);
exports.PluginLocalizationServer = PluginLocalizationServer;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-server-handler.js":
/*!************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-server-handler.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginServerHandler = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_deployer_impl_1 = __webpack_require__(/*! ./plugin-deployer-impl */ "../../packages/plugin-ext/lib/main/node/plugin-deployer-impl.js");
const plugins_key_value_storage_1 = __webpack_require__(/*! ./plugins-key-value-storage */ "../../packages/plugin-ext/lib/main/node/plugins-key-value-storage.js");
const plugin_protocol_1 = __webpack_require__(/*! ../../common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
let PluginServerHandler = class PluginServerHandler {
    async deploy(pluginEntry, arg2, options) {
        const type = typeof arg2 === 'number' ? arg2 : undefined;
        const successfulDeployments = await this.doDeploy({
            id: pluginEntry,
            type: type !== null && type !== void 0 ? type : plugin_protocol_1.PluginType.User
        }, options);
        if (successfulDeployments === 0) {
            const optionText = options ? ` and options ${JSON.stringify(options)} ` : ' ';
            throw new Error(`Deployment of extension with ID ${pluginEntry}${optionText}failed.`);
        }
    }
    doDeploy(pluginEntry, options) {
        return this.pluginDeployer.deploy(pluginEntry, options);
    }
    uninstall(pluginId) {
        return this.pluginDeployer.uninstall(pluginId);
    }
    undeploy(pluginId) {
        return this.pluginDeployer.undeploy(pluginId);
    }
    setStorageValue(key, value, kind) {
        return this.pluginsKeyValueStorage.set(key, value, kind);
    }
    getStorageValue(key, kind) {
        return this.pluginsKeyValueStorage.get(key, kind);
    }
    getAllStorageValues(kind) {
        return this.pluginsKeyValueStorage.getAll(kind);
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployer),
    __metadata("design:type", plugin_deployer_impl_1.PluginDeployerImpl)
], PluginServerHandler.prototype, "pluginDeployer", void 0);
__decorate([
    (0, inversify_1.inject)(plugins_key_value_storage_1.PluginsKeyValueStorage),
    __metadata("design:type", plugins_key_value_storage_1.PluginsKeyValueStorage)
], PluginServerHandler.prototype, "pluginsKeyValueStorage", void 0);
PluginServerHandler = __decorate([
    (0, inversify_1.injectable)()
], PluginServerHandler);
exports.PluginServerHandler = PluginServerHandler;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-service.js":
/*!*****************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-service.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginApiContribution = void 0;
const path = __webpack_require__(/*! path */ "path");
const url = __webpack_require__(/*! url */ "url");
const vhost = __webpack_require__(/*! vhost */ "../../node_modules/vhost/index.js");
const express = __webpack_require__(/*! @theia/core/shared/express */ "../../packages/core/shared/express/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const webview_protocol_1 = __webpack_require__(/*! ../common/webview-protocol */ "../../packages/plugin-ext/lib/main/common/webview-protocol.js");
const environment_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package/lib/environment */ "../../packages/core/shared/@theia/application-package/lib/environment/index.js");
const application_package_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package */ "../../packages/core/shared/@theia/application-package/index.js");
let PluginApiContribution = class PluginApiContribution {
    constructor() {
        this.serveSameOrigin = false;
    }
    init() {
        const webviewExternalEndpoint = this.webviewExternalEndpoint();
        console.log(`Configuring to accept webviews on '${webviewExternalEndpoint}' hostname.`);
        this.webviewExternalEndpointRegExp = new RegExp(webviewExternalEndpoint, 'i');
    }
    configure(app) {
        const webviewApp = express();
        webviewApp.use('/webview', express.static(path.join(this.applicationPackage.projectPath, 'lib', 'webview', 'pre')));
        app.use(vhost(this.webviewExternalEndpointRegExp, webviewApp));
    }
    allowWsUpgrade(request) {
        if (request.headers.origin && !this.serveSameOrigin) {
            const origin = url.parse(request.headers.origin);
            if (origin.host && this.webviewExternalEndpointRegExp.test(origin.host)) {
                // If the origin comes from the WebViews, refuse:
                return false;
            }
        }
        return true;
    }
    webviewExternalEndpointPattern() {
        let endpointPattern;
        if (environment_1.environment.electron.is()) {
            endpointPattern = webview_protocol_1.WebviewExternalEndpoint.defaultPattern;
        }
        else {
            endpointPattern = process.env[webview_protocol_1.WebviewExternalEndpoint.pattern] || webview_protocol_1.WebviewExternalEndpoint.defaultPattern;
        }
        if (endpointPattern === '{{hostname}}') {
            this.serveSameOrigin = true;
        }
        return endpointPattern;
    }
    /**
     * Returns a RegExp pattern matching the expected WebView endpoint's host.
     */
    webviewExternalEndpoint() {
        return `^${this.webviewExternalEndpointPattern()
            .replace(/\./g, '\\.')
            .replace('{{uuid}}', '.+')
            .replace('{{hostname}}', '.+')}$`;
    }
};
__decorate([
    (0, inversify_1.inject)(application_package_1.ApplicationPackage),
    __metadata("design:type", application_package_1.ApplicationPackage)
], PluginApiContribution.prototype, "applicationPackage", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PluginApiContribution.prototype, "init", null);
PluginApiContribution = __decorate([
    (0, inversify_1.injectable)()
], PluginApiContribution);
exports.PluginApiContribution = PluginApiContribution;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-theia-deployer-participant.js":
/*!************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-theia-deployer-participant.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginTheiaDeployerParticipant = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_theia_environment_1 = __webpack_require__(/*! ../common/plugin-theia-environment */ "../../packages/plugin-ext/lib/main/common/plugin-theia-environment.js");
let PluginTheiaDeployerParticipant = class PluginTheiaDeployerParticipant {
    async onWillStart(context) {
        const pluginsDirUri = await this.environments.getPluginsDirUri();
        context.userEntries.push(pluginsDirUri.withScheme('local-dir').toString());
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_theia_environment_1.PluginTheiaEnvironment),
    __metadata("design:type", plugin_theia_environment_1.PluginTheiaEnvironment)
], PluginTheiaDeployerParticipant.prototype, "environments", void 0);
PluginTheiaDeployerParticipant = __decorate([
    (0, inversify_1.injectable)()
], PluginTheiaDeployerParticipant);
exports.PluginTheiaDeployerParticipant = PluginTheiaDeployerParticipant;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js":
/*!********************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginUninstallationManager = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginUninstallationManager = class PluginUninstallationManager {
    constructor() {
        this.onDidChangeUninstalledPluginsEmitter = new core_1.Emitter();
        this.uninstalledPlugins = [];
    }
    get onDidChangeUninstalledPlugins() {
        return this.onDidChangeUninstalledPluginsEmitter.event;
    }
    fireDidChange() {
        this.onDidChangeUninstalledPluginsEmitter.fire(Object.freeze(this.uninstalledPlugins.slice()));
    }
    markAsUninstalled(...pluginIds) {
        let didChange = false;
        for (const id of pluginIds) {
            didChange = this.markOneAsUninstalled(id) || didChange;
        }
        if (didChange) {
            this.fireDidChange();
        }
        return didChange;
    }
    markOneAsUninstalled(pluginId) {
        if (!this.uninstalledPlugins.includes(pluginId)) {
            this.uninstalledPlugins.push(pluginId);
            return true;
        }
        return false;
    }
    markAsInstalled(...pluginIds) {
        let didChange = false;
        for (const id of pluginIds) {
            didChange = this.markOneAsInstalled(id) || didChange;
        }
        if (didChange) {
            this.fireDidChange();
        }
        return didChange;
    }
    markOneAsInstalled(pluginId) {
        let index;
        let didChange = false;
        while ((index = this.uninstalledPlugins.indexOf(pluginId)) !== -1) {
            this.uninstalledPlugins.splice(index, 1);
            didChange = true;
        }
        return didChange;
    }
    isUninstalled(pluginId) {
        return this.uninstalledPlugins.includes(pluginId);
    }
    getUninstalledPluginIds() {
        return Object.freeze(this.uninstalledPlugins.slice());
    }
};
PluginUninstallationManager = __decorate([
    (0, inversify_1.injectable)()
], PluginUninstallationManager);
exports.PluginUninstallationManager = PluginUninstallationManager;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/plugins-key-value-storage.js":
/*!****************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/plugins-key-value-storage.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginsKeyValueStorage = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const const_1 = __webpack_require__(/*! ./paths/const */ "../../packages/plugin-ext/lib/main/node/paths/const.js");
const plugin_paths_protocol_1 = __webpack_require__(/*! ../common/plugin-paths-protocol */ "../../packages/plugin-ext/lib/main/common/plugin-paths-protocol.js");
let PluginsKeyValueStorage = class PluginsKeyValueStorage {
    constructor() {
        this.stores = Object.create(null);
        this.storesToSync = new Set();
        this.deferredGlobalDataPath = new promise_util_1.Deferred();
    }
    init() {
        this.deferredGlobalDataPath.resolve(this.getGlobalDataPath().catch(error => {
            console.error('Failed to initialize global state path:', error);
            return undefined;
        }));
        process.once('beforeExit', () => this.dispose());
        this.syncStores();
    }
    async set(key, value, kind) {
        const store = await this.getStore(kind);
        if (!store) {
            console.warn('Cannot save data: no opened workspace');
            return false;
        }
        if (value === undefined || Object.keys(value).length === 0) {
            delete store.values[key];
        }
        else {
            store.values[key] = value;
        }
        this.storesToSync.add(store);
        return true;
    }
    async get(key, kind) {
        var _a;
        const store = await this.getStore(kind);
        return (_a = store === null || store === void 0 ? void 0 : store.values[key]) !== null && _a !== void 0 ? _a : {};
    }
    async getAll(kind) {
        var _a;
        const store = await this.getStore(kind);
        return (_a = store === null || store === void 0 ? void 0 : store.values) !== null && _a !== void 0 ? _a : {};
    }
    async getGlobalDataPath() {
        const configDirUri = await this.envServer.getConfigDirUri();
        const globalStorageFsPath = path.join(file_uri_1.FileUri.fsPath(configDirUri), const_1.PluginPaths.PLUGINS_GLOBAL_STORAGE_DIR);
        await fs.ensureDir(globalStorageFsPath);
        return path.join(globalStorageFsPath, 'global-state.json');
    }
    async initializeStore(storePath) {
        return this.fsLocking.lockPath(storePath, async (resolved) => {
            const values = await this.readFromFile(resolved);
            return {
                values,
                fsPath: storePath
            };
        });
    }
    async getStore(kind) {
        var _a;
        var _b;
        const dataPath = await this.getDataPath(kind);
        if (dataPath) {
            return (_a = (_b = this.stores)[dataPath]) !== null && _a !== void 0 ? _a : (_b[dataPath] = await this.initializeStore(dataPath));
        }
    }
    syncStores() {
        this.syncStoresTimeout = setTimeout(async () => {
            await Promise.all(Array.from(this.storesToSync, async ({ fsPath, values }) => {
                await this.fsLocking.lockPath(fsPath, async (storePath) => {
                    await this.writeToFile(storePath, values);
                });
            }));
            this.storesToSync.clear();
            if (this.syncStoresTimeout) {
                this.syncStores();
            }
        }, this.getSyncStoreTimeout());
    }
    getSyncStoreTimeout() {
        // 0-10s + 1min
        return 10000 * Math.random() + 60000;
    }
    async getDataPath(kind) {
        if (!kind) {
            return this.deferredGlobalDataPath.promise;
        }
        const storagePath = await this.pluginPathsService.getHostStoragePath(kind.workspace, kind.roots);
        if (storagePath) {
            return path.join(storagePath, 'workspace-state.json');
        }
    }
    async readFromFile(pathToFile) {
        if (!await fs.pathExists(pathToFile)) {
            return {};
        }
        try {
            return await fs.readJSON(pathToFile);
        }
        catch (error) {
            console.error('Failed to parse data from "', pathToFile, '". Reason:', error);
            return {};
        }
    }
    async writeToFile(pathToFile, data) {
        await fs.ensureDir(path.dirname(pathToFile));
        await fs.writeJSON(pathToFile, data);
    }
    dispose() {
        clearTimeout(this.syncStoresTimeout);
        this.syncStoresTimeout = undefined;
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_paths_protocol_1.PluginPathsService),
    __metadata("design:type", Object)
], PluginsKeyValueStorage.prototype, "pluginPathsService", void 0);
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginsKeyValueStorage.prototype, "envServer", void 0);
__decorate([
    (0, inversify_1.inject)(node_1.FileSystemLocking),
    __metadata("design:type", Object)
], PluginsKeyValueStorage.prototype, "fsLocking", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PluginsKeyValueStorage.prototype, "init", null);
PluginsKeyValueStorage = __decorate([
    (0, inversify_1.injectable)()
], PluginsKeyValueStorage);
exports.PluginsKeyValueStorage = PluginsKeyValueStorage;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/resolvers/local-directory-plugin-deployer-resolver.js":
/*!*****************************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/resolvers/local-directory-plugin-deployer-resolver.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LocalDirectoryPluginDeployerResolver_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalDirectoryPluginDeployerResolver = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const local_plugin_deployer_resolver_1 = __webpack_require__(/*! ./local-plugin-deployer-resolver */ "../../packages/plugin-ext/lib/main/node/resolvers/local-plugin-deployer-resolver.js");
let LocalDirectoryPluginDeployerResolver = LocalDirectoryPluginDeployerResolver_1 = class LocalDirectoryPluginDeployerResolver extends local_plugin_deployer_resolver_1.LocalPluginDeployerResolver {
    get supportedScheme() {
        return LocalDirectoryPluginDeployerResolver_1.LOCAL_DIR;
    }
    async resolveFromLocalPath(pluginResolverContext, localPath) {
        const files = await fs.readdir(localPath);
        files.forEach(file => pluginResolverContext.addPlugin(file, path.resolve(localPath, file)));
    }
};
LocalDirectoryPluginDeployerResolver.LOCAL_DIR = 'local-dir';
LocalDirectoryPluginDeployerResolver = LocalDirectoryPluginDeployerResolver_1 = __decorate([
    (0, inversify_1.injectable)()
], LocalDirectoryPluginDeployerResolver);
exports.LocalDirectoryPluginDeployerResolver = LocalDirectoryPluginDeployerResolver;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/resolvers/local-plugin-deployer-resolver.js":
/*!*******************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/resolvers/local-plugin-deployer-resolver.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalPluginDeployerResolver = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
let LocalPluginDeployerResolver = class LocalPluginDeployerResolver {
    async resolve(pluginResolverContext) {
        const localPath = await this.resolveLocalPluginPath(pluginResolverContext, this.supportedScheme);
        if (localPath) {
            await this.resolveFromLocalPath(pluginResolverContext, localPath);
        }
    }
    accept(pluginId) {
        return pluginId.startsWith(this.supportedScheme);
    }
    async resolveLocalPluginPath(pluginResolverContext, expectedScheme) {
        const localUri = new uri_1.default(pluginResolverContext.getOriginId());
        if (localUri.scheme !== expectedScheme) {
            return null;
        }
        let fsPath = node_1.FileUri.fsPath(localUri);
        if (!path.isAbsolute(fsPath)) {
            fsPath = path.resolve(process.cwd(), fsPath);
        }
        if (!await fs.pathExists(fsPath)) {
            console.warn(`The local plugin referenced by ${pluginResolverContext.getOriginId()} does not exist.`);
            return null;
        }
        return fsPath;
    }
};
LocalPluginDeployerResolver = __decorate([
    (0, inversify_1.injectable)()
], LocalPluginDeployerResolver);
exports.LocalPluginDeployerResolver = LocalPluginDeployerResolver;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/temp-dir-util.js":
/*!****************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/temp-dir-util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTempDirPathAsync = exports.getTempDir = void 0;
// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const os = __webpack_require__(/*! os */ "os");
const path = __webpack_require__(/*! path */ "path");
const fs_1 = __webpack_require__(/*! fs */ "fs");
function getTempDir(name) {
    let tempDir = os.tmpdir();
    // for mac os 'os.tmpdir()' return symlink, but we need real path
    if (process.platform === 'darwin') {
        tempDir = (0, fs_1.realpathSync)(tempDir);
    }
    return path.resolve(tempDir, name);
}
exports.getTempDir = getTempDir;
async function getTempDirPathAsync(name) {
    let tempDir = os.tmpdir();
    // for mac os 'os.tmpdir()' return symlink, but we need real path
    if (process.platform === 'darwin') {
        tempDir = await fs_1.promises.realpath(tempDir);
    }
    return path.resolve(tempDir, name);
}
exports.getTempDirPathAsync = getTempDirPathAsync;


/***/ }),

/***/ "../../packages/plugin-ext/lib/main/node/webview-backend-security-warnings.js":
/*!************************************************************************************!*\
  !*** ../../packages/plugin-ext/lib/main/node/webview-backend-security-warnings.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebviewBackendSecurityWarnings = void 0;
const backend_application_config_provider_1 = __webpack_require__(/*! @theia/core/lib/node/backend-application-config-provider */ "../../packages/core/lib/node/backend-application-config-provider.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const webview_protocol_1 = __webpack_require__(/*! ../common/webview-protocol */ "../../packages/plugin-ext/lib/main/common/webview-protocol.js");
let WebviewBackendSecurityWarnings = class WebviewBackendSecurityWarnings {
    initialize() {
        this.checkHostPattern();
    }
    async checkHostPattern() {
        if (backend_application_config_provider_1.BackendApplicationConfigProvider.get()['warnOnPotentiallyInsecureHostPattern'] === false) {
            return;
        }
        const envHostPattern = process.env[webview_protocol_1.WebviewExternalEndpoint.pattern];
        if (envHostPattern && envHostPattern !== webview_protocol_1.WebviewExternalEndpoint.defaultPattern) {
            console.warn(`\
WEBVIEW SECURITY WARNING

    Changing the @theia/plugin-ext webview host pattern can lead to security vulnerabilities.
        Current pattern: "${envHostPattern}"
    Please read @theia/plugin-ext/README.md for more information.
`);
        }
    }
};
WebviewBackendSecurityWarnings = __decorate([
    (0, inversify_1.injectable)()
], WebviewBackendSecurityWarnings);
exports.WebviewBackendSecurityWarnings = WebviewBackendSecurityWarnings;


/***/ }),

/***/ "../../packages/plugin-ext/lib/plugin-ext-backend-module.js":
/*!******************************************************************!*\
  !*** ../../packages/plugin-ext/lib/plugin-ext-backend-module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_ext_hosted_backend_module_1 = __webpack_require__(/*! ./hosted/node/plugin-ext-hosted-backend-module */ "../../packages/plugin-ext/lib/hosted/node/plugin-ext-hosted-backend-module.js");
const plugin_ext_backend_module_1 = __webpack_require__(/*! ./main/node/plugin-ext-backend-module */ "../../packages/plugin-ext/lib/main/node/plugin-ext-backend-module.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    (0, plugin_ext_backend_module_1.bindMainBackend)(bind, unbind, isBound, rebind);
    (0, plugin_ext_hosted_backend_module_1.bindHostedBackend)(bind);
});


/***/ }),

/***/ "../../packages/plugin-metrics/lib/common/metrics-protocol.js":
/*!********************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/common/metrics-protocol.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.METRICS_TIMEOUT = exports.PluginMetrics = exports.metricsJsonRpcPath = void 0;
/**
 * The JSON-RPC interface for plugin metrics
 */
exports.metricsJsonRpcPath = '/services/plugin-ext/metrics';
exports.PluginMetrics = Symbol('PluginMetrics');
exports.METRICS_TIMEOUT = 10000;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-count.js":
/*!*****************************************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-count.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricTimeCount = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginMetricTimeCount = class PluginMetricTimeCount {
    constructor() {
        this.header = '# HELP language_server_time_count Number of language server requests\n# TYPE language_server_time_count gauge\n';
    }
    createMetricOutput(id, method, requestAnalytics) {
        if (requestAnalytics.successfulResponses < 0) {
            requestAnalytics.successfulResponses = 0;
        }
        const successMetric = `language_server_time_count{id="${id}" method="${method}" result="success"} ${requestAnalytics.successfulResponses}\n`;
        const failedRequests = requestAnalytics.totalRequests - requestAnalytics.successfulResponses;
        const failureMetric = `language_server_time_count{id="${id}" method="${method}" result="fail"} ${failedRequests}\n`;
        return successMetric + failureMetric;
    }
};
PluginMetricTimeCount = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricTimeCount);
exports.PluginMetricTimeCount = PluginMetricTimeCount;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-sum.js":
/*!***************************************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-sum.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricTimeSum = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginMetricTimeSum = class PluginMetricTimeSum {
    constructor() {
        this.header = '# HELP language_server_time_sum Sum of time in milliseconds that language server requests take\n# TYPE language_server_time_sum gauge\n';
    }
    createMetricOutput(id, method, requestAnalytics) {
        const successTime = requestAnalytics.sumOfTimeForSuccess;
        const success = `language_server_time_sum{id="${id}" method="${method}" result="success"} ${successTime}\n`;
        const failureTime = requestAnalytics.sumOfTimeForFailure;
        const failure = `language_server_time_sum{id="${id}" method="${method}" result="failure"} ${failureTime}\n`;
        return success + failure;
    }
};
PluginMetricTimeSum = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricTimeSum);
exports.PluginMetricTimeSum = PluginMetricTimeSum;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/metric-string-generator.js":
/*!*************************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/metric-string-generator.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricStringGenerator = void 0;
// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const plugin_metrics_time_count_1 = __webpack_require__(/*! ./metric-output/plugin-metrics-time-count */ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-count.js");
const plugin_metrics_time_sum_1 = __webpack_require__(/*! ./metric-output/plugin-metrics-time-sum */ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-sum.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginMetricStringGenerator = class PluginMetricStringGenerator {
    getMetricsString(extensionIDAnalytics) {
        if (Object.keys(extensionIDAnalytics).length === 0) {
            return '';
        }
        let metricString = this.pluginMetricsTimeCount.header;
        for (const extensionID in extensionIDAnalytics) {
            if (!extensionIDAnalytics.hasOwnProperty(extensionID)) {
                continue;
            }
            const methodToAnalytic = extensionIDAnalytics[extensionID];
            for (const method in methodToAnalytic) {
                if (!methodToAnalytic.hasOwnProperty(method)) {
                    continue;
                }
                const analytic = methodToAnalytic[method];
                metricString += this.pluginMetricsTimeCount.createMetricOutput(extensionID, method, analytic);
            }
        }
        metricString += this.pluginMetricsTimeSum.header;
        for (const extensionID in extensionIDAnalytics) {
            if (!extensionIDAnalytics.hasOwnProperty(extensionID)) {
                continue;
            }
            const methodToAnalytic = extensionIDAnalytics[extensionID];
            for (const method in methodToAnalytic) {
                if (!methodToAnalytic.hasOwnProperty(method)) {
                    continue;
                }
                const analytic = methodToAnalytic[method];
                metricString += this.pluginMetricsTimeSum.createMetricOutput(extensionID, method, analytic);
            }
        }
        return metricString;
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_metrics_time_count_1.PluginMetricTimeCount),
    __metadata("design:type", plugin_metrics_time_count_1.PluginMetricTimeCount)
], PluginMetricStringGenerator.prototype, "pluginMetricsTimeCount", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_metrics_time_sum_1.PluginMetricTimeSum),
    __metadata("design:type", plugin_metrics_time_sum_1.PluginMetricTimeSum)
], PluginMetricStringGenerator.prototype, "pluginMetricsTimeSum", void 0);
PluginMetricStringGenerator = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricStringGenerator);
exports.PluginMetricStringGenerator = PluginMetricStringGenerator;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/metrics-contributor.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/metrics-contributor.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsContributor = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginMetricsContributor = class PluginMetricsContributor {
    constructor() {
        this.clients = new Set();
    }
    reconcile() {
        const reconciledMap = {};
        this.clients.forEach(c => {
            const extensionIDtoMap = JSON.parse(c.getMetrics());
            for (const vscodeExtensionID in extensionIDtoMap) {
                if (!extensionIDtoMap.hasOwnProperty(vscodeExtensionID)) {
                    continue;
                }
                if (!reconciledMap[vscodeExtensionID]) {
                    reconciledMap[vscodeExtensionID] = extensionIDtoMap[vscodeExtensionID];
                }
                else {
                    const methodToAnalytics = extensionIDtoMap[vscodeExtensionID];
                    for (const method in methodToAnalytics) {
                        if (!methodToAnalytics.hasOwnProperty(method)) {
                            continue;
                        }
                        if (!reconciledMap[vscodeExtensionID][method]) {
                            reconciledMap[vscodeExtensionID][method] = methodToAnalytics[method];
                        }
                        else {
                            const currentAnalytic = reconciledMap[vscodeExtensionID][method];
                            if (!methodToAnalytics[method]) {
                                reconciledMap[vscodeExtensionID][method] = currentAnalytic;
                            }
                            else {
                                // It does have the method
                                // Then we need to reconcile the two analytics from requests
                                const newAnalytic = methodToAnalytics[method];
                                newAnalytic.sumOfTimeForSuccess = newAnalytic.sumOfTimeForSuccess + currentAnalytic.sumOfTimeForSuccess;
                                newAnalytic.sumOfTimeForFailure = newAnalytic.sumOfTimeForFailure + currentAnalytic.sumOfTimeForFailure;
                                newAnalytic.totalRequests += currentAnalytic.totalRequests;
                                newAnalytic.successfulResponses += currentAnalytic.successfulResponses;
                                reconciledMap[vscodeExtensionID][method] = newAnalytic;
                            }
                        }
                    }
                }
            }
        });
        return reconciledMap;
    }
};
PluginMetricsContributor = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricsContributor);
exports.PluginMetricsContributor = PluginMetricsContributor;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/plugin-metrics-backend-module.js":
/*!*******************************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/plugin-metrics-backend-module.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const metrics_contribution_1 = __webpack_require__(/*! @theia/metrics/lib/node/metrics-contribution */ "../../packages/metrics/lib/node/metrics-contribution.js");
const plugin_metrics_1 = __webpack_require__(/*! ./plugin-metrics */ "../../packages/plugin-metrics/lib/node/plugin-metrics.js");
const metrics_protocol_1 = __webpack_require__(/*! ../common/metrics-protocol */ "../../packages/plugin-metrics/lib/common/metrics-protocol.js");
const plugin_metrics_impl_1 = __webpack_require__(/*! ./plugin-metrics-impl */ "../../packages/plugin-metrics/lib/node/plugin-metrics-impl.js");
const handler_1 = __webpack_require__(/*! @theia/core/lib/common/messaging/handler */ "../../packages/core/lib/common/messaging/handler.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const metrics_contributor_1 = __webpack_require__(/*! ./metrics-contributor */ "../../packages/plugin-metrics/lib/node/metrics-contributor.js");
const plugin_metrics_time_sum_1 = __webpack_require__(/*! ./metric-output/plugin-metrics-time-sum */ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-sum.js");
const plugin_metrics_time_count_1 = __webpack_require__(/*! ./metric-output/plugin-metrics-time-count */ "../../packages/plugin-metrics/lib/node/metric-output/plugin-metrics-time-count.js");
const metric_string_generator_1 = __webpack_require__(/*! ./metric-string-generator */ "../../packages/plugin-metrics/lib/node/metric-string-generator.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    bind(plugin_metrics_time_sum_1.PluginMetricTimeSum).toSelf().inSingletonScope();
    bind(plugin_metrics_time_count_1.PluginMetricTimeCount).toSelf().inSingletonScope();
    bind(metrics_protocol_1.PluginMetrics).to(plugin_metrics_impl_1.PluginMetricsImpl).inTransientScope();
    bind(metric_string_generator_1.PluginMetricStringGenerator).toSelf().inSingletonScope();
    bind(metrics_contributor_1.PluginMetricsContributor).toSelf().inSingletonScope();
    bind(handler_1.ConnectionHandler).toDynamicValue(ctx => {
        const clients = ctx.container.get(metrics_contributor_1.PluginMetricsContributor);
        return new core_1.RpcConnectionHandler(metrics_protocol_1.metricsJsonRpcPath, client => {
            const pluginMetricsHandler = ctx.container.get(metrics_protocol_1.PluginMetrics);
            clients.clients.add(pluginMetricsHandler);
            client.onDidCloseConnection(() => {
                clients.clients.delete(pluginMetricsHandler);
            });
            return pluginMetricsHandler;
        });
    }).inSingletonScope();
    bind(metrics_contribution_1.MetricsContribution).to(plugin_metrics_1.PluginMetricsContribution).inSingletonScope();
});


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/plugin-metrics-impl.js":
/*!*********************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/plugin-metrics-impl.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsImpl = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
let PluginMetricsImpl = class PluginMetricsImpl {
    constructor() {
        this.metrics = '{}';
    }
    // tslint:disable-next-line:typedef
    setMetrics(metrics) {
        this.metrics = metrics;
    }
    /**
     * This sends all the information about metrics inside of the plugins to the backend
     * where it is served on the /metrics endpoint
     */
    getMetrics() {
        return this.metrics;
    }
};
PluginMetricsImpl = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricsImpl);
exports.PluginMetricsImpl = PluginMetricsImpl;


/***/ }),

/***/ "../../packages/plugin-metrics/lib/node/plugin-metrics.js":
/*!****************************************************************!*\
  !*** ../../packages/plugin-metrics/lib/node/plugin-metrics.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginMetricsContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const metrics_protocol_1 = __webpack_require__(/*! ../common/metrics-protocol */ "../../packages/plugin-metrics/lib/common/metrics-protocol.js");
const metrics_contributor_1 = __webpack_require__(/*! ./metrics-contributor */ "../../packages/plugin-metrics/lib/node/metrics-contributor.js");
const metric_string_generator_1 = __webpack_require__(/*! ./metric-string-generator */ "../../packages/plugin-metrics/lib/node/metric-string-generator.js");
let PluginMetricsContribution = class PluginMetricsContribution {
    getMetrics() {
        return this.metrics;
    }
    startCollecting() {
        setInterval(() => {
            const reconciledMetrics = this.metricsContributor.reconcile();
            this.metrics = this.stringGenerator.getMetricsString(reconciledMetrics);
        }, metrics_protocol_1.METRICS_TIMEOUT);
    }
};
__decorate([
    (0, inversify_1.inject)(metrics_contributor_1.PluginMetricsContributor),
    __metadata("design:type", metrics_contributor_1.PluginMetricsContributor)
], PluginMetricsContribution.prototype, "metricsContributor", void 0);
__decorate([
    (0, inversify_1.inject)(metric_string_generator_1.PluginMetricStringGenerator),
    __metadata("design:type", metric_string_generator_1.PluginMetricStringGenerator)
], PluginMetricsContribution.prototype, "stringGenerator", void 0);
PluginMetricsContribution = __decorate([
    (0, inversify_1.injectable)()
], PluginMetricsContribution);
exports.PluginMetricsContribution = PluginMetricsContribution;


/***/ }),

/***/ "../../packages/process/lib/common/process-common-module.js":
/*!******************************************************************!*\
  !*** ../../packages/process/lib/common/process-common-module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const shell_command_builder_1 = __webpack_require__(/*! ./shell-command-builder */ "../../packages/process/lib/common/shell-command-builder.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    bind(shell_command_builder_1.ShellCommandBuilder).toSelf().inSingletonScope();
});


/***/ }),

/***/ "../../packages/process/lib/common/process-manager-types.js":
/*!******************************************************************!*\
  !*** ../../packages/process/lib/common/process-manager-types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessType = void 0;
var ProcessType;
(function (ProcessType) {
    ProcessType[ProcessType["Raw"] = 0] = "Raw";
    ProcessType[ProcessType["Terminal"] = 1] = "Terminal";
})(ProcessType = exports.ProcessType || (exports.ProcessType = {}));


/***/ }),

/***/ "../../packages/process/lib/common/shell-command-builder.js":
/*!******************************************************************!*\
  !*** ../../packages/process/lib/common/shell-command-builder.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellCommandBuilder = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/* eslint-disable no-null/no-null */
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const shell_quoting_1 = __webpack_require__(/*! ../common/shell-quoting */ "../../packages/process/lib/common/shell-quoting.js");
/**
 * Create command lines ready to be sent to a shell's stdin for evaluation.
 */
let ShellCommandBuilder = class ShellCommandBuilder {
    /**
     * Constructs a command line to run in a shell. The shell could be
     * re-used/long-lived, this means we cannot spawn a new process with a nice
     * and fresh environment, we need to encode environment modifications into
     * the returned command.
     *
     * Inspired by VS Code implementation, see:
     * https://github.com/microsoft/vscode/blob/f395cac4fff0721a8099126172c01411812bcb4a/src/vs/workbench/contrib/debug/node/terminals.ts#L79
     *
     * @param hostProcessInfo the host terminal process infos
     * @param commandOptions program to execute in the host terminal
     */
    buildCommand(hostProcessInfo, commandOptions) {
        const host = hostProcessInfo && hostProcessInfo.executable;
        const cwd = commandOptions.cwd;
        const args = commandOptions.args.map(value => ({
            value, quoting: "strong" /* Strong */,
        }));
        const env = [];
        if (commandOptions.env) {
            for (const key of Object.keys(commandOptions.env)) {
                env.push([key, commandOptions.env[key]]);
            }
        }
        if (host) {
            if (/(bash|wsl)(.exe)?$/.test(host)) {
                return this.buildForBash(args, cwd, env);
            }
            else if (/(ps|pwsh|powershell)(.exe)?$/i.test(host)) {
                return this.buildForPowershell(args, cwd, env);
            }
            else if (/cmd(.exe)?$/i.test(host)) {
                return this.buildForCmd(args, cwd, env);
            }
        }
        return this.buildForDefault(args, cwd, env);
    }
    buildForBash(args, cwd, env) {
        let command = '';
        if (cwd) {
            command += `cd ${shell_quoting_1.BashQuotingFunctions.strong(cwd)} && `;
        }
        if (env === null || env === void 0 ? void 0 : env.length) {
            command += 'env';
            for (const [key, value] of env) {
                if (value === null) {
                    command += ` -u ${shell_quoting_1.BashQuotingFunctions.strong(key)}`;
                }
                else {
                    command += ` ${shell_quoting_1.BashQuotingFunctions.strong(`${key}=${value}`)}`;
                }
            }
            command += ' ';
        }
        command += this.createShellCommandLine(args, shell_quoting_1.BashQuotingFunctions);
        return command;
    }
    buildForPowershell(args, cwd, env) {
        let command = '';
        if (cwd) {
            command += `cd ${shell_quoting_1.PowershellQuotingFunctions.strong(cwd)}; `;
        }
        if (env === null || env === void 0 ? void 0 : env.length) {
            for (const [key, value] of env) {
                // Powershell requires special quoting when dealing with
                // environment variable names.
                const quotedKey = key
                    .replace(/`/g, '````')
                    .replace(/\?/g, '``?');
                if (value === null) {
                    command += `Remove-Item \${env:${quotedKey}}; `;
                }
                else {
                    command += `\${env:${quotedKey}}=${shell_quoting_1.PowershellQuotingFunctions.strong(value)}; `;
                }
            }
        }
        command += '& ' + this.createShellCommandLine(args, shell_quoting_1.PowershellQuotingFunctions);
        return command;
    }
    buildForCmd(args, cwd, env) {
        let command = '';
        if (cwd) {
            command += `cd ${shell_quoting_1.CmdQuotingFunctions.strong(cwd)} && `;
        }
        // Current quoting mechanism only works within a nested `cmd` call:
        command += 'cmd /C "';
        if (env === null || env === void 0 ? void 0 : env.length) {
            for (const [key, value] of env) {
                if (value === null) {
                    command += `set ${shell_quoting_1.CmdQuotingFunctions.strong(key)}="" && `;
                }
                else {
                    command += `set ${shell_quoting_1.CmdQuotingFunctions.strong(`${key}=${value}`)} && `;
                }
            }
        }
        command += this.createShellCommandLine(args, shell_quoting_1.CmdQuotingFunctions);
        command += '"';
        return command;
    }
    buildForDefault(args, cwd, env) {
        return this.buildForBash(args, cwd, env);
    }
    /**
     * This method will try to leave `arg[0]` unescaped if possible. The reason
     * is that shells like `cmd` expect their own commands like `dir` to be
     * unescaped.
     *
     * @returns empty string if `args` is empty, otherwise an escaped command.
     */
    createShellCommandLine(args, quotingFunctions) {
        let command = '';
        if (args.length > 0) {
            const [exec, ...execArgs] = args;
            // Some commands like `dir` should not be quoted for `cmd` to understand:
            command += this.quoteExecutableIfNecessary(exec, quotingFunctions);
            if (execArgs.length > 0) {
                command += ' ' + (0, shell_quoting_1.createShellCommandLine)(execArgs, quotingFunctions);
            }
        }
        return command;
    }
    quoteExecutableIfNecessary(exec, quotingFunctions) {
        return typeof exec === 'string' && !this.needsQuoting(exec) ? exec : (0, shell_quoting_1.escapeForShell)(exec, quotingFunctions);
    }
    /**
     * If this method returns `false` then we definitely need quoting.
     *
     * May return false positives.
     */
    needsQuoting(arg) {
        return /\W/.test(arg);
    }
};
ShellCommandBuilder = __decorate([
    (0, inversify_1.injectable)()
], ShellCommandBuilder);
exports.ShellCommandBuilder = ShellCommandBuilder;


/***/ }),

/***/ "../../packages/process/lib/common/shell-quoting.js":
/*!**********************************************************!*\
  !*** ../../packages/process/lib/common/shell-quoting.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PowershellQuotingFunctions = exports.CmdQuotingFunctions = exports.BashQuotingFunctions = exports.escapeForShell = exports.createShellCommandLine = void 0;
/**
 * Converts a list of args into an escaped shell command.
 *
 * There are two main use cases when handling command/arguments for a shell:
 * 1. User already wrote the escaped commandline, then just use that.
 * 2. User wants a specific process to be invoked with some arguments.
 *
 * The `createShellCommandLine` function is useful for the latter.
 *
 * @param args Standard list of spawn/exec arguments, first item is the command.
 * @param quotingFunctions Collection of functions to process arguments.
 */
function createShellCommandLine(args, quotingFunctions) {
    return args.map(arg => escapeForShell(arg, quotingFunctions)).join(' ');
}
exports.createShellCommandLine = createShellCommandLine;
/**
 * Escape (or quote) a given input.
 *
 * @param arg Input to escape.
 * @param quotingFunctions Collection of functions to process the given `arg`.
 * @param quotingType Override the quoting type specified by the given `arg`.
 */
function escapeForShell(arg, quotingFunctions, quotingType) {
    let value;
    let quoting = quotingType;
    if (typeof arg === 'string') {
        if (!quoting) {
            return arg;
        }
        value = arg;
    }
    else {
        if (!quoting) {
            quoting = arg.quoting;
        }
        value = arg.value;
    }
    if (quotingFunctions && typeof quotingFunctions[quoting] === 'function') {
        return quotingFunctions[quoting](value);
    }
    return value;
}
exports.escapeForShell = escapeForShell;
exports.BashQuotingFunctions = {
    characters: {
        needQuotes: '()',
        escape: '\\',
        strong: '\'',
        weak: '"',
    },
    escape(arg) {
        return arg
            .replace(/[\s\\|(){}<>$&;"']/g, '\\$&');
    },
    strong(arg) {
        // ('+) becomes ('"'+"')
        return `'${arg
            .replace(/'+/g, '\'"$&"\'')}'`;
    },
    weak(arg) {
        return `"${arg
            // Escape escape-characters.
            .replace(/\\"/g, '\\\\"')
            // Escape user-specified double-quotes.
            .replace(/"/g, '\\"')
            // Escape trailing (\), we don't want the user to escape our last quote.
            .replace(/\\$/g, '\\\\')}"`;
    },
};
exports.CmdQuotingFunctions = {
    characters: {
        weak: '"',
    },
    escape(arg) {
        return arg
            // Escape forbidden characters (see: cmd /?).
            .replace(/[%&<>()@^|]/g, '^$&')
            // Some characters must be escaped using `\`.
            .replace(/[\\"]/g, '\\$&')
            // Double-quote whitespaces, else we cannot escape it.
            .replace(/\s+/g, '"$&"');
    },
    strong(arg) {
        return this.weak(arg)
            // Try to prevent variable expansion.
            .replace(/%/g, '"%"');
    },
    weak(arg) {
        return `"${arg
            // Escape double quotes.
            .replace(/\\"/g, '\\\\"')
            .replace(/"/g, '\\"')
            // Escape forbidden characters (see: cmd /?)
            .replace(/[&<>()@^|]/g, '^$&')
            // Escape trailing backslash, we don't want the user to escape our last quote.
            .replace(/\\$/g, '\\\\')
            // Escape line returns
            .replace(/\r?\n/g, '^$&')}"`;
    },
};
exports.PowershellQuotingFunctions = {
    characters: {
        needQuotes: '()',
        escape: '`',
        strong: '\'',
        weak: '"',
    },
    escape(arg) {
        return arg.replace(/[`|{}()<>;"' ]/g, '`$&');
    },
    strong(arg) {
        // In powershell, one must write ('') for a single quote to be displayed
        // within a single quoted string.
        return `'${arg
            .replace(/'/g, '\'\'')}'`;
    },
    weak(arg) {
        return `"${arg
            // Escape escape-characters.
            .replace(/`"/g, '``"')
            // Escape user-specified backticks.
            .replace(/"/g, '`"')
            // Escape trailing (`), we don't want the user to escape our last quote.
            .replace(/`$/g, '``')}"`;
    },
};


/***/ }),

/***/ "../../packages/process/lib/node/dev-null-stream.js":
/*!**********************************************************!*\
  !*** ../../packages/process/lib/node/dev-null-stream.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DevNullStream = void 0;
const stream = __webpack_require__(/*! stream */ "stream");
/**
 * A Node stream like `/dev/null`.
 *
 * Writing goes to a black hole, reading returns `EOF`.
 */
class DevNullStream extends stream.Duplex {
    constructor(options = {}) {
        super();
        if (options.autoDestroy) {
            this.destroy();
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _write(chunk, encoding, callback) {
        callback();
    }
    _read(size) {
        // eslint-disable-next-line no-null/no-null
        this.push(null);
    }
}
exports.DevNullStream = DevNullStream;


/***/ }),

/***/ "../../packages/process/lib/node/index.js":
/*!************************************************!*\
  !*** ../../packages/process/lib/node/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./process-manager */ "../../packages/process/lib/node/process-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./process */ "../../packages/process/lib/node/process.js"), exports);
__exportStar(__webpack_require__(/*! ./raw-process */ "../../packages/process/lib/node/raw-process.js"), exports);
__exportStar(__webpack_require__(/*! ./terminal-process */ "../../packages/process/lib/node/terminal-process.js"), exports);
__exportStar(__webpack_require__(/*! ./task-terminal-process */ "../../packages/process/lib/node/task-terminal-process.js"), exports);
__exportStar(__webpack_require__(/*! ./multi-ring-buffer */ "../../packages/process/lib/node/multi-ring-buffer.js"), exports);


/***/ }),

/***/ "../../packages/process/lib/node/multi-ring-buffer.js":
/*!************************************************************!*\
  !*** ../../packages/process/lib/node/multi-ring-buffer.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiRingBuffer = exports.MultiRingBufferOptions = exports.MultiRingBufferReadableStream = void 0;
const stream = __webpack_require__(/*! stream */ "stream");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
/**
 * The MultiRingBuffer is a ring buffer implementation that allows
 * multiple independent readers.
 *
 * These readers are created using the getReader or getStream functions
 * to create a reader that can be read using deq() or one that is a readable stream.
 */
class MultiRingBufferReadableStream extends stream.Readable {
    constructor(ringBuffer, reader, encoding = 'utf8') {
        super();
        this.ringBuffer = ringBuffer;
        this.reader = reader;
        this.encoding = encoding;
        this.more = false;
        this.disposed = false;
        this.setEncoding(encoding);
    }
    _read(size) {
        this.more = true;
        this.deq(size);
    }
    _destroy(err, callback) {
        this.ringBuffer.closeStream(this);
        this.ringBuffer.closeReader(this.reader);
        this.disposed = true;
        this.removeAllListeners();
        callback(err);
    }
    onData() {
        if (this.more === true) {
            this.deq(-1);
        }
    }
    deq(size) {
        if (this.disposed === true) {
            return;
        }
        let buffer = undefined;
        do {
            buffer = this.ringBuffer.deq(this.reader, size, this.encoding);
            if (buffer !== undefined) {
                this.more = this.push(buffer, this.encoding);
            }
        } while (buffer !== undefined && this.more === true && this.disposed === false);
    }
    dispose() {
        this.destroy();
    }
}
exports.MultiRingBufferReadableStream = MultiRingBufferReadableStream;
exports.MultiRingBufferOptions = Symbol('MultiRingBufferOptions');
let MultiRingBuffer = class MultiRingBuffer {
    constructor(options) {
        this.options = options;
        this.head = -1;
        this.tail = -1;
        this.readerId = 0;
        this.maxSize = options.size;
        if (options.encoding !== undefined) {
            this.encoding = options.encoding;
        }
        else {
            this.encoding = 'utf8';
        }
        this.buffer = Buffer.alloc(this.maxSize);
        this.readers = new Map();
        this.streams = new Map();
    }
    enq(str, encoding = 'utf8') {
        let buffer = Buffer.from(str, encoding);
        // Take the last elements of string if it's too big, drop the rest
        if (buffer.length > this.maxSize) {
            buffer = buffer.slice(buffer.length - this.maxSize);
        }
        if (buffer.length === 0) {
            return;
        }
        // empty
        if (this.head === -1 && this.tail === -1) {
            this.head = 0;
            this.tail = 0;
            buffer.copy(this.buffer, this.head, 0, buffer.length);
            this.head = buffer.length - 1;
            this.onData(0);
            return;
        }
        const startHead = this.inc(this.head, 1).newPos;
        if (this.inc(startHead, buffer.length).wrap === true) {
            buffer.copy(this.buffer, startHead, 0, this.maxSize - startHead);
            buffer.copy(this.buffer, 0, this.maxSize - startHead);
        }
        else {
            buffer.copy(this.buffer, startHead);
        }
        this.incTails(buffer.length);
        this.head = this.inc(this.head, buffer.length).newPos;
        this.onData(startHead);
    }
    getReader() {
        this.readers.set(this.readerId, this.tail);
        return this.readerId++;
    }
    closeReader(id) {
        this.readers.delete(id);
    }
    getStream(encoding) {
        const reader = this.getReader();
        const readableStream = new MultiRingBufferReadableStream(this, reader, encoding);
        this.streams.set(readableStream, reader);
        return readableStream;
    }
    closeStream(readableStream) {
        this.streams.delete(readableStream);
    }
    onData(start) {
        /*  Any stream that has read everything already
         *  Should go back to the last buffer in start offset */
        for (const [id, pos] of this.readers) {
            if (pos === -1) {
                this.readers.set(id, start);
            }
        }
        /* Notify the streams there's new data. */
        for (const [readableStream] of this.streams) {
            readableStream.onData();
        }
    }
    deq(id, size = -1, encoding = 'utf8') {
        const pos = this.readers.get(id);
        if (pos === undefined || pos === -1) {
            return undefined;
        }
        if (size === 0) {
            return undefined;
        }
        let buffer = '';
        const maxDeqSize = this.sizeForReader(id);
        const wrapped = this.isWrapped(pos, this.head);
        let deqSize;
        if (size === -1) {
            deqSize = maxDeqSize;
        }
        else {
            deqSize = Math.min(size, maxDeqSize);
        }
        if (wrapped === false) { // no wrap
            buffer = this.buffer.toString(encoding, pos, pos + deqSize);
        }
        else { // wrap
            buffer = buffer.concat(this.buffer.toString(encoding, pos, this.maxSize), this.buffer.toString(encoding, 0, deqSize - (this.maxSize - pos)));
        }
        const lastIndex = this.inc(pos, deqSize - 1).newPos;
        // everything is read
        if (lastIndex === this.head) {
            this.readers.set(id, -1);
        }
        else {
            this.readers.set(id, this.inc(pos, deqSize).newPos);
        }
        return buffer;
    }
    sizeForReader(id) {
        const pos = this.readers.get(id);
        if (pos === undefined) {
            return 0;
        }
        return this.sizeFrom(pos, this.head, this.isWrapped(pos, this.head));
    }
    size() {
        return this.sizeFrom(this.tail, this.head, this.isWrapped(this.tail, this.head));
    }
    isWrapped(from, to) {
        if (to < from) {
            return true;
        }
        else {
            return false;
        }
    }
    sizeFrom(from, to, wrap) {
        if (from === -1 || to === -1) {
            return 0;
        }
        else {
            if (wrap === false) {
                return to - from + 1;
            }
            else {
                return to + 1 + this.maxSize - from;
            }
        }
    }
    emptyForReader(id) {
        const pos = this.readers.get(id);
        if (pos === undefined || pos === -1) {
            return true;
        }
        else {
            return false;
        }
    }
    empty() {
        if (this.head === -1 && this.tail === -1) {
            return true;
        }
        else {
            return false;
        }
    }
    streamsSize() {
        return this.streams.size;
    }
    readersSize() {
        return this.readers.size;
    }
    /**
     * Dispose all the attached readers/streams.
     */
    dispose() {
        for (const readableStream of this.streams.keys()) {
            readableStream.dispose();
        }
    }
    /* Position should be incremented if it goes pass end.  */
    shouldIncPos(pos, end, size) {
        const { newPos: newHead, wrap } = this.inc(end, size);
        /* Tail Head */
        if (this.isWrapped(pos, end) === false) {
            // Head needs to wrap to push the tail
            if (wrap === true && newHead >= pos) {
                return true;
            }
        }
        else { /* Head Tail */
            //  If we wrap head is pushing tail, or if it goes over pos
            if (wrap === true || newHead >= pos) {
                return true;
            }
        }
        return false;
    }
    incTailSize(pos, head, size) {
        const { newPos: newHead } = this.inc(head, size);
        /* New tail is 1 past newHead.  */
        return this.inc(newHead, 1);
    }
    incTail(pos, size) {
        if (this.shouldIncPos(pos, this.head, size) === false) {
            return { newPos: pos, wrap: false };
        }
        return this.incTailSize(pos, this.head, size);
    }
    /* Increment the main tail and all the reader positions. */
    incTails(size) {
        this.tail = this.incTail(this.tail, size).newPos;
        for (const [id, pos] of this.readers) {
            if (pos !== -1) {
                if (this.shouldIncPos(pos, this.tail, size) === true) {
                    this.readers.set(id, this.tail);
                }
            }
        }
    }
    inc(pos, size) {
        if (size === 0) {
            return { newPos: pos, wrap: false };
        }
        const newPos = (pos + size) % this.maxSize;
        const wrap = newPos <= pos;
        return { newPos, wrap };
    }
};
MultiRingBuffer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.MultiRingBufferOptions)),
    __metadata("design:paramtypes", [Object])
], MultiRingBuffer);
exports.MultiRingBuffer = MultiRingBuffer;


/***/ }),

/***/ "../../packages/process/lib/node/process-backend-module.js":
/*!*****************************************************************!*\
  !*** ../../packages/process/lib/node/process-backend-module.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const raw_process_1 = __webpack_require__(/*! ./raw-process */ "../../packages/process/lib/node/raw-process.js");
const terminal_process_1 = __webpack_require__(/*! ./terminal-process */ "../../packages/process/lib/node/terminal-process.js");
const task_terminal_process_1 = __webpack_require__(/*! ./task-terminal-process */ "../../packages/process/lib/node/task-terminal-process.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const process_manager_1 = __webpack_require__(/*! ./process-manager */ "../../packages/process/lib/node/process-manager.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const multi_ring_buffer_1 = __webpack_require__(/*! ./multi-ring-buffer */ "../../packages/process/lib/node/multi-ring-buffer.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(raw_process_1.RawProcess).toSelf().inTransientScope();
    bind(process_manager_1.ProcessManager).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(process_manager_1.ProcessManager);
    bind(common_1.ILogger).toDynamicValue(ctx => {
        const parentLogger = ctx.container.get(common_1.ILogger);
        return parentLogger.child('process');
    }).inSingletonScope().whenTargetNamed('process');
    bind(raw_process_1.RawProcessFactory).toFactory(ctx => (options) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(raw_process_1.RawProcessOptions).toConstantValue(options);
        return child.get(raw_process_1.RawProcess);
    });
    bind(terminal_process_1.TerminalProcess).toSelf().inTransientScope();
    bind(terminal_process_1.TerminalProcessFactory).toFactory(ctx => (options) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(terminal_process_1.TerminalProcessOptions).toConstantValue(options);
        return child.get(terminal_process_1.TerminalProcess);
    });
    bind(task_terminal_process_1.TaskTerminalProcess).toSelf().inTransientScope();
    bind(task_terminal_process_1.TaskTerminalProcessFactory).toFactory(ctx => (options) => {
        const child = ctx.container.createChild();
        child.bind(terminal_process_1.TerminalProcessOptions).toConstantValue(options);
        return child.get(task_terminal_process_1.TaskTerminalProcess);
    });
    bind(multi_ring_buffer_1.MultiRingBuffer).toSelf().inTransientScope();
    /* 1MB size, TODO should be a user preference. */
    bind(multi_ring_buffer_1.MultiRingBufferOptions).toConstantValue({ size: 1048576 });
});


/***/ }),

/***/ "../../packages/process/lib/node/process-manager.js":
/*!**********************************************************!*\
  !*** ../../packages/process/lib/node/process-manager.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessManager = void 0;
// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const numbers_1 = __webpack_require__(/*! @theia/core/lib/common/numbers */ "../../packages/core/lib/common/numbers.js");
let ProcessManager = class ProcessManager {
    constructor(logger) {
        this.logger = logger;
        this.processes = new Map();
        this.deleteEmitter = new common_1.Emitter();
    }
    /**
     * Registers the given process into this manager. Both on process termination and on error,
     * the process will be automatically removed from the manager.
     *
     * @param process the process to register.
     */
    register(process) {
        const id = this.generateId();
        this.processes.set(id, process);
        process.onError(() => this.unregister(process));
        return id;
    }
    /**
     * @returns a random id for a process that is not assigned to a different process yet.
     */
    generateId() {
        let id = undefined;
        while (id === undefined) {
            const candidate = Math.floor(Math.random() * numbers_1.MAX_SAFE_INTEGER);
            if (!this.processes.has(candidate)) {
                id = candidate;
            }
        }
        return id;
    }
    /**
     * Removes the process from this process manager. Invoking this method, will make
     * sure that the process is terminated before eliminating it from the manager's cache.
     *
     * @param process the process to unregister from this process manager.
     */
    unregister(process) {
        const processLabel = this.getProcessLabel(process);
        this.logger.debug(`Unregistering process. ${processLabel}`);
        if (!process.killed) {
            this.logger.debug(`Ensuring process termination. ${processLabel}`);
            process.kill();
        }
        if (this.processes.delete(process.id)) {
            this.deleteEmitter.fire(process.id);
            this.logger.debug(`The process was successfully unregistered. ${processLabel}`);
        }
        else {
            this.logger.warn(`This process was not registered or was already unregistered. ${processLabel}`);
        }
    }
    get(id) {
        return this.processes.get(id);
    }
    get onDelete() {
        return this.deleteEmitter.event;
    }
    onStop() {
        for (const process of this.processes.values()) {
            try {
                this.unregister(process);
            }
            catch (error) {
                this.logger.error(`Error occurred when unregistering process. ${this.getProcessLabel(process)}`, error);
            }
        }
    }
    getProcessLabel(process) {
        return `[ID: ${process.id}]`;
    }
};
ProcessManager = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(logger_1.ILogger)),
    __param(0, (0, inversify_1.named)('process')),
    __metadata("design:paramtypes", [Object])
], ProcessManager);
exports.ProcessManager = ProcessManager;


/***/ }),

/***/ "../../packages/process/lib/node/process.js":
/*!**************************************************!*\
  !*** ../../packages/process/lib/node/process.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Process = exports.ProcessType = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const child_process_1 = __webpack_require__(/*! child_process */ "child_process");
const fs = __webpack_require__(/*! fs */ "fs");
const process_manager_types_1 = __webpack_require__(/*! ../common/process-manager-types */ "../../packages/process/lib/common/process-manager-types.js");
Object.defineProperty(exports, "ProcessType", ({ enumerable: true, get: function () { return process_manager_types_1.ProcessType; } }));
let Process = class Process {
    constructor(processManager, logger, type, options) {
        this.processManager = processManager;
        this.logger = logger;
        this.type = type;
        this.options = options;
        this.startEmitter = new common_1.Emitter();
        this.exitEmitter = new common_1.Emitter();
        this.closeEmitter = new common_1.Emitter();
        this.errorEmitter = new common_1.Emitter();
        this._killed = false;
        this.id = this.processManager.register(this);
        this.initialCwd = options && options.options && 'cwd' in options.options && options.options['cwd'].toString() || __dirname;
    }
    get killed() {
        return this._killed;
    }
    get onStart() {
        return this.startEmitter.event;
    }
    /**
     * Wait for the process to exit, streams can still emit data.
     */
    get onExit() {
        return this.exitEmitter.event;
    }
    get onError() {
        return this.errorEmitter.event;
    }
    /**
     * Waits for both process exit and for all the streams to be closed.
     */
    get onClose() {
        return this.closeEmitter.event;
    }
    emitOnStarted() {
        this.startEmitter.fire({});
    }
    /**
     * Emit the onExit event for this process.  Only one of code and signal
     * should be defined.
     */
    emitOnExit(code, signal) {
        const exitEvent = { code, signal };
        this.handleOnExit(exitEvent);
        this.exitEmitter.fire(exitEvent);
    }
    /**
     * Emit the onClose event for this process.  Only one of code and signal
     * should be defined.
     */
    emitOnClose(code, signal) {
        this.closeEmitter.fire({ code, signal });
    }
    handleOnExit(event) {
        this._killed = true;
        const signalSuffix = event.signal ? `, signal: ${event.signal}` : '';
        const executable = this.isForkOptions(this.options) ? this.options.modulePath : this.options.command;
        this.logger.debug(`Process ${this.pid} has exited with code ${event.code}${signalSuffix}.`, executable, this.options.args);
    }
    emitOnError(err) {
        this.handleOnError(err);
        this.errorEmitter.fire(err);
    }
    async emitOnErrorAsync(error) {
        process.nextTick(this.emitOnError.bind(this), error);
    }
    handleOnError(error) {
        this._killed = true;
        this.logger.error(error);
    }
    isForkOptions(options) {
        return (0, common_1.isObject)(options) && !!options.modulePath;
    }
    /**
     * @returns the current working directory as a URI (usually file:// URI)
     */
    getCwdURI() {
        if (core_1.isOSX) {
            return new Promise(resolve => {
                (0, child_process_1.exec)('lsof -OPln -p ' + this.pid + ' | grep cwd', (error, stdout, stderr) => {
                    if (stdout !== '') {
                        resolve(node_1.FileUri.create(stdout.substring(stdout.indexOf('/'), stdout.length - 1)).toString());
                    }
                    else {
                        resolve(node_1.FileUri.create(this.initialCwd).toString());
                    }
                });
            });
        }
        else if (!core_1.isWindows) {
            return new Promise(resolve => {
                fs.readlink('/proc/' + this.pid + '/cwd', (err, linkedstr) => {
                    if (err || !linkedstr) {
                        resolve(node_1.FileUri.create(this.initialCwd).toString());
                    }
                    else {
                        resolve(node_1.FileUri.create(linkedstr).toString());
                    }
                });
            });
        }
        else {
            return new Promise(resolve => {
                resolve(node_1.FileUri.create(this.initialCwd).toString());
            });
        }
    }
};
Process = __decorate([
    (0, inversify_1.injectable)(),
    __param(2, (0, inversify_1.unmanaged)()),
    __metadata("design:paramtypes", [Object, Object, Number, Object])
], Process);
exports.Process = Process;


/***/ }),

/***/ "../../packages/process/lib/node/pseudo-pty.js":
/*!*****************************************************!*\
  !*** ../../packages/process/lib/node/pseudo-pty.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Alibaba Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PseudoPty = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
class PseudoPty {
    constructor() {
        this.pid = -1;
        this.cols = -1;
        this.rows = -1;
        this.process = '';
        this.handleFlowControl = false;
        this.onData = core_1.Event.None;
        this.onExit = core_1.Event.None;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    on(event, listener) { }
    resize(columns, rows) { }
    write(data) { }
    kill(signal) { }
    pause() { }
    resume() { }
}
exports.PseudoPty = PseudoPty;


/***/ }),

/***/ "../../packages/process/lib/node/raw-process.js":
/*!******************************************************!*\
  !*** ../../packages/process/lib/node/raw-process.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawProcess = exports.RawProcessFactory = exports.RawProcessOptions = exports.DevNullStream = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const process_manager_1 = __webpack_require__(/*! ./process-manager */ "../../packages/process/lib/node/process-manager.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const process_1 = __webpack_require__(/*! ./process */ "../../packages/process/lib/node/process.js");
const child_process_1 = __webpack_require__(/*! child_process */ "child_process");
// The class was here before, exporting to not break anything.
var dev_null_stream_1 = __webpack_require__(/*! ./dev-null-stream */ "../../packages/process/lib/node/dev-null-stream.js");
Object.defineProperty(exports, "DevNullStream", ({ enumerable: true, get: function () { return dev_null_stream_1.DevNullStream; } }));
const dev_null_stream_2 = __webpack_require__(/*! ./dev-null-stream */ "../../packages/process/lib/node/dev-null-stream.js");
exports.RawProcessOptions = Symbol('RawProcessOptions');
exports.RawProcessFactory = Symbol('RawProcessFactory');
let RawProcess = class RawProcess extends process_1.Process {
    constructor(// eslint-disable-next-line @typescript-eslint/indent
    options, processManager, logger) {
        super(processManager, logger, process_1.ProcessType.Raw, options);
        const executable = this.isForkOptions(options) ? options.modulePath : options.command;
        this.logger.debug(`Starting raw process: ${executable},`
            + ` with args: ${options.args ? options.args.join(' ') : ''}, `
            + ` with options: ${JSON.stringify(options.options)}`);
        // About catching errors: spawn will sometimes throw directly
        // (EACCES on Linux), sometimes return a Process object with the pid
        // property undefined (ENOENT on Linux) and then emit an 'error' event.
        // For now, we try to normalize that into always emitting an 'error'
        // event.
        try {
            if (this.isForkOptions(options)) {
                this.process = (0, child_process_1.fork)(options.modulePath, options.args || [], options.options || {});
            }
            else {
                this.process = (0, child_process_1.spawn)(options.command, options.args || [], options.options || {});
            }
            this.process.on('error', (error) => {
                error.code = error.code || 'Unknown error';
                this.emitOnError(error);
            });
            // When no stdio option is passed, it is null by default.
            this.outputStream = this.process.stdout || new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            this.inputStream = this.process.stdin || new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            this.errorStream = this.process.stderr || new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            this.process.on('exit', (exitCode, signal) => {
                // node's child_process exit sets the unused parameter to null,
                // but we want it to be undefined instead.
                this.emitOnExit(typeof exitCode === 'number' ? exitCode : undefined, typeof signal === 'string' ? signal : undefined);
                this.processManager.unregister(this);
            });
            this.process.on('close', (exitCode, signal) => {
                // node's child_process exit sets the unused parameter to null,
                // but we want it to be undefined instead.
                this.emitOnClose(typeof exitCode === 'number' ? exitCode : undefined, typeof signal === 'string' ? signal : undefined);
            });
            if (this.process.pid !== undefined) {
                process.nextTick(this.emitOnStarted.bind(this));
            }
        }
        catch (error) {
            /* When an error is thrown, set up some fake streams, so the client
               code doesn't break because these field are undefined.  */
            this.outputStream = new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            this.inputStream = new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            this.errorStream = new dev_null_stream_2.DevNullStream({ autoDestroy: true });
            /* Call the client error handler, but first give them a chance to register it.  */
            this.emitOnErrorAsync(error);
        }
    }
    get pid() {
        if (!this.process || !this.process.pid) {
            throw new Error('process did not start correctly');
        }
        return this.process.pid;
    }
    kill(signal) {
        if (this.process && this.killed === false) {
            this.process.kill(signal);
        }
    }
};
RawProcess = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.RawProcessOptions)),
    __param(1, (0, inversify_1.inject)(process_manager_1.ProcessManager)),
    __param(2, (0, inversify_1.inject)(common_1.ILogger)),
    __param(2, (0, inversify_1.named)('process')),
    __metadata("design:paramtypes", [Object, process_manager_1.ProcessManager, Object])
], RawProcess);
exports.RawProcess = RawProcess;


/***/ }),

/***/ "../../packages/process/lib/node/task-terminal-process.js":
/*!****************************************************************!*\
  !*** ../../packages/process/lib/node/task-terminal-process.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 SAP SE or an SAP affiliate company and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskTerminalProcess = exports.TaskTerminalProcessFactory = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const terminal_process_1 = __webpack_require__(/*! ./terminal-process */ "../../packages/process/lib/node/terminal-process.js");
exports.TaskTerminalProcessFactory = Symbol('TaskTerminalProcessFactory');
let TaskTerminalProcess = class TaskTerminalProcess extends terminal_process_1.TerminalProcess {
    constructor() {
        super(...arguments);
        this.exited = false;
        this.attachmentAttempted = false;
    }
    onTerminalExit(code, signal) {
        this.emitOnExit(code, signal);
        this.exited = true;
        // Unregister process only if task terminal already attached (or failed attach),
        // Fixes https://github.com/eclipse-theia/theia/issues/2961
        if (this.attachmentAttempted) {
            this.unregisterProcess();
        }
    }
};
TaskTerminalProcess = __decorate([
    (0, inversify_1.injectable)()
], TaskTerminalProcess);
exports.TaskTerminalProcess = TaskTerminalProcess;


/***/ }),

/***/ "../../packages/process/lib/node/terminal-process.js":
/*!***********************************************************!*\
  !*** ../../packages/process/lib/node/terminal-process.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TerminalProcess = exports.NodePtyErrors = exports.TerminalProcessFactory = exports.TerminalProcessOptions = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const process_1 = __webpack_require__(/*! ./process */ "../../packages/process/lib/node/process.js");
const process_manager_1 = __webpack_require__(/*! ./process-manager */ "../../packages/process/lib/node/process-manager.js");
const node_pty_1 = __webpack_require__(/*! node-pty */ "../../node_modules/node-pty/lib/index.js");
const multi_ring_buffer_1 = __webpack_require__(/*! ./multi-ring-buffer */ "../../packages/process/lib/node/multi-ring-buffer.js");
const dev_null_stream_1 = __webpack_require__(/*! ./dev-null-stream */ "../../packages/process/lib/node/dev-null-stream.js");
const utils_1 = __webpack_require__(/*! ./utils */ "../../packages/process/lib/node/utils.js");
const pseudo_pty_1 = __webpack_require__(/*! ./pseudo-pty */ "../../packages/process/lib/node/pseudo-pty.js");
const stream_1 = __webpack_require__(/*! stream */ "stream");
exports.TerminalProcessOptions = Symbol('TerminalProcessOptions');
exports.TerminalProcessFactory = Symbol('TerminalProcessFactory');
var NodePtyErrors;
(function (NodePtyErrors) {
    NodePtyErrors["EACCES"] = "Permission denied";
    NodePtyErrors["ENOENT"] = "No such file or directory";
})(NodePtyErrors = exports.NodePtyErrors || (exports.NodePtyErrors = {}));
/**
 * Run arbitrary processes inside pseudo-terminals (PTY).
 *
 * Note: a PTY is not a shell process (bash/pwsh/cmd...)
 */
let TerminalProcess = class TerminalProcess extends process_1.Process {
    constructor(// eslint-disable-next-line @typescript-eslint/indent
    options, processManager, ringBuffer, logger) {
        super(processManager, logger, process_1.ProcessType.Terminal, options);
        this.options = options;
        this.ringBuffer = ringBuffer;
        this.outputStream = this.createOutputStream();
        this.errorStream = new dev_null_stream_1.DevNullStream({ autoDestroy: true });
        if (options.isPseudo) {
            // do not need to spawn a process, new a pseudo pty instead
            this.terminal = new pseudo_pty_1.PseudoPty();
            this.inputStream = new dev_null_stream_1.DevNullStream({ autoDestroy: true });
            return;
        }
        if (this.isForkOptions(this.options)) {
            throw new Error('terminal processes cannot be forked as of today');
        }
        this.logger.debug('Starting terminal process', JSON.stringify(options, undefined, 2));
        // Delay resizes to avoid conpty not respecting very early resize calls
        // see https://github.com/microsoft/vscode/blob/a1c783c/src/vs/platform/terminal/node/terminalProcess.ts#L177
        if (core_1.isWindows) {
            this._delayedResizer = new DelayedResizer();
            this._delayedResizer.onTrigger(dimensions => {
                var _a;
                (_a = this._delayedResizer) === null || _a === void 0 ? void 0 : _a.dispose();
                this._delayedResizer = undefined;
                if (dimensions.cols && dimensions.rows) {
                    this.resize(dimensions.cols, dimensions.rows);
                }
            });
        }
        const startTerminal = (command) => {
            try {
                return this.createPseudoTerminal(command, options, ringBuffer);
            }
            catch (error) {
                // Normalize the error to make it as close as possible as what
                // node's child_process.spawn would generate in the same
                // situation.
                const message = error.message;
                if (message.startsWith('File not found: ') || message.endsWith(NodePtyErrors.ENOENT)) {
                    if (core_1.isWindows && command && !command.toLowerCase().endsWith('.exe')) {
                        const commandExe = command + '.exe';
                        this.logger.debug(`Trying terminal command '${commandExe}' because '${command}' was not found.`);
                        return startTerminal(commandExe);
                    }
                    // Proceed with failure, reporting the original command because it was
                    // the intended command and it was not found
                    error.errno = 'ENOENT';
                    error.code = 'ENOENT';
                    error.path = options.command;
                }
                else if (message.endsWith(NodePtyErrors.EACCES)) {
                    // The shell program exists but was not accessible, so just fail
                    error.errno = 'EACCES';
                    error.code = 'EACCES';
                    error.path = options.command;
                }
                // node-pty throws exceptions on Windows.
                // Call the client error handler, but first give them a chance to register it.
                this.emitOnErrorAsync(error);
                return { terminal: undefined, inputStream: new dev_null_stream_1.DevNullStream({ autoDestroy: true }) };
            }
        };
        const { terminal, inputStream } = startTerminal(options.command);
        this.terminal = terminal;
        this.inputStream = inputStream;
    }
    /**
     * Helper for the constructor to attempt to create the pseudo-terminal encapsulating the shell process.
     *
     * @param command the shell command to launch
     * @param options options for the shell process
     * @param ringBuffer a ring buffer in which to collect terminal output
     * @returns the terminal PTY and a stream by which it may be sent input
     */
    createPseudoTerminal(command, options, ringBuffer) {
        const terminal = (0, node_pty_1.spawn)(command, (core_1.isWindows && options.commandLine) || options.args || [], options.options || {});
        process.nextTick(() => this.emitOnStarted());
        // node-pty actually wait for the underlying streams to be closed before emitting exit.
        // We should emulate the `exit` and `close` sequence.
        terminal.onExit(({ exitCode, signal }) => {
            // Make sure to only pass either code or signal as !undefined, not
            // both.
            //
            // node-pty quirk: On Linux/macOS, if the process exited through the
            // exit syscall (with an exit code), signal will be 0 (an invalid
            // signal value).  If it was terminated because of a signal, the
            // signal parameter will hold the signal number and code should
            // be ignored.
            this._exitCode = exitCode;
            if (signal === undefined || signal === 0) {
                this.onTerminalExit(exitCode, undefined);
            }
            else {
                this.onTerminalExit(undefined, (0, utils_1.signame)(signal));
            }
            process.nextTick(() => {
                if (signal === undefined || signal === 0) {
                    this.emitOnClose(exitCode, undefined);
                }
                else {
                    this.emitOnClose(undefined, (0, utils_1.signame)(signal));
                }
            });
        });
        terminal.onData((data) => {
            ringBuffer.enq(data);
        });
        const inputStream = new stream_1.Writable({
            write: (chunk) => {
                this.write(chunk);
            },
        });
        return { terminal, inputStream };
    }
    createOutputStream() {
        return this.ringBuffer.getStream();
    }
    get pid() {
        this.checkTerminal();
        return this.terminal.pid;
    }
    get executable() {
        return this.options.command;
    }
    get arguments() {
        return this.options.args || [];
    }
    onTerminalExit(code, signal) {
        this.emitOnExit(code, signal);
        this.unregisterProcess();
    }
    unregisterProcess() {
        this.processManager.unregister(this);
    }
    kill(signal) {
        if (this.terminal && this.killed === false) {
            this.terminal.kill(signal);
        }
    }
    resize(cols, rows) {
        if (typeof cols !== 'number' || typeof rows !== 'number' || isNaN(cols) || isNaN(rows)) {
            return;
        }
        this.checkTerminal();
        try {
            // Ensure that cols and rows are always >= 1, this prevents a native exception in winpty.
            cols = Math.max(cols, 1);
            rows = Math.max(rows, 1);
            // Delay resize if needed
            if (this._delayedResizer) {
                this._delayedResizer.cols = cols;
                this._delayedResizer.rows = rows;
                return;
            }
            this.terminal.resize(cols, rows);
        }
        catch (error) {
            // swallow error if the pty has already exited
            // see also https://github.com/microsoft/vscode/blob/a1c783c/src/vs/platform/terminal/node/terminalProcess.ts#L549
            if (this._exitCode !== undefined &&
                error.message !== 'ioctl(2) failed, EBADF' &&
                error.message !== 'Cannot resize a pty that has already exited') {
                throw error;
            }
        }
    }
    write(data) {
        this.checkTerminal();
        this.terminal.write(data);
    }
    checkTerminal() {
        if (!this.terminal) {
            throw new Error('pty process did not start correctly');
        }
    }
};
TerminalProcess = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.TerminalProcessOptions)),
    __param(1, (0, inversify_1.inject)(process_manager_1.ProcessManager)),
    __param(2, (0, inversify_1.inject)(multi_ring_buffer_1.MultiRingBuffer)),
    __param(3, (0, inversify_1.inject)(common_1.ILogger)),
    __param(3, (0, inversify_1.named)('process')),
    __metadata("design:paramtypes", [Object, process_manager_1.ProcessManager,
        multi_ring_buffer_1.MultiRingBuffer, Object])
], TerminalProcess);
exports.TerminalProcess = TerminalProcess;
/**
 * Tracks the latest resize event to be trigger at a later point.
 */
class DelayedResizer extends core_1.DisposableCollection {
    constructor() {
        super();
        this._onTrigger = new core_1.Emitter();
        this.push(this._onTrigger);
        this._timeout = setTimeout(() => this._onTrigger.fire({ rows: this.rows, cols: this.cols }), 1000);
        this.push(core_1.Disposable.create(() => clearTimeout(this._timeout)));
    }
    get onTrigger() { return this._onTrigger.event; }
    dispose() {
        super.dispose();
        clearTimeout(this._timeout);
    }
}


/***/ }),

/***/ "../../packages/process/lib/node/utils.js":
/*!************************************************!*\
  !*** ../../packages/process/lib/node/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codename = exports.signame = exports.parseArgs = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const os = __webpack_require__(/*! os */ "os");
const stringArgv = __webpack_require__(/*! string-argv */ "../../node_modules/string-argv/index.js");
/**
 * Parses the given line into an array of args respecting escapes and string literals.
 * @param line the given line to parse
 */
function parseArgs(line) {
    if (line) {
        return stringArgv(line);
    }
    return [];
}
exports.parseArgs = parseArgs;
// Polyfill for Object.entries, until we upgrade to ES2017.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function objectEntries(obj) {
    const props = Object.keys(obj);
    const result = new Array(props.length);
    for (let i = 0; i < props.length; i++) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        result[i] = [props[i], obj[props[i]]];
    }
    return result;
}
/**
 * Convert a signal number to its short name (using the signal definitions of
 * the current host).  Should never be called on Windows.  For Linux, this is
 * only valid for the x86 and ARM architectures, since other architectures may
 * use different numbers, see signal(7).
 */
function signame(sig) {
    // We should never reach this on Windows, since signals are not a thing
    // there.
    if (core_1.isWindows) {
        throw new Error('Trying to get a signal name on Windows.');
    }
    for (const entry of objectEntries(os.constants.signals)) {
        if (entry[1] === sig) {
            return entry[0];
        }
    }
    // Don't know this signal?  Return the number as a string.
    return sig.toString(10);
}
exports.signame = signame;
/**
 * Convert a code number to its short name
 */
function codename(code) {
    for (const entry of objectEntries(os.constants.errno)) {
        if (entry[1] === code) {
            return entry[0];
        }
    }
    // Return the number as string if we did not find a name for it.
    return code.toString(10);
}
exports.codename = codename;


/***/ }),

/***/ "../../packages/search-in-workspace/lib/common/search-in-workspace-interface.js":
/*!**************************************************************************************!*\
  !*** ../../packages/search-in-workspace/lib/common/search-in-workspace-interface.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchInWorkspaceServer = exports.SIW_WS_PATH = exports.SearchInWorkspaceClient = exports.SearchInWorkspaceResult = void 0;
var SearchInWorkspaceResult;
(function (SearchInWorkspaceResult) {
    /**
     * Sort search in workspace results according to file, line, character position
     * and then length.
     */
    function compare(a, b) {
        if (a.fileUri !== b.fileUri) {
            return a.fileUri < b.fileUri ? -1 : 1;
        }
        return 0;
    }
    SearchInWorkspaceResult.compare = compare;
})(SearchInWorkspaceResult = exports.SearchInWorkspaceResult || (exports.SearchInWorkspaceResult = {}));
exports.SearchInWorkspaceClient = Symbol('SearchInWorkspaceClient');
exports.SIW_WS_PATH = '/services/search-in-workspace';
exports.SearchInWorkspaceServer = Symbol('SearchInWorkspaceServer');


/***/ }),

/***/ "../../packages/search-in-workspace/lib/node/ripgrep-search-in-workspace-server.js":
/*!*****************************************************************************************!*\
  !*** ../../packages/search-in-workspace/lib/node/ripgrep-search-in-workspace-server.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RipgrepSearchInWorkspaceServer = exports.RgPath = void 0;
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const path = __webpack_require__(/*! path */ "path");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
exports.RgPath = Symbol('RgPath');
function bytesOrTextToString(obj) {
    return 'bytes' in obj ?
        Buffer.from(obj.bytes, 'base64').toString() :
        obj.text;
}
let RipgrepSearchInWorkspaceServer = class RipgrepSearchInWorkspaceServer {
    constructor(logger, rawProcessFactory) {
        this.logger = logger;
        this.rawProcessFactory = rawProcessFactory;
        // List of ongoing searches, maps search id to a the started rg process.
        this.ongoingSearches = new Map();
        // Each incoming search is given a unique id, returned to the client.  This is the next id we will assigned.
        this.nextSearchId = 1;
    }
    setClient(client) {
        this.client = client;
    }
    getArgs(options) {
        const args = new Set();
        args.add('--hidden');
        args.add('--json');
        if (options === null || options === void 0 ? void 0 : options.matchCase) {
            args.add('--case-sensitive');
        }
        else {
            args.add('--ignore-case');
        }
        if (options === null || options === void 0 ? void 0 : options.includeIgnored) {
            args.add('--no-ignore');
        }
        if (options === null || options === void 0 ? void 0 : options.maxFileSize) {
            args.add('--max-filesize=' + options.maxFileSize.trim());
        }
        else {
            args.add('--max-filesize=20M');
        }
        if (options === null || options === void 0 ? void 0 : options.include) {
            this.addGlobArgs(args, options.include, false);
        }
        if (options === null || options === void 0 ? void 0 : options.exclude) {
            this.addGlobArgs(args, options.exclude, true);
        }
        if (options === null || options === void 0 ? void 0 : options.followSymlinks) {
            args.add('--follow');
        }
        if ((options === null || options === void 0 ? void 0 : options.useRegExp) || (options === null || options === void 0 ? void 0 : options.matchWholeWord)) {
            args.add('--regexp');
        }
        else {
            args.add('--fixed-strings');
            args.add('--');
        }
        return Array.from(args);
    }
    /**
     * Add glob patterns to ripgrep's arguments
     * @param args ripgrep set of arguments
     * @param patterns patterns to include as globs
     * @param exclude whether to negate the glob pattern or not
     */
    addGlobArgs(args, patterns, exclude = false) {
        const sanitizedPatterns = patterns.map(pattern => pattern.trim()).filter(pattern => pattern.length > 0);
        for (let pattern of sanitizedPatterns) {
            // make sure the pattern always starts with `**/`
            if (pattern.startsWith('/')) {
                pattern = '**' + pattern;
            }
            else if (!pattern.startsWith('**/')) {
                pattern = '**/' + pattern;
            }
            // add the exclusion prefix
            if (exclude) {
                pattern = '!' + pattern;
            }
            args.add(`--glob=${pattern}`);
            // add a generic glob cli argument entry to include files inside a given directory
            if (!pattern.endsWith('*')) {
                // ensure the new pattern ends with `/*`
                pattern += pattern.endsWith('/') ? '*' : '/*';
                args.add(`--glob=${pattern}`);
            }
        }
    }
    /**
     * Transforms relative patterns to absolute paths, one for each given search path.
     * The resulting paths are not validated in the file system as the pattern keeps glob information.
     *
     * @returns The resulting list may be larger than the received patterns as a relative pattern may
     * resolve to multiple absolute patterns up to the number of search paths.
     */
    replaceRelativeToAbsolute(roots, patterns = []) {
        const expandedPatterns = new Set();
        for (const pattern of patterns) {
            if (this.isPatternRelative(pattern)) {
                // create new patterns using the absolute form for each root
                for (const root of roots) {
                    expandedPatterns.add(path.resolve(root, pattern));
                }
            }
            else {
                expandedPatterns.add(pattern);
            }
        }
        return Array.from(expandedPatterns);
    }
    /**
     * Tests if the pattern is relative and should/can be made absolute.
     */
    isPatternRelative(pattern) {
        return pattern.replace(/\\/g, '/').startsWith('./');
    }
    /**
     * By default, sets the search directories for the string WHAT to the provided ROOTURIS directories
     * and returns the assigned search id.
     *
     * The include / exclude (options in SearchInWorkspaceOptions) are lists of patterns for files to
     * include / exclude during search (glob characters are allowed).
     *
     * include patterns successfully recognized as absolute paths will override the default search and set
     * the search directories to the ones provided as includes.
     * Relative paths are allowed, the application will attempt to translate them to valid absolute paths
     * based on the applicable search directories.
     */
    async search(what, rootUris, options = {}) {
        // Start the rg process.  Use --vimgrep to get one result per
        // line, --color=always to get color control characters that
        // we'll use to parse the lines.
        const searchId = this.nextSearchId++;
        const rootPaths = rootUris.map(root => file_uri_1.FileUri.fsPath(root));
        // If there are absolute paths in `include` we will remove them and use
        // those as paths to search from.
        const searchPaths = await this.extractSearchPathsFromIncludes(rootPaths, options);
        options.include = this.replaceRelativeToAbsolute(searchPaths, options.include);
        options.exclude = this.replaceRelativeToAbsolute(searchPaths, options.exclude);
        const rgArgs = this.getArgs(options);
        // If we use matchWholeWord we use regExp internally, so we need
        // to escape regexp characters if we actually not set regexp true in UI.
        if ((options === null || options === void 0 ? void 0 : options.matchWholeWord) && !options.useRegExp) {
            what = what.replace(/[\-\\\{\}\*\+\?\|\^\$\.\[\]\(\)\#]/g, '\\$&');
            if (!/\B/.test(what.charAt(0))) {
                what = '\\b' + what;
            }
            if (!/\B/.test(what.charAt(what.length - 1))) {
                what = what + '\\b';
            }
        }
        const args = [...rgArgs, what, ...searchPaths];
        const processOptions = {
            command: this.rgPath,
            args
        };
        // TODO: Use child_process directly instead of rawProcessFactory?
        const rgProcess = this.rawProcessFactory(processOptions);
        this.ongoingSearches.set(searchId, rgProcess);
        rgProcess.onError(error => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let errorCode = error.code;
            // Try to provide somewhat clearer error messages, if possible.
            if (errorCode === 'ENOENT') {
                errorCode = 'could not find the ripgrep (rg) binary';
            }
            else if (errorCode === 'EACCES') {
                errorCode = 'could not execute the ripgrep (rg) binary';
            }
            const errorStr = `An error happened while searching (${errorCode}).`;
            this.wrapUpSearch(searchId, errorStr);
        });
        // Running counter of results.
        let numResults = 0;
        // Buffer to accumulate incoming output.
        let databuf = '';
        let currentSearchResult;
        rgProcess.outputStream.on('data', (chunk) => {
            // We might have already reached the max number of
            // results, sent a TERM signal to rg, but we still get
            // the data that was already output in the mean time.
            // It's not necessary to return early here (the check
            // for maxResults below would avoid sending extra
            // results), but it avoids doing unnecessary work.
            if ((options === null || options === void 0 ? void 0 : options.maxResults) && numResults >= options.maxResults) {
                return;
            }
            databuf += chunk;
            while (1) {
                // Check if we have a complete line.
                const eolIdx = databuf.indexOf('\n');
                if (eolIdx < 0) {
                    break;
                }
                // Get and remove the line from the data buffer.
                const lineBuf = databuf.slice(0, eolIdx);
                databuf = databuf.slice(eolIdx + 1);
                const obj = JSON.parse(lineBuf);
                if (obj.type === 'begin') {
                    const file = bytesOrTextToString(obj.data.path);
                    if (file) {
                        currentSearchResult = {
                            fileUri: file_uri_1.FileUri.create(file).toString(),
                            root: this.getRoot(file, rootUris).toString(),
                            matches: []
                        };
                    }
                    else {
                        this.logger.error('Begin message without path. ' + JSON.stringify(obj));
                    }
                }
                else if (obj.type === 'end') {
                    if (currentSearchResult && this.client) {
                        this.client.onResult(searchId, currentSearchResult);
                    }
                    currentSearchResult = undefined;
                }
                else if (obj.type === 'match') {
                    if (!currentSearchResult) {
                        continue;
                    }
                    const data = obj.data;
                    const file = bytesOrTextToString(data.path);
                    const line = data.line_number;
                    const lineText = bytesOrTextToString(data.lines);
                    if (file === undefined || lineText === undefined) {
                        continue;
                    }
                    const lineInBytes = Buffer.from(lineText);
                    for (const submatch of data.submatches) {
                        const startOffset = lineInBytes.slice(0, submatch.start).toString().length;
                        const match = bytesOrTextToString(submatch.match);
                        let lineInfo = lineText.trimRight();
                        if (lineInfo.length > 300) {
                            const prefixLength = 25;
                            const start = Math.max(startOffset - prefixLength, 0);
                            const length = prefixLength + match.length + 70;
                            let prefix = '';
                            if (start >= prefixLength) {
                                prefix = '...';
                            }
                            const character = (start < prefixLength ? start : prefixLength) + prefix.length + 1;
                            lineInfo = {
                                text: prefix + lineInfo.substring(start, start + length),
                                character
                            };
                        }
                        currentSearchResult.matches.push({
                            line,
                            character: startOffset + 1,
                            length: match.length,
                            lineText: lineInfo
                        });
                        numResults++;
                        // Did we reach the maximum number of results?
                        if ((options === null || options === void 0 ? void 0 : options.maxResults) && numResults >= options.maxResults) {
                            rgProcess.kill();
                            if (currentSearchResult && this.client) {
                                this.client.onResult(searchId, currentSearchResult);
                            }
                            currentSearchResult = undefined;
                            this.wrapUpSearch(searchId);
                            break;
                        }
                    }
                }
            }
        });
        rgProcess.outputStream.on('end', () => {
            // If we reached maxResults, we should have already
            // wrapped up the search.  Returning early avoids
            // logging a warning message in wrapUpSearch.
            if ((options === null || options === void 0 ? void 0 : options.maxResults) && numResults >= options.maxResults) {
                return;
            }
            this.wrapUpSearch(searchId);
        });
        return searchId;
    }
    /**
     * The default search paths are set to be the root paths associated to a workspace
     * however the search scope can be further refined with the include paths available in the search options.
     * This method will replace the searching paths to the ones specified in the 'include' options but as long
     * as the 'include' paths can be successfully validated as existing.
     *
     * Therefore the returned array of paths can be either the workspace root paths or a set of validated paths
     * derived from the include options which can be used to perform the search.
     *
     * Any pattern that resulted in a valid search path will be removed from the 'include' list as it is
     * provided as an equivalent search path instead.
     */
    async extractSearchPathsFromIncludes(rootPaths, options) {
        if (!options.include) {
            return rootPaths;
        }
        const resolvedPaths = new Set();
        const include = [];
        for (const pattern of options.include) {
            let keep = true;
            for (const root of rootPaths) {
                const absolutePath = await this.getAbsolutePathFromPattern(root, pattern);
                // undefined means the pattern cannot be converted into an absolute path
                if (absolutePath) {
                    resolvedPaths.add(absolutePath);
                    keep = false;
                }
            }
            if (keep) {
                include.push(pattern);
            }
        }
        options.include = include;
        return resolvedPaths.size > 0
            ? Array.from(resolvedPaths)
            : rootPaths;
    }
    /**
     * Transform include/exclude option patterns from relative patterns to absolute patterns.
     * E.g. './abc/foo.*' to '${root}/abc/foo.*', the transformation does not validate the
     * pattern against the file system as glob suffixes remain.
     *
     * @returns undefined if the pattern cannot be converted into an absolute path.
     */
    async getAbsolutePathFromPattern(root, pattern) {
        pattern = pattern.replace(/\\/g, '/');
        // The pattern is not referring to a single file or folder, i.e. not to be converted
        if (!path.isAbsolute(pattern) && !pattern.startsWith('./')) {
            return undefined;
        }
        // remove the `/**` suffix if present
        if (pattern.endsWith('/**')) {
            pattern = pattern.substring(0, pattern.length - 3);
        }
        // if `pattern` is absolute then `root` will be ignored by `path.resolve()`
        const targetPath = path.resolve(root, pattern);
        if (await fs.pathExists(targetPath)) {
            return targetPath;
        }
        return undefined;
    }
    /**
     * Returns the root folder uri that a file belongs to.
     * In case that a file belongs to more than one root folders, returns the root folder that is closest to the file.
     * If the file is not from the current workspace, returns empty string.
     * @param filePath string path of the file
     * @param rootUris string URIs of the root folders in the current workspace
     */
    getRoot(filePath, rootUris) {
        const roots = rootUris.filter(root => new uri_1.default(root).withScheme('file').isEqualOrParent(file_uri_1.FileUri.create(filePath).withScheme('file')));
        if (roots.length > 0) {
            return file_uri_1.FileUri.create(file_uri_1.FileUri.fsPath(roots.sort((r1, r2) => r2.length - r1.length)[0]));
        }
        return new uri_1.default();
    }
    // Cancel an ongoing search.  Trying to cancel a search that doesn't exist isn't an
    // error, otherwise we'd have to deal with race conditions, where a client cancels a
    // search that finishes normally at the same time.
    cancel(searchId) {
        const process = this.ongoingSearches.get(searchId);
        if (process) {
            process.kill();
            this.wrapUpSearch(searchId);
        }
        return Promise.resolve();
    }
    // Send onDone to the client and clean up what we know about search searchId.
    wrapUpSearch(searchId, error) {
        if (this.ongoingSearches.delete(searchId)) {
            if (this.client) {
                this.logger.debug('Sending onDone for ' + searchId, error);
                this.client.onDone(searchId, error);
            }
            else {
                this.logger.debug('Wrapping up search ' + searchId + ' but no client');
            }
        }
        else {
            this.logger.debug("Trying to wrap up a search we don't know about " + searchId);
        }
    }
    dispose() {
    }
};
__decorate([
    (0, inversify_1.inject)(exports.RgPath),
    __metadata("design:type", String)
], RipgrepSearchInWorkspaceServer.prototype, "rgPath", void 0);
RipgrepSearchInWorkspaceServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(core_1.ILogger)),
    __param(1, (0, inversify_1.inject)(node_1.RawProcessFactory)),
    __metadata("design:paramtypes", [Object, Function])
], RipgrepSearchInWorkspaceServer);
exports.RipgrepSearchInWorkspaceServer = RipgrepSearchInWorkspaceServer;


/***/ }),

/***/ "../../packages/search-in-workspace/lib/node/search-in-workspace-backend-module.js":
/*!*****************************************************************************************!*\
  !*** ../../packages/search-in-workspace/lib/node/search-in-workspace-backend-module.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const search_in_workspace_interface_1 = __webpack_require__(/*! ../common/search-in-workspace-interface */ "../../packages/search-in-workspace/lib/common/search-in-workspace-interface.js");
const ripgrep_search_in_workspace_server_1 = __webpack_require__(/*! ./ripgrep-search-in-workspace-server */ "../../packages/search-in-workspace/lib/node/ripgrep-search-in-workspace-server.js");
const ripgrep_1 = __webpack_require__(/*! @vscode/ripgrep */ "./lib/backend/native-webpack-plugin/2023822-45938-4nuat4.j4gr5/ripgrep.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(search_in_workspace_interface_1.SearchInWorkspaceServer).to(ripgrep_search_in_workspace_server_1.RipgrepSearchInWorkspaceServer);
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(search_in_workspace_interface_1.SIW_WS_PATH, client => {
        const server = ctx.container.get(search_in_workspace_interface_1.SearchInWorkspaceServer);
        server.setClient(client);
        client.onDidCloseConnection(() => server.dispose());
        return server;
    }));
    bind(ripgrep_search_in_workspace_server_1.RgPath).toConstantValue(ripgrep_1.rgPath);
});


/***/ }),

/***/ "../../packages/task/lib/common/index.js":
/*!***********************************************!*\
  !*** ../../packages/task/lib/common/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./task-protocol */ "../../packages/task/lib/common/task-protocol.js"), exports);
__exportStar(__webpack_require__(/*! ./task-watcher */ "../../packages/task/lib/common/task-watcher.js"), exports);
__exportStar(__webpack_require__(/*! ./problem-matcher-protocol */ "../../packages/task/lib/common/problem-matcher-protocol.js"), exports);
__exportStar(__webpack_require__(/*! ./task-util */ "../../packages/task/lib/common/task-util.js"), exports);


/***/ }),

/***/ "../../packages/task/lib/common/problem-matcher-protocol.js":
/*!******************************************************************!*\
  !*** ../../packages/task/lib/common/problem-matcher-protocol.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProblemMatchData = exports.ProblemPattern = exports.ProblemMatcher = exports.ProblemLocationKind = exports.WatchingMatcher = exports.FileLocationKind = exports.ApplyToKind = void 0;
var ApplyToKind;
(function (ApplyToKind) {
    ApplyToKind[ApplyToKind["allDocuments"] = 0] = "allDocuments";
    ApplyToKind[ApplyToKind["openDocuments"] = 1] = "openDocuments";
    ApplyToKind[ApplyToKind["closedDocuments"] = 2] = "closedDocuments";
})(ApplyToKind = exports.ApplyToKind || (exports.ApplyToKind = {}));
(function (ApplyToKind) {
    function fromString(value) {
        if (value) {
            value = value.toLowerCase();
            if (value === 'alldocuments') {
                return ApplyToKind.allDocuments;
            }
            else if (value === 'opendocuments') {
                return ApplyToKind.openDocuments;
            }
            else if (value === 'closeddocuments') {
                return ApplyToKind.closedDocuments;
            }
        }
        return undefined;
    }
    ApplyToKind.fromString = fromString;
})(ApplyToKind = exports.ApplyToKind || (exports.ApplyToKind = {}));
var FileLocationKind;
(function (FileLocationKind) {
    FileLocationKind[FileLocationKind["Auto"] = 0] = "Auto";
    FileLocationKind[FileLocationKind["Relative"] = 1] = "Relative";
    FileLocationKind[FileLocationKind["Absolute"] = 2] = "Absolute";
})(FileLocationKind = exports.FileLocationKind || (exports.FileLocationKind = {}));
(function (FileLocationKind) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'absolute') {
            return FileLocationKind.Absolute;
        }
        else if (value === 'relative') {
            return FileLocationKind.Relative;
        }
        else {
            return undefined;
        }
    }
    FileLocationKind.fromString = fromString;
})(FileLocationKind = exports.FileLocationKind || (exports.FileLocationKind = {}));
var WatchingMatcher;
(function (WatchingMatcher) {
    function fromWatchingMatcherContribution(value) {
        if (!value) {
            return undefined;
        }
        return {
            activeOnStart: !!value.activeOnStart,
            beginsPattern: typeof value.beginsPattern === 'string' ? { regexp: value.beginsPattern } : value.beginsPattern,
            endsPattern: typeof value.endsPattern === 'string' ? { regexp: value.endsPattern } : value.endsPattern
        };
    }
    WatchingMatcher.fromWatchingMatcherContribution = fromWatchingMatcherContribution;
})(WatchingMatcher = exports.WatchingMatcher || (exports.WatchingMatcher = {}));
var ProblemLocationKind;
(function (ProblemLocationKind) {
    ProblemLocationKind[ProblemLocationKind["File"] = 0] = "File";
    ProblemLocationKind[ProblemLocationKind["Location"] = 1] = "Location";
})(ProblemLocationKind = exports.ProblemLocationKind || (exports.ProblemLocationKind = {}));
(function (ProblemLocationKind) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'file') {
            return ProblemLocationKind.File;
        }
        else if (value === 'location') {
            return ProblemLocationKind.Location;
        }
        else {
            return undefined;
        }
    }
    ProblemLocationKind.fromString = fromString;
})(ProblemLocationKind = exports.ProblemLocationKind || (exports.ProblemLocationKind = {}));
var ProblemMatcher;
(function (ProblemMatcher) {
    function isWatchModeWatcher(matcher) {
        return !!matcher.watching;
    }
    ProblemMatcher.isWatchModeWatcher = isWatchModeWatcher;
})(ProblemMatcher = exports.ProblemMatcher || (exports.ProblemMatcher = {}));
var ProblemPattern;
(function (ProblemPattern) {
    function fromProblemPatternContribution(value) {
        return {
            name: value.name,
            regexp: value.regexp,
            kind: value.kind ? ProblemLocationKind.fromString(value.kind) : undefined,
            file: value.file,
            message: value.message,
            location: value.location,
            line: value.line,
            character: value.column || value.character,
            endLine: value.endLine,
            endCharacter: value.endColumn || value.endCharacter,
            code: value.code,
            severity: value.severity,
            loop: value.loop
        };
    }
    ProblemPattern.fromProblemPatternContribution = fromProblemPatternContribution;
})(ProblemPattern = exports.ProblemPattern || (exports.ProblemPattern = {}));
var ProblemMatchData;
(function (ProblemMatchData) {
    function is(data) {
        return 'marker' in data;
    }
    ProblemMatchData.is = is;
})(ProblemMatchData = exports.ProblemMatchData || (exports.ProblemMatchData = {}));


/***/ }),

/***/ "../../packages/task/lib/common/process/task-protocol.js":
/*!***************************************************************!*\
  !*** ../../packages/task/lib/common/process/task-protocol.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessTaskError = exports.ProcessTaskInfo = void 0;
const application_error_1 = __webpack_require__(/*! @theia/core/lib/common/application-error */ "../../packages/core/lib/common/application-error.js");
var ProcessTaskInfo;
(function (ProcessTaskInfo) {
    function is(info) {
        return info['processId'] !== undefined;
    }
    ProcessTaskInfo.is = is;
})(ProcessTaskInfo = exports.ProcessTaskInfo || (exports.ProcessTaskInfo = {}));
var ProcessTaskError;
(function (ProcessTaskError) {
    ProcessTaskError.CouldNotRun = application_error_1.ApplicationError.declare(1, (code) => ({
        message: `Error starting process (${code})`,
        data: { code }
    }));
})(ProcessTaskError = exports.ProcessTaskError || (exports.ProcessTaskError = {}));


/***/ }),

/***/ "../../packages/task/lib/common/task-common-module.js":
/*!************************************************************!*\
  !*** ../../packages/task/lib/common/task-common-module.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCommonBindings = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const task_watcher_1 = __webpack_require__(/*! ./task-watcher */ "../../packages/task/lib/common/task-watcher.js");
/**
 * Create the bindings common to node and browser.
 *
 * @param bind The bind function from inversify.
 */
function createCommonBindings(bind) {
    bind(core_1.ILogger).toDynamicValue(ctx => {
        const logger = ctx.container.get(core_1.ILogger);
        return logger.child('task');
    }).inSingletonScope().whenTargetNamed('task');
    bind(task_watcher_1.TaskWatcher).toSelf().inSingletonScope();
}
exports.createCommonBindings = createCommonBindings;


/***/ }),

/***/ "../../packages/task/lib/common/task-protocol.js":
/*!*******************************************************!*\
  !*** ../../packages/task/lib/common/task-protocol.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskScope = exports.TaskCustomization = exports.TaskOutputPresentation = exports.PanelKind = exports.RevealKind = exports.DependsOrder = exports.TaskClient = exports.TaskServer = exports.taskPath = void 0;
exports.taskPath = '/services/task';
exports.TaskServer = Symbol('TaskServer');
exports.TaskClient = Symbol('TaskClient');
var DependsOrder;
(function (DependsOrder) {
    DependsOrder["Sequence"] = "sequence";
    DependsOrder["Parallel"] = "parallel";
})(DependsOrder = exports.DependsOrder || (exports.DependsOrder = {}));
var RevealKind;
(function (RevealKind) {
    RevealKind["Always"] = "always";
    RevealKind["Silent"] = "silent";
    RevealKind["Never"] = "never";
})(RevealKind = exports.RevealKind || (exports.RevealKind = {}));
var PanelKind;
(function (PanelKind) {
    PanelKind["Shared"] = "shared";
    PanelKind["Dedicated"] = "dedicated";
    PanelKind["New"] = "new";
})(PanelKind = exports.PanelKind || (exports.PanelKind = {}));
var TaskOutputPresentation;
(function (TaskOutputPresentation) {
    function getDefault() {
        return {
            echo: true,
            reveal: RevealKind.Always,
            focus: false,
            panel: PanelKind.Shared,
            showReuseMessage: true,
            clear: false,
            close: false
        };
    }
    TaskOutputPresentation.getDefault = getDefault;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function fromJson(task) {
        let outputPresentation = getDefault();
        if (task && task.presentation) {
            if (task.presentation.reveal) {
                let reveal = RevealKind.Always;
                if (task.presentation.reveal === 'silent') {
                    reveal = RevealKind.Silent;
                }
                else if (task.presentation.reveal === 'never') {
                    reveal = RevealKind.Never;
                }
                outputPresentation = { ...outputPresentation, reveal };
            }
            if (task.presentation.panel) {
                let panel = PanelKind.Shared;
                if (task.presentation.panel === 'dedicated') {
                    panel = PanelKind.Dedicated;
                }
                else if (task.presentation.panel === 'new') {
                    panel = PanelKind.New;
                }
                outputPresentation = { ...outputPresentation, panel };
            }
            outputPresentation = {
                ...outputPresentation,
                echo: task.presentation.echo === undefined || task.presentation.echo,
                focus: shouldSetFocusToTerminal(task),
                showReuseMessage: shouldShowReuseMessage(task),
                clear: shouldClearTerminalBeforeRun(task),
                close: shouldCloseTerminalOnFinish(task)
            };
        }
        return outputPresentation;
    }
    TaskOutputPresentation.fromJson = fromJson;
    function shouldAlwaysRevealTerminal(task) {
        return !task.presentation || task.presentation.reveal === undefined || task.presentation.reveal === RevealKind.Always;
    }
    TaskOutputPresentation.shouldAlwaysRevealTerminal = shouldAlwaysRevealTerminal;
    function shouldSetFocusToTerminal(task) {
        return !!task.presentation && !!task.presentation.focus;
    }
    TaskOutputPresentation.shouldSetFocusToTerminal = shouldSetFocusToTerminal;
    function shouldClearTerminalBeforeRun(task) {
        return !!task.presentation && !!task.presentation.clear;
    }
    TaskOutputPresentation.shouldClearTerminalBeforeRun = shouldClearTerminalBeforeRun;
    function shouldCloseTerminalOnFinish(task) {
        return !!task.presentation && !!task.presentation.close;
    }
    TaskOutputPresentation.shouldCloseTerminalOnFinish = shouldCloseTerminalOnFinish;
    function shouldShowReuseMessage(task) {
        return !task.presentation || task.presentation.showReuseMessage === undefined || !!task.presentation.showReuseMessage;
    }
    TaskOutputPresentation.shouldShowReuseMessage = shouldShowReuseMessage;
})(TaskOutputPresentation = exports.TaskOutputPresentation || (exports.TaskOutputPresentation = {}));
var TaskCustomization;
(function (TaskCustomization) {
    function isBuildTask(task) {
        return task.group === 'build' || typeof task.group === 'object' && task.group.kind === 'build';
    }
    TaskCustomization.isBuildTask = isBuildTask;
    function isDefaultBuildTask(task) {
        return isDefaultTask(task) && isBuildTask(task);
    }
    TaskCustomization.isDefaultBuildTask = isDefaultBuildTask;
    function isDefaultTask(task) {
        return typeof task.group === 'object' && task.group.isDefault;
    }
    TaskCustomization.isDefaultTask = isDefaultTask;
    function isTestTask(task) {
        return task.group === 'test' || typeof task.group === 'object' && task.group.kind === 'test';
    }
    TaskCustomization.isTestTask = isTestTask;
    function isDefaultTestTask(task) {
        return isDefaultTask(task) && isTestTask(task);
    }
    TaskCustomization.isDefaultTestTask = isDefaultTestTask;
})(TaskCustomization = exports.TaskCustomization || (exports.TaskCustomization = {}));
var TaskScope;
(function (TaskScope) {
    TaskScope[TaskScope["Global"] = 1] = "Global";
    TaskScope[TaskScope["Workspace"] = 2] = "Workspace";
})(TaskScope = exports.TaskScope || (exports.TaskScope = {}));


/***/ }),

/***/ "../../packages/task/lib/common/task-util.js":
/*!***************************************************!*\
  !*** ../../packages/task/lib/common/task-util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromVariableName = exports.asVariableName = void 0;
/**
 * Converts the given standard name to a variable name starting with '$' if not already present.
 *
 * Variable names are used, for instance, to reference problem matchers, within task configurations.
 *
 * @param name standard name
 * @returns variable name with leading '$' if not already present.
 *
 * @see {@link fromVariableName} for the reverse conversion.
 */
function asVariableName(name) {
    return name.startsWith('$') ? name : `$${name}`;
}
exports.asVariableName = asVariableName;
/**
 * Converts a given variable name to a standard name, effectively removing a leading '$' if present.
 *
 * Standard names are used, for instance, in registries to store variable objects
 *
 * @param name variable name
 * @returns variable name without leading '$' if present.
 *
 * @see {@link asVariableName} for the reverse conversion.
 */
function fromVariableName(name) {
    return name.startsWith('$') ? name.slice(1) : name;
}
exports.fromVariableName = fromVariableName;


/***/ }),

/***/ "../../packages/task/lib/common/task-watcher.js":
/*!******************************************************!*\
  !*** ../../packages/task/lib/common/task-watcher.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskWatcher = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
let TaskWatcher = class TaskWatcher {
    constructor() {
        this.onTaskCreatedEmitter = new event_1.Emitter();
        this.onTaskExitEmitter = new event_1.Emitter();
        this.onDidStartTaskProcessEmitter = new event_1.Emitter();
        this.onDidEndTaskProcessEmitter = new event_1.Emitter();
        this.onOutputProcessedEmitter = new event_1.Emitter();
        this.onBackgroundTaskEndedEmitter = new event_1.Emitter();
    }
    getTaskClient() {
        const newTaskEmitter = this.onTaskCreatedEmitter;
        const exitEmitter = this.onTaskExitEmitter;
        const taskProcessStartedEmitter = this.onDidStartTaskProcessEmitter;
        const taskProcessEndedEmitter = this.onDidEndTaskProcessEmitter;
        const outputProcessedEmitter = this.onOutputProcessedEmitter;
        const backgroundTaskEndedEmitter = this.onBackgroundTaskEndedEmitter;
        return {
            onTaskCreated(event) {
                newTaskEmitter.fire(event);
            },
            onTaskExit(event) {
                exitEmitter.fire(event);
            },
            onDidStartTaskProcess(event) {
                taskProcessStartedEmitter.fire(event);
            },
            onDidEndTaskProcess(event) {
                taskProcessEndedEmitter.fire(event);
            },
            onDidProcessTaskOutput(event) {
                outputProcessedEmitter.fire(event);
            },
            onBackgroundTaskEnded(event) {
                backgroundTaskEndedEmitter.fire(event);
            }
        };
    }
    get onTaskCreated() {
        return this.onTaskCreatedEmitter.event;
    }
    get onTaskExit() {
        return this.onTaskExitEmitter.event;
    }
    get onDidStartTaskProcess() {
        return this.onDidStartTaskProcessEmitter.event;
    }
    get onDidEndTaskProcess() {
        return this.onDidEndTaskProcessEmitter.event;
    }
    get onOutputProcessed() {
        return this.onOutputProcessedEmitter.event;
    }
    get onBackgroundTaskEnded() {
        return this.onBackgroundTaskEndedEmitter.event;
    }
};
TaskWatcher = __decorate([
    (0, inversify_1.injectable)()
], TaskWatcher);
exports.TaskWatcher = TaskWatcher;


/***/ }),

/***/ "../../packages/task/lib/node/custom/custom-task-runner-backend-module.js":
/*!********************************************************************************!*\
  !*** ../../packages/task/lib/node/custom/custom-task-runner-backend-module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 ByteDance and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCustomTaskRunnerModule = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const custom_task_1 = __webpack_require__(/*! ./custom-task */ "../../packages/task/lib/node/custom/custom-task.js");
const custom_task_runner_1 = __webpack_require__(/*! ./custom-task-runner */ "../../packages/task/lib/node/custom/custom-task-runner.js");
const custom_task_runner_contribution_1 = __webpack_require__(/*! ./custom-task-runner-contribution */ "../../packages/task/lib/node/custom/custom-task-runner-contribution.js");
const task_runner_1 = __webpack_require__(/*! ../task-runner */ "../../packages/task/lib/node/task-runner.js");
function bindCustomTaskRunnerModule(bind) {
    bind(custom_task_1.CustomTask).toSelf().inTransientScope();
    bind(custom_task_1.TaskFactory).toFactory(ctx => (options) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(custom_task_1.TaskCustomOptions).toConstantValue(options);
        return child.get(custom_task_1.CustomTask);
    });
    bind(custom_task_runner_1.CustomTaskRunner).toSelf().inSingletonScope();
    bind(custom_task_runner_contribution_1.CustomTaskRunnerContribution).toSelf().inSingletonScope();
    bind(task_runner_1.TaskRunnerContribution).toService(custom_task_runner_contribution_1.CustomTaskRunnerContribution);
}
exports.bindCustomTaskRunnerModule = bindCustomTaskRunnerModule;


/***/ }),

/***/ "../../packages/task/lib/node/custom/custom-task-runner-contribution.js":
/*!******************************************************************************!*\
  !*** ../../packages/task/lib/node/custom/custom-task-runner-contribution.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 ByteDance and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomTaskRunnerContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const custom_task_runner_1 = __webpack_require__(/*! ./custom-task-runner */ "../../packages/task/lib/node/custom/custom-task-runner.js");
let CustomTaskRunnerContribution = class CustomTaskRunnerContribution {
    registerRunner(runners) {
        runners.registerRunner('customExecution', this.customTaskRunner);
    }
};
__decorate([
    (0, inversify_1.inject)(custom_task_runner_1.CustomTaskRunner),
    __metadata("design:type", custom_task_runner_1.CustomTaskRunner)
], CustomTaskRunnerContribution.prototype, "customTaskRunner", void 0);
CustomTaskRunnerContribution = __decorate([
    (0, inversify_1.injectable)()
], CustomTaskRunnerContribution);
exports.CustomTaskRunnerContribution = CustomTaskRunnerContribution;


/***/ }),

/***/ "../../packages/task/lib/node/custom/custom-task-runner.js":
/*!*****************************************************************!*\
  !*** ../../packages/task/lib/node/custom/custom-task-runner.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 ByteDance and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomTaskRunner = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const custom_task_1 = __webpack_require__(/*! ./custom-task */ "../../packages/task/lib/node/custom/custom-task.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
/**
 * Task runner that runs a task as a pseudoterminal open.
 */
let CustomTaskRunner = class CustomTaskRunner {
    async run(taskConfig, ctx) {
        try {
            const terminalProcessOptions = { isPseudo: true };
            const terminal = this.terminalProcessFactory(terminalProcessOptions);
            return this.taskFactory({
                context: ctx,
                config: taskConfig,
                label: taskConfig.label,
                process: terminal,
            });
        }
        catch (error) {
            this.logger.error(`Error occurred while creating task: ${error}`);
            throw error;
        }
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    (0, inversify_1.named)('task'),
    __metadata("design:type", Object)
], CustomTaskRunner.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(node_1.TerminalProcessFactory),
    __metadata("design:type", Function)
], CustomTaskRunner.prototype, "terminalProcessFactory", void 0);
__decorate([
    (0, inversify_1.inject)(custom_task_1.TaskFactory),
    __metadata("design:type", Function)
], CustomTaskRunner.prototype, "taskFactory", void 0);
CustomTaskRunner = __decorate([
    (0, inversify_1.injectable)()
], CustomTaskRunner);
exports.CustomTaskRunner = CustomTaskRunner;


/***/ }),

/***/ "../../packages/task/lib/node/custom/custom-task.js":
/*!**********************************************************!*\
  !*** ../../packages/task/lib/node/custom/custom-task.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 ByteDance and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomTask = exports.TaskFactory = exports.TaskCustomOptions = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common/ */ "../../packages/core/lib/common/index.js");
const task_1 = __webpack_require__(/*! ../task */ "../../packages/task/lib/node/task.js");
const task_manager_1 = __webpack_require__(/*! ../task-manager */ "../../packages/task/lib/node/task-manager.js");
exports.TaskCustomOptions = Symbol('TaskCustomOptions');
exports.TaskFactory = Symbol('TaskFactory');
/** Represents a Task launched as a fake process by `CustomTaskRunner`. */
let CustomTask = class CustomTask extends task_1.Task {
    constructor(taskManager, logger, options) {
        super(taskManager, logger, options);
        this.options = options;
        this.logger.info(`Created new custom task, id: ${this.id}, context: ${this.context}`);
    }
    kill() {
        return Promise.resolve();
    }
    getRuntimeInfo() {
        return {
            taskId: this.id,
            ctx: this.context,
            config: this.options.config,
            terminalId: this.process.id,
            processId: this.process.id
        };
    }
    callbackTaskComplete(exitCode) {
        this.fireTaskExited({
            taskId: this.taskId,
            ctx: this.context,
            config: this.options.config,
            terminalId: this.process.id,
            processId: this.process.id,
            code: exitCode || 0
        });
    }
    get process() {
        return this.options.process;
    }
};
CustomTask = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(task_manager_1.TaskManager)),
    __param(1, (0, inversify_1.inject)(common_1.ILogger)),
    __param(1, (0, inversify_1.named)('task')),
    __param(2, (0, inversify_1.inject)(exports.TaskCustomOptions)),
    __metadata("design:paramtypes", [task_manager_1.TaskManager, Object, Object])
], CustomTask);
exports.CustomTask = CustomTask;


/***/ }),

/***/ "../../packages/task/lib/node/process/process-task-runner-backend-module.js":
/*!**********************************************************************************!*\
  !*** ../../packages/task/lib/node/process/process-task-runner-backend-module.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindProcessTaskRunnerModule = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const process_task_1 = __webpack_require__(/*! ./process-task */ "../../packages/task/lib/node/process/process-task.js");
const process_task_runner_1 = __webpack_require__(/*! ./process-task-runner */ "../../packages/task/lib/node/process/process-task-runner.js");
const process_task_runner_contribution_1 = __webpack_require__(/*! ./process-task-runner-contribution */ "../../packages/task/lib/node/process/process-task-runner-contribution.js");
const task_runner_1 = __webpack_require__(/*! ../task-runner */ "../../packages/task/lib/node/task-runner.js");
function bindProcessTaskRunnerModule(bind) {
    bind(process_task_1.ProcessTask).toSelf().inTransientScope();
    bind(process_task_1.TaskFactory).toFactory(ctx => (options) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(process_task_1.TaskProcessOptions).toConstantValue(options);
        return child.get(process_task_1.ProcessTask);
    });
    bind(process_task_runner_1.ProcessTaskRunner).toSelf().inSingletonScope();
    bind(process_task_runner_contribution_1.ProcessTaskRunnerContribution).toSelf().inSingletonScope();
    bind(task_runner_1.TaskRunnerContribution).toService(process_task_runner_contribution_1.ProcessTaskRunnerContribution);
}
exports.bindProcessTaskRunnerModule = bindProcessTaskRunnerModule;


/***/ }),

/***/ "../../packages/task/lib/node/process/process-task-runner-contribution.js":
/*!********************************************************************************!*\
  !*** ../../packages/task/lib/node/process/process-task-runner-contribution.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessTaskRunnerContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const process_task_runner_1 = __webpack_require__(/*! ./process-task-runner */ "../../packages/task/lib/node/process/process-task-runner.js");
let ProcessTaskRunnerContribution = class ProcessTaskRunnerContribution {
    registerRunner(runners) {
        runners.registerRunner('process', this.processTaskRunner);
        runners.registerRunner('shell', this.processTaskRunner);
    }
};
__decorate([
    (0, inversify_1.inject)(process_task_runner_1.ProcessTaskRunner),
    __metadata("design:type", process_task_runner_1.ProcessTaskRunner)
], ProcessTaskRunnerContribution.prototype, "processTaskRunner", void 0);
ProcessTaskRunnerContribution = __decorate([
    (0, inversify_1.injectable)()
], ProcessTaskRunnerContribution);
exports.ProcessTaskRunnerContribution = ProcessTaskRunnerContribution;


/***/ }),

/***/ "../../packages/task/lib/node/process/process-task-runner.js":
/*!*******************************************************************!*\
  !*** ../../packages/task/lib/node/process/process-task-runner.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017-2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessTaskRunner = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const node_2 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const shell_quoting_1 = __webpack_require__(/*! @theia/process/lib/common/shell-quoting */ "../../packages/process/lib/common/shell-quoting.js");
const process_task_1 = __webpack_require__(/*! ./process-task */ "../../packages/task/lib/node/process/process-task.js");
const task_protocol_1 = __webpack_require__(/*! ../../common/process/task-protocol */ "../../packages/task/lib/common/process/task-protocol.js");
const fs = __webpack_require__(/*! fs */ "fs");
const shell_process_1 = __webpack_require__(/*! @theia/terminal/lib/node/shell-process */ "../../packages/terminal/lib/node/shell-process.js");
/**
 * Task runner that runs a task as a process or a command inside a shell.
 */
let ProcessTaskRunner = class ProcessTaskRunner {
    /**
     * Runs a task from the given task configuration.
     * @param taskConfig task configuration to run a task from. The provided task configuration must have a shape of `CommandProperties`.
     */
    async run(taskConfig, ctx) {
        if (!taskConfig.command) {
            throw new Error("Process task config must have 'command' property specified");
        }
        try {
            // Always spawn a task in a pty, the only difference between shell/process tasks is the
            // way the command is passed:
            // - process: directly look for an executable and pass a specific set of arguments/options.
            // - shell: defer the spawning to a shell that will evaluate a command line with our executable.
            const terminalProcessOptions = this.getResolvedCommand(taskConfig);
            const terminal = this.taskTerminalProcessFactory(terminalProcessOptions);
            // Wait for the confirmation that the process is successfully started, or has failed to start.
            await new Promise((resolve, reject) => {
                terminal.onStart(resolve);
                terminal.onError((error) => {
                    reject(task_protocol_1.ProcessTaskError.CouldNotRun(error.code));
                });
            });
            const processType = (taskConfig.taskType || taskConfig.type);
            return this.taskFactory({
                label: taskConfig.label,
                process: terminal,
                processType,
                context: ctx,
                config: taskConfig,
                command: this.getCommand(processType, terminalProcessOptions)
            });
        }
        catch (error) {
            this.logger.error(`Error occurred while creating task: ${error}`);
            throw error;
        }
    }
    getResolvedCommand(taskConfig) {
        const osSpecificCommand = this.getOsSpecificCommand(taskConfig);
        const options = osSpecificCommand.options;
        // Use task's cwd with spawned process and pass node env object to
        // new process, so e.g. we can re-use the system path
        if (options) {
            options.env = {
                ...process.env,
                ...(options.env || {})
            };
        }
        /** Executable to actually spawn. */
        let command;
        /** List of arguments passed to `command`. */
        let args;
        /**
         * Only useful on Windows, has to do with how node-pty handles complex commands.
         * This string should not include the executable, only what comes after it (arguments).
         */
        let commandLine;
        if ((taskConfig.taskType || taskConfig.type) === 'shell') {
            // When running a shell task, we have to spawn a shell process somehow,
            // and tell it to run the command the user wants to run inside of it.
            //
            // E.g:
            // - Spawning a process:
            //     spawn(process_exe, [...args])
            // - Spawning a shell and run a command:
            //     spawn(shell_exe, [shell_exec_cmd_flag, command])
            //
            // The fun part is, the `command` to pass as an argument usually has to be
            // what you would type verbatim inside the shell, so escaping rules apply.
            //
            // What's even more funny is that on Windows, node-pty uses a special
            // mechanism to pass complex escaped arguments, via a string.
            //
            // We need to accommodate most shells, so we need to get specific.
            const { shell } = osSpecificCommand.options;
            command = (shell === null || shell === void 0 ? void 0 : shell.executable) || shell_process_1.ShellProcess.getShellExecutablePath();
            const { execArgs, quotingFunctions } = this.getShellSpecificOptions(command);
            // Allow overriding shell options from task configuration.
            args = (shell === null || shell === void 0 ? void 0 : shell.args) ? [...shell.args] : [...execArgs];
            // Check if an argument list is defined or not. Empty is ok.
            /** Shell command to run: */
            const shellCommand = this.buildShellCommand(osSpecificCommand, quotingFunctions);
            if (core_1.isWindows && /cmd(.exe)?$/.test(command)) {
                // Let's take the following command, including an argument containing whitespace:
                //     cmd> node -p process.argv 1 2 "  3"
                //
                // We would expect the following output:
                //     json> [ '...\\node.exe', '1', '2', '  3' ]
                //
                // Let's run this command through `cmd.exe` using `child_process`:
                //     js> void childprocess.spawn('cmd.exe', ['/s', '/c', 'node -p process.argv 1 2 "  3"']).stderr.on('data', console.log)
                //
                // We get the correct output, but when using node-pty:
                //     js> void nodepty.spawn('cmd.exe', ['/s', '/c', 'node -p process.argv 1 2 "  3"']).on('data', console.log)
                //
                // Then the output looks like:
                //     json> [ '...\\node.exe', '1', '2', '"', '3"' ]
                //
                // To fix that, we need to use a special node-pty feature and pass arguments as one string:
                //     js> nodepty.spawn('cmd.exe', '/s /c "node -p process.argv 1 2 "  3""')
                //
                // Note the extra quotes that need to be added around the whole command.
                commandLine = [...args, `"${shellCommand}"`].join(' ');
            }
            args.push(shellCommand);
        }
        else {
            // When running process tasks, `command` is the executable to run,
            // and `args` are the arguments we want to pass to it.
            command = osSpecificCommand.command;
            if (Array.isArray(osSpecificCommand.args)) {
                // Process task doesn't handle quotation: Normalize arguments from `ShellQuotedString` to raw `string`.
                args = osSpecificCommand.args.map(arg => typeof arg === 'string' ? arg : arg.value);
            }
            else {
                args = [];
            }
        }
        return { command, args, commandLine, options };
    }
    buildShellCommand(systemSpecificCommand, quotingFunctions) {
        var _a;
        if (Array.isArray(systemSpecificCommand.args)) {
            const commandLineElements = [systemSpecificCommand.command, ...systemSpecificCommand.args].map(arg => {
                // We want to quote arguments only if needed.
                if (quotingFunctions && typeof arg === 'string' && this.argumentNeedsQuotes(arg, quotingFunctions)) {
                    return {
                        quoting: "strong" /* Strong */,
                        value: arg,
                    };
                }
                else {
                    return arg;
                }
            });
            return (0, shell_quoting_1.createShellCommandLine)(commandLineElements, quotingFunctions);
        }
        else {
            // No arguments are provided, so `command` is actually the full command line to execute.
            return (_a = systemSpecificCommand.command) !== null && _a !== void 0 ? _a : '';
        }
    }
    getShellSpecificOptions(command) {
        if (/bash(.exe)?$/.test(command)) {
            return {
                quotingFunctions: shell_quoting_1.BashQuotingFunctions,
                execArgs: ['-c']
            };
        }
        else if (/wsl(.exe)?$/.test(command)) {
            return {
                quotingFunctions: shell_quoting_1.BashQuotingFunctions,
                execArgs: ['-e']
            };
        }
        else if (/cmd(.exe)?$/.test(command)) {
            return {
                quotingFunctions: shell_quoting_1.CmdQuotingFunctions,
                execArgs: ['/S', '/C']
            };
        }
        else if (/(ps|pwsh|powershell)(.exe)?/.test(command)) {
            return {
                quotingFunctions: shell_quoting_1.PowershellQuotingFunctions,
                execArgs: ['-c']
            };
        }
        else {
            return {
                quotingFunctions: shell_quoting_1.BashQuotingFunctions,
                execArgs: ['-l', '-c']
            };
        }
    }
    getOsSpecificCommand(taskConfig) {
        // on windows, windows-specific options, if available, take precedence
        if (core_1.isWindows && taskConfig.windows !== undefined) {
            return this.getSystemSpecificCommand(taskConfig, 'windows');
        }
        else if (core_1.isOSX && taskConfig.osx !== undefined) { // on macOS, mac-specific options, if available, take precedence
            return this.getSystemSpecificCommand(taskConfig, 'osx');
        }
        else if (!core_1.isWindows && !core_1.isOSX && taskConfig.linux !== undefined) { // on linux, linux-specific options, if available, take precedence
            return this.getSystemSpecificCommand(taskConfig, 'linux');
        }
        else { // system-specific options are unavailable, use the default
            return this.getSystemSpecificCommand(taskConfig, undefined);
        }
    }
    getCommand(processType, terminalProcessOptions) {
        if (terminalProcessOptions.args) {
            if (processType === 'shell') {
                return terminalProcessOptions.args[terminalProcessOptions.args.length - 1];
            }
            else if (processType === 'process') {
                return `${terminalProcessOptions.command} ${terminalProcessOptions.args.join(' ')}`;
            }
        }
    }
    /**
     * This is task specific, to align with VS Code's behavior.
     *
     * When parsing arguments, VS Code will try to detect if the user already
     * tried to quote things.
     *
     * See: https://github.com/microsoft/vscode/blob/d363b988e1e58cf49963841c498681cdc6cb55a3/src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts#L1101-L1127
     *
     * @param value
     * @param shellQuotingOptions
     */
    argumentNeedsQuotes(value, shellQuotingOptions) {
        const { characters } = shellQuotingOptions;
        const needQuotes = new Set([' ', ...characters.needQuotes || []]);
        if (!characters) {
            return false;
        }
        if (value.length >= 2) {
            const first = value[0] === characters.strong ? characters.strong : value[0] === characters.weak ? characters.weak : undefined;
            if (first === value[value.length - 1]) {
                return false;
            }
        }
        let quote;
        for (let i = 0; i < value.length; i++) {
            // We found the end quote.
            const ch = value[i];
            if (ch === quote) {
                quote = undefined;
            }
            else if (quote !== undefined) {
                // skip the character. We are quoted.
                continue;
            }
            else if (ch === characters.escape) {
                // Skip the next character
                i++;
            }
            else if (ch === characters.strong || ch === characters.weak) {
                quote = ch;
            }
            else if (needQuotes.has(ch)) {
                return true;
            }
        }
        return false;
    }
    getSystemSpecificCommand(taskConfig, system) {
        // initialize with default values from the `taskConfig`
        let command = taskConfig.command;
        let args = taskConfig.args;
        let options = (0, core_1.deepClone)(taskConfig.options) || {};
        if (system) {
            if (taskConfig[system].command) {
                command = taskConfig[system].command;
            }
            if (taskConfig[system].args) {
                args = taskConfig[system].args;
            }
            if (taskConfig[system].options) {
                options = taskConfig[system].options;
            }
        }
        if (options.cwd) {
            options.cwd = this.asFsPath(options.cwd);
        }
        if (command === undefined) {
            throw new Error('The `command` field of a task cannot be undefined.');
        }
        return { command, args, options };
    }
    asFsPath(uriOrPath) {
        return (uriOrPath.startsWith('file:'))
            ? node_1.FileUri.fsPath(uriOrPath)
            : uriOrPath;
    }
    /**
     * @deprecated
     *
     * Remove ProcessTaskRunner.findCommand, introduce process "started" event
     * Checks for the existence of a file, at the provided path, and make sure that
     * it's readable and executable.
     */
    async executableFileExists(filePath) {
        return new Promise(async (resolve, reject) => {
            fs.access(filePath, fs.constants.F_OK | fs.constants.X_OK, err => {
                resolve(err ? false : true);
            });
        });
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ILogger),
    (0, inversify_1.named)('task'),
    __metadata("design:type", Object)
], ProcessTaskRunner.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(node_2.RawProcessFactory),
    __metadata("design:type", Function)
], ProcessTaskRunner.prototype, "rawProcessFactory", void 0);
__decorate([
    (0, inversify_1.inject)(node_2.TaskTerminalProcessFactory),
    __metadata("design:type", Function)
], ProcessTaskRunner.prototype, "taskTerminalProcessFactory", void 0);
__decorate([
    (0, inversify_1.inject)(process_task_1.TaskFactory),
    __metadata("design:type", Function)
], ProcessTaskRunner.prototype, "taskFactory", void 0);
ProcessTaskRunner = __decorate([
    (0, inversify_1.injectable)()
], ProcessTaskRunner);
exports.ProcessTaskRunner = ProcessTaskRunner;


/***/ }),

/***/ "../../packages/task/lib/node/process/process-task.js":
/*!************************************************************!*\
  !*** ../../packages/task/lib/node/process/process-task.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProcessTask = exports.TaskFactory = exports.TaskProcessOptions = exports.removeAnsiEscapeCodes = void 0;
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common/ */ "../../packages/core/lib/common/index.js");
const task_1 = __webpack_require__(/*! ../task */ "../../packages/task/lib/node/task.js");
const task_manager_1 = __webpack_require__(/*! ../task-manager */ "../../packages/task/lib/node/task-manager.js");
// copied from https://github.com/microsoft/vscode/blob/1.79.0/src/vs/base/common/strings.ts#L736
const CSI_SEQUENCE = /(:?\x1b\[|\x9B)[=?>!]?[\d;:]*["$#'* ]?[a-zA-Z@^`{}|~]/g;
// Plus additional markers for custom `\x1b]...\x07` instructions.
const CSI_CUSTOM_SEQUENCE = /\x1b\].*?\x07/g;
function removeAnsiEscapeCodes(str) {
    if (str) {
        str = str.replace(CSI_SEQUENCE, '').replace(CSI_CUSTOM_SEQUENCE, '');
    }
    return str.trimEnd();
}
exports.removeAnsiEscapeCodes = removeAnsiEscapeCodes;
exports.TaskProcessOptions = Symbol('TaskProcessOptions');
exports.TaskFactory = Symbol('TaskFactory');
/** Represents a Task launched as a process by `ProcessTaskRunner`. */
let ProcessTask = class ProcessTask extends task_1.Task {
    constructor(taskManager, logger, options) {
        super(taskManager, logger, options);
        this.options = options;
        const toDispose = this.process.onClose(async (event) => {
            toDispose.dispose();
            this.fireTaskExited(await this.getTaskExitedEvent(event));
        });
        // Buffer to accumulate incoming output.
        let dataBuffer = '';
        this.process.outputStream.on('data', (chunk) => {
            dataBuffer += chunk;
            while (1) {
                // Check if we have a complete line.
                const eolIdx = dataBuffer.indexOf('\n');
                if (eolIdx < 0) {
                    break;
                }
                // Get and remove the line from the data buffer.
                const lineBuf = dataBuffer.slice(0, eolIdx);
                dataBuffer = dataBuffer.slice(eolIdx + 1);
                const processedLine = removeAnsiEscapeCodes(lineBuf);
                this.fireOutputLine({
                    taskId: this.taskId,
                    ctx: this.context,
                    line: processedLine
                });
            }
        });
        this.command = this.options.command;
        this.logger.info(`Created new task, id: ${this.id}, process id: ${this.options.process.id}, OS PID: ${this.process.pid}, context: ${this.context}`);
    }
    kill() {
        return new Promise(resolve => {
            if (this.process.killed) {
                resolve();
            }
            else {
                const toDispose = this.process.onClose(event => {
                    toDispose.dispose();
                    resolve();
                });
                this.process.kill();
            }
        });
    }
    async getTaskExitedEvent(evt) {
        return {
            taskId: this.taskId,
            ctx: this.context,
            code: evt.code,
            signal: evt.signal,
            config: this.options.config,
            terminalId: this.process.id,
            processId: this.process.id
        };
    }
    getRuntimeInfo() {
        return {
            taskId: this.id,
            ctx: this.context,
            config: this.options.config,
            terminalId: this.process.id,
            processId: this.process.id,
            command: this.command
        };
    }
    get process() {
        return this.options.process;
    }
    get processType() {
        return this.options.processType;
    }
};
ProcessTask = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(task_manager_1.TaskManager)),
    __param(1, (0, inversify_1.inject)(common_1.ILogger)),
    __param(1, (0, inversify_1.named)('task')),
    __param(2, (0, inversify_1.inject)(exports.TaskProcessOptions)),
    __metadata("design:paramtypes", [task_manager_1.TaskManager, Object, Object])
], ProcessTask);
exports.ProcessTask = ProcessTask;


/***/ }),

/***/ "../../packages/task/lib/node/task-abstract-line-matcher.js":
/*!******************************************************************!*\
  !*** ../../packages/task/lib/node/task-abstract-line-matcher.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractLineMatcher = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const os_1 = __webpack_require__(/*! @theia/core/lib/common/os */ "../../packages/core/lib/common/os.js");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! @theia/core/shared/vscode-languageserver-protocol */ "../../packages/core/shared/vscode-languageserver-protocol/index.js");
const problem_matcher_protocol_1 = __webpack_require__(/*! ../common/problem-matcher-protocol */ "../../packages/task/lib/common/problem-matcher-protocol.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const severity_1 = __webpack_require__(/*! @theia/core/lib/common/severity */ "../../packages/core/lib/common/severity.js");
const numbers_1 = __webpack_require__(/*! @theia/core/lib/common/numbers */ "../../packages/core/lib/common/numbers.js");
const path_1 = __webpack_require__(/*! path */ "path");
const endOfLine = os_1.EOL;
class AbstractLineMatcher {
    constructor(matcher) {
        this.matcher = matcher;
        this.patterns = [];
        this.activePatternIndex = 0;
        if (Array.isArray(matcher.pattern)) {
            this.patterns = matcher.pattern;
        }
        else {
            this.patterns = [matcher.pattern];
        }
        this.cachedProblemData = this.getEmptyProblemData();
        if (this.patterns.slice(0, this.patternCount - 1).some(p => !!p.loop)) {
            console.error('Problem Matcher: Only the last pattern can loop');
        }
    }
    /**
     * Number of problem patterns that the line matcher uses.
     */
    get patternCount() {
        return this.patterns.length;
    }
    getEmptyProblemData() {
        // eslint-disable-next-line no-null/no-null
        return Object.create(null);
    }
    fillProblemData(data, pattern, matches) {
        if (data) {
            this.fillProperty(data, 'file', pattern, matches, true);
            this.appendProperty(data, 'message', pattern, matches, true);
            this.fillProperty(data, 'code', pattern, matches, true);
            this.fillProperty(data, 'severity', pattern, matches, true);
            this.fillProperty(data, 'location', pattern, matches, true);
            this.fillProperty(data, 'line', pattern, matches);
            this.fillProperty(data, 'character', pattern, matches);
            this.fillProperty(data, 'endLine', pattern, matches);
            this.fillProperty(data, 'endCharacter', pattern, matches);
            return true;
        }
        return false;
    }
    appendProperty(data, property, pattern, matches, trim = false) {
        const patternProperty = pattern[property];
        if (data[property] === undefined) {
            this.fillProperty(data, property, pattern, matches, trim);
        }
        else if (patternProperty !== undefined && patternProperty < matches.length) {
            let value = matches[patternProperty];
            if (trim) {
                value = value.trim();
            }
            data[property] += endOfLine + value;
        }
    }
    fillProperty(data, property, pattern, matches, trim = false) {
        const patternAtProperty = pattern[property];
        if (data[property] === undefined && patternAtProperty !== undefined && patternAtProperty < matches.length) {
            let value = matches[patternAtProperty];
            if (value !== undefined) {
                if (trim) {
                    value = value.trim();
                }
                data[property] = value;
            }
        }
    }
    getMarkerMatch(data) {
        try {
            const location = this.getLocation(data);
            if (data.file && location && data.message) {
                const marker = {
                    severity: this.getSeverity(data),
                    range: location,
                    message: data.message
                };
                if (data.code !== undefined) {
                    marker.code = data.code;
                }
                if (this.matcher.source !== undefined) {
                    marker.source = this.matcher.source;
                }
                return {
                    description: this.matcher,
                    resource: this.getResource(data.file, this.matcher),
                    marker
                };
            }
            return {
                description: this.matcher
            };
        }
        catch (err) {
            console.error(`Failed to convert problem data into match: ${JSON.stringify(data)}`);
        }
        return undefined;
    }
    getLocation(data) {
        if (data.kind === problem_matcher_protocol_1.ProblemLocationKind.File) {
            return this.createRange(0, 0, 0, 0);
        }
        if (data.location) {
            return this.parseLocationInfo(data.location);
        }
        if (!data.line) {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
        const startLine = parseInt(data.line);
        const startColumn = data.character ? parseInt(data.character) : undefined;
        const endLine = data.endLine ? parseInt(data.endLine) : undefined;
        const endColumn = data.endCharacter ? parseInt(data.endCharacter) : undefined;
        return this.createRange(startLine, startColumn, endLine, endColumn);
    }
    parseLocationInfo(value) {
        if (!value || !value.match(/(\d+|\d+,\d+|\d+,\d+,\d+,\d+)/)) {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
        const parts = value.split(',');
        const startLine = parseInt(parts[0]);
        const startColumn = parts.length > 1 ? parseInt(parts[1]) : undefined;
        if (parts.length > 3) {
            return this.createRange(startLine, startColumn, parseInt(parts[2]), parseInt(parts[3]));
        }
        else {
            return this.createRange(startLine, startColumn, undefined, undefined);
        }
    }
    createRange(startLine, startColumn, endLine, endColumn) {
        let range;
        if (startColumn !== undefined) {
            if (endColumn !== undefined) {
                range = vscode_languageserver_protocol_1.Range.create(startLine, startColumn, endLine || startLine, endColumn);
            }
            else {
                range = vscode_languageserver_protocol_1.Range.create(startLine, startColumn, startLine, startColumn);
            }
        }
        else {
            range = vscode_languageserver_protocol_1.Range.create(startLine, 1, startLine, numbers_1.MAX_SAFE_INTEGER);
        }
        // range indexes should be zero-based
        return vscode_languageserver_protocol_1.Range.create(this.getZeroBasedRangeIndex(range.start.line), this.getZeroBasedRangeIndex(range.start.character), this.getZeroBasedRangeIndex(range.end.line), this.getZeroBasedRangeIndex(range.end.character));
    }
    getZeroBasedRangeIndex(ind) {
        return ind === 0 ? ind : ind - 1;
    }
    getSeverity(data) {
        // eslint-disable-next-line no-null/no-null
        let result = null;
        if (data.severity) {
            const value = data.severity;
            if (value) {
                result = severity_1.Severity.fromValue(value);
                if (result === severity_1.Severity.Ignore) {
                    if (value === 'E') {
                        result = severity_1.Severity.Error;
                    }
                    else if (value === 'W') {
                        result = severity_1.Severity.Warning;
                    }
                    else if (value === 'I') {
                        result = severity_1.Severity.Info;
                    }
                    else if (value.toLowerCase() === 'hint') {
                        result = severity_1.Severity.Info;
                    }
                    else if (value.toLowerCase() === 'note') {
                        result = severity_1.Severity.Info;
                    }
                }
            }
        }
        // eslint-disable-next-line no-null/no-null
        if (result === null || result === severity_1.Severity.Ignore) {
            result = this.matcher.severity || severity_1.Severity.Error;
        }
        return severity_1.Severity.toDiagnosticSeverity(result);
    }
    getResource(filename, matcher) {
        const kind = matcher.fileLocation;
        let fullPath;
        if (kind === problem_matcher_protocol_1.FileLocationKind.Absolute) {
            fullPath = filename;
        }
        else if ((kind === problem_matcher_protocol_1.FileLocationKind.Relative) && matcher.filePrefix) {
            let relativeFileName = filename.replace(/\\/g, '/');
            if (relativeFileName.startsWith('./')) {
                relativeFileName = relativeFileName.slice(2);
            }
            fullPath = (0, path_1.join)(matcher.filePrefix, relativeFileName);
        }
        if (fullPath === undefined) {
            throw new Error('FileLocationKind is not actionable. Does the matcher have a filePrefix? This should never happen.');
        }
        if (matcher.uriProvider !== undefined) {
            return matcher.uriProvider(fullPath);
        }
        else {
            return uri_1.default.fromFilePath(fullPath);
        }
    }
    resetActivePatternIndex(defaultIndex) {
        if (defaultIndex === undefined) {
            defaultIndex = 0;
        }
        this.activePatternIndex = defaultIndex;
        this.activePattern = this.patterns[defaultIndex];
    }
    nextProblemPattern() {
        this.activePatternIndex++;
        if (this.activePatternIndex > this.patternCount - 1) {
            this.resetActivePatternIndex();
        }
        else {
            this.activePattern = this.patterns[this.activePatternIndex];
        }
    }
    doOneLineMatch(line) {
        var _a;
        var _b;
        if (this.activePattern) {
            const regexp = new RegExp(this.activePattern.regexp);
            const regexMatches = regexp.exec(line);
            if (regexMatches) {
                (_a = (_b = this.cachedProblemData).kind) !== null && _a !== void 0 ? _a : (_b.kind = this.activePattern.kind);
                return this.fillProblemData(this.cachedProblemData, this.activePattern, regexMatches);
            }
        }
        return false;
    }
    // check if active pattern is the last pattern
    isUsingTheLastPattern() {
        return this.patternCount > 0 && this.activePatternIndex === this.patternCount - 1;
    }
    isLastPatternLoop() {
        return this.patternCount > 0 && !!this.patterns[this.patternCount - 1].loop;
    }
    resetCachedProblemData() {
        this.cachedProblemData = this.getEmptyProblemData();
    }
}
exports.AbstractLineMatcher = AbstractLineMatcher;


/***/ }),

/***/ "../../packages/task/lib/node/task-backend-application-contribution.js":
/*!*****************************************************************************!*\
  !*** ../../packages/task/lib/node/task-backend-application-contribution.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskBackendApplicationContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const task_runner_1 = __webpack_require__(/*! ./task-runner */ "../../packages/task/lib/node/task-runner.js");
let TaskBackendApplicationContribution = class TaskBackendApplicationContribution {
    onStart() {
        this.contributionProvider.getContributions().forEach(contrib => contrib.registerRunner(this.taskRunnerRegistry));
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(task_runner_1.TaskRunnerContribution),
    __metadata("design:type", Object)
], TaskBackendApplicationContribution.prototype, "contributionProvider", void 0);
__decorate([
    (0, inversify_1.inject)(task_runner_1.TaskRunnerRegistry),
    __metadata("design:type", task_runner_1.TaskRunnerRegistry)
], TaskBackendApplicationContribution.prototype, "taskRunnerRegistry", void 0);
TaskBackendApplicationContribution = __decorate([
    (0, inversify_1.injectable)()
], TaskBackendApplicationContribution);
exports.TaskBackendApplicationContribution = TaskBackendApplicationContribution;


/***/ }),

/***/ "../../packages/task/lib/node/task-backend-module.js":
/*!***********************************************************!*\
  !*** ../../packages/task/lib/node/task-backend-module.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const messaging_1 = __webpack_require__(/*! @theia/core/lib/common/messaging */ "../../packages/core/lib/common/messaging/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const process_task_runner_backend_module_1 = __webpack_require__(/*! ./process/process-task-runner-backend-module */ "../../packages/task/lib/node/process/process-task-runner-backend-module.js");
const custom_task_runner_backend_module_1 = __webpack_require__(/*! ./custom/custom-task-runner-backend-module */ "../../packages/task/lib/node/custom/custom-task-runner-backend-module.js");
const task_backend_application_contribution_1 = __webpack_require__(/*! ./task-backend-application-contribution */ "../../packages/task/lib/node/task-backend-application-contribution.js");
const task_manager_1 = __webpack_require__(/*! ./task-manager */ "../../packages/task/lib/node/task-manager.js");
const task_runner_1 = __webpack_require__(/*! ./task-runner */ "../../packages/task/lib/node/task-runner.js");
const task_server_1 = __webpack_require__(/*! ./task-server */ "../../packages/task/lib/node/task-server.js");
const task_common_module_1 = __webpack_require__(/*! ../common/task-common-module */ "../../packages/task/lib/common/task-common-module.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/task/lib/common/index.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(task_manager_1.TaskManager).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(task_manager_1.TaskManager);
    bind(common_1.TaskServer).to(task_server_1.TaskServerImpl).inSingletonScope();
    bind(messaging_1.ConnectionHandler).toDynamicValue(ctx => new messaging_1.RpcConnectionHandler(common_1.taskPath, client => {
        const taskServer = ctx.container.get(common_1.TaskServer);
        taskServer.setClient(client);
        // when connection closes, cleanup that client of task-server
        client.onDidCloseConnection(() => {
            taskServer.disconnectClient(client);
        });
        return taskServer;
    })).inSingletonScope();
    (0, task_common_module_1.createCommonBindings)(bind);
    bind(task_runner_1.TaskRunnerRegistry).toSelf().inSingletonScope();
    (0, core_1.bindContributionProvider)(bind, task_runner_1.TaskRunnerContribution);
    bind(task_backend_application_contribution_1.TaskBackendApplicationContribution).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toService(task_backend_application_contribution_1.TaskBackendApplicationContribution);
    (0, process_task_runner_backend_module_1.bindProcessTaskRunnerModule)(bind);
    (0, custom_task_runner_backend_module_1.bindCustomTaskRunnerModule)(bind);
});


/***/ }),

/***/ "../../packages/task/lib/node/task-line-matchers.js":
/*!**********************************************************!*\
  !*** ../../packages/task/lib/node/task-line-matchers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WatchModeLineMatcher = exports.StartStopLineMatcher = void 0;
const task_abstract_line_matcher_1 = __webpack_require__(/*! ./task-abstract-line-matcher */ "../../packages/task/lib/node/task-abstract-line-matcher.js");
class StartStopLineMatcher extends task_abstract_line_matcher_1.AbstractLineMatcher {
    constructor(matcher) {
        super(matcher);
    }
    /**
     * Finds the problem identified by this line matcher.
     *
     * @param line the line of text to find the problem from
     * @return the identified problem. If the problem is not found, `undefined` is returned.
     */
    match(line) {
        if (!this.activePattern) {
            this.resetActivePatternIndex();
        }
        if (this.activePattern) {
            const originalProblemData = Object.assign(this.getEmptyProblemData(), this.cachedProblemData);
            const foundMatch = this.doOneLineMatch(line);
            if (foundMatch) {
                if (this.isUsingTheLastPattern()) {
                    const matchResult = this.getMarkerMatch(this.cachedProblemData);
                    if (this.isLastPatternLoop()) {
                        this.cachedProblemData = originalProblemData;
                    }
                    else {
                        this.resetCachedProblemData();
                        this.resetActivePatternIndex();
                    }
                    return matchResult;
                }
                else {
                    this.nextProblemPattern();
                }
            }
            else {
                this.resetCachedProblemData();
                if (this.activePatternIndex !== 0) { // if no match, use the first pattern to parse the same line
                    this.resetActivePatternIndex();
                    return this.match(line);
                }
            }
        }
        return undefined;
    }
}
exports.StartStopLineMatcher = StartStopLineMatcher;
class WatchModeLineMatcher extends StartStopLineMatcher {
    constructor(matcher) {
        super(matcher);
        this.activeOnStart = false;
        this.beginsPattern = matcher.watching.beginsPattern;
        this.endsPattern = matcher.watching.endsPattern;
        this.activeOnStart = matcher.watching.activeOnStart === true;
        this.resetActivePatternIndex(this.activeOnStart ? 0 : -1);
    }
    /**
     * Finds the problem identified by this line matcher.
     *
     * @param line the line of text to find the problem from
     * @return the identified problem. If the problem is not found, `undefined` is returned.
     */
    match(line) {
        if (this.activeOnStart) {
            this.activeOnStart = false;
            this.resetActivePatternIndex(0);
            this.resetCachedProblemData();
            return super.match(line);
        }
        if (this.matchBegin(line)) {
            const beginsPatternMatch = this.getMarkerMatch(this.cachedProblemData);
            this.resetCachedProblemData();
            return beginsPatternMatch;
        }
        if (this.matchEnd(line)) {
            this.resetCachedProblemData();
            return undefined;
        }
        if (this.activePattern) {
            return super.match(line);
        }
        return undefined;
    }
    matchBegin(line) {
        const beginRegexp = new RegExp(this.beginsPattern.regexp);
        const regexMatches = beginRegexp.exec(line);
        if (regexMatches) {
            this.fillProblemData(this.cachedProblemData, this.beginsPattern, regexMatches);
            this.resetActivePatternIndex(0);
            return true;
        }
        return false;
    }
    matchEnd(line) {
        const endRegexp = new RegExp(this.endsPattern.regexp);
        const match = endRegexp.exec(line);
        if (match) {
            this.resetActivePatternIndex(-1);
            return true;
        }
        return false;
    }
}
exports.WatchModeLineMatcher = WatchModeLineMatcher;


/***/ }),

/***/ "../../packages/task/lib/node/task-manager.js":
/*!****************************************************!*\
  !*** ../../packages/task/lib/node/task-manager.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskManager = void 0;
// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
// inspired by process-manager.ts
/**
 * The {@link TaskManager} is the common component responsible for managing running tasks.
 */
let TaskManager = class TaskManager {
    constructor(logger) {
        this.logger = logger;
        /** contains all running tasks */
        this.tasks = new Map();
        /** contains running tasks per context */
        this.tasksPerCtx = new Map();
        /** each task has this unique task id, for this back-end */
        this.id = -1;
        /**
         * Emit when a registered task is deleted.
         */
        this.deleteEmitter = new common_1.Emitter();
    }
    /**
     * Registers a new task (in the given context if present). Each registered
     * task is considered to be currently running.
     * @param task the new task.
     * @param ctx  the provided context.
     *
     * @returns the registration id for the given task.
     */
    register(task, ctx) {
        const id = ++this.id;
        this.tasks.set(id, task);
        if (ctx) {
            let tks = this.tasksPerCtx.get(ctx);
            if (tks === undefined) {
                tks = [];
            }
            tks.push(task);
            this.tasksPerCtx.set(ctx, tks);
        }
        return id;
    }
    /**
     * Try to retrieve the registered task for the given id.
     * @param id the task registration id.
     *
     * @returns the task or `undefined` if no task was registered for the given id.
     */
    get(id) {
        return this.tasks.get(id);
    }
    /**
     * Returns all running tasks. If a context is provided, filter-down to
     * only tasks started from that context.
     * @param ctx the task execution context.
     *
     * @returns all running tasks for the given context or `undefined` if no tasks are registered for the given context.
     */
    getTasks(ctx) {
        if (!ctx) {
            return [...this.tasks.values()];
        }
        else {
            if (this.tasksPerCtx.has(ctx)) {
                return this.tasksPerCtx.get(ctx);
            }
        }
    }
    /**
     * Delete the given task from the task manager.
     * @param task the task to delete.
     */
    delete(task) {
        this.tasks.delete(task.id);
        const ctx = task.context;
        if (ctx && this.tasksPerCtx.has(ctx)) {
            const tasksForWS = this.tasksPerCtx.get(ctx);
            if (tasksForWS !== undefined) {
                const idx = tasksForWS.indexOf(task);
                if (idx !== -1) {
                    tasksForWS.splice(idx, 1);
                }
            }
        }
        this.deleteEmitter.fire(task.id);
    }
    get onDelete() {
        return this.deleteEmitter.event;
    }
    /**
     * Is triggered on application stop to cleanup all ongoing tasks.
     */
    onStop() {
        this.tasks.forEach((task, id) => {
            this.logger.debug(`Task Backend application: onStop(): cleaning task id: ${id}`);
            this.delete(task);
        });
    }
};
TaskManager = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(common_1.ILogger)),
    __param(0, (0, inversify_1.named)('task')),
    __metadata("design:paramtypes", [Object])
], TaskManager);
exports.TaskManager = TaskManager;


/***/ }),

/***/ "../../packages/task/lib/node/task-problem-collector.js":
/*!**************************************************************!*\
  !*** ../../packages/task/lib/node/task-problem-collector.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2019 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProblemCollector = void 0;
const problem_matcher_protocol_1 = __webpack_require__(/*! ../common/problem-matcher-protocol */ "../../packages/task/lib/common/problem-matcher-protocol.js");
const task_line_matchers_1 = __webpack_require__(/*! ./task-line-matchers */ "../../packages/task/lib/node/task-line-matchers.js");
class ProblemCollector {
    constructor(problemMatchers) {
        this.problemMatchers = problemMatchers;
        this.lineMatchers = [];
        for (const matcher of problemMatchers) {
            if (problem_matcher_protocol_1.ProblemMatcher.isWatchModeWatcher(matcher)) {
                this.lineMatchers.push(new task_line_matchers_1.WatchModeLineMatcher(matcher));
            }
            else {
                this.lineMatchers.push(new task_line_matchers_1.StartStopLineMatcher(matcher));
            }
        }
    }
    processLine(line) {
        const markers = [];
        this.lineMatchers.forEach(lineMatcher => {
            const match = lineMatcher.match(line);
            if (match) {
                markers.push(match);
            }
        });
        return markers;
    }
    isTaskActiveOnStart() {
        const activeOnStart = this.lineMatchers.some(lineMatcher => (lineMatcher instanceof task_line_matchers_1.WatchModeLineMatcher) && lineMatcher.activeOnStart);
        return activeOnStart;
    }
    matchBeginMatcher(line) {
        const match = this.lineMatchers.some(lineMatcher => (lineMatcher instanceof task_line_matchers_1.WatchModeLineMatcher) && lineMatcher.matchBegin(line));
        return match;
    }
    matchEndMatcher(line) {
        const match = this.lineMatchers.some(lineMatcher => (lineMatcher instanceof task_line_matchers_1.WatchModeLineMatcher) && lineMatcher.matchEnd(line));
        return match;
    }
}
exports.ProblemCollector = ProblemCollector;


/***/ }),

/***/ "../../packages/task/lib/node/task-runner-protocol.js":
/*!************************************************************!*\
  !*** ../../packages/task/lib/node/task-runner-protocol.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskRunner = void 0;
exports.TaskRunner = Symbol('TaskRunner');


/***/ }),

/***/ "../../packages/task/lib/node/task-runner.js":
/*!***************************************************!*\
  !*** ../../packages/task/lib/node/task-runner.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskRunnerRegistry = exports.TaskRunnerContribution = exports.TaskRunner = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const process_task_runner_1 = __webpack_require__(/*! ./process/process-task-runner */ "../../packages/task/lib/node/process/process-task-runner.js");
const task_runner_protocol_1 = __webpack_require__(/*! ./task-runner-protocol */ "../../packages/task/lib/node/task-runner-protocol.js");
Object.defineProperty(exports, "TaskRunner", ({ enumerable: true, get: function () { return task_runner_protocol_1.TaskRunner; } }));
exports.TaskRunnerContribution = Symbol('TaskRunnerContribution');
/**
 * The {@link TaskRunnerRegistry} is the common component for the registration and provisioning of
 * {@link TaskRunner}s. Theia will collect all {@link TaskRunner}s and invoke {@link TaskRunnerContribution#registerRunner}
 * for each contribution. The `TaskServer` will use the runners provided by this registry to execute `TaskConfiguration`s that
 * have been triggered by the user.
 */
let TaskRunnerRegistry = class TaskRunnerRegistry {
    init() {
        this.runners = new Map();
        this.defaultRunner = this.processTaskRunner;
    }
    /**
     * Registers the given {@link TaskRunner} to execute Tasks of the specified type.
     * If there is already a {@link TaskRunner} registered for the specified type the registration will
     * be overwritten with the new value.
     * @param type the task type for which the given runner should be registered.
     * @param runner the task runner that should be registered.
     *
     * @returns a `Disposable` that can be invoked to unregister the given runner.
     */
    registerRunner(type, runner) {
        this.runners.set(type, runner);
        return {
            dispose: () => this.runners.delete(type)
        };
    }
    /**
     * Looks for a registered {@link TaskRunner} for each of the task types in sequence and returns the first that is found
     * If no task runner is registered for any of the types, the default runner is returned.
     * @param types the task types.
     *
     * @returns the registered {@link TaskRunner} or a default runner if none is registered for the specified types.
     */
    getRunner(...types) {
        for (const type of types) {
            const runner = this.runners.get(type);
            if (runner) {
                return runner;
            }
        }
        return this.defaultRunner;
    }
    /**
     * Derives all task types for which a {@link TaskRunner} is registered.
     *
     * @returns all derived task types.
     */
    getRunnerTypes() {
        return [...this.runners.keys()];
    }
};
__decorate([
    (0, inversify_1.inject)(process_task_runner_1.ProcessTaskRunner),
    __metadata("design:type", process_task_runner_1.ProcessTaskRunner)
], TaskRunnerRegistry.prototype, "processTaskRunner", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TaskRunnerRegistry.prototype, "init", null);
TaskRunnerRegistry = __decorate([
    (0, inversify_1.injectable)()
], TaskRunnerRegistry);
exports.TaskRunnerRegistry = TaskRunnerRegistry;


/***/ }),

/***/ "../../packages/task/lib/node/task-server.js":
/*!***************************************************!*\
  !*** ../../packages/task/lib/node/task-server.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TaskServerImpl = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common/ */ "../../packages/core/lib/common/index.js");
const task_manager_1 = __webpack_require__(/*! ./task-manager */ "../../packages/task/lib/node/task-manager.js");
const task_runner_1 = __webpack_require__(/*! ./task-runner */ "../../packages/task/lib/node/task-runner.js");
const process_task_1 = __webpack_require__(/*! ./process/process-task */ "../../packages/task/lib/node/process/process-task.js");
const task_problem_collector_1 = __webpack_require__(/*! ./task-problem-collector */ "../../packages/task/lib/node/task-problem-collector.js");
let TaskServerImpl = class TaskServerImpl {
    constructor() {
        /** Task clients, to send notifications-to. */
        this.clients = [];
        /** Map of task id and task disposable */
        this.toDispose = new Map();
        /** Map of task id and task background status. */
        // Currently there is only one property ('isActive'), but in the future we may want to store more properties
        this.backgroundTaskStatusMap = new Map();
        /** task context - {task id - problem collector} */
        this.problemCollectors = new Map();
    }
    dispose() {
        for (const toDispose of this.toDispose.values()) {
            toDispose.dispose();
        }
        this.toDispose.clear();
        this.backgroundTaskStatusMap.clear();
    }
    disposeByTaskId(taskId) {
        if (this.toDispose.has(taskId)) {
            this.toDispose.get(taskId).dispose();
            this.toDispose.delete(taskId);
        }
        if (this.backgroundTaskStatusMap.has(taskId)) {
            this.backgroundTaskStatusMap.delete(taskId);
        }
    }
    async getTasks(context) {
        const taskInfo = [];
        const tasks = this.taskManager.getTasks(context);
        if (tasks !== undefined) {
            for (const task of tasks) {
                taskInfo.push(await task.getRuntimeInfo());
            }
        }
        this.logger.debug(`getTasks(): about to return task information for ${taskInfo.length} tasks`);
        return Promise.resolve(taskInfo);
    }
    async run(taskConfiguration, ctx, option) {
        const runner = this.runnerRegistry.getRunner(taskConfiguration.type, taskConfiguration.taskType);
        const task = await runner.run(taskConfiguration, ctx);
        if (!this.toDispose.has(task.id)) {
            this.toDispose.set(task.id, new common_1.DisposableCollection());
        }
        if (taskConfiguration.isBackground && !this.backgroundTaskStatusMap.has(task.id)) {
            this.backgroundTaskStatusMap.set(task.id, { 'isActive': false });
        }
        this.toDispose.get(task.id).push(task.onExit(event => {
            this.taskManager.delete(task);
            this.fireTaskExitedEvent(event, task);
            this.removedCachedProblemCollector(event.ctx || '', event.taskId);
            this.disposeByTaskId(event.taskId);
        }));
        const resolvedMatchers = option && option.customization ? option.customization.problemMatcher || [] : [];
        if (resolvedMatchers.length > 0) {
            this.toDispose.get(task.id).push(task.onOutput(event => {
                let collector = this.getCachedProblemCollector(event.ctx || '', event.taskId);
                if (!collector) {
                    collector = new task_problem_collector_1.ProblemCollector(resolvedMatchers);
                    this.cacheProblemCollector(event.ctx || '', event.taskId, collector);
                }
                const problems = collector.processLine(event.line);
                if (problems.length > 0) {
                    this.fireTaskOutputProcessedEvent({
                        taskId: event.taskId,
                        config: taskConfiguration,
                        ctx: event.ctx,
                        problems
                    });
                }
                if (taskConfiguration.isBackground) {
                    const backgroundTaskStatus = this.backgroundTaskStatusMap.get(event.taskId);
                    if (!backgroundTaskStatus.isActive) {
                        // Get the 'activeOnStart' value of the problem matcher 'background' property
                        const activeOnStart = collector.isTaskActiveOnStart();
                        if (activeOnStart) {
                            backgroundTaskStatus.isActive = true;
                        }
                        else {
                            const isBeginsPatternMatch = collector.matchBeginMatcher(event.line);
                            if (isBeginsPatternMatch) {
                                backgroundTaskStatus.isActive = true;
                            }
                        }
                    }
                    if (backgroundTaskStatus.isActive) {
                        const isEndsPatternMatch = collector.matchEndMatcher(event.line);
                        // Mark ends pattern as matches, only after begins pattern matches
                        if (isEndsPatternMatch) {
                            this.fireBackgroundTaskEndedEvent({
                                taskId: event.taskId,
                                ctx: event.ctx
                            });
                        }
                    }
                }
            }));
        }
        this.toDispose.get(task.id).push(task);
        const taskInfo = await task.getRuntimeInfo();
        this.fireTaskCreatedEvent(taskInfo);
        return taskInfo;
    }
    async getRegisteredTaskTypes() {
        return this.runnerRegistry.getRunnerTypes();
    }
    async customExecutionComplete(id, exitCode) {
        const task = this.taskManager.get(id);
        await task.callbackTaskComplete(exitCode);
    }
    fireTaskExitedEvent(event, task) {
        this.logger.debug(log => log('task has exited:', event));
        if (task instanceof process_task_1.ProcessTask) {
            this.clients.forEach(client => {
                client.onDidEndTaskProcess(event);
            });
        }
        this.clients.forEach(client => {
            client.onTaskExit(event);
        });
    }
    fireTaskCreatedEvent(event, task) {
        this.logger.debug(log => log('task created:', event));
        this.clients.forEach(client => {
            client.onTaskCreated(event);
        });
        if (task && task instanceof process_task_1.ProcessTask) {
            this.clients.forEach(client => {
                client.onDidStartTaskProcess(event);
            });
        }
    }
    fireTaskOutputProcessedEvent(event) {
        this.clients.forEach(client => client.onDidProcessTaskOutput(event));
    }
    fireBackgroundTaskEndedEvent(event) {
        this.clients.forEach(client => client.onBackgroundTaskEnded(event));
    }
    /** Kill task for a given id. Rejects if task is not found */
    async kill(id) {
        const taskToKill = this.taskManager.get(id);
        if (taskToKill !== undefined) {
            this.logger.info(`Killing task id ${id}`);
            return taskToKill.kill();
        }
        else {
            this.logger.info(`Could not find task to kill, task id ${id}. Already terminated?`);
            return Promise.reject(new Error(`Could not find task to kill, task id ${id}. Already terminated?`));
        }
    }
    /** Adds a client to this server */
    setClient(client) {
        this.logger.debug('a client has connected - adding it to the list:');
        this.clients.push(client);
    }
    /** Removes a client, from this server */
    disconnectClient(client) {
        this.logger.debug('a client has disconnected - removed from list:');
        const idx = this.clients.indexOf(client);
        if (idx > -1) {
            this.clients.splice(idx, 1);
        }
    }
    getCachedProblemCollector(ctx, taskId) {
        if (this.problemCollectors.has(ctx)) {
            return this.problemCollectors.get(ctx).get(taskId);
        }
    }
    cacheProblemCollector(ctx, taskId, problemCollector) {
        if (this.problemCollectors.has(ctx)) {
            if (!this.problemCollectors.get(ctx).has(taskId)) {
                this.problemCollectors.get(ctx).set(taskId, problemCollector);
            }
        }
        else {
            const forNewContext = new Map();
            forNewContext.set(taskId, problemCollector);
            this.problemCollectors.set(ctx, forNewContext);
        }
    }
    removedCachedProblemCollector(ctx, taskId) {
        if (this.problemCollectors.has(ctx) && this.problemCollectors.get(ctx).has(taskId)) {
            this.problemCollectors.get(ctx).delete(taskId);
        }
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    (0, inversify_1.named)('task'),
    __metadata("design:type", Object)
], TaskServerImpl.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(task_manager_1.TaskManager),
    __metadata("design:type", task_manager_1.TaskManager)
], TaskServerImpl.prototype, "taskManager", void 0);
__decorate([
    (0, inversify_1.inject)(task_runner_1.TaskRunnerRegistry),
    __metadata("design:type", task_runner_1.TaskRunnerRegistry)
], TaskServerImpl.prototype, "runnerRegistry", void 0);
TaskServerImpl = __decorate([
    (0, inversify_1.injectable)()
], TaskServerImpl);
exports.TaskServerImpl = TaskServerImpl;


/***/ }),

/***/ "../../packages/task/lib/node/task.js":
/*!********************************************!*\
  !*** ../../packages/task/lib/node/task.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Task = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common/ */ "../../packages/core/lib/common/index.js");
/**
 * A {@link Task} represents the execution state of a `TaskConfiguration`.
 * Implementing classes have to call the {@link Task#fireOutputLine} function
 * whenever a new output occurs during the execution.
 */
let Task = class Task {
    constructor(taskManager, logger, options) {
        this.taskManager = taskManager;
        this.logger = logger;
        this.options = options;
        this.toDispose = new common_1.DisposableCollection();
        this.taskId = this.taskManager.register(this, this.options.context);
        this.exitEmitter = new common_1.Emitter();
        this.outputEmitter = new common_1.Emitter();
        this.toDispose.push(this.exitEmitter);
        this.toDispose.push(this.outputEmitter);
    }
    get onExit() {
        return this.exitEmitter.event;
    }
    get onOutput() {
        return this.outputEmitter.event;
    }
    /** Has to be called when a task has concluded its execution. */
    fireTaskExited(event) {
        this.exitEmitter.fire(event);
    }
    fireOutputLine(event) {
        this.outputEmitter.fire(event);
    }
    get id() {
        return this.taskId;
    }
    get context() {
        return this.options.context;
    }
    get label() {
        return this.options.label;
    }
    dispose() {
        this.toDispose.dispose();
    }
};
Task = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [Object, Object, Object])
], Task);
exports.Task = Task;


/***/ }),

/***/ "../../packages/terminal/lib/common/base-terminal-protocol.js":
/*!********************************************************************!*\
  !*** ../../packages/terminal/lib/common/base-terminal-protocol.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentVariableMutatorType = exports.ENVIRONMENT_VARIABLE_COLLECTIONS_KEY = exports.DispatchingBaseTerminalClient = exports.TerminalExitReason = exports.IBaseTerminalServer = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
var IBaseTerminalServer;
(function (IBaseTerminalServer) {
    function validateId(id) {
        return typeof id === 'number' && id !== -1;
    }
    IBaseTerminalServer.validateId = validateId;
})(IBaseTerminalServer = exports.IBaseTerminalServer || (exports.IBaseTerminalServer = {}));
var TerminalExitReason;
(function (TerminalExitReason) {
    TerminalExitReason[TerminalExitReason["Unknown"] = 0] = "Unknown";
    TerminalExitReason[TerminalExitReason["Shutdown"] = 1] = "Shutdown";
    TerminalExitReason[TerminalExitReason["Process"] = 2] = "Process";
    TerminalExitReason[TerminalExitReason["User"] = 3] = "User";
    TerminalExitReason[TerminalExitReason["Extension"] = 4] = "Extension";
})(TerminalExitReason = exports.TerminalExitReason || (exports.TerminalExitReason = {}));
class DispatchingBaseTerminalClient {
    constructor() {
        this.clients = new Set();
    }
    push(client) {
        this.clients.add(client);
        return core_1.Disposable.create(() => this.clients.delete(client));
    }
    onTerminalExitChanged(event) {
        this.clients.forEach(c => {
            try {
                c.onTerminalExitChanged(event);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    onTerminalError(event) {
        this.clients.forEach(c => {
            try {
                c.onTerminalError(event);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    updateTerminalEnvVariables() {
        this.clients.forEach(c => {
            try {
                c.updateTerminalEnvVariables();
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    storeTerminalEnvVariables(data) {
        this.clients.forEach(c => {
            try {
                c.storeTerminalEnvVariables(data);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
}
exports.DispatchingBaseTerminalClient = DispatchingBaseTerminalClient;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// some code copied and modified from https://github.com/microsoft/vscode/blob/1.49.0/src/vs/workbench/contrib/terminal/common/environmentVariable.ts
exports.ENVIRONMENT_VARIABLE_COLLECTIONS_KEY = 'terminal.integrated.environmentVariableCollections';
var EnvironmentVariableMutatorType;
(function (EnvironmentVariableMutatorType) {
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Replace"] = 1] = "Replace";
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Append"] = 2] = "Append";
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Prepend"] = 3] = "Prepend";
})(EnvironmentVariableMutatorType = exports.EnvironmentVariableMutatorType || (exports.EnvironmentVariableMutatorType = {}));


/***/ }),

/***/ "../../packages/terminal/lib/common/shell-terminal-protocol.js":
/*!*********************************************************************!*\
  !*** ../../packages/terminal/lib/common/shell-terminal-protocol.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellTerminalServerProxy = exports.shellTerminalPath = exports.IShellTerminalServer = void 0;
exports.IShellTerminalServer = Symbol('IShellTerminalServer');
exports.shellTerminalPath = '/services/shell-terminal';
;
exports.ShellTerminalServerProxy = Symbol('ShellTerminalServerProxy');


/***/ }),

/***/ "../../packages/terminal/lib/common/terminal-common-module.js":
/*!********************************************************************!*\
  !*** ../../packages/terminal/lib/common/terminal-common-module.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCommonBindings = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
/**
 * Create the bindings common to node and browser.
 *
 * @param bind The bind function from inversify.
 */
function createCommonBindings(bind) {
    bind(core_1.ILogger).toDynamicValue(ctx => {
        const logger = ctx.container.get(core_1.ILogger);
        return logger.child('terminal');
    }).inSingletonScope().whenTargetNamed('terminal');
}
exports.createCommonBindings = createCommonBindings;


/***/ }),

/***/ "../../packages/terminal/lib/common/terminal-protocol.js":
/*!***************************************************************!*\
  !*** ../../packages/terminal/lib/common/terminal-protocol.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.terminalsPath = exports.terminalPath = exports.ITerminalServer = void 0;
exports.ITerminalServer = Symbol('ITerminalServer');
exports.terminalPath = '/services/terminal';
exports.terminalsPath = '/services/terminals';


/***/ }),

/***/ "../../packages/terminal/lib/common/terminal-watcher.js":
/*!**************************************************************!*\
  !*** ../../packages/terminal/lib/common/terminal-watcher.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TerminalWatcher = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
let TerminalWatcher = class TerminalWatcher {
    constructor() {
        this.onTerminalExitEmitter = new event_1.Emitter();
        this.onTerminalErrorEmitter = new event_1.Emitter();
        this.onStoreTerminalEnvVariablesRequestedEmitter = new event_1.Emitter();
        this.onUpdateTerminalEnvVariablesRequestedEmitter = new event_1.Emitter();
    }
    getTerminalClient() {
        const exitEmitter = this.onTerminalExitEmitter;
        const errorEmitter = this.onTerminalErrorEmitter;
        const storeTerminalEnvVariablesEmitter = this.onStoreTerminalEnvVariablesRequestedEmitter;
        const updateTerminalEnvVariablesEmitter = this.onUpdateTerminalEnvVariablesRequestedEmitter;
        return {
            storeTerminalEnvVariables(data) {
                storeTerminalEnvVariablesEmitter.fire(data);
            },
            updateTerminalEnvVariables() {
                updateTerminalEnvVariablesEmitter.fire(undefined);
            },
            onTerminalExitChanged(event) {
                exitEmitter.fire(event);
            },
            onTerminalError(event) {
                errorEmitter.fire(event);
            }
        };
    }
    get onTerminalExit() {
        return this.onTerminalExitEmitter.event;
    }
    get onTerminalError() {
        return this.onTerminalErrorEmitter.event;
    }
    get onStoreTerminalEnvVariablesRequested() {
        return this.onStoreTerminalEnvVariablesRequestedEmitter.event;
    }
    get onUpdateTerminalEnvVariablesRequested() {
        return this.onUpdateTerminalEnvVariablesRequestedEmitter.event;
    }
};
TerminalWatcher = __decorate([
    (0, inversify_1.injectable)()
], TerminalWatcher);
exports.TerminalWatcher = TerminalWatcher;


/***/ }),

/***/ "../../packages/terminal/lib/node/base-terminal-server.js":
/*!****************************************************************!*\
  !*** ../../packages/terminal/lib/node/base-terminal-server.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MergedEnvironmentVariableCollectionImpl = exports.BaseTerminalServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const base_terminal_protocol_1 = __webpack_require__(/*! ../common/base-terminal-protocol */ "../../packages/terminal/lib/common/base-terminal-protocol.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const shell_process_1 = __webpack_require__(/*! ./shell-process */ "../../packages/terminal/lib/node/shell-process.js");
let BaseTerminalServer = class BaseTerminalServer {
    constructor(processManager, logger) {
        this.processManager = processManager;
        this.logger = logger;
        this.client = undefined;
        this.terminalToDispose = new Map();
        this.collections = new Map();
        processManager.onDelete(id => {
            const toDispose = this.terminalToDispose.get(id);
            if (toDispose !== undefined) {
                toDispose.dispose();
                this.terminalToDispose.delete(id);
            }
        });
        this.mergedCollection = this.resolveMergedCollection();
    }
    async attach(id) {
        const term = this.processManager.get(id);
        if (term && term instanceof node_1.TerminalProcess) {
            return term.id;
        }
        else {
            this.logger.warn(`Couldn't attach - can't find terminal with id: ${id} `);
            return -1;
        }
    }
    async onAttachAttempted(id) {
        const terminal = this.processManager.get(id);
        if (terminal instanceof node_1.TaskTerminalProcess) {
            terminal.attachmentAttempted = true;
            if (terminal.exited) {
                // Didn't execute `unregisterProcess` on terminal `exit` event to enable attaching task output to terminal,
                // Fixes https://github.com/eclipse-theia/theia/issues/2961
                terminal.unregisterProcess();
            }
            else {
                this.postAttachAttempted(terminal);
            }
        }
    }
    async getProcessId(id) {
        const terminal = this.processManager.get(id);
        if (!(terminal instanceof node_1.TerminalProcess)) {
            throw new Error(`terminal "${id}" does not exist`);
        }
        return terminal.pid;
    }
    async getProcessInfo(id) {
        const terminal = this.processManager.get(id);
        if (!(terminal instanceof node_1.TerminalProcess)) {
            throw new Error(`terminal "${id}" does not exist`);
        }
        return {
            executable: terminal.executable,
            arguments: terminal.arguments,
        };
    }
    async getEnvVarCollectionDescriptionsByExtension(id) {
        const terminal = this.processManager.get(id);
        if (!(terminal instanceof node_1.TerminalProcess)) {
            throw new Error(`terminal "${id}" does not exist`);
        }
        const result = new Map();
        this.collections.forEach((value, key) => {
            result.set(key, value.description);
        });
        return result;
    }
    async getCwdURI(id) {
        const terminal = this.processManager.get(id);
        if (!(terminal instanceof node_1.TerminalProcess)) {
            throw new Error(`terminal "${id}" does not exist`);
        }
        return terminal.getCwdURI();
    }
    async close(id) {
        const term = this.processManager.get(id);
        if (term instanceof node_1.TerminalProcess) {
            term.kill();
        }
    }
    async getDefaultShell() {
        return shell_process_1.ShellProcess.getShellExecutablePath();
    }
    dispose() {
        // noop
    }
    async resize(id, cols, rows) {
        const term = this.processManager.get(id);
        if (term && term instanceof node_1.TerminalProcess) {
            term.resize(cols, rows);
        }
        else {
            console.warn("Couldn't resize terminal " + id + ", because it doesn't exist.");
        }
    }
    /* Set the client to receive notifications on.  */
    setClient(client) {
        this.client = client;
        if (!this.client) {
            return;
        }
        this.client.updateTerminalEnvVariables();
    }
    notifyClientOnExit(term) {
        const toDispose = new common_1.DisposableCollection();
        toDispose.push(term.onError(error => {
            this.logger.error(`Terminal pid: ${term.pid} error: ${error}, closing it.`);
            if (this.client !== undefined) {
                this.client.onTerminalError({
                    terminalId: term.id,
                    error: new Error(`Failed to execute terminal process (${error.code})`),
                    attached: term instanceof node_1.TaskTerminalProcess && term.attachmentAttempted
                });
            }
        }));
        toDispose.push(term.onExit(event => {
            if (this.client !== undefined) {
                this.client.onTerminalExitChanged({
                    terminalId: term.id,
                    code: event.code,
                    reason: base_terminal_protocol_1.TerminalExitReason.Process,
                    signal: event.signal,
                    attached: term instanceof node_1.TaskTerminalProcess && term.attachmentAttempted
                });
            }
        }));
        return toDispose;
    }
    postCreate(term) {
        const toDispose = this.notifyClientOnExit(term);
        this.terminalToDispose.set(term.id, toDispose);
    }
    postAttachAttempted(term) {
        const toDispose = this.notifyClientOnExit(term);
        this.terminalToDispose.set(term.id, toDispose);
    }
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    // some code copied and modified from https://github.com/microsoft/vscode/blob/1.49.0/src/vs/workbench/contrib/terminal/common/environmentVariableService.ts
    setCollection(extensionIdentifier, persistent, collection, description) {
        const translatedCollection = { persistent, description, map: new Map(collection) };
        this.collections.set(extensionIdentifier, translatedCollection);
        this.updateCollections();
    }
    deleteCollection(extensionIdentifier) {
        this.collections.delete(extensionIdentifier);
        this.updateCollections();
    }
    updateCollections() {
        this.persistCollections();
        this.mergedCollection = this.resolveMergedCollection();
    }
    persistCollections() {
        const collectionsJson = [];
        this.collections.forEach((collection, extensionIdentifier) => {
            if (collection.persistent) {
                collectionsJson.push({
                    extensionIdentifier,
                    collection: [...this.collections.get(extensionIdentifier).map.entries()],
                    description: collection.description
                });
            }
        });
        if (this.client) {
            const stringifiedJson = JSON.stringify(collectionsJson);
            this.client.storeTerminalEnvVariables(stringifiedJson);
        }
    }
    resolveMergedCollection() {
        return new MergedEnvironmentVariableCollectionImpl(this.collections);
    }
};
BaseTerminalServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(node_1.ProcessManager)),
    __param(1, (0, inversify_1.inject)(common_1.ILogger)),
    __param(1, (0, inversify_1.named)('terminal')),
    __metadata("design:paramtypes", [node_1.ProcessManager, Object])
], BaseTerminalServer);
exports.BaseTerminalServer = BaseTerminalServer;
/*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
// some code copied and modified from https://github.com/microsoft/vscode/blob/1.49.0/src/vs/workbench/contrib/terminal/common/environmentVariableCollection.ts
class MergedEnvironmentVariableCollectionImpl {
    constructor(collections) {
        this.map = new Map();
        collections.forEach((collection, extensionIdentifier) => {
            const it = collection.map.entries();
            let next = it.next();
            while (!next.done) {
                const variable = next.value[0];
                let entry = this.map.get(variable);
                if (!entry) {
                    entry = [];
                    this.map.set(variable, entry);
                }
                // If the first item in the entry is replace ignore any other entries as they would
                // just get replaced by this one.
                if (entry.length > 0 && entry[0].type === base_terminal_protocol_1.EnvironmentVariableMutatorType.Replace) {
                    next = it.next();
                    continue;
                }
                // Mutators get applied in the reverse order than they are created
                const mutator = next.value[1];
                entry.unshift({
                    extensionIdentifier,
                    value: mutator.value,
                    type: mutator.type
                });
                next = it.next();
            }
        });
    }
    applyToProcessEnvironment(env) {
        let lowerToActualVariableNames;
        if (common_1.isWindows) {
            lowerToActualVariableNames = {};
            Object.keys(env).forEach(e => lowerToActualVariableNames[e.toLowerCase()] = e);
        }
        this.map.forEach((mutators, variable) => {
            const actualVariable = common_1.isWindows ? lowerToActualVariableNames[variable.toLowerCase()] || variable : variable;
            mutators.forEach(mutator => {
                switch (mutator.type) {
                    case base_terminal_protocol_1.EnvironmentVariableMutatorType.Append:
                        env[actualVariable] = (env[actualVariable] || '') + mutator.value;
                        break;
                    case base_terminal_protocol_1.EnvironmentVariableMutatorType.Prepend:
                        env[actualVariable] = mutator.value + (env[actualVariable] || '');
                        break;
                    case base_terminal_protocol_1.EnvironmentVariableMutatorType.Replace:
                        env[actualVariable] = mutator.value;
                        break;
                }
            });
        });
    }
}
exports.MergedEnvironmentVariableCollectionImpl = MergedEnvironmentVariableCollectionImpl;


/***/ }),

/***/ "../../packages/terminal/lib/node/buffering-stream.js":
/*!************************************************************!*\
  !*** ../../packages/terminal/lib/node/buffering-stream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BufferBufferingStream = exports.StringBufferingStream = exports.BufferingStream = void 0;
const event_1 = __webpack_require__(/*! @theia/core/lib/common/event */ "../../packages/core/lib/common/event.js");
/**
 * This component will buffer whatever is pushed to it and emit chunks back
 * every {@link BufferingStreamOptions.emitInterval}. It will also ensure that
 * the emitted chunks never exceed {@link BufferingStreamOptions.maxChunkSize}.
 */
class BufferingStream {
    constructor(options = {}, concat, slice, length) {
        var _a, _b;
        this.onDataEmitter = new event_1.Emitter();
        this.emitInterval = (_a = options.emitInterval) !== null && _a !== void 0 ? _a : 16; // ms
        this.maxChunkSize = (_b = options.maxChunkSize) !== null && _b !== void 0 ? _b : (256 * 1024); // bytes
        this.concat = concat;
        this.slice = slice;
        this.length = length;
    }
    get onData() {
        return this.onDataEmitter.event;
    }
    push(chunk) {
        if (this.buffer) {
            this.buffer = this.concat(this.buffer, chunk);
        }
        else {
            this.buffer = chunk;
            this.timeout = setTimeout(() => this.emitBufferedChunk(), this.emitInterval);
        }
    }
    dispose() {
        clearTimeout(this.timeout);
        this.buffer = undefined;
        this.onDataEmitter.dispose();
    }
    emitBufferedChunk() {
        this.onDataEmitter.fire(this.slice(this.buffer, 0, this.maxChunkSize));
        if (this.length(this.buffer) <= this.maxChunkSize) {
            this.buffer = undefined;
        }
        else {
            this.buffer = this.slice(this.buffer, this.maxChunkSize);
            this.timeout = setTimeout(() => this.emitBufferedChunk(), this.emitInterval);
        }
    }
}
exports.BufferingStream = BufferingStream;
class StringBufferingStream extends BufferingStream {
    constructor(options = {}) {
        super(options, (left, right) => left.concat(right), (what, start, end) => what.slice(start, end), what => what.length);
    }
}
exports.StringBufferingStream = StringBufferingStream;
class BufferBufferingStream extends BufferingStream {
    constructor(options = {}) {
        super(options, (left, right) => Buffer.concat([left, right]), (what, start, end) => what.slice(start, end), what => what.length);
    }
}
exports.BufferBufferingStream = BufferBufferingStream;


/***/ }),

/***/ "../../packages/terminal/lib/node/shell-process.js":
/*!*********************************************************!*\
  !*** ../../packages/terminal/lib/node/shell-process.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ShellProcess_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellProcess = exports.ShellProcessOptions = exports.ShellProcessFactory = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const os = __webpack_require__(/*! os */ "os");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const file_uri_1 = __webpack_require__(/*! @theia/core/lib/node/file-uri */ "../../packages/core/lib/node/file-uri.js");
const environment_utils_1 = __webpack_require__(/*! @theia/core/lib/node/environment-utils */ "../../packages/core/lib/node/environment-utils.js");
const utils_1 = __webpack_require__(/*! @theia/process/lib/node/utils */ "../../packages/process/lib/node/utils.js");
exports.ShellProcessFactory = Symbol('ShellProcessFactory');
exports.ShellProcessOptions = Symbol('ShellProcessOptions');
function getRootPath(rootURI) {
    if (rootURI) {
        const uri = new uri_1.default(rootURI);
        return file_uri_1.FileUri.fsPath(uri);
    }
    else {
        return os.homedir();
    }
}
let ShellProcess = ShellProcess_1 = class ShellProcess extends node_1.TerminalProcess {
    constructor(// eslint-disable-next-line @typescript-eslint/indent
    options, processManager, ringBuffer, logger, environmentUtils) {
        super({
            command: options.shell || ShellProcess_1.getShellExecutablePath(),
            args: options.args || ShellProcess_1.getShellExecutableArgs(),
            options: {
                name: 'xterm-color',
                cols: options.cols || ShellProcess_1.defaultCols,
                rows: options.rows || ShellProcess_1.defaultRows,
                cwd: getRootPath(options.rootURI),
                env: options.strictEnv !== true ? environmentUtils.mergeProcessEnv(options.env) : options.env,
            },
            isPseudo: options.isPseudo,
        }, processManager, ringBuffer, logger);
    }
    static getShellExecutablePath() {
        const shell = process.env.THEIA_SHELL;
        if (shell) {
            return shell;
        }
        if (common_1.isWindows) {
            return 'cmd.exe';
        }
        else {
            return process.env.SHELL;
        }
    }
    static getShellExecutableArgs() {
        const args = process.env.THEIA_SHELL_ARGS;
        if (args) {
            return (0, utils_1.parseArgs)(args);
        }
        if (common_1.isOSX) {
            return ['-l'];
        }
        else {
            return [];
        }
    }
};
ShellProcess.defaultCols = 80;
ShellProcess.defaultRows = 24;
ShellProcess = ShellProcess_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(exports.ShellProcessOptions)),
    __param(1, (0, inversify_1.inject)(node_1.ProcessManager)),
    __param(2, (0, inversify_1.inject)(node_1.MultiRingBuffer)),
    __param(3, (0, inversify_1.inject)(logger_1.ILogger)),
    __param(3, (0, inversify_1.named)('terminal')),
    __param(4, (0, inversify_1.inject)(environment_utils_1.EnvironmentUtils)),
    __metadata("design:paramtypes", [Object, node_1.ProcessManager,
        node_1.MultiRingBuffer, Object, environment_utils_1.EnvironmentUtils])
], ShellProcess);
exports.ShellProcess = ShellProcess;


/***/ }),

/***/ "../../packages/terminal/lib/node/shell-terminal-server.js":
/*!*****************************************************************!*\
  !*** ../../packages/terminal/lib/node/shell-terminal-server.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShellTerminalServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const environment_utils_1 = __webpack_require__(/*! @theia/core/lib/node/environment-utils */ "../../packages/core/lib/node/environment-utils.js");
const base_terminal_server_1 = __webpack_require__(/*! ./base-terminal-server */ "../../packages/terminal/lib/node/base-terminal-server.js");
const shell_process_1 = __webpack_require__(/*! ./shell-process */ "../../packages/terminal/lib/node/shell-process.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const os_1 = __webpack_require__(/*! @theia/core/lib/common/os */ "../../packages/core/lib/common/os.js");
const cp = __webpack_require__(/*! child_process */ "child_process");
let ShellTerminalServer = class ShellTerminalServer extends base_terminal_server_1.BaseTerminalServer {
    constructor(shellFactory, processManager, logger) {
        super(processManager, logger);
        this.shellFactory = shellFactory;
    }
    async create(options) {
        try {
            if (options.strictEnv !== true) {
                options.env = this.environmentUtils.mergeProcessEnv(options.env);
                this.mergedCollection.applyToProcessEnvironment(options.env);
            }
            const term = this.shellFactory(options);
            this.postCreate(term);
            return term.id;
        }
        catch (error) {
            this.logger.error('Error while creating terminal', error);
            return -1;
        }
    }
    // copied and modified from https://github.com/microsoft/vscode/blob/4636be2b71c87bfb0bfe3c94278b447a5efcc1f1/src/vs/workbench/contrib/debug/node/terminals.ts#L32-L75
    spawnAsPromised(command, args) {
        return new Promise((resolve, reject) => {
            let stdout = '';
            const child = cp.spawn(command, args);
            if (child.pid) {
                child.stdout.on('data', (data) => {
                    stdout += data.toString();
                });
            }
            child.on('error', err => {
                reject(err);
            });
            child.on('close', code => {
                resolve(stdout);
            });
        });
    }
    hasChildProcesses(processId) {
        if (processId) {
            // if shell has at least one child process, assume that shell is busy
            if (os_1.isWindows) {
                return this.spawnAsPromised('wmic', ['process', 'get', 'ParentProcessId']).then(stdout => {
                    const pids = stdout.split('\r\n');
                    return pids.some(p => parseInt(p) === processId);
                }, error => true);
            }
            else {
                return this.spawnAsPromised('/usr/bin/pgrep', ['-lP', String(processId)]).then(stdout => {
                    const r = stdout.trim();
                    if (r.length === 0 || r.indexOf(' tmux') >= 0) { // ignore 'tmux';
                        return false;
                    }
                    else {
                        return true;
                    }
                }, error => true);
            }
        }
        // fall back to safe side
        return Promise.resolve(true);
    }
};
__decorate([
    (0, inversify_1.inject)(environment_utils_1.EnvironmentUtils),
    __metadata("design:type", environment_utils_1.EnvironmentUtils)
], ShellTerminalServer.prototype, "environmentUtils", void 0);
ShellTerminalServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(shell_process_1.ShellProcessFactory)),
    __param(1, (0, inversify_1.inject)(node_1.ProcessManager)),
    __param(2, (0, inversify_1.inject)(logger_1.ILogger)),
    __param(2, (0, inversify_1.named)('terminal')),
    __metadata("design:paramtypes", [Function, node_1.ProcessManager, Object])
], ShellTerminalServer);
exports.ShellTerminalServer = ShellTerminalServer;


/***/ }),

/***/ "../../packages/terminal/lib/node/terminal-backend-contribution.js":
/*!*************************************************************************!*\
  !*** ../../packages/terminal/lib/node/terminal-backend-contribution.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TerminalBackendContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
const terminal_protocol_1 = __webpack_require__(/*! ../common/terminal-protocol */ "../../packages/terminal/lib/common/terminal-protocol.js");
const buffering_stream_1 = __webpack_require__(/*! ./buffering-stream */ "../../packages/terminal/lib/node/buffering-stream.js");
let TerminalBackendContribution = class TerminalBackendContribution {
    constructor() {
        this.decoder = new TextDecoder('utf-8');
    }
    configure(service) {
        service.wsChannel(`${terminal_protocol_1.terminalsPath}/:id`, (params, channel) => {
            const id = parseInt(params.id, 10);
            const termProcess = this.processManager.get(id);
            if (termProcess instanceof node_1.TerminalProcess) {
                const output = termProcess.createOutputStream();
                // Create a RPC connection to the terminal process
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                channel.onMessage(e => {
                    termProcess.write(e().readString());
                });
                const buffer = new buffering_stream_1.StringBufferingStream();
                buffer.onData(chunk => {
                    channel.getWriteBuffer().writeString(chunk).commit();
                });
                output.on('data', chunk => {
                    buffer.push(chunk);
                });
                channel.onClose(() => {
                    buffer.dispose();
                    output.dispose();
                });
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(node_1.ProcessManager),
    __metadata("design:type", node_1.ProcessManager)
], TerminalBackendContribution.prototype, "processManager", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    (0, inversify_1.named)('terminal'),
    __metadata("design:type", Object)
], TerminalBackendContribution.prototype, "logger", void 0);
TerminalBackendContribution = __decorate([
    (0, inversify_1.injectable)()
], TerminalBackendContribution);
exports.TerminalBackendContribution = TerminalBackendContribution;


/***/ }),

/***/ "../../packages/terminal/lib/node/terminal-backend-module.js":
/*!*******************************************************************!*\
  !*** ../../packages/terminal/lib/node/terminal-backend-module.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindTerminalServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const terminal_backend_contribution_1 = __webpack_require__(/*! ./terminal-backend-contribution */ "../../packages/terminal/lib/node/terminal-backend-contribution.js");
const messaging_1 = __webpack_require__(/*! @theia/core/lib/common/messaging */ "../../packages/core/lib/common/messaging/index.js");
const shell_process_1 = __webpack_require__(/*! ./shell-process */ "../../packages/terminal/lib/node/shell-process.js");
const terminal_protocol_1 = __webpack_require__(/*! ../common/terminal-protocol */ "../../packages/terminal/lib/common/terminal-protocol.js");
const base_terminal_protocol_1 = __webpack_require__(/*! ../common/base-terminal-protocol */ "../../packages/terminal/lib/common/base-terminal-protocol.js");
const terminal_server_1 = __webpack_require__(/*! ./terminal-server */ "../../packages/terminal/lib/node/terminal-server.js");
const shell_terminal_protocol_1 = __webpack_require__(/*! ../common/shell-terminal-protocol */ "../../packages/terminal/lib/common/shell-terminal-protocol.js");
const shell_terminal_server_1 = __webpack_require__(/*! ../node/shell-terminal-server */ "../../packages/terminal/lib/node/shell-terminal-server.js");
const terminal_watcher_1 = __webpack_require__(/*! ../common/terminal-watcher */ "../../packages/terminal/lib/common/terminal-watcher.js");
const terminal_common_module_1 = __webpack_require__(/*! ../common/terminal-common-module */ "../../packages/terminal/lib/common/terminal-common-module.js");
const messaging_service_1 = __webpack_require__(/*! @theia/core/lib/node/messaging/messaging-service */ "../../packages/core/lib/node/messaging/messaging-service.js");
function bindTerminalServer(bind, { path, identifier, constructor }) {
    const dispatchingClient = new base_terminal_protocol_1.DispatchingBaseTerminalClient();
    bind(identifier).to(constructor).inSingletonScope().onActivation((context, terminalServer) => {
        terminalServer.setClient(dispatchingClient);
        dispatchingClient.push(context.container.get(terminal_watcher_1.TerminalWatcher).getTerminalClient());
        terminalServer.setClient = () => {
            throw new Error('use TerminalWatcher');
        };
        return terminalServer;
    });
    bind(messaging_1.ConnectionHandler).toDynamicValue(ctx => new messaging_1.RpcConnectionHandler(path, client => {
        const disposable = dispatchingClient.push(client);
        client.onDidCloseConnection(() => disposable.dispose());
        return ctx.container.get(identifier);
    })).inSingletonScope();
}
exports.bindTerminalServer = bindTerminalServer;
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(messaging_service_1.MessagingService.Contribution).to(terminal_backend_contribution_1.TerminalBackendContribution).inSingletonScope();
    bind(shell_process_1.ShellProcess).toSelf().inTransientScope();
    bind(shell_process_1.ShellProcessFactory).toFactory(ctx => (options) => {
        const child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(shell_process_1.ShellProcessOptions).toConstantValue(options);
        return child.get(shell_process_1.ShellProcess);
    });
    bind(terminal_watcher_1.TerminalWatcher).toSelf().inSingletonScope();
    bindTerminalServer(bind, {
        path: terminal_protocol_1.terminalPath,
        identifier: terminal_protocol_1.ITerminalServer,
        constructor: terminal_server_1.TerminalServer
    });
    bindTerminalServer(bind, {
        path: shell_terminal_protocol_1.shellTerminalPath,
        identifier: shell_terminal_protocol_1.IShellTerminalServer,
        constructor: shell_terminal_server_1.ShellTerminalServer
    });
    (0, terminal_common_module_1.createCommonBindings)(bind);
});


/***/ }),

/***/ "../../packages/terminal/lib/node/terminal-server.js":
/*!***********************************************************!*\
  !*** ../../packages/terminal/lib/node/terminal-server.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TerminalServer = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const logger_1 = __webpack_require__(/*! @theia/core/lib/common/logger */ "../../packages/core/lib/common/logger.js");
const base_terminal_server_1 = __webpack_require__(/*! ./base-terminal-server */ "../../packages/terminal/lib/node/base-terminal-server.js");
const node_1 = __webpack_require__(/*! @theia/process/lib/node */ "../../packages/process/lib/node/index.js");
let TerminalServer = class TerminalServer extends base_terminal_server_1.BaseTerminalServer {
    constructor(processManager, logger) {
        super(processManager, logger);
    }
    create(options) {
        return new Promise((resolve, reject) => {
            const term = this.terminalFactory(options);
            term.onStart(_ => {
                this.postCreate(term);
                resolve(term.id);
            });
            term.onError(error => {
                this.logger.error('Error while creating terminal', error);
                resolve(-1);
            });
        });
    }
};
__decorate([
    (0, inversify_1.inject)(node_1.TerminalProcessFactory),
    __metadata("design:type", Function)
], TerminalServer.prototype, "terminalFactory", void 0);
TerminalServer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(node_1.ProcessManager)),
    __param(1, (0, inversify_1.inject)(logger_1.ILogger)),
    __param(1, (0, inversify_1.named)('terminal')),
    __metadata("design:paramtypes", [node_1.ProcessManager, Object])
], TerminalServer);
exports.TerminalServer = TerminalServer;


/***/ }),

/***/ "../../packages/vsx-registry/lib/common/index.js":
/*!*******************************************************!*\
  !*** ../../packages/vsx-registry/lib/common/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXExtensionUri = exports.VSXEnvironment = exports.OVSXUrlResolver = exports.OVSXClientProvider = void 0;
var ovsx_client_provider_1 = __webpack_require__(/*! ./ovsx-client-provider */ "../../packages/vsx-registry/lib/common/ovsx-client-provider.js");
Object.defineProperty(exports, "OVSXClientProvider", ({ enumerable: true, get: function () { return ovsx_client_provider_1.OVSXClientProvider; } }));
Object.defineProperty(exports, "OVSXUrlResolver", ({ enumerable: true, get: function () { return ovsx_client_provider_1.OVSXUrlResolver; } }));
var vsx_environment_1 = __webpack_require__(/*! ./vsx-environment */ "../../packages/vsx-registry/lib/common/vsx-environment.js");
Object.defineProperty(exports, "VSXEnvironment", ({ enumerable: true, get: function () { return vsx_environment_1.VSXEnvironment; } }));
var vsx_extension_uri_1 = __webpack_require__(/*! ./vsx-extension-uri */ "../../packages/vsx-registry/lib/common/vsx-extension-uri.js");
Object.defineProperty(exports, "VSXExtensionUri", ({ enumerable: true, get: function () { return vsx_extension_uri_1.VSXExtensionUri; } }));


/***/ }),

/***/ "../../packages/vsx-registry/lib/common/ovsx-client-provider.js":
/*!**********************************************************************!*\
  !*** ../../packages/vsx-registry/lib/common/ovsx-client-provider.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createOVSXClient = exports.OVSXClientProvider = exports.OVSXUrlResolver = void 0;
const ovsx_client_1 = __webpack_require__(/*! @theia/ovsx-client */ "../../dev-packages/ovsx-client/lib/index.js");
exports.OVSXUrlResolver = Symbol('OVSXUrlResolver');
exports.OVSXClientProvider = Symbol('OVSXClientProvider');
/**
 * @deprecated since 1.32.0
 */
async function createOVSXClient(vsxEnvironment, requestService) {
    const apiUrl = await vsxEnvironment.getRegistryApiUri();
    return new ovsx_client_1.OVSXHttpClient(apiUrl, requestService);
}
exports.createOVSXClient = createOVSXClient;


/***/ }),

/***/ "../../packages/vsx-registry/lib/common/vsx-environment.js":
/*!*****************************************************************!*\
  !*** ../../packages/vsx-registry/lib/common/vsx-environment.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXEnvironment = exports.VSX_ENVIRONMENT_PATH = void 0;
exports.VSX_ENVIRONMENT_PATH = '/services/vsx-environment';
exports.VSXEnvironment = Symbol('VSXEnvironment');


/***/ }),

/***/ "../../packages/vsx-registry/lib/common/vsx-extension-uri.js":
/*!*******************************************************************!*\
  !*** ../../packages/vsx-registry/lib/common/vsx-extension-uri.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXExtensionUri = void 0;
const plugin_vscode_uri_1 = __webpack_require__(/*! @theia/plugin-ext-vscode/lib/common/plugin-vscode-uri */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js");
Object.defineProperty(exports, "VSXExtensionUri", ({ enumerable: true, get: function () { return plugin_vscode_uri_1.VSCodeExtensionUri; } }));


/***/ }),

/***/ "../../packages/vsx-registry/lib/common/vsx-registry-common-module.js":
/*!****************************************************************************!*\
  !*** ../../packages/vsx-registry/lib/common/vsx-registry-common-module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/vsx-registry/lib/common/index.js");
const request_1 = __webpack_require__(/*! @theia/core/shared/@theia/request */ "../../packages/core/shared/@theia/request/index.js");
const ovsx_client_1 = __webpack_require__(/*! @theia/ovsx-client */ "../../dev-packages/ovsx-client/lib/index.js");
const vsx_environment_1 = __webpack_require__(/*! ./vsx-environment */ "../../packages/vsx-registry/lib/common/vsx-environment.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(common_1.OVSXUrlResolver)
        .toFunction(url => url);
    bind(common_1.OVSXClientProvider)
        .toDynamicValue(ctx => {
        var _a;
        const vsxEnvironment = ctx.container.get(vsx_environment_1.VSXEnvironment);
        const requestService = ctx.container.get(request_1.RequestService);
        const urlResolver = ctx.container.get(common_1.OVSXUrlResolver);
        const clientPromise = Promise
            .all([
            vsxEnvironment.getRegistryApiUri(),
            (_a = vsxEnvironment.getOvsxRouterConfig) === null || _a === void 0 ? void 0 : _a.call(vsxEnvironment),
        ])
            .then(async ([apiUrl, ovsxRouterConfig]) => {
            if (ovsxRouterConfig) {
                const clientFactory = ovsx_client_1.OVSXHttpClient.createClientFactory(requestService);
                return ovsx_client_1.OVSXRouterClient.FromConfig(ovsxRouterConfig, async (url) => clientFactory(await urlResolver(url)), [ovsx_client_1.RequestContainsFilterFactory, ovsx_client_1.ExtensionIdMatchesFilterFactory]);
            }
            return new ovsx_client_1.OVSXHttpClient(await urlResolver(apiUrl), requestService);
        });
        // reuse the promise for subsequent calls to this provider
        return () => clientPromise;
    })
        .inSingletonScope();
    bind(ovsx_client_1.OVSXApiFilter)
        .toDynamicValue(ctx => {
        const vsxEnvironment = ctx.container.get(vsx_environment_1.VSXEnvironment);
        const apiFilter = new ovsx_client_1.OVSXApiFilterImpl('-- temporary invalid version value --');
        vsxEnvironment.getVscodeApiVersion()
            .then(apiVersion => apiFilter.supportedApiVersion = apiVersion);
        return apiFilter;
    })
        .inSingletonScope();
});


/***/ }),

/***/ "../../packages/vsx-registry/lib/node/vsx-cli.js":
/*!*******************************************************!*\
  !*** ../../packages/vsx-registry/lib/node/vsx-cli.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VsxCli = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const fs = __webpack_require__(/*! fs */ "fs");
let VsxCli = class VsxCli {
    configure(conf) {
        conf.option('ovsx-router-config', { description: 'JSON configuration file for the OVSX router client', type: 'string' });
    }
    async setArguments(args) {
        const { 'ovsx-router-config': ovsxRouterConfig } = args;
        if (typeof ovsxRouterConfig === 'string') {
            this.ovsxRouterConfig = JSON.parse(await fs.promises.readFile(ovsxRouterConfig, 'utf8'));
        }
    }
};
VsxCli = __decorate([
    (0, inversify_1.injectable)()
], VsxCli);
exports.VsxCli = VsxCli;


/***/ }),

/***/ "../../packages/vsx-registry/lib/node/vsx-environment-impl.js":
/*!********************************************************************!*\
  !*** ../../packages/vsx-registry/lib/node/vsx-environment-impl.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXEnvironmentImpl = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_vscode_cli_contribution_1 = __webpack_require__(/*! @theia/plugin-ext-vscode/lib/node/plugin-vscode-cli-contribution */ "../../packages/plugin-ext-vscode/lib/node/plugin-vscode-cli-contribution.js");
const vsx_cli_1 = __webpack_require__(/*! ./vsx-cli */ "../../packages/vsx-registry/lib/node/vsx-cli.js");
let VSXEnvironmentImpl = class VSXEnvironmentImpl {
    constructor() {
        var _a;
        this._registryUri = new uri_1.default(((_a = process.env['VSX_REGISTRY_URL']) === null || _a === void 0 ? void 0 : _a.trim()) || 'https://open-vsx.org');
    }
    async getRegistryUri() {
        return this._registryUri.toString(true);
    }
    async getRegistryApiUri() {
        return this._registryUri.resolve('api').toString(true);
    }
    async getVscodeApiVersion() {
        return this.pluginVscodeCli.vsCodeApiVersionPromise;
    }
    async getOvsxRouterConfig() {
        return this.vsxCli.ovsxRouterConfig;
    }
};
__decorate([
    (0, inversify_1.inject)(plugin_vscode_cli_contribution_1.PluginVsCodeCliContribution),
    __metadata("design:type", plugin_vscode_cli_contribution_1.PluginVsCodeCliContribution)
], VSXEnvironmentImpl.prototype, "pluginVscodeCli", void 0);
__decorate([
    (0, inversify_1.inject)(vsx_cli_1.VsxCli),
    __metadata("design:type", vsx_cli_1.VsxCli)
], VSXEnvironmentImpl.prototype, "vsxCli", void 0);
VSXEnvironmentImpl = __decorate([
    (0, inversify_1.injectable)()
], VSXEnvironmentImpl);
exports.VSXEnvironmentImpl = VSXEnvironmentImpl;


/***/ }),

/***/ "../../packages/vsx-registry/lib/node/vsx-extension-resolver.js":
/*!**********************************************************************!*\
  !*** ../../packages/vsx-registry/lib/node/vsx-extension-resolver.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSXExtensionResolver = void 0;
const path = __webpack_require__(/*! path */ "path");
const semver = __webpack_require__(/*! semver */ "../../node_modules/semver/index.js");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const plugin_protocol_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const plugin_vscode_uri_1 = __webpack_require__(/*! @theia/plugin-ext-vscode/lib/common/plugin-vscode-uri */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-uri.js");
const ovsx_client_provider_1 = __webpack_require__(/*! ../common/ovsx-client-provider */ "../../packages/vsx-registry/lib/common/ovsx-client-provider.js");
const ovsx_client_1 = __webpack_require__(/*! @theia/ovsx-client */ "../../dev-packages/ovsx-client/lib/index.js");
const request_1 = __webpack_require__(/*! @theia/core/shared/@theia/request */ "../../packages/core/shared/@theia/request/index.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! @theia/plugin-ext-vscode/lib/common/plugin-vscode-environment */ "../../packages/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const plugin_uninstallation_manager_1 = __webpack_require__(/*! @theia/plugin-ext/lib/main/node/plugin-uninstallation-manager */ "../../packages/plugin-ext/lib/main/node/plugin-uninstallation-manager.js");
let VSXExtensionResolver = class VSXExtensionResolver {
    accept(pluginId) {
        return !!plugin_vscode_uri_1.VSCodeExtensionUri.toId(new uri_1.default(pluginId));
    }
    async resolve(context, options) {
        const id = plugin_vscode_uri_1.VSCodeExtensionUri.toId(new uri_1.default(context.getOriginId()));
        if (!id) {
            return;
        }
        let extension;
        const client = await this.clientProvider();
        if (options) {
            console.log(`[${id}]: trying to resolve version ${options.version}...`);
            const { extensions } = await client.query({ extensionId: id, extensionVersion: options.version, includeAllVersions: true });
            extension = extensions[0];
        }
        else {
            console.log(`[${id}]: trying to resolve latest version...`);
            const { extensions } = await client.query({ extensionId: id, includeAllVersions: true });
            extension = this.vsxApiFilter.getLatestCompatibleExtension(extensions);
        }
        if (!extension) {
            return;
        }
        if (extension.error) {
            throw new Error(extension.error);
        }
        const resolvedId = id + '-' + extension.version;
        const downloadUrl = extension.files.download;
        console.log(`[${id}]: resolved to '${resolvedId}'`);
        if (!(options === null || options === void 0 ? void 0 : options.ignoreOtherVersions)) {
            const existingVersion = this.hasSameOrNewerVersion(id, extension);
            if (existingVersion) {
                console.log(`[${id}]: is already installed with the same or newer version '${existingVersion}'`);
                return;
            }
        }
        const downloadPath = (await this.environment.getExtensionsDirUri()).path.fsPath();
        await fs.ensureDir(downloadPath);
        const extensionPath = path.resolve(downloadPath, path.basename(downloadUrl));
        console.log(`[${resolvedId}]: trying to download from "${downloadUrl}"...`, 'to path', downloadPath);
        if (!await this.download(downloadUrl, extensionPath)) {
            console.log(`[${resolvedId}]: not found`);
            return;
        }
        console.log(`[${resolvedId}]: downloaded to ${extensionPath}"`);
        context.addPlugin(resolvedId, extensionPath);
    }
    hasSameOrNewerVersion(id, extension) {
        const existingPlugins = this.pluginDeployerHandler.getDeployedPluginsById(id)
            .filter(plugin => !this.uninstallationManager.isUninstalled(plugin_protocol_1.PluginIdentifiers.componentsToVersionedId(plugin.metadata.model)));
        const sufficientVersion = existingPlugins.find(existingPlugin => {
            const existingVersion = semver.clean(existingPlugin.metadata.model.version);
            const desiredVersion = semver.clean(extension.version);
            if (desiredVersion && existingVersion && semver.gte(existingVersion, desiredVersion)) {
                return existingVersion;
            }
        });
        return sufficientVersion === null || sufficientVersion === void 0 ? void 0 : sufficientVersion.metadata.model.version;
    }
    async download(downloadUrl, downloadPath) {
        if (await fs.pathExists(downloadPath)) {
            return true;
        }
        const context = await this.requestService.request({ url: downloadUrl });
        if (context.res.statusCode === 404) {
            return false;
        }
        else if (context.res.statusCode !== 200) {
            throw new Error('Request returned status code: ' + context.res.statusCode);
        }
        else {
            await fs.writeFile(downloadPath, context.buffer);
            return true;
        }
    }
};
__decorate([
    (0, inversify_1.inject)(ovsx_client_provider_1.OVSXClientProvider),
    __metadata("design:type", Function)
], VSXExtensionResolver.prototype, "clientProvider", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_protocol_1.PluginDeployerHandler),
    __metadata("design:type", Object)
], VSXExtensionResolver.prototype, "pluginDeployerHandler", void 0);
__decorate([
    (0, inversify_1.inject)(request_1.RequestService),
    __metadata("design:type", Object)
], VSXExtensionResolver.prototype, "requestService", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_vscode_environment_1.PluginVSCodeEnvironment),
    __metadata("design:type", plugin_vscode_environment_1.PluginVSCodeEnvironment)
], VSXExtensionResolver.prototype, "environment", void 0);
__decorate([
    (0, inversify_1.inject)(plugin_uninstallation_manager_1.PluginUninstallationManager),
    __metadata("design:type", plugin_uninstallation_manager_1.PluginUninstallationManager)
], VSXExtensionResolver.prototype, "uninstallationManager", void 0);
__decorate([
    (0, inversify_1.inject)(ovsx_client_1.OVSXApiFilter),
    __metadata("design:type", Object)
], VSXExtensionResolver.prototype, "vsxApiFilter", void 0);
VSXExtensionResolver = __decorate([
    (0, inversify_1.injectable)()
], VSXExtensionResolver);
exports.VSXExtensionResolver = VSXExtensionResolver;


/***/ }),

/***/ "../../packages/vsx-registry/lib/node/vsx-registry-backend-module.js":
/*!***************************************************************************!*\
  !*** ../../packages/vsx-registry/lib/node/vsx-registry-backend-module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const plugin_protocol_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/plugin-protocol */ "../../packages/plugin-ext/lib/common/plugin-protocol.js");
const vsx_environment_1 = __webpack_require__(/*! ../common/vsx-environment */ "../../packages/vsx-registry/lib/common/vsx-environment.js");
const vsx_cli_1 = __webpack_require__(/*! ./vsx-cli */ "../../packages/vsx-registry/lib/node/vsx-cli.js");
const vsx_environment_impl_1 = __webpack_require__(/*! ./vsx-environment-impl */ "../../packages/vsx-registry/lib/node/vsx-environment-impl.js");
const vsx_extension_resolver_1 = __webpack_require__(/*! ./vsx-extension-resolver */ "../../packages/vsx-registry/lib/node/vsx-extension-resolver.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(vsx_environment_1.VSXEnvironment).to(vsx_environment_impl_1.VSXEnvironmentImpl).inSingletonScope();
    bind(vsx_cli_1.VsxCli).toSelf().inSingletonScope();
    bind(node_1.CliContribution).toService(vsx_cli_1.VsxCli);
    bind(core_1.ConnectionHandler)
        .toDynamicValue(ctx => new core_1.JsonRpcConnectionHandler(vsx_environment_1.VSX_ENVIRONMENT_PATH, () => ctx.container.get(vsx_environment_1.VSXEnvironment)))
        .inSingletonScope();
    bind(vsx_extension_resolver_1.VSXExtensionResolver).toSelf().inSingletonScope();
    bind(plugin_protocol_1.PluginDeployerResolver).toService(vsx_extension_resolver_1.VSXExtensionResolver);
});


/***/ }),

/***/ "../../packages/workspace/lib/common/index.js":
/*!****************************************************!*\
  !*** ../../packages/workspace/lib/common/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./workspace-protocol */ "../../packages/workspace/lib/common/workspace-protocol.js"), exports);
__exportStar(__webpack_require__(/*! ./workspace-file-service */ "../../packages/workspace/lib/common/workspace-file-service.js"), exports);
__exportStar(__webpack_require__(/*! ./untitled-workspace-service */ "../../packages/workspace/lib/common/untitled-workspace-service.js"), exports);


/***/ }),

/***/ "../../packages/workspace/lib/common/untitled-workspace-service.js":
/*!*************************************************************************!*\
  !*** ../../packages/workspace/lib/common/untitled-workspace-service.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UntitledWorkspaceService = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const workspace_file_service_1 = __webpack_require__(/*! ./workspace-file-service */ "../../packages/workspace/lib/common/workspace-file-service.js");
let UntitledWorkspaceService = class UntitledWorkspaceService {
    isUntitledWorkspace(candidate) {
        return !!candidate && this.workspaceFileService.isWorkspaceFile(candidate) && candidate.path.base.startsWith('Untitled');
    }
    async getUntitledWorkspaceUri(configDirUri, isAcceptable, warnOnHits) {
        const parentDir = configDirUri.resolve('workspaces');
        const workspaceExtensions = this.workspaceFileService.getWorkspaceFileExtensions();
        const defaultFileExtension = workspaceExtensions[this.workspaceFileService.defaultFileTypeIndex];
        let uri;
        let attempts = 0;
        do {
            attempts++;
            uri = parentDir.resolve(`Untitled-${Math.round(Math.random() * 1000)}.${defaultFileExtension}`);
            if (attempts === 10) {
                warnOnHits === null || warnOnHits === void 0 ? void 0 : warnOnHits();
            }
            if (attempts === 50) {
                throw new Error('Workspace Service: too many attempts to find unused filename.');
            }
        } while (!(await isAcceptable(uri)));
        return uri;
    }
};
__decorate([
    (0, inversify_1.inject)(workspace_file_service_1.WorkspaceFileService),
    __metadata("design:type", workspace_file_service_1.WorkspaceFileService)
], UntitledWorkspaceService.prototype, "workspaceFileService", void 0);
UntitledWorkspaceService = __decorate([
    (0, inversify_1.injectable)()
], UntitledWorkspaceService);
exports.UntitledWorkspaceService = UntitledWorkspaceService;


/***/ }),

/***/ "../../packages/workspace/lib/common/workspace-file-service.js":
/*!*********************************************************************!*\
  !*** ../../packages/workspace/lib/common/workspace-file-service.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceFileService = exports.VSCODE_EXT = exports.THEIA_EXT = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const files_1 = __webpack_require__(/*! @theia/filesystem/lib/common/files */ "../../packages/filesystem/lib/common/files.js");
/**
 * @deprecated Since 1.39.0. Use `WorkspaceFileService#getWorkspaceFileTypes` instead.
 */
exports.THEIA_EXT = 'theia-workspace';
/**
 * @deprecated Since 1.39.0. Use `WorkspaceFileService#getWorkspaceFileTypes` instead.
 */
exports.VSCODE_EXT = 'code-workspace';
let WorkspaceFileService = class WorkspaceFileService {
    constructor() {
        this._defaultFileTypeIndex = 0;
    }
    get defaultFileTypeIndex() {
        return this._defaultFileTypeIndex;
    }
    /**
     * Check if the file should be considered as a workspace file.
     *
     * Example: We should not try to read the contents of an .exe file.
     */
    isWorkspaceFile(candidate) {
        const uri = files_1.FileStat.is(candidate) ? candidate.resource : candidate;
        const extensions = this.getWorkspaceFileExtensions(true);
        return extensions.includes(uri.path.ext);
    }
    getWorkspaceFileTypes() {
        return [
            {
                name: 'Theia',
                extension: exports.THEIA_EXT
            },
            {
                name: 'Visual Studio Code',
                extension: exports.VSCODE_EXT
            }
        ];
    }
    getWorkspaceFileExtensions(dot) {
        return this.getWorkspaceFileTypes().map(type => dot ? `.${type.extension}` : type.extension);
    }
};
WorkspaceFileService = __decorate([
    (0, inversify_1.injectable)()
], WorkspaceFileService);
exports.WorkspaceFileService = WorkspaceFileService;


/***/ }),

/***/ "../../packages/workspace/lib/common/workspace-protocol.js":
/*!*****************************************************************!*\
  !*** ../../packages/workspace/lib/common/workspace-protocol.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceServer = exports.workspacePath = void 0;
exports.workspacePath = '/services/workspace';
/**
 * The JSON-RPC workspace interface.
 */
exports.WorkspaceServer = Symbol('WorkspaceServer');


/***/ }),

/***/ "../../packages/workspace/lib/node/default-workspace-server.js":
/*!*********************************************************************!*\
  !*** ../../packages/workspace/lib/node/default-workspace-server.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RecentWorkspacePathsData = exports.DefaultWorkspaceServer = exports.WorkspaceCliContribution = void 0;
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! @theia/core/shared/fs-extra */ "../../packages/core/shared/fs-extra/index.js");
const jsoncparser = __webpack_require__(/*! jsonc-parser */ "../../node_modules/jsonc-parser/lib/esm/main.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../../packages/core/lib/common/promise-util.js");
const common_1 = __webpack_require__(/*! ../common */ "../../packages/workspace/lib/common/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "../../packages/core/lib/common/env-variables/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../../packages/core/lib/common/uri.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../../packages/core/lib/common/index.js");
let WorkspaceCliContribution = class WorkspaceCliContribution {
    constructor() {
        this.workspaceRoot = new promise_util_1.Deferred();
    }
    configure(conf) {
        conf.usage('$0 [workspace-directories] [options]');
        conf.option('root-dir', {
            description: 'DEPRECATED: Sets the workspace directory.',
        });
    }
    async setArguments(args) {
        const workspaceArguments = args._.slice(2).map(probablyAlreadyString => String(probablyAlreadyString));
        if (workspaceArguments.length === 0 && args['root-dir']) {
            workspaceArguments.push(String(args['root-dir']));
        }
        if (workspaceArguments.length === 0) {
            this.workspaceRoot.resolve(undefined);
        }
        else if (workspaceArguments.length === 1) {
            this.workspaceRoot.resolve(this.normalizeWorkspaceArg(workspaceArguments[0]));
        }
        else {
            this.workspaceRoot.resolve(this.buildWorkspaceForMultipleArguments(workspaceArguments));
        }
    }
    normalizeWorkspaceArg(raw) {
        return path.resolve(raw).replace(/\/$/, '');
    }
    async buildWorkspaceForMultipleArguments(workspaceArguments) {
        var _a;
        try {
            const dirs = await Promise.all(workspaceArguments.map(async (maybeDir) => { var _a; return (_a = (await fs.stat(maybeDir).catch(() => undefined))) === null || _a === void 0 ? void 0 : _a.isDirectory(); }));
            const folders = workspaceArguments.filter((_, index) => dirs[index]).map(dir => ({ path: this.normalizeWorkspaceArg(dir) }));
            if (folders.length < 2) {
                return (_a = folders[0]) === null || _a === void 0 ? void 0 : _a.path;
            }
            const untitledWorkspaceUri = await this.untitledWorkspaceService.getUntitledWorkspaceUri(new uri_1.default(await this.envVariablesServer.getConfigDirUri()), async (uri) => !await fs.pathExists(uri.path.fsPath()));
            const untitledWorkspacePath = untitledWorkspaceUri.path.fsPath();
            await fs.ensureDir(path.dirname(untitledWorkspacePath));
            await fs.writeFile(untitledWorkspacePath, JSON.stringify({ folders }, undefined, 4));
            return untitledWorkspacePath;
        }
        catch {
            return undefined;
        }
    }
};
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], WorkspaceCliContribution.prototype, "envVariablesServer", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.UntitledWorkspaceService),
    __metadata("design:type", common_1.UntitledWorkspaceService)
], WorkspaceCliContribution.prototype, "untitledWorkspaceService", void 0);
WorkspaceCliContribution = __decorate([
    (0, inversify_1.injectable)()
], WorkspaceCliContribution);
exports.WorkspaceCliContribution = WorkspaceCliContribution;
let DefaultWorkspaceServer = class DefaultWorkspaceServer {
    constructor() {
        this.root = new promise_util_1.Deferred();
        /**
         * Untitled workspaces that are not among the most recent N workspaces will be deleted on start. Increase this number to keep older files,
         * lower it to delete stale untitled workspaces more aggressively.
         */
        this.untitledWorkspaceStaleThreshold = 10;
    }
    init() {
        this.doInit();
    }
    async doInit() {
        const root = await this.getRoot();
        this.root.resolve(root);
    }
    async onStart() {
        await this.removeOldUntitledWorkspaces();
    }
    async getRoot() {
        let root = await this.getWorkspaceURIFromCli();
        if (!root) {
            const data = await this.readRecentWorkspacePathsFromUserHome();
            if (data && data.recentRoots) {
                root = data.recentRoots[0];
            }
        }
        return root;
    }
    getMostRecentlyUsedWorkspace() {
        return this.root.promise;
    }
    async setMostRecentlyUsedWorkspace(rawUri) {
        const uri = rawUri && new uri_1.default(rawUri).toString(); // the empty string is used as a signal from the frontend not to load a workspace.
        this.root = new promise_util_1.Deferred();
        this.root.resolve(uri);
        const recentRoots = Array.from(new Set([uri, ...await this.getRecentWorkspaces()]));
        this.writeToUserHome({ recentRoots });
    }
    async removeRecentWorkspace(rawUri) {
        const uri = rawUri && new uri_1.default(rawUri).toString(); // the empty string is used as a signal from the frontend not to load a workspace.
        const recentRoots = await this.getRecentWorkspaces();
        const index = recentRoots.indexOf(uri);
        if (index !== -1) {
            recentRoots.splice(index, 1);
            this.writeToUserHome({
                recentRoots
            });
        }
    }
    async getRecentWorkspaces() {
        const data = await this.readRecentWorkspacePathsFromUserHome();
        if (data && data.recentRoots) {
            const allRootUris = await Promise.all(data.recentRoots.map(async (element) => element && await this.workspaceStillExist(element) ? element : undefined));
            return allRootUris.filter(core_1.notEmpty);
        }
        return [];
    }
    async workspaceStillExist(workspaceRootUri) {
        return fs.pathExists(node_1.FileUri.fsPath(workspaceRootUri));
    }
    async getWorkspaceURIFromCli() {
        const arg = await this.cliParams.workspaceRoot.promise;
        return arg !== undefined ? node_1.FileUri.create(arg).toString() : undefined;
    }
    /**
     * Writes the given uri as the most recently used workspace root to the user's home directory.
     * @param uri most recently used uri
     */
    async writeToUserHome(data) {
        const file = await this.getUserStoragePath();
        await this.writeToFile(file, data);
    }
    async writeToFile(fsPath, data) {
        if (!await fs.pathExists(fsPath)) {
            await fs.mkdirs(path.resolve(fsPath, '..'));
        }
        await fs.writeJson(fsPath, data);
    }
    /**
     * Reads the most recently used workspace root from the user's home directory.
     */
    async readRecentWorkspacePathsFromUserHome() {
        const fsPath = await this.getUserStoragePath();
        const data = await this.readJsonFromFile(fsPath);
        return RecentWorkspacePathsData.create(data);
    }
    async readJsonFromFile(fsPath) {
        if (await fs.pathExists(fsPath)) {
            const rawContent = await fs.readFile(fsPath, 'utf-8');
            const strippedContent = jsoncparser.stripComments(rawContent);
            return jsoncparser.parse(strippedContent);
        }
    }
    async getUserStoragePath() {
        const configDirUri = await this.envServer.getConfigDirUri();
        return path.resolve(node_1.FileUri.fsPath(configDirUri), 'recentworkspace.json');
    }
    /**
     * Removes untitled workspaces that are not among the most recently used workspaces.
     * Use the `untitledWorkspaceStaleThreshold` to configure when to delete workspaces.
     */
    async removeOldUntitledWorkspaces() {
        const recents = (await this.getRecentWorkspaces()).map(node_1.FileUri.fsPath);
        const olderUntitledWorkspaces = recents
            .slice(this.untitledWorkspaceStaleThreshold)
            .filter(workspace => this.untitledWorkspaceService.isUntitledWorkspace(node_1.FileUri.create(workspace)));
        await Promise.all(olderUntitledWorkspaces.map(workspace => fs.promises.unlink(node_1.FileUri.fsPath(workspace)).catch(() => { })));
        if (olderUntitledWorkspaces.length > 0) {
            await this.writeToUserHome({ recentRoots: await this.getRecentWorkspaces() });
        }
    }
};
__decorate([
    (0, inversify_1.inject)(WorkspaceCliContribution),
    __metadata("design:type", WorkspaceCliContribution)
], DefaultWorkspaceServer.prototype, "cliParams", void 0);
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], DefaultWorkspaceServer.prototype, "envServer", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.UntitledWorkspaceService),
    __metadata("design:type", common_1.UntitledWorkspaceService)
], DefaultWorkspaceServer.prototype, "untitledWorkspaceService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultWorkspaceServer.prototype, "init", null);
DefaultWorkspaceServer = __decorate([
    (0, inversify_1.injectable)()
], DefaultWorkspaceServer);
exports.DefaultWorkspaceServer = DefaultWorkspaceServer;
var RecentWorkspacePathsData;
(function (RecentWorkspacePathsData) {
    /**
     * Parses `data` as `RecentWorkspacePathsData` but removes any non-string array entry.
     *
     * Returns undefined if the given `data` does not contain a `recentRoots` array property.
     */
    function create(data) {
        if (typeof data !== 'object' || !data || !Array.isArray(data.recentRoots)) {
            return;
        }
        return {
            recentRoots: data.recentRoots.filter(root => typeof root === 'string')
        };
    }
    RecentWorkspacePathsData.create = create;
})(RecentWorkspacePathsData = exports.RecentWorkspacePathsData || (exports.RecentWorkspacePathsData = {}));


/***/ }),

/***/ "../../packages/workspace/lib/node/workspace-backend-module.js":
/*!*********************************************************************!*\
  !*** ../../packages/workspace/lib/node/workspace-backend-module.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2017 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../../packages/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../../packages/core/lib/common/index.js");
const common_2 = __webpack_require__(/*! ../common */ "../../packages/workspace/lib/common/index.js");
const default_workspace_server_1 = __webpack_require__(/*! ./default-workspace-server */ "../../packages/workspace/lib/node/default-workspace-server.js");
const cli_1 = __webpack_require__(/*! @theia/core/lib/node/cli */ "../../packages/core/lib/node/cli.js");
const node_1 = __webpack_require__(/*! @theia/core/lib/node */ "../../packages/core/lib/node/index.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(default_workspace_server_1.WorkspaceCliContribution).toSelf().inSingletonScope();
    bind(cli_1.CliContribution).toService(default_workspace_server_1.WorkspaceCliContribution);
    bind(default_workspace_server_1.DefaultWorkspaceServer).toSelf().inSingletonScope();
    bind(common_2.WorkspaceServer).toService(default_workspace_server_1.DefaultWorkspaceServer);
    bind(node_1.BackendApplicationContribution).toService(common_2.WorkspaceServer);
    bind(common_2.UntitledWorkspaceService).toSelf().inSingletonScope();
    bind(common_2.WorkspaceFileService).toSelf().inSingletonScope();
    bind(common_1.ConnectionHandler).toDynamicValue(ctx => new common_1.RpcConnectionHandler(common_2.workspacePath, () => ctx.container.get(common_2.WorkspaceServer))).inSingletonScope();
});


/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "async_hooks":
/*!******************************!*\
  !*** external "async_hooks" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "cluster":
/*!**************************!*\
  !*** external "cluster" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("cluster");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "perf_hooks":
/*!*****************************!*\
  !*** external "perf_hooks" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("perf_hooks");

/***/ }),

/***/ "pnpapi":
/*!*************************!*\
  !*** external "pnpapi" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("pnpapi");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "readline":
/*!***************************!*\
  !*** external "readline" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("readline");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "v8":
/*!*********************!*\
  !*** external "v8" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("v8");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "../../packages/core/i18n/nls.cs.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.cs.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Upravit stav...","terminal:new:profile":"Vytvoření nového integrovaného terminálu z profilu","terminal:profile:default":"Zvolte výchozí profil terminálu","theia":{"callhierarchy":{"noCallers":"Nebyl zjištěn žádný volající.","open":"Hierarchie otevřených výzev"},"core":{"about":{"compatibility":"{0} Kompatibilita","defaultApi":"Výchozí rozhraní API {0} ","version":"Verze"},"common":{"closeAll":"Zavřít všechny karty","closeAllTabMain":"Zavření všech karet v hlavní oblasti","closeOtherTabMain":"Zavření dalších karet v hlavní oblasti","closeOthers":"Zavření dalších karet","closeRight":"Zavření karet vpravo","closeTab":"Zavřít kartu","closeTabMain":"Zavřít kartu v hlavní oblasti","collapseAllTabs":"Sbalit všechny boční panely","collapseBottomPanel":"Přepínání spodního panelu","collapseTab":"Sbalení bočního panelu","showNextTabGroup":"Přepnutí na další skupinu karet","showNextTabInGroup":"Přepnutí na další kartu ve skupině","showPreviousTabGroup":"Přepnutí na předchozí skupinu karet","showPreviousTabInGroup":"Přepnutí na předchozí kartu ve skupině","toggleMaximized":"Přepínání Maximalizováno"},"enhancedPreview":{"classic":"Zobrazí jednoduchý náhled karty se základními informacemi.","enhanced":"Zobrazení rozšířeného náhledu karty s dalšími informacemi.","visual":"Zobrazení vizuálního náhledu karty."},"file":{"browse":"Procházet"},"highlightModifiedTabs":"Řídí, zda se na upravených (špinavých) kartách editoru vykreslí horní rámeček, nebo ne.","keybindingStatus":"{0} byl stisknut, čeká se na další klávesy","keyboard":{"choose":"Výběr rozložení klávesnice","chooseLayout":"Výběr rozložení klávesnice","current":"(aktuální: {0})","currentLayout":" - aktuální rozvržení","mac":"Klávesnice pro Mac","pc":"Klávesnice PC","tryDetect":"Pokuste se zjistit rozložení klávesnice z informací o prohlížeči a stisknutých klávesách."},"navigator":{"clipboardWarn":"Přístup do schránky je odepřen. Zkontrolujte oprávnění prohlížeče.","clipboardWarnFirefox":"Rozhraní API schránky není k dispozici. Lze ji povolit pomocí předvolby \'{0}\' na stránce \'{1}\'. Poté znovu načtěte aplikaci Theia. Všimněte si, že to umožní FireFoxu získat plný přístup k systémové schránce."},"offline":"Offline","quitMessage":"Neuložené změny se neuloží.","resetWorkbenchLayout":"Obnovení rozložení pracovního stolu","searchbox":{"close":"Zavřít (únik)","next":"Další (dolů)","previous":"Předchozí (Nahoru)"},"silentNotifications":"Řídí, zda se mají potlačit vyskakovací okna s oznámeními.","tabDefaultSize":"Určuje výchozí velikost karet s ouškem.","tabMaximize":"Ovládá, zda se mají karty maximalizovat při dvojím kliknutí.","tabMinimumSize":"Určuje minimální velikost oušek.","tabShrinkToFit":"Zmenšete karty tak, aby se vešly do dostupného prostoru."},"debug":{"addConfigurationPlaceholder":"Vyberte kořenový pracovní prostor, do kterého chcete přidat konfiguraci","compound-cycle":"Konfigurace spuštění \'{0}\' obsahuje cyklus se sebou samým","continueAll":"Pokračovat ve všem","copyExpressionValue":"Kopírování hodnoty výrazu","debugVariableInput":"Nastavení hodnoty {0} ","instruction-breakpoint":"Bod přerušení instrukcí","missingConfiguration":"Dynamická konfigurace \'{0}:{1}\' chybí nebo není použitelná","pauseAll":"Pozastavit vše","reveal":"Odhalení","threads":"Vlákna","toggleTracing":"Povolení/zakázání sledování komunikace s ladicími adaptéry"},"editor":{"dirtyEncoding":"Soubor je znečištěný. Než jej znovu otevřete v jiném kódování, nejprve jej uložte.","editor.codeActionWidget.showHeaders":"Povolení/zakázání zobrazování záhlaví skupin v nabídce akcí kódu.","editor.experimental.pasteActions.enabled":"Povolení/zakázání spouštění úprav z rozšíření při vkládání.","editor.formatOnSaveMode.modificationsIfAvailable":"Pokusí se formátovat pouze změny (vyžaduje kontrolu zdrojů). Pokud nelze použít kontrolu zdrojů, bude formátován celý soubor.","editor.inlayHints.enabled1":"Vložené nápovědy se zobrazují ve výchozím nastavení a skrývají se při podržení `Ctrl+Alt`","editor.inlayHints.enabled2":"Vložené nápovědy jsou ve výchozím nastavení skryté a zobrazí se při podržení `Ctrl+Alt`.","editor.quickSuggestions":"Ovládá, zda se mají při psaní automaticky zobrazovat návrhy. To lze ovládat při psaní komentářů, řetězců a dalšího kódu. Rychlé návrhy lze nakonfigurovat tak, aby se zobrazovaly jako text ducha nebo s widgetem návrhu. Mějte také na paměti nastavení \'#editor.suggestOnTriggerCharacters#\', které řídí, zda se návrhy spouštějí pomocí speciálních znaků.","editor.suggest.matchOnWordStartOnly":"Je-li zapnuto filtrování IntelliSense, vyžaduje, aby první znak odpovídal začátku slova, např. `c` u `Console` nebo `WebContext`, ale _ne_ u `description`. Když je funkce IntelliSense vypnutá, zobrazí více výsledků, ale stále je třídí podle kvality shody.","files.autoSave":"Ovládá [automatické ukládání](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) editorů, které mají neuložené změny.","files.autoSave.afterDelay":"Editor se změnami se automaticky uloží po uplynutí nastavené doby `#files.autoSaveDelay#`.","files.autoSave.off":"Editor se změnami se nikdy automaticky neuloží.","files.autoSave.onFocusChange":"Editor se změnami se automaticky uloží, když ztratí fokus.","files.autoSave.onWindowChange":"Editor se změnami se automaticky uloží, když okno ztratí fokus.","formatOnSaveTimeout":"Časový limit v milisekundách, po jehož uplynutí se formátování spuštěné při ukládání souboru zruší.","persistClosedEditors":"Řídí, zda má historie zavřených editorů přetrvávat v pracovním prostoru i po opětovném načtení okna.","showAllEditors":"Zobrazit všechny otevřené editory","splitHorizontal":"Rozdělený editor Horizontální","splitVertical":"Rozdělený editor Vertikální","toggleStickyScroll":"Přepnout rychlé posouvání"},"file-search":{"toggleIgnoredFiles":" (Stisknutím {0} zobrazíte/skryjete ignorované soubory)"},"fileDialog":{"showHidden":"Zobrazit skryté soubory"},"fileSystem":{"fileResource":{"overWriteBody":"Chcete přepsat změny provedené v souboru \'{0}\' v souborovém systému?"}},"filesystem":{"copiedToClipboard":"Zkopírujte odkaz ke stažení do schránky.","copyDownloadLink":"Kopírovat odkaz ke stažení","dialog":{"initialLocation":"Přejít na počáteční umístění","multipleItemMessage":"Můžete vybrat pouze jednu položku","name":"Jméno:","navigateBack":"Přejít zpět","navigateForward":"Navigace vpřed","navigateUp":"Navigace nahoru v jednom adresáři"},"fileResource":{"binaryFileQuery":"Jeho otevření může trvat nějakou dobu a může způsobit, že IDE nebude reagovat. Chcete přesto otevřít \'{0}\'?","binaryTitle":"Soubor je buď binární, nebo používá nepodporované kódování textu.","largeFileTitle":"Soubor je příliš velký ({0}).","overwriteTitle":"Soubor \'{0}\' byl v souborovém systému změněn."},"filesExclude":"Konfigurace globálních vzorů pro vyloučení souborů a složek. Například Průzkumník souborů na základě tohoto nastavení rozhodne, které soubory a složky zobrazí nebo skryje.","format":"Formát:","maxConcurrentUploads":"Maximální počet současně nahrávaných souborů při nahrávání více souborů. 0 znamená, že všechny soubory budou nahrávány současně.","maxFileSizeMB":"Ovládá maximální velikost souboru v MB, který je možné otevřít.","prepareDownload":"Příprava ke stažení...","prepareDownloadLink":"Připravujeme odkaz ke stažení...","processedOutOf":"Zpracováno {0} z {1}","replaceTitle":"Nahradit soubor","uploadFiles":"Nahrávání souborů...","uploadedOutOf":"Nahráno {0} z {1}"},"getting-started":{"apiComparator":"{0} Kompatibilita API","newExtension":"Budování nového rozšíření","newPlugin":"Vytvoření nového pluginu","startup-editor":{"welcomePage":"Otevřete úvodní stránku s obsahem, který vám pomůže začít pracovat s webem {0} a rozšířeními."}},"git":{"aFewSecondsAgo":"před několika sekundami","addSignedOff":"Přidat Signed-off-by","amendReuseMessag":"Chcete-li znovu použít poslední zprávu o revizi, stiskněte klávesu \\"Enter\\" nebo klávesu \\"Escape\\" pro zrušení.","amendRewrite":"Přepsání předchozí zprávy o revizi. Stisknutím klávesy \'Enter\' potvrdíte nebo klávesou \'Escape\' zrušíte.","checkoutCreateLocalBranchWithName":"Vytvořte novou místní větev s názvem: {0}. Stiskněte klávesu \\"Enter\\" pro potvrzení nebo \\"Escape\\" pro zrušení.","checkoutProvideBranchName":"Uveďte prosím název pobočky.","checkoutSelectRef":"Zvolte referenční číslo, které chcete odhlásit, nebo vytvořte novou místní pobočku:","cloneQuickInputLabel":"Uveďte prosím umístění úložiště Git. Stisknutím klávesy \\"Enter\\" potvrdíte nebo klávesou \\"Escape\\" zrušíte.","cloneRepository":"Klonování úložiště Git: {0}. Stiskněte klávesu \'Enter\' pro potvrzení nebo \'Escape\' pro zrušení.","compareWith":"Porovnat s...","compareWithBranchOrTag":"Vyberte větev nebo značku, kterou chcete porovnat s aktuálně aktivní větví {0}:","diff":"Diff","dirtyDiffLinesLimit":"Pokud počet řádků editoru překročí tento limit, nezobrazují se špinavé rozdílové dekorace.","dropStashMessage":"Úschovna byla úspěšně odstraněna.","editorDecorationsEnabled":"Zobrazení dekorací git v editoru.","fetchPickRemote":"Vyberte vzdálené zařízení, ze kterého chcete načíst:","gitDecorationsColors":"Použití barevné dekorace v navigátoru.","mergeQuickPickPlaceholder":"Vyberte větev, kterou chcete sloučit s aktuálně aktivní větví {0}:","missingUserInfo":"Ujistěte se, že jste v systému git nakonfigurovali položky \'user.name\' a \'user.email\'.","noHistoryForError":"Není k dispozici žádná historie {0}","noPreviousCommit":"Žádný předchozí závazek ke změně","noRepositoriesSelected":"Nebyla vybrána žádná úložiště.","prepositionIn":"na adrese","repositoryNotInitialized":"Úložiště {0} ještě není inicializováno.","stashChanges":"Změny v úložišti. Stisknutím klávesy \\"Enter\\" potvrďte nebo klávesou \\"Escape\\" zrušte zadání.","stashChangesWithMessage":"Úschovna se mění se zprávou: {0}. Stisknutím klávesy \'Enter\' potvrďte nebo klávesou \'Escape\' zrušte.","tabTitleIndex":"{0} (rejstřík)","tabTitleWorkingTree":"{0} (pracovní strom)","toggleBlameAnnotations":"Přepínání Anotace obvinění"},"keybinding-schema-updater":{"deprecation":"Místo toho použijte klauzuli `when`."},"keymaps":{"editKeybindingTitle":"Upravit vazbu kláves pro {0}","keybindingCollidesValidation":"vazba kláves v současné době koliduje","requiredKeybindingValidation":"je vyžadována hodnota keybindingu","resetKeybindingConfirmation":"Opravdu chcete obnovit výchozí hodnotu této vazby kláves?","resetKeybindingTitle":"Obnovení vazby kláves pro {0}","resetMultipleKeybindingsWarning":"Pokud pro tento příkaz existuje více klávesových vazeb, budou resetovány všechny."},"localize":{"offlineTooltip":"Nelze se připojit k backendu."},"markers":{"clearAll":"Vymazat vše","noProblems":"V pracovním prostoru zatím nebyly zjištěny žádné problémy.","tabbarDecorationsEnabled":"Zobrazení dekorátorů problémů (diagnostických značek) na pásech karet."},"memory-inspector":{"addressTooltip":"Místo v paměti, které se má zobrazit, adresa nebo výraz vyhodnocující adresu.","ascii":"ASCII","binary":"Binární","byteSize":"Velikost bajtu","bytesPerGroup":"Byty na skupinu","closeSettings":"Zavřít nastavení","columns":"Sloupce","command":{"createNewMemory":"Vytvoření nového inspektora paměti","createNewRegisterView":"Vytvoření nového zobrazení registru","followPointer":"Sledování ukazatele","followPointerMemory":"Sledování ukazatele v aplikaci Inspektor paměti","resetValue":"Obnovení hodnoty","showRegister":"Zobrazit registr v Inspektoru paměti","viewVariable":"Zobrazit proměnnou v Inspektorovi paměti"},"data":"Data","decimal":"Desetinné číslo","diff":{"label":"Rozdíl: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bajty pro odsazení paměti od {0}"},"editable":{"apply":"Použít změny","clear":"Jasné změny"},"endianness":"Endianness","extraColumn":"Sloupec navíc","groupsPerRow":"Skupiny na řádek","hexadecimal":"Hexadecimální","length":"Délka","lengthTooltip":"Počet bajtů k načtení v desítkové nebo šestnáctkové soustavě.","memory":{"addressField":{"memoryReadError":"Do pole Umístění zadejte adresu nebo výraz."},"freeze":"Zobrazení zmrazení paměti","hideSettings":"Skrytí panelu nastavení","readError":{"bounds":"Překročení mezí paměti, výsledek bude zkrácen.","noContents":"V současné době není k dispozici žádný obsah paměti."},"readLength":{"memoryReadError":"Do pole Délka zadejte délku (desetinné nebo šestnáctinné číslo)."},"showSettings":"Zobrazit panel nastavení","unfreeze":"Zrušení zmrazení zobrazení paměti","userError":"Došlo k chybě při načítání paměti."},"memoryCategory":"Inspektor paměti","memoryInspector":"Inspektor paměti","memoryTitle":"Paměť","octal":"Osmičkové","offset":"Offset","offsetTooltip":"Odsazení, které se při navigaci přidá k aktuálnímu umístění v paměti.","provider":{"localsError":"Nelze číst místní proměnné. Není aktivní relace ladění.","readError":"Nelze číst paměť. Není aktivní relace ladění.","writeError":"Nelze zapisovat do paměti. Není aktivní relace ladění."},"register":"Registrace","register-widget":{"filter-placeholder":"Filtr (začíná na)"},"registerReadError":"Došlo k chybě při načítání registrů.","registers":"Registry","toggleComparisonWidgetVisibility":"Přepnutí viditelnosti widgetu Srovnání","utils":{"afterBytes":"V obou widgetech, které chcete porovnat, musíte načíst paměť. {0} nemá načtenou žádnou paměť.","bytesMessage":"V obou widgetech, které chcete porovnat, musíte načíst paměť. {0} nemá načtenou žádnou paměť."}},"messages":{"notificationTimeout":"Po uplynutí tohoto časového limitu budou informativní oznámení skryta.","toggleNotifications":"Přepínání oznámení"},"mini-browser":{"typeUrl":"Zadejte adresu URL"},"monaco":{"noSymbolsMatching":"Žádné odpovídající symboly","typeToSearchForSymbols":"Zadejte hledání symbolů"},"navigator":{"autoReveal":"Automatické odhalení","clipboardWarn":"Přístup do schránky je odepřen. Zkontrolujte oprávnění prohlížeče.","clipboardWarnFirefox":"Rozhraní API schránky není k dispozici. Lze ji povolit pomocí předvolby \'{0}\' na stránce \'{1}\'. Poté znovu načtěte aplikaci Theia. Všimněte si, že to umožní FireFoxu získat plný přístup k systémové schránce.","refresh":"Obnovení v Průzkumníku","reveal":"Odhalení v Průzkumníkovi","toggleHiddenFiles":"Přepínání skrytých souborů"},"output":{"clearOutputChannel":"Jasný výstupní kanál...","closeOutputChannel":"Zavřít výstupní kanál...","hiddenChannels":"Skryté kanály","hideOutputChannel":"Skrýt výstupní kanál...","maxChannelHistory":"Maximální počet záznamů ve výstupním kanálu.","outputChannels":"Výstupní kanály","showOutputChannel":"Zobrazit výstupní kanál..."},"plugin":{"blockNewTab":"Váš prohlížeč zabránil otevření nové karty"},"plugin-dev":{"alreadyRunning":"Hostovaná instance je již spuštěna.","debugInstance":"Instance ladění","debugMode":"Použití inspect nebo inspect-brk pro ladění Node.js","devHost":"Vývojový hostitel","failed":"Nepodařilo se spustit hostovanou instanci zásuvného modulu: {0}","hostedPlugin":"Hostovaný plugin","hostedPluginRunning":"Hostovaný plugin: Spuštěn","hostedPluginStarting":"Hostovaný plugin: Spuštění","hostedPluginStopped":"Hostovaný plugin: Zastaven","hostedPluginWatching":"Hostovaný plugin: Sledování","instanceTerminated":"{0} bylo ukončeno","launchOutFiles":"Pole glob vzorů pro vyhledávání generovaných souborů JavaScript (`${pluginPath}` bude nahrazeno skutečnou cestou k zásuvnému modulu).","noValidPlugin":"Zadaná složka neobsahuje platný zásuvný modul.","notRunning":"Hostovaná instance není spuštěna.","pluginFolder":"Složka pluginu je nastavena na: {0}","preventedNewTab":"Váš prohlížeč zabránil otevření nové karty","restartInstance":"Restartování instance","running":"Hostovaná instance je spuštěna na adrese:","select":"Vyberte","selectPath":"Vybrat cestu","startInstance":"Spuštění instance","starting":"Spuštění serveru hostované instance ...","stopInstance":"Zastavit instanci","unknownTerminated":"Instance byla ukončena","watchMode":"Spuštění sledovacího nástroje na vyvíjeném zásuvném modulu"},"plugin-ext":{"authentication-main":{"loginTitle":"Přihlášení"},"plugins":"Zásuvné moduly","webviewTrace":"Řídí sledování komunikace s webovými pohledy.","webviewWarnIfUnsecure":"Upozorňuje uživatele, že webové náhledy jsou v současné době nasazeny nezabezpečeně."},"preview":{"openByDefault":"Ve výchozím nastavení otevřete místo editoru náhled."},"property-view":{"created":"Vytvořeno","directory":"Adresář","lastModified":"Naposledy upraveno","location":"Umístění","noProperties":"Žádné vlastnosti nejsou k dispozici.","properties":"Vlastnosti","size":"Velikost","symbolicLink":"Symbolický odkaz"},"scm":{"amend":"Změnit","amendHeadCommit":"HEAD Commit","amendLastCommit":"Změnit poslední revizi","changeRepository":"Úložiště změn...","config.untrackedChanges":"Řídí chování nesledovaných změn.","config.untrackedChanges.hidden":"skryté","config.untrackedChanges.mixed":"smíšené","config.untrackedChanges.separate":"samostatné stránky","history":"Historie","noRepositoryFound":"Nebylo nalezeno žádné úložiště","unamend":"Odstranit změny","unamendCommit":"Změna revize"},"search-in-workspace":{"includeIgnoredFiles":"Zahrnout ignorované soubory","noFolderSpecified":"Složku jste neotevřeli ani nezadali. Aktuálně se prohledávají pouze otevřené soubory.","resultSubset":"Jedná se pouze o podmnožinu všech výsledků. Pro zúžení seznamu výsledků použijte konkrétnější vyhledávací výraz.","searchOnEditorModification":"Prohledat aktivní editor při úpravě."},"secondary-window":{"extract-widget":"Přesunutí zobrazení do sekundárního okna"},"shell-area":{"secondary":"Sekundární okno","top":"Nahoru"},"task":{"attachTask":"Připojte úkol...","clearHistory":"Vymazat historii","noTaskToRun":"Nebyla nalezena žádná úloha ke spuštění. Konfigurace úloh...","openUserTasks":"Otevřené uživatelské úlohy"},"terminal":{"defaultProfile":"Výchozí profil používaný v {0}","enableCopy":"Povolení funkce ctrl-c (cmd-c v systému macOS) pro kopírování vybraného textu","enablePaste":"Povolení funkce ctrl-v (cmd-v v systému macOS) pro vkládání ze schránky","profileArgs":"Argumenty shellu, které tento profil používá.","profileColor":"ID barvy motivu terminálu, které se přiřadí k terminálu.","profileDefault":"Zvolte výchozí profil...","profileIcon":"ID kodikonu, které se přiřadí k ikoně terminálu.\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Nový terminál (s profilem)...","profilePath":"Cesta k shellu, který tento profil používá.","profiles":"Profily, které se mají zobrazit při vytváření nového terminálu. Vlastnost path nastavte ručně pomocí nepovinných argumentů.\\nNastavením existujícího profilu na `null` jej skryjete ze seznamu, například: `\\"{0}\\": null`.","rendererType":"Ovládá způsob vykreslování terminálu.","selectProfile":"Výběr profilu pro nový terminál","shell.deprecated":"Tento postup je zastaralý, nový doporučený způsob konfigurace výchozího shellu je vytvoření profilu terminálu v \'terminal.integrated.profiles.{0}\' a nastavení jeho názvu jako výchozího v \'terminal.integrated.defaultProfile.{0}.\'","shellArgsLinux":"Argumenty příkazového řádku, které se použijí v terminálu Linuxu.","shellArgsOsx":"Argumenty příkazového řádku, které se použijí v terminálu systému macOS.","shellArgsWindows":"Argumenty příkazového řádku, které se použijí v terminálu systému Windows.","shellLinux":"Cesta k shellu, který terminál používá v Linuxu (výchozí: \'{0}\'}).","shellOsx":"Cesta k shellu, který terminál používá v systému macOS (výchozí: \'{0}\'}).","shellWindows":"Cesta k shellu, který terminál používá v systému Windows. (výchozí: \'{0}\')."},"toolbar":{"addCommand":"Přidání příkazu na panel nástrojů","addCommandPlaceholder":"Najděte příkaz, který chcete přidat na panel nástrojů","centerColumn":"Středový sloupec","failedUpdate":"Nepodařilo se aktualizovat hodnotu \'{0}\' v \'{1}\'.","filterIcons":"Ikony filtrů","iconSelectDialog":"Výběr ikony pro \'{0}\'","iconSet":"Sada ikon","insertGroupLeft":"Vložit oddělovač skupin (vlevo)","insertGroupRight":"Vložit oddělovač skupin (vpravo)","leftColumn":"Levý sloupec","openJSON":"Přizpůsobení panelu nástrojů (Otevřít JSON)","removeCommand":"Odstranění příkazu z panelu nástrojů","restoreDefaults":"Obnovení výchozího nastavení panelu nástrojů","rightColumn":"Pravý sloupec","selectIcon":"Vybrat ikonu","toggleToolbar":"Přepínání panelu nástrojů","toolbarLocationPlaceholder":"Kam chcete příkaz přidat?","useDefaultIcon":"Použití výchozí ikony"},"typehierarchy":{"subtypeHierarchy":"Hierarchie podtypů","supertypeHierarchy":"Hierarchie nadtypů"},"vsx-registry":{"downloadCount":"Počet stažení: {0}","errorFetching":"Chyba při načítání rozšíření.","failedInstallingVSIX":"Nepodařilo se nainstalovat {0} z VSIX.","invalidVSIX":"Vybraný soubor není platný zásuvný modul \\"*.vsix\\".","license":"Licence: {0}","recommendedExtensions":"Seznam názvů rozšíření doporučených pro použití v tomto pracovním prostoru.","searchPlaceholder":"Hledat rozšíření v {0}","showInstalled":"Zobrazit nainstalovaná rozšíření","showRecommendedExtensions":"Řídí, zda se mají zobrazovat oznámení pro doporučení rozšíření.","vsx-extensions-contribution":{"update-version-uninstall-error":"Chyba při odstraňování rozšíření: {0}.","update-version-version-error":"Nepodařilo se nainstalovat verzi {0} {1} ."}},"webview":{"goToReadme":"Přejít na README","messageWarning":"            Vzor hostitele {0} byl změněn na `{1}`; změna vzoru může vést k bezpečnostním zranitelnostem.             Další informace naleznete v části `{2}`."},"workspace":{"compareWithEachOther":"Vzájemné porovnání","confirmDeletePermanently.description":"Nepodařilo se odstranit položku \\"{0}\\" pomocí Koše. Chcete jej místo toho trvale odstranit?","confirmDeletePermanently.solution":"Používání Koše můžete zakázat v předvolbách.","confirmDeletePermanently.title":"Chyba při mazání souboru","confirmMessage.delete":"Opravdu chcete odstranit následující soubory?","confirmMessage.dirtyMultiple":"Opravdu chcete odstranit {0} souborů s neuloženými změnami?","confirmMessage.dirtySingle":"Opravdu chcete smazat {0} s neuloženými změnami?","confirmMessage.uriMultiple":"Opravdu chcete odstranit všechny {0} vybrané soubory?","confirmMessage.uriSingle":"Opravdu chcete odstranit {0}?","duplicate":"Duplikát","failApply":"Nelze použít změny v novém souboru","failSaveAs":"Nelze spustit \\"{0}\\" pro aktuální widget.","newFilePlaceholder":"Název souboru","newFolderPlaceholder":"Název složky","noErasure":"Poznámka: Z disku se nic nevymaže","openRecentPlaceholder":"Zadejte název pracovního prostoru, který chcete otevřít.","openRecentWorkspace":"Otevřít nedávný pracovní prostor...","preserveWindow":"Povolit otevírání pracovních ploch v aktuálním okně.","removeFolder":"Jste si jisti, že chcete z pracovního prostoru odebrat následující složku?","removeFolders":"Jste si jisti, že chcete z pracovního prostoru odebrat následující složky?","trashTitle":"Přesun {0} do koše","trustEmptyWindow":"Řídí, zda má být prázdný pracovní prostor ve výchozím nastavení důvěryhodný.","trustEnabled":"Řídí, zda je povolena důvěryhodnost pracovního prostoru. Pokud je zakázáno, jsou důvěryhodné všechny pracovní prostory.","trustRequest":"Rozšíření požaduje důvěryhodnost pracovního prostoru, ale odpovídající rozhraní API ještě není plně podporováno. Chcete tomuto pracovnímu prostoru důvěřovat?","untitled-cleanup":"Zdá se, že existuje mnoho nepojmenovaných souborů pracovního prostoru. Zkontrolujte prosím {0} a odstraňte všechny nepoužívané soubory.","workspaceFolderAdded":"Byl vytvořen pracovní prostor s více kořeny. Chcete uložit konfiguraci pracovního prostoru jako soubor?","workspaceFolderAddedTitle":"Složka přidaná do pracovního prostoru"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.de.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.de.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Edit Bedingung...","terminal:new:profile":"Neues integriertes Terminal aus einem Profil erstellen","terminal:profile:default":"Wählen Sie das Standard-Terminalprofil","theia":{"callhierarchy":{"noCallers":"Es wurden keine Anrufer entdeckt.","open":"Öffne Aufruf-Hierarchie"},"core":{"about":{"compatibility":"{0} Kompatibilität","defaultApi":"Standard {0} API","version":"Version"},"common":{"closeAll":"Alle Registerkarten schließen","closeAllTabMain":"Alle Registerkarten im Hauptbereich schließen","closeOtherTabMain":"Andere Registerkarten im Hauptbereich schließen","closeOthers":"Andere Registerkarten schließen","closeRight":"Rechte Registerkarten schließen","closeTab":"Registerkarte schließen","closeTabMain":"Registerkarte im Hauptbereich schließen","collapseAllTabs":"Alle Registerkarten einklappen","collapseBottomPanel":"Unteres Panel umschalten","collapseTab":"Seitenwand einklappen","showNextTabGroup":"Zur nächsten Registerkarte wechseln Gruppe","showNextTabInGroup":"Zur nächsten Registerkarte in der Gruppe wechseln","showPreviousTabGroup":"Zur vorherigen Registerkartengruppe wechseln","showPreviousTabInGroup":"Zur vorherigen Registerkarte in der Gruppe wechseln","toggleMaximized":"Maximiert umschalten"},"enhancedPreview":{"classic":"Zeigt eine einfache Vorschau der Registerkarte mit grundlegenden Informationen an.","enhanced":"Anzeige einer erweiterten Vorschau der Registerkarte mit zusätzlichen Informationen.","visual":"Zeigen Sie eine visuelle Vorschau der Registerkarte an."},"file":{"browse":"Durchsuchen"},"highlightModifiedTabs":"Steuert, ob ein oberer Rand auf modifizierten (schmutzigen) Editor-Tabs gezeichnet wird oder nicht.","keybindingStatus":"{0} wurde gedrückt und wartet auf weitere Tasten","keyboard":{"choose":"Tastaturlayout wählen","chooseLayout":"Wählen Sie ein Tastaturlayout","current":"(aktuell: {0})","currentLayout":" - aktuelles Layout","mac":"Mac-Tastaturen","pc":"PC-Tastaturen","tryDetect":"Versuchen Sie, das Tastaturlayout anhand der Browserinformationen und der gedrückten Tasten zu ermitteln."},"navigator":{"clipboardWarn":"Der Zugriff auf die Zwischenablage wird verweigert. Überprüfen Sie die Berechtigung Ihres Browsers.","clipboardWarnFirefox":"Die Zwischenablage-API ist nicht verfügbar. Sie kann durch die Einstellung \'{0}\' auf der Seite \'{1}\' aktiviert werden. Dann laden Sie Theia neu. Beachten Sie, dass FireFox dadurch vollen Zugriff auf die Zwischenablage des Systems erhält."},"offline":"Offline","quitMessage":"Alle nicht gespeicherten Änderungen werden nicht gespeichert.","resetWorkbenchLayout":"Workbench-Layout zurücksetzen","searchbox":{"close":"Schließen (Escape)","next":"Nächste (Unten)","previous":"Zurück (Oben)"},"silentNotifications":"Legt fest, ob Benachrichtigungs-Popups unterdrückt werden sollen.","tabDefaultSize":"Gibt die Standardgröße für Registerkarten an.","tabMaximize":"Steuert, ob die Registerkarten bei einem Doppelklick maximiert werden sollen.","tabMinimumSize":"Gibt die Mindestgröße für Tabulatoren an.","tabShrinkToFit":"Schrumpfen Sie die Registerkarten auf den verfügbaren Platz."},"debug":{"addConfigurationPlaceholder":"Wählen Sie das Stammverzeichnis des Arbeitsbereichs, dem Sie die Konfiguration hinzufügen möchten","compound-cycle":"Startkonfiguration \'{0}\' enthält einen Zyklus mit sich selbst","continueAll":"Alle fortsetzen","copyExpressionValue":"Ausdruckswert kopieren","debugVariableInput":"{0} Wert einstellen","instruction-breakpoint":"Anweisung Haltepunkt","missingConfiguration":"Die dynamische Konfiguration \'{0}:{1}\' fehlt oder ist nicht anwendbar","pauseAll":"Pause Alle","reveal":"Enthüllen","threads":"Threads","toggleTracing":"Aktivieren/Deaktivieren der Verfolgung der Kommunikation mit Debug-Adaptern"},"editor":{"dirtyEncoding":"Die Datei ist verschmutzt. Bitte speichern Sie sie zuerst, bevor Sie sie mit einer anderen Kodierung erneut öffnen.","editor.codeActionWidget.showHeaders":"Aktivieren/deaktivieren Sie die Anzeige von Gruppenkopfzeilen im Code-Aktionsmenü.","editor.experimental.pasteActions.enabled":"Aktivieren/deaktivieren Sie laufende Bearbeitungen von Erweiterungen beim Einfügen.","editor.formatOnSaveMode.modificationsIfAvailable":"Es wird versucht, nur Änderungen zu formatieren (erfordert Quellensicherung). Wenn die Versionskontrolle nicht verwendet werden kann, wird die gesamte Datei formatiert.","editor.inlayHints.enabled1":"Inlay-Hinweise werden standardmäßig angezeigt und bei gedrückter Tastenkombination \\"Strg+Alt\\" ausgeblendet","editor.inlayHints.enabled2":"Inlay-Hinweise sind standardmäßig ausgeblendet und werden angezeigt, wenn die Tastenkombination \\"Strg+Alt\\" gedrückt wird.","editor.quickSuggestions":"Legt fest, ob während der Eingabe automatisch Vorschläge angezeigt werden sollen. Dies kann für die Eingabe von Kommentaren, Strings und anderem Code gesteuert werden. Schnellvorschläge können so konfiguriert werden, dass sie als Ghosttext oder mit dem Suggest-Widget angezeigt werden. Beachten Sie auch die \'#editor.suggestOnTriggerCharacters#\'-Einstellung, die steuert, ob Vorschläge durch Sonderzeichen ausgelöst werden.","editor.suggest.matchOnWordStartOnly":"Wenn die IntelliSense-Filterung aktiviert ist, muss das erste Zeichen am Wortanfang übereinstimmen, z. B. \\"c\\" bei \\"Konsole\\" oder \\"Webkontext\\", aber _nicht_ bei \\"Beschreibung\\". Wenn IntelliSense deaktiviert ist, werden mehr Ergebnisse angezeigt, aber immer noch nach der Qualität der Übereinstimmung sortiert.","files.autoSave":"Steuert das [automatische Speichern](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) von Editoren, die ungespeicherte Änderungen haben.","files.autoSave.afterDelay":"Ein Editor mit Änderungen wird automatisch nach der konfigurierten `#files.autoSaveDelay#` gespeichert.","files.autoSave.off":"Ein Editor mit Änderungen wird nie automatisch gespeichert.","files.autoSave.onFocusChange":"Ein Editor mit Änderungen wird automatisch gespeichert, wenn der Editor den Fokus verliert.","files.autoSave.onWindowChange":"Ein Editor mit Änderungen wird automatisch gespeichert, wenn das Fenster den Fokus verliert.","formatOnSaveTimeout":"Zeitüberschreitung in Millisekunden, nach der die Formatierung, die beim Speichern der Datei ausgeführt wird, abgebrochen wird.","persistClosedEditors":"Legt fest, ob der Verlauf des geschlossenen Editors für den Arbeitsbereich beim Neuladen des Fensters erhalten bleiben soll.","showAllEditors":"Alle geöffneten Editoren anzeigen","splitHorizontal":"Editor horizontal teilen","splitVertical":"Editor vertikal teilen","toggleStickyScroll":"Fixierten Bildlauf umschalten"},"file-search":{"toggleIgnoredFiles":" (Drücken Sie {0}, um ignorierte Dateien anzuzeigen/auszublenden)"},"fileDialog":{"showHidden":"Versteckte Dateien anzeigen"},"fileSystem":{"fileResource":{"overWriteBody":"Möchten Sie die an \'{0}\' vorgenommenen Änderungen im Dateisystem überschreiben?"}},"filesystem":{"copiedToClipboard":"Kopieren Sie den Download-Link in die Zwischenablage.","copyDownloadLink":"Download-Link kopieren","dialog":{"initialLocation":"Zum Ausgangsort gehen","multipleItemMessage":"Sie können nur ein Element auswählen","name":"Name:","navigateBack":"Zurück navigieren","navigateForward":"Vorwärts navigieren","navigateUp":"Ein Verzeichnis nach oben navigieren"},"fileResource":{"binaryFileQuery":"Das Öffnen kann einige Zeit in Anspruch nehmen und dazu führen, dass die IDE nicht mehr reagiert. Wollen Sie \'{0}\' trotzdem öffnen?","binaryTitle":"Die Datei ist entweder binär oder verwendet eine nicht unterstützte Textkodierung.","largeFileTitle":"Die Datei ist zu groß ({0}).","overwriteTitle":"Die Datei \'{0}\' wurde im Dateisystem geändert."},"filesExclude":"Konfigurieren Sie globale Muster für den Ausschluss von Dateien und Ordnern. Beispielsweise entscheidet der Datei-Explorer auf der Grundlage dieser Einstellung, welche Dateien und Ordner angezeigt oder ausgeblendet werden sollen.","format":"Format:","maxConcurrentUploads":"Maximale Anzahl der gleichzeitig hochzuladenden Dateien, wenn mehrere Dateien hochgeladen werden. 0 bedeutet, dass alle Dateien gleichzeitig hochgeladen werden.","maxFileSizeMB":"Steuert die maximale Dateigröße in MB, die geöffnet werden kann.","prepareDownload":"Download wird vorbereitet...","prepareDownloadLink":"Download-Link wird vorbereitet...","processedOutOf":"Verarbeitet {0} von {1}","replaceTitle":"Datei austauschen","uploadFiles":"Dateien hochladen...","uploadedOutOf":"Hochgeladen {0} von {1}"},"getting-started":{"apiComparator":"{0} API-Kompatibilität","newExtension":"Bau einer neuen Erweiterung","newPlugin":"Ein neues Plugin erstellen","startup-editor":{"welcomePage":"Öffnen Sie die Willkommensseite mit Inhalten, die Ihnen den Einstieg in die Arbeit mit {0} und den Erweiterungen erleichtern."}},"git":{"aFewSecondsAgo":"vor ein paar Sekunden","addSignedOff":"Abgezeichnet von hinzufügen","amendReuseMessag":"Um die letzte Meldung wieder zu verwenden, drücken Sie \\"Enter\\" oder \\"Escape\\", um den Vorgang abzubrechen.","amendRewrite":"Vorherige Übermittlungsnachricht neu schreiben. Bestätigen Sie mit \\"Enter\\" oder brechen Sie mit \\"Escape\\" ab.","checkoutCreateLocalBranchWithName":"Erstellen Sie einen neuen lokalen Zweig mit dem Namen: {0}. Drücken Sie \\"Enter\\" zur Bestätigung oder \\"Escape\\" zum Abbrechen.","checkoutProvideBranchName":"Bitte geben Sie den Namen einer Zweigstelle an.","checkoutSelectRef":"Wählen Sie eine Referenz zum Auschecken oder erstellen Sie eine neue lokale Zweigstelle:","cloneQuickInputLabel":"Bitte geben Sie einen Speicherort für das Git-Repository an. Bestätigen Sie mit \\"Enter\\" oder brechen Sie mit \\"Escape\\" ab.","cloneRepository":"Klonen Sie das Git-Repository: {0}. Bestätigen Sie mit \\"Enter\\" oder brechen Sie mit \\"Escape\\" ab.","compareWith":"Vergleichen mit...","compareWithBranchOrTag":"Wählen Sie einen Zweig oder eine Markierung, den/die Sie mit dem derzeit aktiven {0} Zweig vergleichen möchten:","diff":"Diff","dirtyDiffLinesLimit":"Schmutzige Diff-Dekorationen nicht anzeigen, wenn die Zeilenzahl des Editors diese Grenze überschreitet.","dropStashMessage":"Versteck erfolgreich entfernt.","editorDecorationsEnabled":"Git-Dekorationen im Editor anzeigen.","fetchPickRemote":"Wählen Sie eine Fernbedienung zum Abrufen aus:","gitDecorationsColors":"Farbdekoration im Navigator verwenden.","mergeQuickPickPlaceholder":"Wählen Sie einen Zweig, der mit dem derzeit aktiven {0}-Zweig zusammengeführt werden soll:","missingUserInfo":"Stellen Sie sicher, dass Sie Ihren \'user.name\' und \'user.email\' in git konfigurieren.","noHistoryForError":"Es ist keine Historie verfügbar für {0}","noPreviousCommit":"Kein früherer Commit zur Änderung","noRepositoriesSelected":"Es wurden keine Repositories ausgewählt.","prepositionIn":"in","repositoryNotInitialized":"Das Repository {0} ist noch nicht initialisiert.","stashChanges":"Versteckte Änderungen. Drücken Sie \\"Enter\\" zur Bestätigung oder \\"Escape\\" zum Abbrechen.","stashChangesWithMessage":"Stash-Änderungen mit Meldung: {0}. Drücken Sie \\"Enter\\" zur Bestätigung oder \\"Escape\\" zum Abbrechen.","tabTitleIndex":"{0} (Index)","tabTitleWorkingTree":"{0} (Arbeitsbaum)","toggleBlameAnnotations":"Blame Annotationen umschalten"},"keybinding-schema-updater":{"deprecation":"Verwenden Sie stattdessen die `when`-Klausel."},"keymaps":{"editKeybindingTitle":"Tastaturbelegung für {0} bearbeiten","keybindingCollidesValidation":"Tastenkombinationen kollidieren","requiredKeybindingValidation":"Schlüsselbindung Wert ist erforderlich","resetKeybindingConfirmation":"Möchten Sie diese Tastaturbelegung wirklich auf den Standardwert zurücksetzen?","resetKeybindingTitle":"Tastaturbelegung für {0} zurücksetzen","resetMultipleKeybindingsWarning":"Wenn mehrere Tastenkombinationen für diesen Befehl existieren, werden alle zurückgesetzt."},"localize":{"offlineTooltip":"Kann keine Verbindung zum Backend herstellen."},"markers":{"clearAll":"Alle löschen","noProblems":"Bisher wurden im Arbeitsbereich keine Probleme festgestellt.","tabbarDecorationsEnabled":"Problemdekorationen (Diagnosemarkierungen) in den Registerkartenleisten anzeigen."},"memory-inspector":{"addressTooltip":"Speicherplatz, der angezeigt werden soll, eine Adresse oder ein Ausdruck, der zu einer Adresse ausgewertet wird","ascii":"ASCII","binary":"Binär","byteSize":"Byte Size","bytesPerGroup":"Bytes Per Group","closeSettings":"Einstellungen schließen","columns":"Rubriken","command":{"createNewMemory":"Neuen Speicherinspektor erstellen","createNewRegisterView":"Neue Registeransicht erstellen","followPointer":"Zeigern folgen","followPointerMemory":"Zeiger im Memory Inspector verfolgen","resetValue":"Wert zurücksetzen","showRegister":"Register im Speicherinspektor anzeigen","viewVariable":"Variable im Speicherinspektor anzeigen"},"data":"Daten","decimal":"Dezimal","diff":{"label":"Diff: {0}"},"diff-widget":{"offset-label":"{0} Versetzt","offset-title":"Bytes zum Versetzen des Speichers von {0}"},"editable":{"apply":"Änderungen anwenden","clear":"Deutliche Änderungen"},"endianness":"Endianness","extraColumn":"Extra-Spalte","groupsPerRow":"Gruppen pro Zeile","hexadecimal":"Hexadezimal","length":"Länge","lengthTooltip":"Anzahl der abzurufenden Bytes, dezimal oder hexadezimal","memory":{"addressField":{"memoryReadError":"Geben Sie eine Adresse oder einen Ausdruck in das Feld Ort ein."},"freeze":"Speicheransicht einfrieren","hideSettings":"Einstellungsfeld ausblenden","readError":{"bounds":"Speichergrenzen überschritten, Ergebnis wird abgeschnitten.","noContents":"Derzeit ist kein Speicherinhalt verfügbar."},"readLength":{"memoryReadError":"Geben Sie eine Länge (Dezimal- oder Hexadezimalzahl) in das Feld Länge ein."},"showSettings":"Einstellungsfeld anzeigen","unfreeze":"Speicheransicht auftauen","userError":"Es ist ein Fehler beim Abrufen von Speicher aufgetreten."},"memoryCategory":"Speicherinspektor","memoryInspector":"Speicherinspektor","memoryTitle":"Speicher","octal":"Oktal","offset":"Versetzt","offsetTooltip":"Offset, der beim Navigieren zum aktuellen Speicherplatz hinzugefügt wird","provider":{"localsError":"Lokale Variablen können nicht gelesen werden. Keine aktive Debug-Sitzung.","readError":"Speicher kann nicht gelesen werden. Keine aktive Debug-Sitzung.","writeError":"Speicher kann nicht geschrieben werden. Keine aktive Debug-Sitzung."},"register":"Register","register-widget":{"filter-placeholder":"Filter (beginnt mit)"},"registerReadError":"Es gab einen Fehler beim Abrufen von Registern.","registers":"Registers","toggleComparisonWidgetVisibility":"Sichtbarkeit des Vergleichs-Widgets umschalten","utils":{"afterBytes":"Sie müssen in beide Widgets, die Sie vergleichen möchten, Speicher laden. {0} hat keinen Speicher geladen.","bytesMessage":"Sie müssen in beide Widgets, die Sie vergleichen möchten, Speicher laden. {0} hat keinen Speicher geladen."}},"messages":{"notificationTimeout":"Informative Benachrichtigungen werden nach dieser Zeitspanne ausgeblendet.","toggleNotifications":"Benachrichtigungen umschalten"},"mini-browser":{"typeUrl":"Geben Sie eine URL ein"},"monaco":{"noSymbolsMatching":"Keine passenden Symbole","typeToSearchForSymbols":"Tippen Sie, um nach Symbolen zu suchen"},"navigator":{"autoReveal":"Auto-Enthüllung","clipboardWarn":"Der Zugriff auf die Zwischenablage wird verweigert. Überprüfen Sie die Berechtigung Ihres Browsers.","clipboardWarnFirefox":"Die Zwischenablage-API ist nicht verfügbar. Sie kann durch die Einstellung \'{0}\' auf der Seite \'{1}\' aktiviert werden. Dann laden Sie Theia neu. Beachten Sie, dass FireFox dadurch vollen Zugriff auf die Systemzwischenablage erhält.","refresh":"Aktualisieren im Explorer","reveal":"Enthüllen im Explorer","toggleHiddenFiles":"Versteckte Dateien umschalten"},"output":{"clearOutputChannel":"Ausgangskanal löschen...","closeOutputChannel":"Ausgangskanal schließen...","hiddenChannels":"Versteckte Kanäle","hideOutputChannel":"Ausgangskanal ausblenden...","maxChannelHistory":"Die maximale Anzahl der Einträge in einem Ausgabekanal.","outputChannels":"Ausgangskanäle","showOutputChannel":"Ausgangskanal anzeigen..."},"plugin":{"blockNewTab":"Ihr Browser hat das Öffnen einer neuen Registerkarte verhindert"},"plugin-dev":{"alreadyRunning":"Die gehostete Instanz läuft bereits.","debugInstance":"Debug-Instanz","debugMode":"Verwendung von inspect oder inspect-brk zur Fehlersuche in Node.js","devHost":"Entwicklung Host","failed":"Die gehostete Plugin-Instanz konnte nicht ausgeführt werden: {0}","hostedPlugin":"Gehostetes Plugin","hostedPluginRunning":"Gehostetes Plugin: Läuft","hostedPluginStarting":"Gehostetes Plugin: Start","hostedPluginStopped":"Gehostetes Plugin: Angehalten","hostedPluginWatching":"Gehostetes Plugin: Überwachen","instanceTerminated":"{0} wurde abgebrochen","launchOutFiles":"Array von Glob-Patterns zum Auffinden der generierten JavaScript-Dateien (`${pluginPath}` wird durch den tatsächlichen Pfad des Plugins ersetzt).","noValidPlugin":"Der angegebene Ordner enthält kein gültiges Plugin.","notRunning":"Die gehostete Instanz läuft nicht.","pluginFolder":"Plugin-Ordner ist eingestellt auf: {0}","preventedNewTab":"Ihr Browser hat das Öffnen einer neuen Registerkarte verhindert","restartInstance":"Instanz neu starten","running":"Die gehostete Instanz läuft auf:","select":"Wählen Sie","selectPath":"Pfad auswählen","startInstance":"Start-Instanz","starting":"Start des gehosteten Instanzservers ...","stopInstance":"Instanz anhalten","unknownTerminated":"Die Instanz wurde beendet","watchMode":"Watcher auf Plugin in Entwicklung ausführen"},"plugin-ext":{"authentication-main":{"loginTitle":"Anmeldung"},"plugins":"Plugins","webviewTrace":"Steuert die Kommunikationsverfolgung mit Webviews.","webviewWarnIfUnsecure":"Warnt Benutzer, dass Webviews derzeit unsicher eingesetzt werden."},"preview":{"openByDefault":"Öffnen Sie standardmäßig die Vorschau anstelle des Editors."},"property-view":{"created":"Erstellt","directory":"Verzeichnis","lastModified":"Zuletzt geändert","location":"Standort","noProperties":"Keine Eigenschaften verfügbar.","properties":"Eigenschaften","size":"Größe","symbolicLink":"Symbolischer Link"},"scm":{"amend":"Ändern","amendHeadCommit":"HEAD Commit","amendLastCommit":"Letzte Übertragung ändern","changeRepository":"Repository ändern...","config.untrackedChanges":"Steuert, wie sich nicht verfolgte Änderungen verhalten.","config.untrackedChanges.hidden":"versteckt","config.untrackedChanges.mixed":"gemischt","config.untrackedChanges.separate":"getrennt","history":"Geschichte","noRepositoryFound":"Kein Repository gefunden","unamend":"Ändern","unamendCommit":"Commit ändern"},"search-in-workspace":{"includeIgnoredFiles":"Ignorierte Dateien einbeziehen","noFolderSpecified":"Sie haben keinen Ordner geöffnet oder angegeben. Es werden derzeit nur geöffnete Dateien durchsucht.","resultSubset":"Dies ist nur eine Teilmenge aller Ergebnisse. Verwenden Sie einen spezifischeren Suchbegriff, um die Ergebnisliste einzugrenzen.","searchOnEditorModification":"Durchsucht den aktiven Editor nach Änderungen."},"secondary-window":{"extract-widget":"Ansicht in sekundäres Fenster verschieben"},"shell-area":{"secondary":"Sekundäres Fenster","top":"Top"},"task":{"attachTask":"Aufgabe anhängen...","clearHistory":"Geschichte löschen","noTaskToRun":"Keine Aufgabe zur Ausführung gefunden. Aufgaben konfigurieren...","openUserTasks":"Nutzertasks öffnen"},"terminal":{"defaultProfile":"Das Standardprofil unter {0}","enableCopy":"Aktivieren von ctrl-c (cmd-c unter macOS) zum Kopieren von markiertem Text","enablePaste":"Aktivieren von ctrl-v (cmd-v unter macOS) zum Einfügen aus der Zwischenablage","profileArgs":"Die Shellparameter, welche dieses Profil verwendet.","profileColor":"ID einer Terminal-Themenfarbe zur Verwendung mit diesem Terminal.","profileDefault":"Standardprofil wählen...","profileIcon":"Eine codicon ID zur Verwendung mit diesem Terminal.  \\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Neues Terminal (mit Profil)...","profilePath":"Der Pfad der Shell, den dieses Profil benutzt.","profiles":"Die Profile welche zur Erzeugung eines Terminals verwendet werden können. Setzen Sie den Pfad von Hand mit optionalen Parametern.\\n\\nSezen Sie ein Profile auf `null` um es zu verbergen, z.B.: `{0}: null`.","rendererType":"Steuert, wie das Terminal gerendert wird.","selectProfile":"Wählen Sie ein Profil für das neue Terminal","shell.deprecated":"Dies ist veraltet, neu können Sie Ihre Shell konfigurieren, indem Sie ein Profil unter \'terminal.integrated.profiles.{0}\' anlegen und dessen Namen in \'terminal.integrated.defaultProfile.{0}\' als Standard setzen.","shellArgsLinux":"Die Befehlszeilenargumente, die im Linux-Terminal zu verwenden sind.","shellArgsOsx":"Die Befehlszeilenargumente, die im macOS-Terminal zu verwenden sind.","shellArgsWindows":"Die Befehlszeilenargumente, die im Windows-Terminal zu verwenden sind.","shellLinux":"Der Pfad der Shell, die das Terminal unter Linux verwendet (Standard: \'{0}\'}).","shellOsx":"Der Pfad der Shell, die das Terminal unter macOS verwendet (Standard: \'{0}\'}).","shellWindows":"Der Pfad der Shell, die das Terminal unter Windows verwendet. (Standard: \'{0}\')."},"toolbar":{"addCommand":"Befehl zur Symbolleiste hinzufügen","addCommandPlaceholder":"Suchen Sie einen Befehl, den Sie der Symbolleiste hinzufügen möchten","centerColumn":"Mittlere Spalte","failedUpdate":"Der Wert von \'{0}\' konnte nicht in \'{1}\' aktualisiert werden.","filterIcons":"Filter-Symbole","iconSelectDialog":"Wählen Sie ein Symbol für \'{0}\'.","iconSet":"Ikonensatz","insertGroupLeft":"Gruppentrennzeichen einfügen (links)","insertGroupRight":"Gruppentrennzeichen einfügen (rechts)","leftColumn":"Linke Spalte","openJSON":"Symbolleiste anpassen (JSON öffnen)","removeCommand":"Befehl aus der Symbolleiste entfernen","restoreDefaults":"Standardeinstellungen der Symbolleiste wiederherstellen","rightColumn":"Rechte Spalte","selectIcon":"Icon auswählen","toggleToolbar":"Symbolleiste umschalten","toolbarLocationPlaceholder":"Wo möchten Sie den Befehl hinzufügen?","useDefaultIcon":"Standardsymbol verwenden"},"typehierarchy":{"subtypeHierarchy":"Hierarchie der Untertypen","supertypeHierarchy":"Supertyp-Hierarchie"},"vsx-registry":{"downloadCount":"Anzahl der Downloads: {0}","errorFetching":"Fehler beim Abrufen von Erweiterungen.","failedInstallingVSIX":"Die Installation von {0} aus VSIX ist fehlgeschlagen.","invalidVSIX":"Die ausgewählte Datei ist kein gültiges \\"*.vsix\\"-Plugin.","license":"Lizenz: {0}","recommendedExtensions":"Eine Liste mit den Namen der Erweiterungen, die für die Verwendung in diesem Arbeitsbereich empfohlen werden.","searchPlaceholder":"Erweiterungen suchen in {0}","showInstalled":"Installierte Erweiterungen anzeigen","showRecommendedExtensions":"Steuert, ob Benachrichtigungen für Erweiterungsempfehlungen angezeigt werden.","vsx-extensions-contribution":{"update-version-uninstall-error":"Fehler beim Entfernen der Erweiterung: {0}.","update-version-version-error":"Die Installation der Version {0} von {1} ist fehlgeschlagen."}},"webview":{"goToReadme":"Zum README gehen","messageWarning":"            Das Host-Muster des {0}-Endpunkts wurde in `{1}` geändert; die Änderung des Musters kann zu Sicherheitslücken führen.             Siehe `{2}` für weitere Informationen."},"workspace":{"compareWithEachOther":"Miteinander vergleichen","confirmDeletePermanently.description":"Das Löschen von \\"{0}\\" über den Papierkorb ist fehlgeschlagen. Möchten Sie stattdessen dauerhaft löschen?","confirmDeletePermanently.solution":"Sie können die Verwendung des Papierkorbs in den Einstellungen deaktivieren.","confirmDeletePermanently.title":"Fehler beim Löschen einer Datei","confirmMessage.delete":"Wollen Sie die folgenden Dateien wirklich löschen?","confirmMessage.dirtyMultiple":"Wollen Sie wirklich {0} Dateien mit ungespeicherten Änderungen löschen?","confirmMessage.dirtySingle":"Wollen Sie wirklich {0} mit ungespeicherten Änderungen löschen?","confirmMessage.uriMultiple":"Wollen Sie wirklich alle {0} ausgewählten Dateien löschen?","confirmMessage.uriSingle":"Wollen Sie wirklich {0} löschen?","duplicate":"Duplizieren","failApply":"Änderungen konnten nicht auf neue Datei angewendet werden","failSaveAs":"Kann \\"{0}\\" für das aktuelle Widget nicht ausführen.","newFilePlaceholder":"File Name","newFolderPlaceholder":"Folder Name","noErasure":"Hinweis: Es wird nichts von der Festplatte gelöscht.","openRecentPlaceholder":"Geben Sie den Namen des Arbeitsbereichs ein, den Sie öffnen möchten","openRecentWorkspace":"Aktuellen Arbeitsbereich öffnen...","preserveWindow":"Aktivieren Sie das Öffnen von Arbeitsbereichen im aktuellen Fenster.","removeFolder":"Sind Sie sicher, dass Sie den folgenden Ordner aus dem Arbeitsbereich entfernen möchten?","removeFolders":"Sind Sie sicher, dass Sie die folgenden Ordner aus dem Arbeitsbereich entfernen möchten?","trashTitle":"Verschiebe {0} in den Papierkorb","trustEmptyWindow":"Steuert, ob dem leeren Arbeitsbereich standardmäßig vertraut wird oder nicht.","trustEnabled":"Steuert, ob das Vertrauen in Arbeitsbereiche aktiviert ist oder nicht. Wenn deaktiviert, wird allen Arbeitsbereichen vertraut.","trustRequest":"Eine Erweiterung fordert Vertrauen in den Arbeitsbereich an, aber die entsprechende API wird noch nicht vollständig unterstützt. Möchten Sie diesem Arbeitsbereich vertrauen?","untitled-cleanup":"Es scheint viele unbenannte Arbeitsbereichsdateien zu geben. Bitte überprüfen Sie {0} und entfernen Sie alle unbenutzten Dateien.","workspaceFolderAdded":"Ein Arbeitsbereich mit mehreren Wurzeln wurde erstellt. Möchten Sie Ihre Arbeitsbereichskonfiguration als Datei speichern?","workspaceFolderAddedTitle":"Ordner zum Arbeitsbereich hinzugefügt"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.es.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.es.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Editar condición...","terminal:new:profile":"Crear un nuevo terminal integrado a partir de un perfil","terminal:profile:default":"Elija el perfil de terminal por defecto","theia":{"callhierarchy":{"noCallers":"No se ha detectado ninguna llamada.","open":"Jerarquía de la convocatoria abierta"},"core":{"about":{"compatibility":"{0} Compatibilidad","defaultApi":"API por defecto {0} ","version":"Versión"},"common":{"closeAll":"Cerrar todas las pestañas","closeAllTabMain":"Cerrar todas las pestañas del área principal","closeOtherTabMain":"Cerrar otras pestañas en el área principal","closeOthers":"Cerrar otras pestañas","closeRight":"Cerrar pestañas a la derecha","closeTab":"Cerrar pestaña","closeTabMain":"Cerrar la pestaña en el área principal","collapseAllTabs":"Contraer todos los paneles laterales","collapseBottomPanel":"Panel inferior de la palanca","collapseTab":"Colapso del panel lateral","showNextTabGroup":"Pasar al siguiente grupo de pestañas","showNextTabInGroup":"Pasar a la siguiente pestaña del grupo","showPreviousTabGroup":"Cambiar al grupo de pestañas anterior","showPreviousTabInGroup":"Pasar a la pestaña anterior del grupo","toggleMaximized":"Alternar maximizado"},"enhancedPreview":{"classic":"Muestra una vista previa sencilla de la ficha con información básica.","enhanced":"Mostrar una vista previa mejorada de la ficha con información adicional.","visual":"Muestra una vista previa visual de la pestaña."},"file":{"browse":"Visite"},"highlightModifiedTabs":"Controla si se dibuja un borde superior en las pestañas modificadas (sucias) del editor o no.","keybindingStatus":"{0} fue presionado, esperando más teclas","keyboard":{"choose":"Elija la disposición del teclado","chooseLayout":"Elija una disposición de teclado","current":"(corriente: {0})","currentLayout":" - diseño actual","mac":"Teclados Mac","pc":"Teclados para PC","tryDetect":"Intenta detectar la distribución del teclado a partir de la información del navegador y de las teclas pulsadas."},"navigator":{"clipboardWarn":"El acceso al portapapeles está denegado. Comprueba los permisos de tu navegador.","clipboardWarnFirefox":"La API del portapapeles no está disponible. Se puede activar mediante la preferencia \'{0}\' en la página \'{1}\'. A continuación, vuelva a cargar Theia. Tenga en cuenta que esto permitirá a FireFox tener acceso completo al portapapeles del sistema."},"offline":"Fuera de línea","quitMessage":"Cualquier cambio no guardado no se guardará.","resetWorkbenchLayout":"Restablecer la disposición del banco de trabajo","searchbox":{"close":"Cerrar (Escapar)","next":"Siguiente (abajo)","previous":"Anterior (Arriba)"},"silentNotifications":"Controla si se suprimen las ventanas emergentes de notificación.","tabDefaultSize":"Especifica el tamaño por defecto de las pestañas.","tabMaximize":"Controla si se maximizan las pestañas al hacer doble clic.","tabMinimumSize":"Especifica el tamaño mínimo de las pestañas.","tabShrinkToFit":"Reduzca las pestañas para adaptarlas al espacio disponible."},"debug":{"addConfigurationPlaceholder":"Seleccione la raíz del espacio de trabajo para añadir la configuración","compound-cycle":"La configuración de lanzamiento \'{0}\' contiene un ciclo consigo mismo","continueAll":"Continuar todo","copyExpressionValue":"Copiar el valor de la expresión","debugVariableInput":"Establecer {0} Valor","instruction-breakpoint":"Punto de interrupción de la instrucción","missingConfiguration":"La configuración dinámica \'{0}:{1}\' falta o no es aplicable","pauseAll":"Pausa Todo","reveal":"Revelar","threads":"Hilos","toggleTracing":"Activar/desactivar las comunicaciones de rastreo con los adaptadores de depuración"},"editor":{"dirtyEncoding":"El archivo está sucio. Por favor, guárdelo primero antes de volver a abrirlo con otra codificación.","editor.codeActionWidget.showHeaders":"Activar/desactivar la visualización de las cabeceras de los grupos en el menú de acción del código.","editor.experimental.pasteActions.enabled":"Activar/desactivar la ejecución de ediciones desde extensiones al pegar.","editor.formatOnSaveMode.modificationsIfAvailable":"Intentará formatear sólo las modificaciones (requiere control de origen). Si no se puede utilizar el control de origen, se formateará todo el archivo.","editor.inlayHints.enabled1":"Los consejos de incrustación se muestran por defecto y se ocultan cuando se mantiene `Ctrl+Alt`.","editor.inlayHints.enabled2":"Los consejos de incrustación están ocultos por defecto y se muestran cuando se mantiene pulsado `Ctrl+Alt`.","editor.quickSuggestions":"Controla si las sugerencias deben aparecer automáticamente mientras se escribe. Esto puede controlarse para escribir comentarios, cadenas y otros códigos. La sugerencia rápida puede ser configurada para mostrarse como texto fantasma o con el widget de sugerencia. También hay que tener en cuenta la configuración \'#editor.suggestOnTriggerCharacters#\' que controla si las sugerencias son activadas por caracteres especiales.","editor.suggest.matchOnWordStartOnly":"Cuando se activa el filtro IntelliSense se requiere que el primer carácter coincida con el inicio de una palabra, por ejemplo `c` en `Console` o `WebContext` pero _no_ en `description`. Si se desactiva, IntelliSense mostrará más resultados, pero los ordenará según la calidad de la coincidencia.","files.autoSave":"Controla el [autoguardado](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) de los editores que tienen cambios sin guardar.","files.autoSave.afterDelay":"Un editor con cambios se guarda automáticamente después del `#files.autoSaveDelay#` configurado.","files.autoSave.off":"Un editor con cambios nunca se guarda automáticamente.","files.autoSave.onFocusChange":"Un editor con cambios se guarda automáticamente cuando el editor pierde el foco.","files.autoSave.onWindowChange":"Un editor con cambios se guarda automáticamente cuando la ventana pierde el foco.","formatOnSaveTimeout":"Tiempo de espera en milisegundos tras el cual se cancela el formato que se ejecuta al guardar el archivo.","persistClosedEditors":"Controla si se mantiene el historial del editor cerrado para el espacio de trabajo a través de las recargas de la ventana.","showAllEditors":"Mostrar todos los editores abiertos","splitHorizontal":"Editor de división horizontal","splitVertical":"Split Editor Vertical","toggleStickyScroll":"Alternar desplazamiento permanente"},"file-search":{"toggleIgnoredFiles":" (Pulse {0} para mostrar/ocultar los archivos ignorados)"},"fileDialog":{"showHidden":"Mostrar archivos ocultos"},"fileSystem":{"fileResource":{"overWriteBody":"¿Quiere sobrescribir los cambios realizados en \'{0}\' en el sistema de archivos?"}},"filesystem":{"copiedToClipboard":"Copiado el enlace de descarga en el portapapeles.","copyDownloadLink":"Copiar el enlace de descarga","dialog":{"initialLocation":"Ir a la ubicación inicial","multipleItemMessage":"Sólo puede seleccionar un elemento","name":"Nombre:","navigateBack":"Navegar hacia atrás","navigateForward":"Navegar hacia adelante","navigateUp":"Navegar hacia arriba en un directorio"},"fileResource":{"binaryFileQuery":"Abrirlo puede llevar algún tiempo y puede hacer que el IDE no responda. ¿Quiere abrir \'{0}\' de todos modos?","binaryTitle":"El archivo es binario o utiliza una codificación de texto no admitida.","largeFileTitle":"El archivo es demasiado grande ({0}).","overwriteTitle":"El archivo \'{0}\' ha sido modificado en el sistema de archivos."},"filesExclude":"Configurar patrones glob para excluir archivos y carpetas. Por ejemplo, el Explorador de archivos decide qué archivos y carpetas mostrar u ocultar en función de esta configuración.","format":"Formato:","maxConcurrentUploads":"Número máximo de archivos concurrentes a subir cuando se suben varios archivos. 0 significa que todos los archivos se subirán simultáneamente.","maxFileSizeMB":"Controla el tamaño máximo de archivo en MB que es posible abrir.","prepareDownload":"Preparando la descarga...","prepareDownloadLink":"Preparando enlace de descarga...","processedOutOf":"Procesado {0} de {1}","replaceTitle":"Sustituir archivo","uploadFiles":"Subir archivos...","uploadedOutOf":"Cargado {0} de {1}"},"getting-started":{"apiComparator":"{0} Compatibilidad con la API","newExtension":"Construir una nueva extensión","newPlugin":"Creación de un nuevo plugin","startup-editor":{"welcomePage":"Abra la página de bienvenida, con contenidos que le ayudarán a empezar a utilizar {0} y las extensiones."}},"git":{"aFewSecondsAgo":"hace unos segundos","addSignedOff":"Agregar a la lista de firmas","amendReuseMessag":"Para reutilizar el último mensaje de confirmación, pulse \\"Enter\\" o \\"Escape\\" para cancelar.","amendRewrite":"Reescribir el mensaje de confirmación anterior. Pulse \'Enter\' para confirmar o \'Escape\' para cancelar.","checkoutCreateLocalBranchWithName":"Cree una nueva sucursal local con el nombre: {0}. Pulse \'Enter\' para confirmar o \'Escape\' para cancelar.","checkoutProvideBranchName":"Por favor, indique el nombre de la sucursal.","checkoutSelectRef":"Selecciona una referencia para hacer el checkout o crea una nueva sucursal local:","cloneQuickInputLabel":"Por favor, indique la ubicación del repositorio Git. Pulse \'Enter\' para confirmar o \'Escape\' para cancelar.","cloneRepository":"Clona el repositorio Git: {0}. Pulsa \'Enter\' para confirmar o \'Escape\' para cancelar.","compareWith":"Compara con...","compareWithBranchOrTag":"Elija una rama o etiqueta para comparar con la rama {0} actualmente activa:","diff":"Diff","dirtyDiffLinesLimit":"No mostrar decoraciones diff sucias, si el número de líneas del editor supera este límite.","dropStashMessage":"El alijo se ha eliminado con éxito.","editorDecorationsEnabled":"Mostrar las decoraciones git en el editor.","fetchPickRemote":"Escoge un mando a distancia desde el que buscar:","gitDecorationsColors":"Utilice la decoración de colores en el navegador.","mergeQuickPickPlaceholder":"Elige una rama para fusionar con la rama {0} actualmente activa:","missingUserInfo":"Asegúrate de configurar tu \'user.name\' y \'user.email\' en git.","noHistoryForError":"No hay historial disponible para {0}","noPreviousCommit":"No hay compromiso previo para modificar","noRepositoriesSelected":"No se ha seleccionado ningún repositorio.","prepositionIn":"en","repositoryNotInitialized":"El repositorio {0} aún no está inicializado.","stashChanges":"Cambios en el alijo. Pulse \\"Enter\\" para confirmar o \\"Escape\\" para cancelar.","stashChangesWithMessage":"Cambios en el alijo con mensaje: {0}. Pulse \'Enter\' para confirmar o \'Escape\' para cancelar.","tabTitleIndex":"{0} (índice)","tabTitleWorkingTree":"{0} (Árbol de trabajo)","toggleBlameAnnotations":"Alternar las anotaciones de culpabilidad"},"keybinding-schema-updater":{"deprecation":"Utilice la cláusula `when` en su lugar."},"keymaps":{"editKeybindingTitle":"Editar enlace de teclas para {0}","keybindingCollidesValidation":"la vinculación de teclas actualmente colisiona","requiredKeybindingValidation":"se requiere el valor del keybinding","resetKeybindingConfirmation":"¿Realmente quieres restablecer este keybinding a su valor por defecto?","resetKeybindingTitle":"Restablecer la unión de teclas para {0}","resetMultipleKeybindingsWarning":"Si existen varias combinaciones de teclas para este comando, todas ellas se restablecerán."},"localize":{"offlineTooltip":"No se puede conectar al backend."},"markers":{"clearAll":"Borrar todo","noProblems":"Hasta ahora no se han detectado problemas en el espacio de trabajo.","tabbarDecorationsEnabled":"Mostrar decoradores de problemas (marcadores de diagnóstico) en las barras de pestañas."},"memory-inspector":{"addressTooltip":"Ubicación de la memoria a mostrar, una dirección o expresión que se evalúa a una dirección","ascii":"ASCII","binary":"Binario","byteSize":"Tamaño del byte","bytesPerGroup":"Bytes por grupo","closeSettings":"Cerrar Ajustes","columns":"Columnas","command":{"createNewMemory":"Crear un nuevo inspector de memoria","createNewRegisterView":"Crear una nueva vista de registro","followPointer":"Siga el puntero","followPointerMemory":"Seguir el puntero en el inspector de memoria","resetValue":"Valor de reposición","showRegister":"Mostrar registro en el inspector de memoria","viewVariable":"Mostrar la variable en el inspector de memoria"},"data":"Datos","decimal":"Decimal","diff":{"label":"Diff: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bytes para compensar la memoria de {0}"},"editable":{"apply":"Aplicar cambios","clear":"Cambios claros"},"endianness":"Endiosamiento","extraColumn":"Extra Column","groupsPerRow":"Grupos por fila","hexadecimal":"Hexadecimal","length":"Longitud","lengthTooltip":"Número de bytes a recuperar, en decimal o hexadecimal","memory":{"addressField":{"memoryReadError":"Introduzca una dirección o expresión en el campo Ubicación."},"freeze":"Congelar la vista de la memoria","hideSettings":"Ocultar el panel de configuración","readError":{"bounds":"Límites de memoria excedidos, el resultado será truncado.","noContents":"No hay contenidos de memoria disponibles actualmente."},"readLength":{"memoryReadError":"Introduzca una longitud (número decimal o hexadecimal) en el campo Longitud."},"showSettings":"Mostrar el panel de configuración","unfreeze":"Descongelar la vista de la memoria","userError":"Hubo un error en la obtención de la memoria."},"memoryCategory":"Inspector de memoria","memoryInspector":"Inspector de memoria","memoryTitle":"Memoria","octal":"Octal","offset":"Offset","offsetTooltip":"Desplazamiento que se añade a la posición de memoria actual, cuando se navega","provider":{"localsError":"No se pueden leer las variables locales. No hay sesión de depuración activa.","readError":"No se puede leer la memoria. No hay sesión de depuración activa.","writeError":"No se puede escribir en la memoria. No hay sesión de depuración activa."},"register":"Registro","register-widget":{"filter-placeholder":"Filtro (comienza con)"},"registerReadError":"Hubo un error en la obtención de registros.","registers":"Registros","toggleComparisonWidgetVisibility":"Alternar la visibilidad del widget de comparación","utils":{"afterBytes":"Debes cargar memoria en los dos widgets que quieras comparar. {0} no tiene memoria cargada.","bytesMessage":"Debes cargar memoria en los dos widgets que quieras comparar. {0} no tiene memoria cargada."}},"messages":{"notificationTimeout":"Las notificaciones informativas se ocultarán después de este tiempo de espera.","toggleNotifications":"Alternar las notificaciones"},"mini-browser":{"typeUrl":"Escriba una URL"},"monaco":{"noSymbolsMatching":"No hay símbolos que coincidan","typeToSearchForSymbols":"Escriba para buscar símbolos"},"navigator":{"autoReveal":"Auto Reveal","clipboardWarn":"El acceso al portapapeles está denegado. Comprueba los permisos de tu navegador.","clipboardWarnFirefox":"La API del portapapeles no está disponible. Se puede activar mediante la preferencia \'{0}\' en la página \'{1}\'. A continuación, vuelva a cargar Theia. Tenga en cuenta que esto permitirá a FireFox tener acceso completo al portapapeles del sistema.","refresh":"Actualizar en el Explorador","reveal":"Revelar en el Explorador","toggleHiddenFiles":"Activar los archivos ocultos"},"output":{"clearOutputChannel":"Canal de salida claro...","closeOutputChannel":"Cerrar canal de salida...","hiddenChannels":"Canales ocultos","hideOutputChannel":"Ocultar canal de salida...","maxChannelHistory":"El número máximo de entradas en un canal de salida.","outputChannels":"Canales de salida","showOutputChannel":"Mostrar canal de salida..."},"plugin":{"blockNewTab":"Su navegador ha impedido la apertura de una nueva pestaña"},"plugin-dev":{"alreadyRunning":"La instancia alojada ya está funcionando.","debugInstance":"Instancia de depuración","debugMode":"Uso de inspect o inspect-brk para la depuración de Node.js","devHost":"Anfitrión del desarrollo","failed":"Fallo en la ejecución de la instancia del plugin alojado: {0}","hostedPlugin":"Plugin alojado","hostedPluginRunning":"Plugin alojado: en funcionamiento","hostedPluginStarting":"Plugin alojado: Inicio","hostedPluginStopped":"Plugin alojado: Detenido","hostedPluginWatching":"Plugin alojado: Ver","instanceTerminated":"{0} se ha terminado","launchOutFiles":"Conjunto de patrones glob para localizar los archivos JavaScript generados (`${pluginPath}` se sustituirá por la ruta real del plugin).","noValidPlugin":"La carpeta especificada no contiene un plugin válido.","notRunning":"La instancia alojada no se está ejecutando.","pluginFolder":"La carpeta de plugins está configurada en: {0}","preventedNewTab":"Su navegador ha impedido la apertura de una nueva pestaña","restartInstance":"Reiniciar la instancia","running":"La instancia alojada está funcionando en:","select":"Seleccione","selectPath":"Seleccione la ruta","startInstance":"Instancia de inicio","starting":"Iniciando el servidor de instancia alojada ...","stopInstance":"Detener la instancia","unknownTerminated":"La instancia ha sido terminada","watchMode":"Ejecutar el vigilante en el plugin en desarrollo"},"plugin-ext":{"authentication-main":{"loginTitle":"Inicio de sesión"},"plugins":"Plugins","webviewTrace":"Controla el rastreo de la comunicación con los webviews.","webviewWarnIfUnsecure":"Advierte a los usuarios de que las vistas web se despliegan actualmente de forma insegura."},"preview":{"openByDefault":"Abrir la vista previa en lugar del editor por defecto."},"property-view":{"created":"Creado","directory":"Directorio","lastModified":"Última modificación","location":"Ubicación","noProperties":"No hay propiedades disponibles.","properties":"Propiedades","size":"Tamaño","symbolicLink":"Enlace simbólico"},"scm":{"amend":"Modificar","amendHeadCommit":"Compromiso HEAD","amendLastCommit":"Modificar el último compromiso","changeRepository":"Cambiar el repositorio...","config.untrackedChanges":"Controla el comportamiento de los cambios no rastreados.","config.untrackedChanges.hidden":"oculto","config.untrackedChanges.mixed":"mixto","config.untrackedChanges.separate":"separar","history":"Historia","noRepositoryFound":"No se ha encontrado ningún repositorio","unamend":"Sin modificar","unamendCommit":"No modificar el compromiso"},"search-in-workspace":{"includeIgnoredFiles":"Incluir archivos ignorados","noFolderSpecified":"No ha abierto o especificado una carpeta. Actualmente sólo se buscan los archivos abiertos.","resultSubset":"Esto es sólo un subconjunto de todos los resultados. Utilice un término de búsqueda más específico para reducir la lista de resultados.","searchOnEditorModification":"Busca en el editor activo cuando se modifica."},"secondary-window":{"extract-widget":"Mover la vista a la ventana secundaria"},"shell-area":{"secondary":"Ventana secundaria","top":"Top"},"task":{"attachTask":"Adjuntar tarea...","clearHistory":"Historia clara","noTaskToRun":"No se ha encontrado ninguna tarea que ejecutar. Configurar tareas...","openUserTasks":"Abrir las tareas del usuario"},"terminal":{"defaultProfile":"El perfil por defecto utilizado en {0}","enableCopy":"Activar ctrl-c (cmd-c en macOS) para copiar el texto seleccionado","enablePaste":"Activar ctrl-v (cmd-v en macOS) para pegar desde el portapapeles","profileArgs":"Los argumentos de shell que utiliza este perfil.","profileColor":"Un ID de color del tema del terminal para asociar con el terminal.","profileDefault":"Elija Perfil predeterminado...","profileIcon":"Un ID de codicon para asociar con el icono de terminal.\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Nuevo Terminal (Con Perfil)...","profilePath":"La ruta del shell que utiliza este perfil.","profiles":"Los perfiles a presentar cuando se crea un nuevo terminal. Establezca la propiedad path manualmente con argumentos opcionales.\\nEstablezca un perfil existente como `null` para ocultar el perfil de la lista, por ejemplo: `\\"{0}\\": null`.","rendererType":"Controla cómo se representa el terminal.","selectProfile":"Seleccione un perfil para el nuevo terminal","shell.deprecated":"Esto está obsoleto, la nueva forma recomendada de configurar tu shell por defecto es creando un perfil de terminal en \'terminal.integrated.profiles.{0}\' y estableciendo su nombre de perfil como el predeterminado en \'terminal.integrated.defaultProfile.{0}.\'","shellArgsLinux":"Los argumentos de la línea de comandos a utilizar cuando en el terminal de Linux.","shellArgsOsx":"Los argumentos de la línea de comandos a utilizar cuando en el terminal de macOS.","shellArgsWindows":"Los argumentos de la línea de comandos a utilizar cuando en el terminal de Windows.","shellLinux":"La ruta del shell que utiliza la terminal en Linux (por defecto: \'{0}\'}).","shellOsx":"La ruta del shell que utiliza el terminal en macOS (por defecto: \'{0}\'}).","shellWindows":"La ruta del shell que utiliza la terminal en Windows. (por defecto: \'{0}\')."},"toolbar":{"addCommand":"Añadir comando a la barra de herramientas","addCommandPlaceholder":"Buscar un comando para añadir a la barra de herramientas","centerColumn":"Columna central","failedUpdate":"No se ha podido actualizar el valor de \'{0}\' en \'{1}\'.","filterIcons":"Iconos del filtro","iconSelectDialog":"Seleccione un icono para \'{0}\'","iconSet":"Conjunto de iconos","insertGroupLeft":"Insertar separador de grupos (izquierda)","insertGroupRight":"Insertar separador de grupos (derecha)","leftColumn":"Columna izquierda","openJSON":"Personalizar la barra de herramientas (abrir JSON)","removeCommand":"Eliminar el comando de la barra de herramientas","restoreDefaults":"Restaurar la barra de herramientas por defecto","rightColumn":"Columna derecha","selectIcon":"Seleccionar icono","toggleToolbar":"Barra de herramientas","toolbarLocationPlaceholder":"¿Dónde quiere que se añada el comando?","useDefaultIcon":"Utilizar el icono por defecto"},"typehierarchy":{"subtypeHierarchy":"Jerarquía de subtipos","supertypeHierarchy":"Jerarquía de supertipos"},"vsx-registry":{"downloadCount":"Descargue el recuento: {0}","errorFetching":"Error en la búsqueda de extensiones.","failedInstallingVSIX":"Fallo en la instalación de {0} desde VSIX.","invalidVSIX":"El archivo seleccionado no es un plugin válido \\"*.vsix\\".","license":"License: {0}","recommendedExtensions":"Una lista de los nombres de las extensiones recomendadas para su uso en este espacio de trabajo.","searchPlaceholder":"Buscar extensiones en {0}","showInstalled":"Mostrar extensiones instaladas","showRecommendedExtensions":"Controla si se muestran las notificaciones de las recomendaciones de extensión.","vsx-extensions-contribution":{"update-version-uninstall-error":"Error al eliminar la extensión: {0}.","update-version-version-error":"Fallo al instalar la versión {0} de {1}."}},"webview":{"goToReadme":"Ir al LÉAME","messageWarning":"            El patrón de host del punto final {0} se ha cambiado a `{1}`; el cambio de patrón puede dar lugar a vulnerabilidades de seguridad.             Consulte `{2}` para obtener más información."},"workspace":{"compareWithEachOther":"Comparar con los demás","confirmDeletePermanently.description":"No se ha podido eliminar \\"{0}\\" con la papelera. Quieres eliminar permanentemente en su lugar?","confirmDeletePermanently.solution":"Puedes desactivar el uso de la papelera en las preferencias.","confirmDeletePermanently.title":"Error al borrar el archivo","confirmMessage.delete":"¿Realmente quiere eliminar los siguientes archivos?","confirmMessage.dirtyMultiple":"¿Realmente quieres borrar {0} archivos con cambios no guardados?","confirmMessage.dirtySingle":"¿Realmente quieres borrar {0} con los cambios no guardados?","confirmMessage.uriMultiple":"¿Realmente quieres borrar todos los {0} archivos seleccionados?","confirmMessage.uriSingle":"¿Realmente quieres borrar {0}?","duplicate":"Duplicado","failApply":"No se han podido aplicar los cambios al nuevo archivo","failSaveAs":"No se puede ejecutar \\"{0}\\" para el widget actual.","newFilePlaceholder":"Nombre del archivo","newFolderPlaceholder":"Nombre de la carpeta","noErasure":"Nota: No se borrará nada del disco","openRecentPlaceholder":"Escriba el nombre del espacio de trabajo que desea abrir","openRecentWorkspace":"Abrir el espacio de trabajo reciente...","preserveWindow":"Habilitar la apertura de espacios de trabajo en la ventana actual.","removeFolder":"¿Está seguro de que quiere eliminar la siguiente carpeta del espacio de trabajo?","removeFolders":"¿Está seguro de que quiere eliminar las siguientes carpetas del espacio de trabajo?","trashTitle":"Mover {0} a la Papelera","trustEmptyWindow":"Controla si el espacio de trabajo vacío es de confianza o no por defecto.","trustEnabled":"Controla si la confianza del espacio de trabajo está activada o no. Si se desactiva, todos los espacios de trabajo son de confianza.","trustRequest":"Una extensión solicita la confianza del espacio de trabajo, pero la API correspondiente aún no es totalmente compatible. Desea confiar en este espacio de trabajo?","untitled-cleanup":"Parece que hay muchos archivos de espacio de trabajo sin título. Por favor, compruebe {0} y elimine los archivos no utilizados.","workspaceFolderAdded":"Se ha creado un espacio de trabajo con múltiples raíces. Desea guardar la configuración del espacio de trabajo como un archivo?","workspaceFolderAddedTitle":"Carpeta añadida al espacio de trabajo"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.fr.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.fr.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Edit Condition...","terminal:new:profile":"Créer un nouveau terminal intégré à partir d\'un profil","terminal:profile:default":"Choisissez le profil du terminal par défaut","theia":{"callhierarchy":{"noCallers":"Aucun appelant n\'a été détecté.","open":"Hiérarchie des appels ouverts"},"core":{"about":{"compatibility":"{0} Compatibilité","defaultApi":"API par défaut {0} ","version":"Version"},"common":{"closeAll":"Fermer tous les onglets","closeAllTabMain":"Fermer tous les onglets de la zone principale","closeOtherTabMain":"Fermer les autres onglets de la zone principale","closeOthers":"Fermer les autres onglets","closeRight":"Fermer les onglets à droite","closeTab":"Onglet fermé","closeTabMain":"Close Tab dans la zone principale","collapseAllTabs":"Réduire tous les panneaux latéraux","collapseBottomPanel":"Panneau inférieur à bascule","collapseTab":"Panneau latéral d\'effondrement","showNextTabGroup":"Passer au groupe d\'onglets suivant","showNextTabInGroup":"Passer à l\'onglet suivant dans le groupe","showPreviousTabGroup":"Passer au groupe d\'onglets précédent","showPreviousTabInGroup":"Passer à l\'onglet précédent dans le groupe","toggleMaximized":"Toggle Maximisé"},"enhancedPreview":{"classic":"Affiche un simple aperçu de l\'onglet avec des informations de base.","enhanced":"Affiche un aperçu amélioré de l\'onglet avec des informations supplémentaires.","visual":"Affiche un aperçu visuel de l\'onglet."},"file":{"browse":"Parcourir"},"highlightModifiedTabs":"Contrôle si une bordure supérieure est dessinée sur les onglets d\'éditeur modifiés (sales) ou non.","keybindingStatus":"{0} a été appuyé, en attendant d\'autres touches.","keyboard":{"choose":"Choisir la disposition du clavier","chooseLayout":"Choisir une disposition de clavier","current":"(courant : {0})","currentLayout":" - disposition actuelle","mac":"Claviers Mac","pc":"Claviers pour PC","tryDetect":"Essayez de détecter la disposition du clavier à partir des informations du navigateur et des touches pressées."},"navigator":{"clipboardWarn":"L\'accès au presse-papiers est refusé. Vérifiez les autorisations de votre navigateur.","clipboardWarnFirefox":"L\'API Presse-papiers n\'est pas disponible. Elle peut être activée par la préférence \'{0}\' sur la page \'{1}\'. Rechargez ensuite Theia. Notez que cela permettra à FireFox d\'avoir un accès complet au presse-papiers du système."},"offline":"Hors ligne","quitMessage":"Les modifications non sauvegardées ne seront pas enregistrées.","resetWorkbenchLayout":"Réinitialisation de la disposition de l\'établi","searchbox":{"close":"Fermer (Escape)","next":"Suivant (en bas)","previous":"Précédent (en haut)"},"silentNotifications":"Contrôle la suppression des popups de notification.","tabDefaultSize":"Spécifie la taille par défaut des onglets.","tabMaximize":"Contrôle si les onglets doivent être maximisés lors d\'un double-clic.","tabMinimumSize":"Spécifie la taille minimale des onglets.","tabShrinkToFit":"Réduire les onglets pour les adapter à l\'espace disponible."},"debug":{"addConfigurationPlaceholder":"Sélectionnez la racine de l\'espace de travail pour y ajouter la configuration","compound-cycle":"La configuration de lancement \'{0}\' contient un cycle avec elle-même","continueAll":"Continuer tout","copyExpressionValue":"Copier la valeur de l\'expression","debugVariableInput":"Définir la valeur de {0} ","instruction-breakpoint":"Point d\'arrêt de l\'instruction","missingConfiguration":"La configuration dynamique \'{0}:{1}\' est manquante ou non applicable.","pauseAll":"Pause tout","reveal":"Révéler","threads":"Les fils","toggleTracing":"Activer/désactiver le traçage des communications avec les adaptateurs de débogage"},"editor":{"dirtyEncoding":"Le fichier est sale. Veuillez le sauvegarder avant de le rouvrir avec un autre encodage.","editor.codeActionWidget.showHeaders":"Activez/désactivez l\'affichage des en-têtes de groupe dans le menu d\'action du code.","editor.experimental.pasteActions.enabled":"Activer/désactiver l\'exécution des modifications des extensions lors du collage.","editor.formatOnSaveMode.modificationsIfAvailable":"Tentera de formater uniquement les modifications (nécessite le contrôle de la source). Si le contrôle de la source ne peut pas être utilisé, alors le fichier entier sera formaté.","editor.inlayHints.enabled1":"Les conseils d\'incrustation sont affichés par défaut et sont masqués lorsque vous maintenez les touches `Ctrl+Alt`.","editor.inlayHints.enabled2":"Les indices d\'incrustation sont cachés par défaut et s\'affichent en maintenant les touches `Ctrl+Alt`.","editor.quickSuggestions":"Contrôle si les suggestions doivent s\'afficher automatiquement pendant la saisie. Cela peut être contrôlé pour la saisie de commentaires, de chaînes de caractères et d\'autres codes. La suggestion rapide peut être configurée pour s\'afficher sous forme de texte fantôme ou avec le widget de suggestion. Tenez également compte du paramètre \'#editor.suggestOnTriggerCharacters#\' qui contrôle si les suggestions sont déclenchées par des caractères spéciaux.","editor.suggest.matchOnWordStartOnly":"Lorsqu\'il est activé, le filtrage IntelliSense exige que le premier caractère corresponde au début d\'un mot, par exemple `c` sur `Console` ou `WebContext` mais _pas_ sur `description`. Lorsqu\'il est désactivé, IntelliSense affiche plus de résultats mais les trie toujours par qualité de correspondance.","files.autoSave":"Contrôle la [sauvegarde automatique](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) des éditeurs dont les modifications n\'ont pas été sauvegardées.","files.autoSave.afterDelay":"Un éditeur avec des modifications est automatiquement enregistré après le `#files.autoSaveDelay#` configuré.","files.autoSave.off":"Un éditeur avec des modifications n\'est jamais automatiquement sauvegardé.","files.autoSave.onFocusChange":"Un éditeur avec des modifications est automatiquement sauvegardé lorsque l\'éditeur perd le focus.","files.autoSave.onWindowChange":"Un éditeur avec des modifications est automatiquement sauvegardé lorsque la fenêtre perd le focus.","formatOnSaveTimeout":"Délai en millisecondes après lequel le formatage qui est exécuté lors de l\'enregistrement du fichier est annulé.","persistClosedEditors":"Contrôle la persistance ou non de l\'historique de l\'éditeur fermé pour l\'espace de travail lors des rechargements de la fenêtre.","showAllEditors":"Afficher tous les éditeurs ouverts","splitHorizontal":"Split Editor Horizontal","splitVertical":"Split Editor Vertical","toggleStickyScroll":"Activer/désactiver le défilement épinglé"},"file-search":{"toggleIgnoredFiles":" (Appuyez sur {0} pour afficher/masquer les fichiers ignorés)"},"fileDialog":{"showHidden":"Afficher les fichiers cachés"},"fileSystem":{"fileResource":{"overWriteBody":"Voulez-vous écraser les modifications apportées à \'{0}\' sur le système de fichiers?"}},"filesystem":{"copiedToClipboard":"Copie du lien de téléchargement dans le presse-papiers.","copyDownloadLink":"Copier le lien de téléchargement","dialog":{"initialLocation":"Aller à l\'emplacement initial","multipleItemMessage":"Vous ne pouvez sélectionner qu\'un seul élément","name":"Nom:","navigateBack":"Naviguer en arrière","navigateForward":"Naviguer vers l\'avant","navigateUp":"Naviguer vers le haut d\'un répertoire"},"fileResource":{"binaryFileQuery":"L\'ouvrir peut prendre un certain temps et peut rendre l\'IDE non réactif. Voulez-vous ouvrir \'{0}\' de toute façon?","binaryTitle":"Le fichier est soit binaire, soit utilise un encodage de texte non pris en charge.","largeFileTitle":"Le fichier est trop volumineux ({0}).","overwriteTitle":"Le fichier \'{0}\' a été modifié sur le système de fichiers."},"filesExclude":"Configurez des modèles globaux pour exclure des fichiers et des dossiers. Par exemple, l\'explorateur de fichiers décide des fichiers et des dossiers à afficher ou à masquer en fonction de ce paramètre.","format":"Format:","maxConcurrentUploads":"Nombre maximum de fichiers simultanés à télécharger lors du téléchargement de plusieurs fichiers. 0 signifie que tous les fichiers seront téléchargés simultanément.","maxFileSizeMB":"Contrôle la taille maximale du fichier en Mo qu\'il est possible d\'ouvrir.","prepareDownload":"Préparation du téléchargement...","prepareDownloadLink":"Préparation du lien de téléchargement...","processedOutOf":"Traitement de {0} sur {1}.","replaceTitle":"Remplacer le fichier","uploadFiles":"Télécharger des fichiers...","uploadedOutOf":"Téléchargé {0} sur {1}"},"getting-started":{"apiComparator":"{0} Compatibilité avec l\'API","newExtension":"Construire une nouvelle extension","newPlugin":"Créer un nouveau plugin","startup-editor":{"welcomePage":"Ouvrez la page d\'accueil, dont le contenu vous aidera à démarrer avec {0} et les extensions."}},"git":{"aFewSecondsAgo":"il y a quelques secondes","addSignedOff":"Ajouter Signé-par","amendReuseMessag":"Pour réutiliser le dernier message de validation, appuyez sur \'Enter\' ou \'Escape\' pour annuler.","amendRewrite":"Réécrire le message de livraison précédent. Appuyez sur \'Enter\' pour confirmer ou \'Escape\' pour annuler.","checkoutCreateLocalBranchWithName":"Créez une nouvelle branche locale avec le nom : {0}. Appuyez sur \'Enter\' pour confirmer ou \'Escape\' pour annuler.","checkoutProvideBranchName":"Veuillez indiquer le nom de la succursale.","checkoutSelectRef":"Sélectionnez une référence à vérifier ou créez une nouvelle branche locale :","cloneQuickInputLabel":"Veuillez fournir un emplacement de dépôt Git. Appuyez sur \'Enter\' pour confirmer ou \'Escape\' pour annuler.","cloneRepository":"Cloner le dépôt Git : {0}. Appuyez sur \'Enter\' pour confirmer ou \'Escape\' pour annuler.","compareWith":"Comparez avec...","compareWithBranchOrTag":"Choisissez une branche ou une étiquette à comparer avec la branche {0} actuellement active :","diff":"Diff","dirtyDiffLinesLimit":"Ne pas montrer les décorations de diff sales, si le nombre de lignes de l\'éditeur dépasse cette limite.","dropStashMessage":"Cachette enlevée avec succès.","editorDecorationsEnabled":"Afficher les décorations git dans l\'éditeur.","fetchPickRemote":"Choisissez une télécommande pour aller chercher :","gitDecorationsColors":"Utilisez la décoration par couleur dans le navigateur.","mergeQuickPickPlaceholder":"Choisissez une branche à fusionner avec la branche {0} actuellement active :","missingUserInfo":"Assurez-vous de configurer votre \'user.name\' et \'user.email\' dans git.","noHistoryForError":"Il n\'y a pas d\'historique disponible pour {0}","noPreviousCommit":"Aucun engagement antérieur à modifier","noRepositoriesSelected":"Aucun dépôt n\'a été sélectionné.","prepositionIn":"en","repositoryNotInitialized":"Le référentiel {0} n\'est pas encore initialisé.","stashChanges":"Modifications de la cachette. Appuyez sur \\" Enter \\" pour confirmer ou sur \\" Escape \\" pour annuler.","stashChangesWithMessage":"Changements de cachette avec message : {0}. Appuyez sur \'Enter\' pour confirmer ou \'Escape\' pour annuler.","tabTitleIndex":"{0} (index)","tabTitleWorkingTree":"{0} (Arbre de travail)","toggleBlameAnnotations":"Annotations sur le blâme"},"keybinding-schema-updater":{"deprecation":"Utilisez la clause `when` à la place."},"keymaps":{"editKeybindingTitle":"Modifier le raccourci clavier pour {0}","keybindingCollidesValidation":"Les combinaisons de touches sont actuellement en conflit","requiredKeybindingValidation":"la valeur du keybinding est requise","resetKeybindingConfirmation":"Voulez-vous vraiment réinitialiser ce raccourci clavier à sa valeur par défaut?","resetKeybindingTitle":"Réinitialiser le raccourci clavier pour {0}","resetMultipleKeybindingsWarning":"Si plusieurs combinaisons de touches existent pour cette commande, elles seront toutes réinitialisées."},"localize":{"offlineTooltip":"Impossible de se connecter au backend."},"markers":{"clearAll":"Effacer tout","noProblems":"Aucun problème n\'a été détecté dans l\'espace de travail jusqu\'à présent.","tabbarDecorationsEnabled":"Afficher les décorateurs de problèmes (marqueurs de diagnostic) dans les barres d\'onglets."},"memory-inspector":{"addressTooltip":"Emplacement de mémoire à afficher, une adresse ou une expression évaluant une adresse.","ascii":"ASCII","binary":"Binaire","byteSize":"Taille de l\'octet","bytesPerGroup":"Octets par groupe","closeSettings":"Fermer les paramètres","columns":"Colonnes","command":{"createNewMemory":"Créer un nouvel inspecteur de la mémoire","createNewRegisterView":"Créer une nouvelle vue du registre","followPointer":"Suivre le pointeur","followPointerMemory":"Suivre le pointeur dans l\'inspecteur de mémoire","resetValue":"Valeur de réinitialisation","showRegister":"Afficher le registre dans l\'inspecteur de mémoire","viewVariable":"Afficher la variable dans l\'inspecteur de mémoire"},"data":"Données","decimal":"Décimal","diff":{"label":"Diff : {0}"},"diff-widget":{"offset-label":"{0} Décalage","offset-title":"Octets pour décaler la mémoire de {0}"},"editable":{"apply":"Appliquer les changements","clear":"Changements clairs"},"endianness":"Endianness","extraColumn":"Colonne supplémentaire","groupsPerRow":"Groupes par rangée","hexadecimal":"Hexadécimal","length":"Longueur","lengthTooltip":"Nombre d\'octets à récupérer, en décimal ou en hexadécimal.","memory":{"addressField":{"memoryReadError":"Saisissez une adresse ou une expression dans le champ Emplacement."},"freeze":"Vue de la mémoire figée","hideSettings":"Masquer le panneau des paramètres","readError":{"bounds":"Les limites de la mémoire sont dépassées, le résultat sera tronqué.","noContents":"Aucun contenu de mémoire n\'est actuellement disponible."},"readLength":{"memoryReadError":"Saisissez une longueur (nombre décimal ou hexadécimal) dans le champ Longueur."},"showSettings":"Afficher le panneau des paramètres","unfreeze":"Dégeler la vue de la mémoire","userError":"Il y a eu une erreur de récupération de la mémoire."},"memoryCategory":"Inspecteur de la mémoire","memoryInspector":"Inspecteur de la mémoire","memoryTitle":"Mémoire","octal":"Octal","offset":"Décalage","offsetTooltip":"Décalage à ajouter à l\'emplacement mémoire actuel, lors de la navigation.","provider":{"localsError":"Impossible de lire les variables locales. Aucune session de débogage active.","readError":"Impossible de lire la mémoire. Aucune session de débogage active.","writeError":"Impossible d\'écrire en mémoire. Aucune session de débogage active."},"register":"Registre","register-widget":{"filter-placeholder":"Filtre (commence par)"},"registerReadError":"Il y a eu une erreur dans la récupération des registres.","registers":"Registres","toggleComparisonWidgetVisibility":"Basculer la visibilité du widget de comparaison","utils":{"afterBytes":"Vous devez charger de la mémoire dans les deux widgets que vous souhaitez comparer. {0} n\'a pas de mémoire chargée.","bytesMessage":"Vous devez charger de la mémoire dans les deux widgets que vous souhaitez comparer. {0} n\'a pas de mémoire chargée."}},"messages":{"notificationTimeout":"Les notifications informatives seront masquées après ce délai.","toggleNotifications":"Basculer les notifications"},"mini-browser":{"typeUrl":"Tapez une URL"},"monaco":{"noSymbolsMatching":"Aucun symbole ne correspond","typeToSearchForSymbols":"Tapez pour rechercher des symboles"},"navigator":{"autoReveal":"Révélation automobile","clipboardWarn":"L\'accès au presse-papiers est refusé. Vérifiez les autorisations de votre navigateur.","clipboardWarnFirefox":"L\'API Presse-papiers n\'est pas disponible. Elle peut être activée par la préférence \'{0}\' sur la page \'{1}\'. Rechargez ensuite Theia. Notez que cela permettra à FireFox d\'avoir un accès complet au presse-papiers du système.","refresh":"Rafraîchir dans l\'Explorateur","reveal":"Révéler dans Explorer","toggleHiddenFiles":"Basculer les fichiers cachés"},"output":{"clearOutputChannel":"Effacer le canal de sortie...","closeOutputChannel":"Fermer le canal de sortie...","hiddenChannels":"Canaux cachés","hideOutputChannel":"Cacher le canal de sortie...","maxChannelHistory":"Le nombre maximum d\'entrées dans un canal de sortie.","outputChannels":"Canaux de sortie","showOutputChannel":"Afficher le canal de sortie..."},"plugin":{"blockNewTab":"Votre navigateur a empêché l\'ouverture d\'un nouvel onglet"},"plugin-dev":{"alreadyRunning":"L\'instance hébergée est déjà en cours d\'exécution.","debugInstance":"Instance de débogage","debugMode":"Utilisation de inspect ou inspect-brk pour le débogage de Node.js","devHost":"Hôte de développement","failed":"Échec de l\'exécution de l\'instance du plugin hébergé : {0}","hostedPlugin":"Plugin hébergé","hostedPluginRunning":"Plugin hébergé: en cours d\'exécution","hostedPluginStarting":"Plugin hébergé: Démarrage","hostedPluginStopped":"Plugin hébergé: Arrêté","hostedPluginWatching":"Plugin hébergé: Regarder","instanceTerminated":"{0} a été résilié","launchOutFiles":"Tableau de motifs globaux pour localiser les fichiers JavaScript générés (`${pluginPath}` sera remplacé par le chemin réel du plugin).","noValidPlugin":"Le dossier spécifié ne contient pas de plugin valide.","notRunning":"L\'instance hébergée ne fonctionne pas.","pluginFolder":"Le dossier du plugin est réglé sur : {0}","preventedNewTab":"Votre navigateur a empêché l\'ouverture d\'un nouvel onglet","restartInstance":"Redémarrer l\'instance","running":"L\'instance hébergée fonctionne à :","select":"Sélectionnez","selectPath":"Sélectionner le chemin","startInstance":"Instance de départ","starting":"Démarrage du serveur d\'instance hébergé ...","stopInstance":"Stop Instance","unknownTerminated":"L\'instance a été interrompue","watchMode":"Lancer le watcher sur le plugin en cours de développement"},"plugin-ext":{"authentication-main":{"loginTitle":"Connexion"},"plugins":"Plugins","webviewTrace":"Contrôle le traçage de la communication avec les webviews.","webviewWarnIfUnsecure":"Avertit les utilisateurs que les webviews sont actuellement déployés de manière non sécurisée."},"preview":{"openByDefault":"Ouvrir l\'aperçu au lieu de l\'éditeur par défaut."},"property-view":{"created":"Créé","directory":"Annuaire","lastModified":"Dernière modification","location":"Localisation","noProperties":"Aucune propriété disponible.","properties":"Propriétés","size":"Taille","symbolicLink":"Lien symbolique"},"scm":{"amend":"Modifier","amendHeadCommit":"HEAD Commit","amendLastCommit":"Modifier le dernier engagement","changeRepository":"Modifier le référentiel...","config.untrackedChanges":"Contrôle le comportement des modifications non suivies.","config.untrackedChanges.hidden":"caché","config.untrackedChanges.mixed":"mixte","config.untrackedChanges.separate":"séparé","history":"Histoire","noRepositoryFound":"Aucun référentiel trouvé","unamend":"Non modifié","unamendCommit":"Engagement sans modification"},"search-in-workspace":{"includeIgnoredFiles":"Inclure les fichiers ignorés","noFolderSpecified":"Vous n\'avez pas ouvert ou spécifié de dossier. Seuls les fichiers ouverts sont actuellement recherchés.","resultSubset":"Il ne s\'agit que d\'un sous-ensemble de tous les résultats. Utilisez un terme de recherche plus spécifique pour réduire la liste des résultats.","searchOnEditorModification":"Rechercher l\'éditeur actif lorsqu\'il est modifié."},"secondary-window":{"extract-widget":"Déplacer la vue vers une fenêtre secondaire"},"shell-area":{"secondary":"Fenêtre secondaire","top":"Haut"},"task":{"attachTask":"Attacher la tâche...","clearHistory":"Histoire claire","noTaskToRun":"Aucune tâche à exécuter n\'a été trouvée. Configurer les tâches...","openUserTasks":"Tâches d\'utilisateur ouvertes"},"terminal":{"defaultProfile":"Le profil par défaut utilisé sur {0}","enableCopy":"Activer la fonction ctrl-c (cmd-c sur macOS) pour copier le texte sélectionné","enablePaste":"Activer ctrl-v (cmd-v sur macOS) pour coller à partir du presse-papiers","profileArgs":"Les arguments du shell que ce profil utilise.","profileColor":"Un ID de couleur de thème de terminal à associer au terminal.","profileDefault":"Choisissez le profil par défaut...","profileIcon":"Un ID de codicon à associer à l\'icône du terminal.\\nterminal-tmux :\\"$(terminal-tmux)\\"","profileNew":"Nouveau terminal (avec profil)...","profilePath":"Le chemin du shell que ce profil utilise.","profiles":"Les profils à présenter lors de la création d\'un nouveau terminal. Définissez manuellement la propriété path avec des args optionnels.\\nDonnez la valeur `null` à un profil existant pour le masquer dans la liste, par exemple : `\\"{0}\\" : null`.","rendererType":"Contrôle la façon dont le terminal est rendu.","selectProfile":"Sélectionnez un profil pour le nouveau terminal","shell.deprecated":"Cette méthode est obsolète, la nouvelle méthode recommandée pour configurer votre shell par défaut est de créer un profil de terminal dans \'terminal.integrated.profiles.{0}\' et de définir son nom de profil par défaut dans \'terminal.integrated.defaultProfile.{0}\'.","shellArgsLinux":"Les arguments de ligne de commande à utiliser dans le terminal Linux.","shellArgsOsx":"Les arguments de ligne de commande à utiliser dans le terminal macOS.","shellArgsWindows":"Les arguments de ligne de commande à utiliser dans le terminal Windows.","shellLinux":"Le chemin du shell que le terminal utilise sous Linux (par défaut : \'{0}\'}).","shellOsx":"Le chemin de l\'interpréteur de commandes que le terminal utilise sous macOS (par défaut : \'{0}\'}).","shellWindows":"Le chemin du shell que le terminal utilise sous Windows. (par défaut : \'{0}\')."},"toolbar":{"addCommand":"Ajouter une commande à la barre d\'outils","addCommandPlaceholder":"Trouver une commande à ajouter à la barre d\'outils","centerColumn":"Colonne centrale","failedUpdate":"Impossible de mettre à jour la valeur de \'{0}\' dans \'{1}\'.","filterIcons":"Icônes de filtre","iconSelectDialog":"Sélectionnez une icône pour \'{0}\'.","iconSet":"Jeu d\'icônes","insertGroupLeft":"Insérer le séparateur de groupe (gauche)","insertGroupRight":"Insérer un séparateur de groupe (à droite)","leftColumn":"Colonne de gauche","openJSON":"Personnaliser la barre d\'outils (Ouvrir JSON)","removeCommand":"Supprimer la commande de la barre d\'outils","restoreDefaults":"Restaurer les valeurs par défaut de la barre d\'outils","rightColumn":"Colonne de droite","selectIcon":"Sélectionnez l\'icône","toggleToolbar":"Afficher la barre d\'outils","toolbarLocationPlaceholder":"Où souhaitez-vous que la commande soit ajoutée?","useDefaultIcon":"Utiliser l\'icône par défaut"},"typehierarchy":{"subtypeHierarchy":"Hiérarchie des sous-types","supertypeHierarchy":"Hiérarchie des supertypes"},"vsx-registry":{"downloadCount":"Compte de téléchargement : {0}","errorFetching":"Erreur de récupération des extensions.","failedInstallingVSIX":"Échec de l\'installation de {0} à partir de VSIX.","invalidVSIX":"Le fichier sélectionné n\'est pas un plugin \\"*.vsix\\" valide.","license":"Licence : {0}","recommendedExtensions":"Une liste des noms des extensions dont l\'utilisation est recommandée dans cet espace de travail.","searchPlaceholder":"Rechercher les extensions dans {0}","showInstalled":"Afficher les extensions installées","showRecommendedExtensions":"Contrôle si les notifications sont affichées pour les recommandations d\'extension.","vsx-extensions-contribution":{"update-version-uninstall-error":"Erreur lors de la suppression de l\'extension : {0}.","update-version-version-error":"Échec de l\'installation de la version {0} de {1}."}},"webview":{"goToReadme":"Aller au fichier README","messageWarning":"            Le modèle d\'hôte du point de terminaison {0} a été remplacé par `{1}` ; la modification du modèle peut entraîner des failles de sécurité.             Voir `{2}` pour plus d\'informations."},"workspace":{"compareWithEachOther":"Comparer entre eux","confirmDeletePermanently.description":"Impossible de supprimer \\"{0}\\" avec la corbeille. Voulez-vous le supprimer définitivement?","confirmDeletePermanently.solution":"Vous pouvez désactiver l\'utilisation de la corbeille dans les préférences.","confirmDeletePermanently.title":"Erreur lors de la suppression d\'un fichier","confirmMessage.delete":"Voulez-vous vraiment supprimer les fichiers suivants?","confirmMessage.dirtyMultiple":"Voulez-vous vraiment supprimer {0} fichiers avec des modifications non sauvegardées?","confirmMessage.dirtySingle":"Voulez-vous vraiment supprimer {0} avec les modifications non sauvegardées?","confirmMessage.uriMultiple":"Voulez-vous vraiment supprimer tous les {0} fichiers sélectionnés?","confirmMessage.uriSingle":"Voulez-vous vraiment supprimer {0}?","duplicate":"Duplicate","failApply":"Impossible d\'appliquer les changements au nouveau fichier","failSaveAs":"Impossible d\'exécuter \\"{0}\\" pour le widget actuel.","newFilePlaceholder":"Nom du fichier","newFolderPlaceholder":"Nom du dossier","noErasure":"Note : Rien ne sera effacé du disque","openRecentPlaceholder":"Tapez le nom de l\'espace de travail que vous voulez ouvrir.","openRecentWorkspace":"Ouvrir l\'espace de travail récent...","preserveWindow":"Permet d\'ouvrir les espaces de travail dans la fenêtre actuelle.","removeFolder":"Êtes-vous sûr de vouloir supprimer le dossier suivant de l\'espace de travail?","removeFolders":"Êtes-vous sûr de vouloir supprimer les dossiers suivants de l\'espace de travail?","trashTitle":"Déplacer {0} vers la corbeille","trustEmptyWindow":"Contrôle si l\'espace de travail vide est fiable ou non par défaut.","trustEnabled":"Contrôle si la confiance de l\'espace de travail est activée ou non. S\'il est désactivé, tous les espaces de travail sont fiables.","trustRequest":"Une extension demande la confiance dans l\'espace de travail mais l\'API correspondante n\'est pas encore totalement prise en charge. Voulez-vous faire confiance à cet espace de travail?","untitled-cleanup":"Il semble y avoir de nombreux fichiers d\'espace de travail sans titre. Veuillez vérifier {0} et supprimer tous les fichiers inutilisés.","workspaceFolderAdded":"Un espace de travail avec plusieurs racines a été créé. Voulez-vous enregistrer la configuration de votre espace de travail dans un fichier?","workspaceFolderAddedTitle":"Dossier ajouté à l\'espace de travail"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.hu.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.hu.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Szerkesztési feltétel...","terminal:new:profile":"Új integrált terminál létrehozása profilból","terminal:profile:default":"Válassza ki az alapértelmezett terminálprofilt","theia":{"callhierarchy":{"noCallers":"Nem észleltek hívókat.","open":"Nyílt felhívás hierarchia"},"core":{"about":{"compatibility":"{0} Kompatibilitás","defaultApi":"Alapértelmezett {0} API","version":"Verzió"},"common":{"closeAll":"Minden lap bezárása","closeAllTabMain":"Minden lap bezárása a fő területen","closeOtherTabMain":"Más lapok bezárása a fő területen","closeOthers":"Más lapok bezárása","closeRight":"Lapok bezárása jobbra","closeTab":"Bezárja a lapot","closeTabMain":"Zárja be a fő terület lapját","collapseAllTabs":"Összes oldalsó panel összezárása","collapseBottomPanel":"Alsó panel átkapcsolása","collapseTab":"Összecsukható oldalsó panel","showNextTabGroup":"Váltás a következő lapcsoportra","showNextTabInGroup":"Csoporton belüli következő lapra váltás","showPreviousTabGroup":"Váltás az előző lapcsoportra","showPreviousTabInGroup":"Váltás a csoport előző lapjára","toggleMaximized":"Maximált kapcsoló"},"enhancedPreview":{"classic":"A lap egyszerű előnézetének megjelenítése az alapvető információkkal.","enhanced":"A lap bővített előnézetének megjelenítése további információkkal.","visual":"A lap vizuális előnézetének megjelenítése."},"file":{"browse":"Böngésszen a oldalon."},"highlightModifiedTabs":"Szabályozza, hogy a módosított (piszkos) szerkesztő lapok felső szegélye kirajzolódjon-e vagy sem.","keybindingStatus":"{0} megnyomva, további billentyűkre várva","keyboard":{"choose":"Válassza ki a billentyűzetkiosztást","chooseLayout":"Válasszon billentyűzetkiosztást","current":"(jelenlegi: {0})","currentLayout":" - jelenlegi elrendezés","mac":"Mac billentyűzetek","pc":"PC billentyűzetek","tryDetect":"Próbálja meg felismerni a billentyűzetkiosztást a böngésző információi és a lenyomott billentyűk alapján."},"navigator":{"clipboardWarn":"A vágólaphoz való hozzáférés megtagadva. Ellenőrizze a böngésző engedélyeit.","clipboardWarnFirefox":"A vágólap API nem érhető el. A \'{0}\' beállítással engedélyezhető a \'{1}\' oldalon. Ezután töltse be újra a Theia-t. Figyelem, ez lehetővé teszi, hogy a FireFox teljes hozzáférést kapjon a rendszer vágólapjához."},"offline":"Offline","quitMessage":"A mentetlen módosítások nem kerülnek mentésre.","resetWorkbenchLayout":"A munkapad elrendezésének visszaállítása","searchbox":{"close":"Bezár (menekülés)","next":"Következő (lefelé)","previous":"Előző (fel)"},"silentNotifications":"Beállítja, hogy az értesítések felugró ablakai el legyenek-e nyomva.","tabDefaultSize":"Megadja a lapok alapértelmezett méretét.","tabMaximize":"Szabályozza, hogy a lapok dupla kattintásra maximalizálódjanak-e.","tabMinimumSize":"Megadja a lapok minimális méretét.","tabShrinkToFit":"Zsugorítsa a lapokat a rendelkezésre álló helyhez."},"debug":{"addConfigurationPlaceholder":"Válassza ki a munkaterület gyökerét a konfiguráció hozzáadásához","compound-cycle":"Indítási konfiguráció \'{0}\' tartalmaz egy ciklust önmagával együtt","continueAll":"Folytassa az összes","copyExpressionValue":"Kifejezés értékének másolása","debugVariableInput":"A {0} érték beállítása","instruction-breakpoint":"Megszakítási pont","missingConfiguration":"A \'{0}:{1}\' dinamikus konfiguráció hiányzik vagy nem alkalmazható.","pauseAll":"Minden szünet","reveal":"Kiderül","threads":"Szálak","toggleTracing":"A hibakeresési adapterekkel folytatott kommunikáció nyomon követésének engedélyezése/letiltása"},"editor":{"dirtyEncoding":"A fájl piszkos. Kérjük, először mentse el, mielőtt más kódolással újra megnyitná.","editor.codeActionWidget.showHeaders":"A csoportfejlécek megjelenítésének engedélyezése/letiltása a kódművelet menüben.","editor.experimental.pasteActions.enabled":"Beillesztéskor a bővítményekből származó szerkesztések futásának engedélyezése/letiltása.","editor.formatOnSaveMode.modificationsIfAvailable":"Csak a módosítások formázására tesz kísérletet (forrásellenőrzés szükséges). Ha a forrásellenőrzés nem használható, akkor a teljes fájl lesz formázva.","editor.inlayHints.enabled1":"Az inlay tippek alapértelmezés szerint megjelennek, és elrejtődnek, ha a \\"Ctrl+Alt\\" billentyűkombinációt nyomva tartjuk.","editor.inlayHints.enabled2":"Az inlay tippek alapértelmezés szerint el vannak rejtve, és a \\"Ctrl+Alt\\" billentyűkombináció lenyomásakor jelennek meg.","editor.quickSuggestions":"Szabályozza, hogy a javaslatok automatikusan megjelenjenek-e gépelés közben. Ezt a megjegyzések, karakterláncok és más kódok beírása esetén lehet szabályozni. A gyors javaslatok beállíthatók úgy, hogy szellemszövegként vagy a javaslat widget segítségével jelenjenek meg. Figyeljen a \'#editor.suggestOnTriggerCharacters#\'-beállításra is, amely azt szabályozza, hogy a javaslatok speciális karakterek hatására aktiválódjanak-e.","editor.suggest.matchOnWordStartOnly":"Ha engedélyezve van, az IntelliSense szűrés megköveteli, hogy az első karakter egyezzen a szó elején, pl. \\"c\\" a \\"Konzol\\" vagy a \\"WebContext\\" esetében, de _nem_ a \\"leírás\\" esetében. Ha kikapcsoljuk, az IntelliSense több eredményt mutat, de továbbra is az egyezés minősége szerint rendezi őket.","files.autoSave":"Az [automatikus mentés](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) vezérli a mentetlen módosításokkal rendelkező szerkesztőket.","files.autoSave.afterDelay":"A szerkesztő a változtatásokat automatikusan elmenti a beállított `#files.autoSaveDelay#` után.","files.autoSave.off":"Egy szerkesztő a módosításokkal soha nem kerül automatikusan mentésre.","files.autoSave.onFocusChange":"A szerkesztő a módosításokkal automatikusan elmentésre kerül, amikor a szerkesztő elveszíti a fókuszt.","files.autoSave.onWindowChange":"A szerkesztő a módosításokkal automatikusan elmentésre kerül, amikor az ablak elveszíti a fókuszt.","formatOnSaveTimeout":"A milliszekundumban megadott időkorlát, amely után a fájl mentésekor lefutó formázás törlődik.","persistClosedEditors":"Azt szabályozza, hogy a munkaterület lezárt szerkesztési előzményei az ablak újratöltése során megmaradjanak-e.","showAllEditors":"Minden megnyitott szerkesztő megjelenítése","splitHorizontal":"Osztott szerkesztő vízszintes","splitVertical":"Függőleges osztott szerkesztő","toggleStickyScroll":"Ragadós görgetés bekapcsolása"},"file-search":{"toggleIgnoredFiles":" (Nyomja meg a {0} gombot a figyelmen kívül hagyott fájlok megjelenítéséhez/elrejtéséhez)"},"fileDialog":{"showHidden":"Rejtett fájlok megjelenítése"},"fileSystem":{"fileResource":{"overWriteBody":"Szeretné felülírni a fájlrendszerben a \'{0}\' fájlban végrehajtott változtatásokat?"}},"filesystem":{"copiedToClipboard":"A letöltési linket a vágólapra másolta.","copyDownloadLink":"Letöltési link másolása","dialog":{"initialLocation":"Menj a kezdeti helyszínre","multipleItemMessage":"Csak egy elemet választhat ki","name":"Név:","navigateBack":"Vissza navigálni","navigateForward":"Navigálj előre","navigateUp":"Navigáljon felfelé egy könyvtárban"},"fileResource":{"binaryFileQuery":"Megnyitása eltarthat egy ideig, és az IDE esetleg nem reagál. Mindenképpen meg akarja nyitni a \'{0}\'-t?","binaryTitle":"A fájl vagy bináris, vagy nem támogatott szöveges kódolást használ.","largeFileTitle":"A fájl túl nagy ({0}).","overwriteTitle":"A \'{0}\' fájl megváltozott a fájlrendszerben."},"filesExclude":"Glob-minták beállítása a fájlok és mappák kizárásához. Például a Fájlkereső e beállítás alapján dönti el, hogy mely fájlokat és mappákat jelenítse meg vagy rejtse el.","format":"Formátum:","maxConcurrentUploads":"Az egyidejűleg feltölthető fájlok maximális száma több fájl feltöltése esetén. A 0 azt jelenti, hogy az összes fájl egyidejűleg kerül feltöltésre.","maxFileSizeMB":"A megnyitható fájl maximális méretét szabályozza MB-ban.","prepareDownload":"Letöltés előkészítése...","prepareDownloadLink":"Letöltési link előkészítése...","processedOutOf":"{0} feldolgozva {1}-ből {0}","replaceTitle":"Fájl cseréje","uploadFiles":"Fájlok feltöltése...","uploadedOutOf":"Feltöltött {0} a {1}-ből {0}"},"getting-started":{"apiComparator":"{0} API kompatibilitás","newExtension":"Új bővítmény építése","newPlugin":"Egy új plugin építése","startup-editor":{"welcomePage":"Nyissa meg az Üdvözlő oldalt, amelynek tartalma segíti a {0} és a bővítmények használatának megkezdését."}},"git":{"aFewSecondsAgo":"néhány másodperccel ezelőtt","addSignedOff":"Signed-off-by hozzáadása","amendReuseMessag":"Az utolsó átadási üzenet újbóli használatához nyomja meg az \'Enter\' billentyűt, vagy az \'Escape\' billentyűt a törléshez.","amendRewrite":"Írja át az előző commit üzenetet. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","checkoutCreateLocalBranchWithName":"Hozzon létre egy új helyi ágat {0} névvel. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","checkoutProvideBranchName":"Kérjük, adja meg a fióktelep nevét.","checkoutSelectRef":"Válasszon ki egy hivatkozást a pénztárhoz vagy hozzon létre egy új helyi ágat:","cloneQuickInputLabel":"Kérjük, adja meg a Git tároló helyét. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","cloneRepository":"Klónozza a Git tárolót: {0}. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","compareWith":"Összehasonlítás...","compareWithBranchOrTag":"Válasszon ki egy ágat vagy címkét, amelyet a jelenleg aktív {0} ággal akar összehasonlítani:","diff":"Diff","dirtyDiffLinesLimit":"Ne jelenítsen meg piszkos diff dekorációkat, ha a szerkesztő sorszáma meghaladja ezt a határt.","dropStashMessage":"Sikeresen eltávolítottuk a rejtekhelyet.","editorDecorationsEnabled":"A szerkesztőben a git dekorációk megjelenítése.","fetchPickRemote":"Válasszon ki egy távvezérlőt, ahonnan le kívánja hívni:","gitDecorationsColors":"Színes dekoráció használata a navigátorban.","mergeQuickPickPlaceholder":"Válasszon ki egy ágat, amelyet beolvaszt a jelenleg aktív {0} ágba:","missingUserInfo":"Győződjön meg róla, hogy a gitben beállította a \'user.name\' és a \'user.email\' értékeket.","noHistoryForError":"Nem áll rendelkezésre előzmény {0}","noPreviousCommit":"Nincs korábbi kötelezettségvállalás a módosításra","noRepositoriesSelected":"Nem választottak ki tárolóhelyeket.","prepositionIn":"a  oldalon.","repositoryNotInitialized":"A {0} tároló még nincs inicializálva.","stashChanges":"Készletváltozások. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","stashChangesWithMessage":"Stash változik az üzenettel: {0}. Nyomja meg az \'Enter\' billentyűt a megerősítéshez vagy az \'Escape\' billentyűt a törléshez.","tabTitleIndex":"{0} (index)","tabTitleWorkingTree":"{0} (Munkafa)","toggleBlameAnnotations":"Hibáztatás megjegyzések"},"keybinding-schema-updater":{"deprecation":"Használja helyette a `when` záradékot."},"keymaps":{"editKeybindingTitle":"Billentyűkötés szerkesztése {0}","keybindingCollidesValidation":"billentyűkötözés jelenleg ütközik","requiredKeybindingValidation":"billentyűkötés értéke szükséges","resetKeybindingConfirmation":"Tényleg vissza akarja állítani ezt a billentyűkötést az alapértelmezett értékre?","resetKeybindingTitle":"A {0} billentyűkhöz való kötés visszaállítása","resetMultipleKeybindingsWarning":"Ha a parancshoz több billentyűzetmegkötés is létezik, akkor mindet visszaállítja a rendszer."},"localize":{"offlineTooltip":"Nem tud csatlakozni a háttértárhoz."},"markers":{"clearAll":"Mindent törölni","noProblems":"A munkaterületen eddig nem észleltek problémákat.","tabbarDecorationsEnabled":"Problémadíszítők (diagnosztikai jelölők) megjelenítése a laprudakon."},"memory-inspector":{"addressTooltip":"Megjelenítendő memóriahely, cím vagy címre kiértékelő kifejezés","ascii":"ASCII","binary":"Bináris","byteSize":"Byte méret","bytesPerGroup":"Bájtok csoportonként","closeSettings":"Beállítások bezárása","columns":"Oszlopok","command":{"createNewMemory":"Új memóriaellenőr létrehozása","createNewRegisterView":"Új nyilvántartási nézet létrehozása","followPointer":"Kövesse a mutatót","followPointerMemory":"Kövesse a mutatót a memóriaellenőrben","resetValue":"Érték visszaállítása","showRegister":"Regiszter megjelenítése a memória felügyelőben","viewVariable":"Változó megjelenítése a memória felügyelőben"},"data":"Adatok","decimal":"Tizedesjegyek","diff":{"label":"Diff: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bájtok a memória eltolásához a {0}"},"editable":{"apply":"Változások alkalmazása","clear":"Tiszta változások"},"endianness":"Endianness","extraColumn":"Extra oszlop","groupsPerRow":"Csoportok soronként","hexadecimal":"Hexadecimal","length":"Hosszúság","lengthTooltip":"A lekérdezendő bájtok száma decimális vagy hexadecimális értékben","memory":{"addressField":{"memoryReadError":"Adjon meg egy címet vagy kifejezést a Hely mezőbe."},"freeze":"Memória nézet megállítása","hideSettings":"Beállítások panel elrejtése","readError":{"bounds":"A memória határait túllépte, az eredmény csonkolva lesz.","noContents":"Jelenleg nem áll rendelkezésre memóriatartalom."},"readLength":{"memoryReadError":"Adja meg a hosszat (decimális vagy hexadecimális szám) a Hossz mezőben."},"showSettings":"Beállítások panel megjelenítése","unfreeze":"Memória nézet feloldása","userError":"Hiba történt a memória lekérdezésében."},"memoryCategory":"Memória Ellenőr","memoryInspector":"Memória Ellenőr","memoryTitle":"Memória","octal":"Octal","offset":"Offset","offsetTooltip":"Az aktuális memóriahelyhez hozzáadandó eltolás, amikor navigálsz.","provider":{"localsError":"Nem lehet helyi változókat olvasni. Nincs aktív hibakeresési munkamenet.","readError":"Nem tudja olvasni a memóriát. Nincs aktív hibakeresési munkamenet.","writeError":"Nem tud memóriát írni. Nincs aktív hibakeresési munkamenet."},"register":"Regisztráció","register-widget":{"filter-placeholder":"Szűrő (kezdődik)"},"registerReadError":"Hiba történt a regiszterek lekérdezésében.","registers":"Regiszterek","toggleComparisonWidgetVisibility":"Összehasonlítás Widget láthatóságának átkapcsolása","utils":{"afterBytes":"Mindkét widgetbe, amelyet össze szeretne hasonlítani, memóriát kell töltenie. {0} nincs betöltve memória.","bytesMessage":"Mindkét widgetbe, amelyet össze szeretne hasonlítani, memóriát kell töltenie. {0} nincs betöltve memória."}},"messages":{"notificationTimeout":"Az informatív értesítések el lesznek rejtve az időkorlát után.","toggleNotifications":"Értesítések váltása"},"mini-browser":{"typeUrl":"Írjon be egy URL-t"},"monaco":{"noSymbolsMatching":"Nincsenek megfelelő szimbólumok","typeToSearchForSymbols":"Írja be a szimbólumok kereséséhez"},"navigator":{"autoReveal":"Automatikus felfedés","clipboardWarn":"A vágólaphoz való hozzáférés megtagadva. Ellenőrizze a böngésző engedélyeit.","clipboardWarnFirefox":"A vágólap API nem érhető el. A \'{0}\' beállítással engedélyezhető a \'{1}\' oldalon. Ezután töltse be újra a Theia-t. Figyelem, ez lehetővé teszi, hogy a FireFox teljes hozzáférést kapjon a rendszer vágólapjához.","refresh":"Frissítés az Explorerben","reveal":"Feltárása az Explorerben","toggleHiddenFiles":"Rejtett fájlok kapcsolása"},"output":{"clearOutputChannel":"Tiszta kimeneti csatorna...","closeOutputChannel":"Kimeneti csatorna bezárása...","hiddenChannels":"Rejtett csatornák","hideOutputChannel":"Kimeneti csatorna elrejtése...","maxChannelHistory":"A kimeneti csatornában lévő bejegyzések maximális száma.","outputChannels":"Kimeneti csatornák","showOutputChannel":"Kimeneti csatorna megjelenítése..."},"plugin":{"blockNewTab":"A böngészője megakadályozta az új lap megnyitását"},"plugin-dev":{"alreadyRunning":"A hosztolt példány már fut.","debugInstance":"Hibakeresési példány","debugMode":"Az inspect vagy inspect-brk használata a Node.js hibakereséshez","devHost":"Fejlesztés Host","failed":"Nem sikerült futtatni a hosztolt plugin példányt: {0}","hostedPlugin":"Hostolt bővítmény","hostedPluginRunning":"Hostolt bővítmény: Futó","hostedPluginStarting":"Hostolt bővítmény: Indítás","hostedPluginStopped":"Hostolt bővítmény: Leállt","hostedPluginWatching":"Hostolt bővítmény: Figyelem","instanceTerminated":"{0} megszűnt","launchOutFiles":"Glob minták tömbje a generált JavaScript fájlok kereséséhez (a `${pluginPath}` helyébe a plugin tényleges elérési útja lép).","noValidPlugin":"A megadott mappa nem tartalmaz érvényes plugint.","notRunning":"A hosztolt példány nem fut.","pluginFolder":"Plugin mappa van beállítva: {0}","preventedNewTab":"A böngészője megakadályozta az új lap megnyitását","restartInstance":"Instancia újraindítása","running":"A hosztolt példány a következő címen fut:","select":"Válassza ki a  címet.","selectPath":"Útvonal kiválasztása","startInstance":"Példa indítása","starting":"Hosted instance szerver indítása ...","stopInstance":"Állítsa le a példányt","unknownTerminated":"A példányt megszüntették","watchMode":"Watcher futtatása a fejlesztés alatt álló pluginon"},"plugin-ext":{"authentication-main":{"loginTitle":"Bejelentkezés"},"plugins":"Plugins","webviewTrace":"Vezérli a kommunikáció nyomon követését a webnézetekkel.","webviewWarnIfUnsecure":"Figyelmezteti a felhasználókat, hogy a webnézetek jelenleg nem biztonságosan vannak telepítve."},"preview":{"openByDefault":"Alapértelmezés szerint a szerkesztő helyett az előnézet megnyitása."},"property-view":{"created":"Létrehozva","directory":"Címtár","lastModified":"Utoljára módosítva","location":"Helyszín","noProperties":"Nincsenek elérhető tulajdonságok.","properties":"Tulajdonságok","size":"Méret","symbolicLink":"Szimbolikus kapcsolat"},"scm":{"amend":"A módosítása","amendHeadCommit":"HEAD Commit","amendLastCommit":"Az utolsó kötelezettségvállalás módosítása","changeRepository":"Repozitórium módosítása...","config.untrackedChanges":"Szabályozza a nem követett változások viselkedését.","config.untrackedChanges.hidden":"rejtett","config.untrackedChanges.mixed":"vegyes","config.untrackedChanges.separate":"külön","history":"Történelem","noRepositoryFound":"Nem talált tárolóhely","unamend":"Visszavonja a","unamendCommit":"Módosítás feloldása commit"},"search-in-workspace":{"includeIgnoredFiles":"Ignorált fájlok felvétele","noFolderSpecified":"Nem nyitott meg vagy nem adott meg mappát. Jelenleg csak a megnyitott fájlok keresése történik.","resultSubset":"Ez csak egy részhalmaza az összes eredménynek. A találati lista szűkítéséhez használjon konkrétabb keresési kifejezést.","searchOnEditorModification":"Keresés az aktív szerkesztőben, amikor módosítják."},"secondary-window":{"extract-widget":"Nézet áthelyezése másodlagos ablakba"},"shell-area":{"secondary":"Másodlagos ablak","top":"Tetejére"},"task":{"attachTask":"Feladat csatolása...","clearHistory":"Történelem törlése","noTaskToRun":"Nem találtunk futtatandó feladatot. Feladatok konfigurálása...","openUserTasks":"Felhasználói feladatok megnyitása"},"terminal":{"defaultProfile":"Az alapértelmezett profil a {0}","enableCopy":"A ctrl-c (macOS-en cmd-c) engedélyezése a kijelölt szöveg másolásához","enablePaste":"A ctrl-v (cmd-v macOS-en) engedélyezése a vágólapról történő beillesztéshez","profileArgs":"A profil által használt shell argumentumok.","profileColor":"A terminál témájának színazonosítója, amelyet a terminálhoz társít.","profileDefault":"Válassza az Alapértelmezett profil...","profileIcon":"A terminál ikonjához társítandó kódikon azonosító.\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Új terminál (profillal)...","profilePath":"A profil által használt héj elérési útja.","profiles":"Az új terminál létrehozásakor megjelenítendő profilok. A path tulajdonság manuális beállítása opcionális args-ekkel.\\nA meglévő profilok `null` értékre állítása a profil elrejtéséhez a listából, például: `\\"{0}\\": null`.","rendererType":"A terminál megjelenítésének módját szabályozza.","selectProfile":"Válasszon ki egy profilt az új terminálhoz","shell.deprecated":"Ez elavult, az új ajánlott módja az alapértelmezett shell konfigurálásának az, hogy létrehoz egy terminálprofilt a \'terminal.integrated.profiles.{0}\' menüpontban, és beállítja a profil nevét alapértelmezettként a \'terminal.integrated.defaultProfile.{0}.\' menüpontban.","shellArgsLinux":"A Linux terminálon használandó parancssori argumentumok.","shellArgsOsx":"A macOS terminálon használandó parancssori argumentumok.","shellArgsWindows":"A Windows terminálon használandó parancssori argumentumok.","shellLinux":"A terminál által Linuxon használt shell elérési útja (alapértelmezett: \'{0}\'}).","shellOsx":"A terminál által macOS alatt használt shell elérési útja (alapértelmezett: \'{0}\'}).","shellWindows":"A Windows alatt a terminál által használt shell elérési útja. (alapértelmezett: \'{0}\')."},"toolbar":{"addCommand":"Parancs hozzáadása az eszköztárhoz","addCommandPlaceholder":"Az eszköztárhoz hozzáadandó parancs keresése","centerColumn":"Középső oszlop","failedUpdate":"Nem sikerült frissíteni a \'{0}\' értékét a \'{1}\'-ben.","filterIcons":"Szűrő ikonok","iconSelectDialog":"Ikon kiválasztása a \'{0}\' számára","iconSet":"Ikon készlet","insertGroupLeft":"Csoportelválasztó beillesztése (balra)","insertGroupRight":"Csoportelválasztó beillesztése (jobbra)","leftColumn":"Bal oszlop","openJSON":"Eszköztár testreszabása (JSON megnyitása)","removeCommand":"Parancs eltávolítása az eszköztárból","restoreDefaults":"Eszköztár alapértelmezett beállításainak visszaállítása","rightColumn":"Jobb oszlop","selectIcon":"Ikon kiválasztása","toggleToolbar":"Eszköztár kapcsolása","toolbarLocationPlaceholder":"Hol szeretné, ha a parancsot hozzáadnánk?","useDefaultIcon":"Alapértelmezett ikon használata"},"typehierarchy":{"subtypeHierarchy":"Altípus-hierarchia","supertypeHierarchy":"Szupertípus hierarchia"},"vsx-registry":{"downloadCount":"Letöltési szám: {0}","errorFetching":"Hiba a kiterjesztések lekérdezésében.","failedInstallingVSIX":"Nem sikerült telepíteni a {0} oldalt a VSIX-ből.","invalidVSIX":"A kiválasztott fájl nem érvényes \\"*.vsix\\" bővítmény.","license":"Engedély: {0}","recommendedExtensions":"A munkaterületre ajánlott kiterjesztések neveinek listája.","searchPlaceholder":"Keresés kiterjesztések {0}","showInstalled":"Telepített bővítmények megjelenítése","showRecommendedExtensions":"Szabályozza, hogy a kiterjesztési ajánlásokhoz megjelenjenek-e értesítések.","vsx-extensions-contribution":{"update-version-uninstall-error":"Hiba a kiterjesztés eltávolításakor: {0}.","update-version-version-error":"Nem sikerült telepíteni a {1} {0} verzióját."}},"webview":{"goToReadme":"Tovább a README-hez","messageWarning":"            A {0} végpont hoszt mintája `{1}-re` változott; a minta megváltoztatása biztonsági réseket okozhat.             További információért lásd a `{2}` című részt."},"workspace":{"compareWithEachOther":"Összehasonlítás egymással","confirmDeletePermanently.description":"Nem sikerült törölni a \\"{0}\\" fájlt a Kukában. Szeretné véglegesen törölni?","confirmDeletePermanently.solution":"A beállítások között letilthatja a Trash használatát.","confirmDeletePermanently.title":"Hiba a fájl törlésében","confirmMessage.delete":"Tényleg törölni szeretné a következő fájlokat?","confirmMessage.dirtyMultiple":"Tényleg törölni akarja a {0} fájlokat a mentetlen módosításokkal?","confirmMessage.dirtySingle":"Tényleg törölni akarja a {0} fájlt a mentetlen módosításokkal együtt?","confirmMessage.uriMultiple":"Tényleg törölni szeretné az összes {0} kiválasztott fájlt?","confirmMessage.uriSingle":"Tényleg törölni akarja a {0}-t?","duplicate":"Duplikátum","failApply":"Nem tudta alkalmazni a változtatásokat az új fájlra","failSaveAs":"Nem lehet futtatni a \\"{0}\\"-t az aktuális widgethez.","newFilePlaceholder":"Fájlnév","newFolderPlaceholder":"Mappa neve","noErasure":"Megjegyzés: Semmi sem törlődik a lemezről","openRecentPlaceholder":"Írja be a megnyitni kívánt munkaterület nevét.","openRecentWorkspace":"Legutóbbi munkaterület megnyitása...","preserveWindow":"Munkaterületek megnyitásának engedélyezése az aktuális ablakban.","removeFolder":"Biztos, hogy a következő mappát szeretné eltávolítani a munkaterületről?","removeFolders":"Biztos, hogy a következő mappákat szeretné eltávolítani a munkaterületről?","trashTitle":"Mozgassa {0} a szemetesbe","trustEmptyWindow":"Szabályozza, hogy az üres munkaterület alapértelmezés szerint megbízható legyen-e vagy sem.","trustEnabled":"Szabályozza, hogy a munkaterület megbízhatósága engedélyezve legyen-e vagy sem. Ha le van tiltva, akkor minden munkaterület megbízható.","trustRequest":"Egy bővítmény munkaterület-megbízhatóságot kér, de a megfelelő API még nem támogatott teljes mértékben. Meg akarja bízni ezt a munkaterületet?","untitled-cleanup":"Úgy tűnik, hogy sok cím nélküli munkaterületi fájl van. Kérjük, ellenőrizze {0} és távolítsa el a nem használt fájlokat.","workspaceFolderAdded":"Több gyökérrel rendelkező munkaterületet hoztunk létre. Szeretné a munkaterület konfigurációját fájlba menteni?","workspaceFolderAddedTitle":"Mappa hozzáadása a munkaterülethez"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.it.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.it.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Modifica della condizione...","terminal:new:profile":"Creare un nuovo terminale integrato da un profilo","terminal:profile:default":"Scegliere il profilo del terminale predefinito","theia":{"callhierarchy":{"noCallers":"Non sono stati rilevati chiamanti.","open":"Gerarchia delle chiamate aperte"},"core":{"about":{"compatibility":"{0} Compatibilità","defaultApi":"API predefinita {0} ","version":"Versione"},"common":{"closeAll":"Chiudi tutte le schede","closeAllTabMain":"Chiudere tutte le schede nell\'area principale","closeOtherTabMain":"Chiudere altre schede nell\'area principale","closeOthers":"Chiudi altre schede","closeRight":"Chiudere le schede a destra","closeTab":"Chiudi scheda","closeTabMain":"Chiudi scheda nell\'area principale","collapseAllTabs":"Comprimere tutti i pannelli laterali","collapseBottomPanel":"Pannello inferiore a ginocchiera","collapseTab":"Pannello laterale a scomparsa","showNextTabGroup":"Passa al gruppo di schede successivo","showNextTabInGroup":"Passa alla scheda successiva del gruppo","showPreviousTabGroup":"Passa al gruppo di schede precedente","showPreviousTabInGroup":"Passa alla scheda precedente nel gruppo","toggleMaximized":"Toggle Massimizzato"},"enhancedPreview":{"classic":"Visualizza una semplice anteprima della scheda con le informazioni di base.","enhanced":"Visualizza un\'anteprima migliorata della scheda con informazioni aggiuntive.","visual":"Visualizza un\'anteprima visiva della scheda."},"file":{"browse":"Sfogliare"},"highlightModifiedTabs":"Controlla se un bordo superiore è disegnato sulle schede dell\'editor modificate (sporche) o no.","keybindingStatus":"{0} è stato premuto, in attesa di altri tasti","keyboard":{"choose":"Scegliere il layout della tastiera","chooseLayout":"Scegliere un layout di tastiera","current":"(corrente: {0})","currentLayout":" - layout attuale","mac":"Tastiere Mac","pc":"Tastiere per PC","tryDetect":"Prova a rilevare il layout della tastiera dalle informazioni del browser e dai tasti premuti."},"navigator":{"clipboardWarn":"L\'accesso agli appunti è negato. Controllare i permessi del browser.","clipboardWarnFirefox":"L\'API Appunti non è disponibile. È possibile abilitarla tramite la preferenza \'{0}\' nella pagina \'{1}\'. Quindi ricaricare Theia. Ciò consentirà a FireFox di avere pieno accesso agli appunti di sistema."},"offline":"Non in linea","quitMessage":"Qualsiasi modifica non salvata non sarà salvata.","resetWorkbenchLayout":"Ripristinare il layout del banco di lavoro","searchbox":{"close":"Chiudere (Fuga)","next":"Avanti (Giù)","previous":"Precedente (Up)"},"silentNotifications":"Controlla se sopprimere i popup di notifica.","tabDefaultSize":"Specifica la dimensione predefinita delle schede.","tabMaximize":"Controlla se massimizzare le schede al doppio clic.","tabMinimumSize":"Specifica la dimensione minima delle schede.","tabShrinkToFit":"Restringere le schede per adattarle allo spazio disponibile."},"debug":{"addConfigurationPlaceholder":"Selezionare lo spazio di lavoro principale a cui aggiungere la configurazione","compound-cycle":"La configurazione di lancio \'{0}\' contiene un ciclo con se stessa","continueAll":"Continua tutto","copyExpressionValue":"Copiare il valore dell\'espressione","debugVariableInput":"Impostare il valore {0} ","instruction-breakpoint":"Istruzione Punto di interruzione","missingConfiguration":"La configurazione dinamica \'{0}:{1}\' è mancante o non applicabile","pauseAll":"Pausa Tutto","reveal":"Rivela","threads":"Threads","toggleTracing":"Abilita/disabilita il tracciamento delle comunicazioni con gli adattatori di debug"},"editor":{"dirtyEncoding":"Il file è sporco. Salvarlo prima di riaprirlo con un\'altra codifica.","editor.codeActionWidget.showHeaders":"Abilita/disabilita la visualizzazione delle intestazioni dei gruppi nel menu delle azioni del codice.","editor.experimental.pasteActions.enabled":"Abilita/disabilita l\'esecuzione di modifiche da parte delle estensioni in fase di incollaggio.","editor.formatOnSaveMode.modificationsIfAvailable":"Tenterà di formattare solo le modifiche (richiede il controllo della fonte). Se il controllo della fonte non può essere usato, allora l\'intero file sarà formattato.","editor.inlayHints.enabled1":"I suggerimenti per l\'intarsio sono visualizzati per impostazione predefinita e si nascondono quando si tiene premuto `Ctrl+Alt`.","editor.inlayHints.enabled2":"I suggerimenti per l\'intarsio sono nascosti per impostazione predefinita e vengono visualizzati quando si tiene premuto `Ctrl+Alt`.","editor.quickSuggestions":"Controlla se i suggerimenti devono essere visualizzati automaticamente durante la digitazione. Questo può essere controllato per la digitazione di commenti, stringhe e altro codice. Il suggerimento rapido può essere configurato per essere visualizzato come testo fantasma o con il widget Suggerimento. Si tenga presente anche l\'impostazione \'#editor.suggestOnTriggerCharacters#\', che controlla se i suggerimenti vengono attivati da caratteri speciali.","editor.suggest.matchOnWordStartOnly":"Se abilitato, il filtro IntelliSense richiede che il primo carattere corrisponda all\'inizio di una parola, ad esempio `c` su `Console` o `WebContext` ma _non_ su `description`. Quando è disattivato, IntelliSense mostra più risultati, ma li ordina comunque in base alla qualità della corrispondenza.","files.autoSave":"Controlla il [salvataggio automatico](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) degli editor che hanno modifiche non salvate.","files.autoSave.afterDelay":"Un editor con modifiche viene salvato automaticamente dopo il `#files.autoSaveDelay#` configurato.","files.autoSave.off":"Un editor con modifiche non viene mai salvato automaticamente.","files.autoSave.onFocusChange":"Un editor con modifiche viene automaticamente salvato quando l\'editor perde il focus.","files.autoSave.onWindowChange":"Un editor con modifiche viene salvato automaticamente quando la finestra perde il focus.","formatOnSaveTimeout":"Timeout in millisecondi dopo il quale la formattazione che viene eseguita al salvataggio del file viene annullata.","persistClosedEditors":"Controlla se persistere la cronologia dell\'editor chiuso per l\'area di lavoro attraverso i ricarichi della finestra.","showAllEditors":"Mostra tutti gli editor aperti","splitHorizontal":"Dividere l\'editor orizzontale","splitVertical":"Dividere l\'editor verticale","toggleStickyScroll":"Alternanza scorrimento permanente"},"file-search":{"toggleIgnoredFiles":" (Premere {0} per mostrare/nascondere i file ignorati)"},"fileDialog":{"showHidden":"Mostra i file nascosti"},"fileSystem":{"fileResource":{"overWriteBody":"Vuoi sovrascrivere le modifiche fatte a \'{0}\' sul file system?"}},"filesystem":{"copiedToClipboard":"Ho copiato il link per il download negli appunti.","copyDownloadLink":"Copiare il link per il download","dialog":{"initialLocation":"Vai alla posizione iniziale","multipleItemMessage":"È possibile selezionare solo una voce","name":"Nome:","navigateBack":"Navigare indietro","navigateForward":"Navigare in avanti","navigateUp":"Navigare su una directory"},"fileResource":{"binaryFileQuery":"Aprirlo potrebbe richiedere del tempo e potrebbe rendere l\'IDE non reattivo. Vuoi comunque aprire \'{0}\'?","binaryTitle":"Il file è binario o usa una codifica di testo non supportata.","largeFileTitle":"Il file è troppo grande ({0}).","overwriteTitle":"Il file \'{0}\' è stato cambiato nel file system."},"filesExclude":"Configura modelli globali per escludere file e cartelle. Per esempio, l\'esploratore di file decide quali file e cartelle mostrare o nascondere in base a questa impostazione.","format":"Formato:","maxConcurrentUploads":"Numero massimo di file contemporanei da caricare quando si caricano più file. 0 significa che tutti i file saranno caricati simultaneamente.","maxFileSizeMB":"Controlla la dimensione massima del file in MB che è possibile aprire.","prepareDownload":"Preparazione del download...","prepareDownloadLink":"Preparazione del link per il download...","processedOutOf":"Elaborato {0} su {1}","replaceTitle":"Sostituire il file","uploadFiles":"Carica i file...","uploadedOutOf":"Caricato {0} su {1}"},"getting-started":{"apiComparator":"{0} Compatibilità API","newExtension":"Costruire una nuova estensione","newPlugin":"Costruire un nuovo plugin","startup-editor":{"welcomePage":"Aprire la pagina di benvenuto, con contenuti che aiutano a iniziare a usare {0} e le estensioni."}},"git":{"aFewSecondsAgo":"pochi secondi fa","addSignedOff":"Aggiungi Firmato-da","amendReuseMessag":"Per riutilizzare l\'ultimo messaggio di commit, premi \'Enter\' o \'Escape\' per annullare.","amendRewrite":"Riscrivere il messaggio di commit precedente. Premi \'Enter\' per confermare o \'Escape\' per annullare.","checkoutCreateLocalBranchWithName":"Crea un nuovo ramo locale con nome: {0}. Premi \'Enter\' per confermare o \'Escape\' per annullare.","checkoutProvideBranchName":"Si prega di fornire il nome di una filiale.","checkoutSelectRef":"Seleziona un riferimento per il checkout o crea un nuovo ramo locale:","cloneQuickInputLabel":"Si prega di fornire una posizione del repository Git. Premi \'Enter\' per confermare o \'Escape\' per annullare.","cloneRepository":"Clona il repository Git: {0}. Premi \'Enter\' per confermare o \'Escape\' per annullare.","compareWith":"Confronta con...","compareWithBranchOrTag":"Scegli un ramo o un tag da confrontare con il ramo attualmente attivo {0}:","diff":"Diff","dirtyDiffLinesLimit":"Non mostrare decorazioni diff sporche, se il numero di linee dell\'editor supera questo limite.","dropStashMessage":"Stash rimosso con successo.","editorDecorationsEnabled":"Mostra le decorazioni git nell\'editor.","fetchPickRemote":"Scegliere un telecomando da cui prelevare:","gitDecorationsColors":"Usa la decorazione a colori nel navigatore.","mergeQuickPickPlaceholder":"Scegli un ramo da unire al ramo attualmente attivo {0}:","missingUserInfo":"Assicurati di configurare il tuo \'user.name\' e \'user.email\' in git.","noHistoryForError":"Non è disponibile uno storico per {0}","noPreviousCommit":"Nessun impegno precedente da modificare","noRepositoriesSelected":"Nessun deposito è stato selezionato.","prepositionIn":"in","repositoryNotInitialized":"Il deposito {0} non è ancora inizializzato.","stashChanges":"Modifiche alla scorta. Premi \'Enter\' per confermare o \'Escape\' per annullare.","stashChangesWithMessage":"Stash cambia con il messaggio: {0}. Premi \'Enter\' per confermare o \'Escape\' per annullare.","tabTitleIndex":"{0} (indice)","tabTitleWorkingTree":"{0} (Albero di lavoro)","toggleBlameAnnotations":"Allineare le annotazioni di colpa"},"keybinding-schema-updater":{"deprecation":"Usa invece la clausola `when`."},"keymaps":{"editKeybindingTitle":"Modificare il binding dei tasti per {0}","keybindingCollidesValidation":"il keybinding attualmente collima","requiredKeybindingValidation":"Il valore del keybinding è necessario","resetKeybindingConfirmation":"Si vuole davvero ripristinare il valore predefinito di questo keybinding?","resetKeybindingTitle":"Azzeramento del keybinding per {0}","resetMultipleKeybindingsWarning":"Se per questo comando esistono più collegamenti ai tasti, tutti verranno azzerati."},"localize":{"offlineTooltip":"Impossibile connettersi al backend."},"markers":{"clearAll":"Cancella tutto","noProblems":"Finora non sono stati rilevati problemi nell\'area di lavoro.","tabbarDecorationsEnabled":"Mostra i decoratori di problemi (marcatori diagnostici) nelle barre delle schede."},"memory-inspector":{"addressTooltip":"Posizione di memoria da visualizzare, un indirizzo o un\'espressione che valuta un indirizzo","ascii":"ASCII","binary":"Binario","byteSize":"Dimensione del byte","bytesPerGroup":"Byte per gruppo","closeSettings":"Chiudere le impostazioni","columns":"Colonne","command":{"createNewMemory":"Creare un nuovo ispettore di memoria","createNewRegisterView":"Creare una nuova vista del registro","followPointer":"Seguire il puntatore","followPointerMemory":"Seguire il puntatore in Memory Inspector","resetValue":"Valore di reset","showRegister":"Mostra registro in Memory Inspector","viewVariable":"Mostra la variabile in Memory Inspector"},"data":"Dati","decimal":"Decimale","diff":{"label":"Diff: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Byte da cui spostare la memoria {0}"},"editable":{"apply":"Applicare le modifiche","clear":"Cambiamenti evidenti"},"endianness":"Endianità","extraColumn":"Colonna extra","groupsPerRow":"Gruppi per fila","hexadecimal":"Esadecimale","length":"Lunghezza","lengthTooltip":"Numero di byte da recuperare, in formato decimale o esadecimale.","memory":{"addressField":{"memoryReadError":"Inserire un indirizzo o un\'espressione nel campo Posizione."},"freeze":"Congelamento della memoria","hideSettings":"Nascondere il pannello delle impostazioni","readError":{"bounds":"I limiti di memoria sono stati superati, il risultato sarà troncato.","noContents":"Al momento non sono disponibili contenuti di memoria."},"readLength":{"memoryReadError":"Inserire una lunghezza (numero decimale o esadecimale) nel campo Lunghezza."},"showSettings":"Mostra il pannello delle impostazioni","unfreeze":"Scongelare la vista della memoria","userError":"Si è verificato un errore nel recupero della memoria."},"memoryCategory":"Ispettore di memoria","memoryInspector":"Ispettore di memoria","memoryTitle":"Memoria","octal":"Ottale","offset":"Offset","offsetTooltip":"Offset da aggiungere alla posizione di memoria corrente, durante la navigazione","provider":{"localsError":"Impossibile leggere le variabili locali. Nessuna sessione di debug attiva.","readError":"Impossibile leggere la memoria. Nessuna sessione di debug attiva.","writeError":"Impossibile scrivere la memoria. Nessuna sessione di debug attiva."},"register":"Registro","register-widget":{"filter-placeholder":"Filtro (inizia con)"},"registerReadError":"Si è verificato un errore nel recupero dei registri.","registers":"Registri","toggleComparisonWidgetVisibility":"Alterna la visibilità del widget di confronto","utils":{"afterBytes":"È necessario caricare la memoria in entrambi i widget che si desidera confrontare. {0} non ha memoria caricata.","bytesMessage":"È necessario caricare la memoria in entrambi i widget che si desidera confrontare. {0} non ha memoria caricata."}},"messages":{"notificationTimeout":"Le notifiche informative saranno nascoste dopo questo timeout.","toggleNotifications":"Alterna le notifiche"},"mini-browser":{"typeUrl":"Digitare un URL"},"monaco":{"noSymbolsMatching":"Nessun simbolo corrispondente","typeToSearchForSymbols":"Digitare per cercare i simboli"},"navigator":{"autoReveal":"Rivelazione auto","clipboardWarn":"L\'accesso agli appunti è negato. Controllare i permessi del browser.","clipboardWarnFirefox":"L\'API Appunti non è disponibile. È possibile abilitarla tramite la preferenza \'{0}\' nella pagina \'{1}\'. Quindi ricaricare Theia. Ciò consentirà a FireFox di avere pieno accesso agli appunti di sistema.","refresh":"Aggiorna in Explorer","reveal":"Rivelare in Explorer","toggleHiddenFiles":"Toggle Hidden Files"},"output":{"clearOutputChannel":"Cancella il canale di uscita...","closeOutputChannel":"Chiudere il canale di uscita...","hiddenChannels":"Canali nascosti","hideOutputChannel":"Nascondere il canale di uscita...","maxChannelHistory":"Il numero massimo di voci in un canale di uscita.","outputChannels":"Canali di uscita","showOutputChannel":"Mostra il canale di uscita..."},"plugin":{"blockNewTab":"Il browser ha impedito l\'apertura di una nuova scheda"},"plugin-dev":{"alreadyRunning":"L\'istanza ospitata è già in esecuzione.","debugInstance":"Istanza di debug","debugMode":"Usare inspect o inspect-brk per il debug di Node.js","devHost":"Sviluppo Host","failed":"Impossibile eseguire l\'istanza del plugin ospitato: {0}","hostedPlugin":"Plugin ospitato","hostedPluginRunning":"Plugin ospitato: in esecuzione","hostedPluginStarting":"Plugin ospitato: inizio","hostedPluginStopped":"Plugin ospitato: fermato","hostedPluginWatching":"Plugin ospitato: Guardare","instanceTerminated":"{0} è stato terminato","launchOutFiles":"Array di schemi glob per localizzare i file JavaScript generati (`${pluginPath}` sarà sostituito dal percorso effettivo del plugin).","noValidPlugin":"La cartella specificata non contiene un plugin valido.","notRunning":"L\'istanza ospitata non è in esecuzione.","pluginFolder":"La cartella dei plugin è impostata su: {0}","preventedNewTab":"Il tuo browser ha impedito l\'apertura di una nuova scheda","restartInstance":"Riavviare l\'istanza","running":"L\'istanza ospitata è in esecuzione a:","select":"Seleziona","selectPath":"Seleziona il percorso","startInstance":"Avviare l\'istanza","starting":"Avvio del server di istanza ospitato ...","stopInstance":"Fermare l\'istanza","unknownTerminated":"L\'istanza è stata terminata","watchMode":"Eseguire il watcher sul plugin in sviluppo"},"plugin-ext":{"authentication-main":{"loginTitle":"Accesso"},"plugins":"Plugin","webviewTrace":"Controlla la tracciabilità della comunicazione con le webview.","webviewWarnIfUnsecure":"Avverte gli utenti che le webview sono attualmente distribuite in modo non sicuro."},"preview":{"openByDefault":"Aprire l\'anteprima invece dell\'editor per default."},"property-view":{"created":"Creato","directory":"Directory","lastModified":"Ultima modifica","location":"Posizione","noProperties":"Nessuna proprietà disponibile.","properties":"Proprietà","size":"Dimensione","symbolicLink":"Collegamento simbolico"},"scm":{"amend":"Modificare","amendHeadCommit":"TESTA Impegno","amendLastCommit":"Modificare l\'ultimo commit","changeRepository":"Cambia Repository...","config.untrackedChanges":"Controlla il comportamento delle modifiche non tracciate.","config.untrackedChanges.hidden":"nascosto","config.untrackedChanges.mixed":"misto","config.untrackedChanges.separate":"separato","history":"Storia","noRepositoryFound":"Nessun repository trovato","unamend":"Unamend","unamendCommit":"Annullamento del commit"},"search-in-workspace":{"includeIgnoredFiles":"Includere file ignorati","noFolderSpecified":"Non hai aperto o specificato una cartella. Al momento vengono cercati solo i file aperti.","resultSubset":"Questo è solo un sottoinsieme di tutti i risultati. Usa un termine di ricerca più specifico per restringere la lista dei risultati.","searchOnEditorModification":"Cerca l\'editor attivo quando viene modificato."},"secondary-window":{"extract-widget":"Sposta la vista nella finestra secondaria"},"shell-area":{"secondary":"Finestra secondaria","top":"Alto"},"task":{"attachTask":"Allegare il compito...","clearHistory":"Storia chiara","noTaskToRun":"Non è stata trovata alcuna attività da eseguire. Configura attività...","openUserTasks":"Aprire le attività dell\'utente"},"terminal":{"defaultProfile":"Il profilo predefinito utilizzato su {0}","enableCopy":"Abilita ctrl-c (cmd-c su macOS) per copiare il testo selezionato","enablePaste":"Abilita ctrl-v (cmd-v su macOS) per incollare dagli appunti","profileArgs":"Gli argomenti della shell utilizzati da questo profilo.","profileColor":"Un ID del colore del tema del terminale da associare al terminale.","profileDefault":"Scegliere il profilo predefinito...","profileIcon":"Un ID di codifica da associare all\'icona del terminale.\\nterminale-tmux: \\"$(terminale-tmux)\\"","profileNew":"Nuovo terminale (con profilo)...","profilePath":"Il percorso della shell utilizzata da questo profilo.","profiles":"I profili da presentare quando si crea un nuovo terminale. Impostare manualmente la proprietà path con gli argomenti opzionali.\\nImpostare un profilo esistente a `null` per nasconderlo dall\'elenco, ad esempio: `\\"{0}\\": null`.","rendererType":"Controlla il modo in cui il terminale viene reso.","selectProfile":"Selezionare un profilo per il nuovo terminale","shell.deprecated":"Il nuovo modo consigliato per configurare la shell predefinita è quello di creare un profilo di terminale in \'terminal.integrated.profiles.{0}\' e di impostare il nome del profilo come predefinito in \'terminal.integrated.defaultProfile.{0}\'.","shellArgsLinux":"Gli argomenti della riga di comando da usare quando si è sul terminale Linux.","shellArgsOsx":"Gli argomenti della riga di comando da usare quando si è nel terminale di macOS.","shellArgsWindows":"Gli argomenti della linea di comando da usare quando si è sul terminale di Windows.","shellLinux":"Il percorso della shell che il terminale usa su Linux (predefinito: \'{0}\'}).","shellOsx":"Il percorso della shell che il terminale usa su macOS (predefinito: \'{0}\'}).","shellWindows":"Il percorso della shell che il terminale usa su Windows. (predefinito: \'{0}\')."},"toolbar":{"addCommand":"Aggiungere un comando alla barra degli strumenti","addCommandPlaceholder":"Trova un comando da aggiungere alla barra degli strumenti","centerColumn":"Colonna centrale","failedUpdate":"Fallito l\'aggiornamento del valore di \'{0}\' in \'{1}\'.","filterIcons":"Icone del filtro","iconSelectDialog":"Seleziona un\'icona per \'{0}\'.","iconSet":"Icon Set","insertGroupLeft":"Inserire il separatore di gruppo (sinistra)","insertGroupRight":"Inserire il separatore di gruppo (a destra)","leftColumn":"Colonna sinistra","openJSON":"Personalizzare la barra degli strumenti (aprire JSON)","removeCommand":"Rimuovere il comando dalla barra degli strumenti","restoreDefaults":"Ripristinare le impostazioni predefinite della barra degli strumenti","rightColumn":"Colonna destra","selectIcon":"Selezionare l\'icona","toggleToolbar":"Alza la barra degli strumenti","toolbarLocationPlaceholder":"Dove volete che sia aggiunto il comando?","useDefaultIcon":"Usa l\'icona predefinita"},"typehierarchy":{"subtypeHierarchy":"Gerarchia dei sottotipi","supertypeHierarchy":"Gerarchia dei supertipi"},"vsx-registry":{"downloadCount":"Conteggio dei download: {0}","errorFetching":"Errore nel recupero delle estensioni.","failedInstallingVSIX":"Impossibile installare {0} da VSIX.","invalidVSIX":"Il file selezionato non è un plugin \\"*.vsix\\" valido.","license":"Licenza: {0}","recommendedExtensions":"Una lista dei nomi delle estensioni raccomandate per l\'uso in questo spazio di lavoro.","searchPlaceholder":"Estensioni di ricerca in {0}","showInstalled":"Mostra le estensioni installate","showRecommendedExtensions":"Controlla se le notifiche sono mostrate per le raccomandazioni di estensione.","vsx-extensions-contribution":{"update-version-uninstall-error":"Errore durante la rimozione dell\'estensione: {0}.","update-version-version-error":"Impossibile installare la versione {0} di {1}."}},"webview":{"goToReadme":"Vai a README","messageWarning":"            Lo schema dell\'host dell\'endpoint {0} è stato cambiato in `{1}`; cambiare lo schema può portare a vulnerabilità di sicurezza.             Vedere `{2}` per maggiori informazioni."},"workspace":{"compareWithEachOther":"Confrontare con l\'altro","confirmDeletePermanently.description":"Impossibile eliminare \\"{0}\\" usando il Cestino. Vuoi invece eliminare definitivamente?","confirmDeletePermanently.solution":"Potete disabilitare l\'uso del Cestino nelle preferenze.","confirmDeletePermanently.title":"Errore nell\'eliminazione del file","confirmMessage.delete":"Volete davvero eliminare i seguenti file?","confirmMessage.dirtyMultiple":"Si desidera davvero eliminare {0} file con modifiche non salvate?","confirmMessage.dirtySingle":"Si vuole davvero cancellare {0} con le modifiche non salvate?","confirmMessage.uriMultiple":"Volete davvero eliminare tutti i {0} file selezionati?","confirmMessage.uriSingle":"Si vuole davvero cancellare {0}?","duplicate":"Duplicato","failApply":"Impossibile applicare le modifiche al nuovo file","failSaveAs":"Impossibile eseguire \\"{0}\\" per il widget corrente.","newFilePlaceholder":"Nome del file","newFolderPlaceholder":"Nome della cartella","noErasure":"Nota: nulla sarà cancellato dal disco","openRecentPlaceholder":"Scrivi il nome dello spazio di lavoro che vuoi aprire","openRecentWorkspace":"Aprire lo spazio di lavoro recente...","preserveWindow":"Abilita l\'apertura degli spazi di lavoro nella finestra corrente.","removeFolder":"Sei sicuro di voler rimuovere la seguente cartella dall\'area di lavoro?","removeFolders":"Sei sicuro di voler rimuovere le seguenti cartelle dallo spazio di lavoro?","trashTitle":"Sposta {0} nel Cestino","trustEmptyWindow":"Controlla se lo spazio di lavoro vuoto è fidato o meno per impostazione predefinita.","trustEnabled":"Controlla se la fiducia dello spazio di lavoro è abilitata o meno. Se disabilitato, tutti gli spazi di lavoro sono affidabili.","trustRequest":"Un\'estensione richiede la fiducia dello spazio di lavoro ma l\'API corrispondente non è ancora pienamente supportata. Vuoi fidarti di questo spazio di lavoro?","untitled-cleanup":"Sembra che ci siano molti file dello spazio di lavoro senza titolo. Per favore controlla {0} e rimuovi tutti i file inutilizzati.","workspaceFolderAdded":"È stato creato uno spazio di lavoro con radici multiple. Vuoi salvare la configurazione dello spazio di lavoro come file?","workspaceFolderAddedTitle":"Cartella aggiunta allo spazio di lavoro"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.ja.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.ja.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"編集条件...","terminal:new:profile":"プロファイルから新しい統合端末を作成する","terminal:profile:default":"デフォルトの端末プロファイルを選択","theia":{"callhierarchy":{"noCallers":"発信者は検出されていません。","open":"オープンコールヒエラルキー"},"core":{"about":{"compatibility":"{0} 互換性","defaultApi":"デフォルト{0} API","version":"バージョン"},"common":{"closeAll":"すべてのタブを閉じる","closeAllTabMain":"メインエリアのすべてのタブを閉じる","closeOtherTabMain":"メインエリアの他のタブを閉じる","closeOthers":"他のタブを閉じる","closeRight":"閉じるタブを右に","closeTab":"タブを閉じる","closeTabMain":"メインエリアのタブを閉じる","collapseAllTabs":"すべてのサイドパネルを閉じる","collapseBottomPanel":"トグルボトムパネル","collapseTab":"折りたたみ式サイドパネル","showNextTabGroup":"次のタブグループに切り替える","showNextTabInGroup":"グループ内の次のタブに切り替える","showPreviousTabGroup":"前のタブグループに切り替える","showPreviousTabInGroup":"グループ内の前のタブに切り替える","toggleMaximized":"トグル・マキシマイズ"},"enhancedPreview":{"classic":"タブの基本情報を含む簡単なプレビューを表示する。","enhanced":"追加情報を含むタブの拡張プレビューを表示します。","visual":"タブのビジュアルプレビューを表示する。"},"file":{"browse":"ブラウズ"},"highlightModifiedTabs":"モディファイド(ダーティ)エディタのタブにトップボーダーを描画するかどうかを制御します。","keybindingStatus":"{0}が押されたので、さらにキーを待つ","keyboard":{"choose":"キーボードレイアウトの選択","chooseLayout":"キーボードレイアウトの選択","current":"(現在: {0})","currentLayout":"- 現在のレイアウト","mac":"Mac用キーボード","pc":"PCキーボード","tryDetect":"ブラウザの情報や押されたキーからキーボードの配列を検出してみてください。"},"navigator":{"clipboardWarn":"クリップボードへのアクセスが拒否されました。ブラウザのアクセス許可を確認してください。","clipboardWarnFirefox":"クリップボードAPIは使用できません。これは、\'{1}\' ページの \'{0}\' 環境設定によって有効にすることができます。その後Theiaをリロードしてください。これにより、FireFoxがシステムクリップボードにフルアクセスできるようになります。"},"offline":"オフライン","quitMessage":"保存されていない変更は、保存されません。","resetWorkbenchLayout":"ワークベンチレイアウトのリセット","searchbox":{"close":"閉じる(エスケープ)","next":"次へ(下)","previous":"前へ (上)"},"silentNotifications":"通知のポップアップを抑制するかどうかを制御します。","tabDefaultSize":"タブのデフォルトサイズを指定します。","tabMaximize":"ダブルクリック時にタブを最大化するかどうかを制御します。","tabMinimumSize":"タブの最小サイズを指定します。","tabShrinkToFit":"タブを縮小して、空きスペースに合わせる。"},"debug":{"addConfigurationPlaceholder":"設定を追加するワークスペース・ルートを選択します。","compound-cycle":"起動構成 \'{0}\' は自分自身とのサイクルを含む","continueAll":"すべてを続ける","copyExpressionValue":"コピー式の値","debugVariableInput":"設定{0} 値","instruction-breakpoint":"命令ブレークポイント","missingConfiguration":"ダイナミックコンフィギュレーション「{0}:{1}」が存在しないか、適用できない","pauseAll":"ポーズ・オール","reveal":"暴露","threads":"スレッド","toggleTracing":"デバッグアダプタとの通信のトレースの有効化/無効化"},"editor":{"dirtyEncoding":"ファイルが汚れています。別のエンコーディングで開き直す前に、まず保存してください。","editor.codeActionWidget.showHeaders":"コードアクションメニューにグループヘッダを表示するかどうかを設定します。","editor.experimental.pasteActions.enabled":"ペースト時に拡張機能からの編集を実行するかどうかを設定します。","editor.formatOnSaveMode.modificationsIfAvailable":"変更点のみをフォーマットしようとします(ソースコントロールが必要です)。ソースコントロールが使用できない場合は、ファイル全体がフォーマットされます。","editor.inlayHints.enabled1":"インレイのヒントはデフォルトで表示され、`Ctrl+Alt`を押すと隠れます。","editor.inlayHints.enabled2":"インレイのヒントはデフォルトでは非表示で、`Ctrl+Alt`を押したときに表示されます。","editor.quickSuggestions":"入力中に自動的にサジェストを表示するかどうかを制御します。コメント、文字列、その他のコードを入力する際に制御できます。クイックサジェストは、ゴーストテキストとして表示するか、サジェストウィジェットで表示するかを設定できます。また、\'#editor.suggestOnTriggerCharacters#\'設定は、特殊な文字でサジェストが発生するかどうかを制御します。","editor.suggest.matchOnWordStartOnly":"インテリセンスのフィルタリングを有効にすると、最初の文字が単語の先頭にマッチする必要があります。例えば、`Console` や `WebContext` では `c` ですが、`description` では _not_ です。無効化すると、インテリセンスはより多くの結果を表示しますが、マッチの質でソートされます。","files.autoSave":"未保存の変更があるエディターの[自動保存](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)を制御します。","files.autoSave.afterDelay":"変更されたエディターは、設定された `#files.autoSaveDelay#` の後に自動的に保存されます。","files.autoSave.off":"変更されたエディタは、自動的に保存されることはありません。","files.autoSave.onFocusChange":"変更されたエディタは、エディタがフォーカスを失うと自動的に保存されます。","files.autoSave.onWindowChange":"変更されたエディタは、ウィンドウのフォーカスが外れたときに自動的に保存されます。","formatOnSaveTimeout":"ファイル保存時に実行されるフォーマットがキャンセルされるまでのタイムアウト(ミリ秒)。","persistClosedEditors":"ウィンドウの再読み込み時に、ワークスペースの閉じたエディタの履歴を保持するかどうかを制御します。","showAllEditors":"開いているエディタをすべて表示","splitHorizontal":"スプリットエディタ横","splitVertical":"スプリットエディタ縦","toggleStickyScroll":"固定スクロールの切り替えル"},"file-search":{"toggleIgnoredFiles":"({0}を押すと、無視されたファイルの表示/非表示を切り替えることができます。"},"fileDialog":{"showHidden":"隠しファイルを表示する"},"fileSystem":{"fileResource":{"overWriteBody":"ファイルシステム上の\'{0}\'に加えられた変更を上書きしますか?"}},"filesystem":{"copiedToClipboard":"ダウンロードリンクをクリップボードにコピー。","copyDownloadLink":"コピー・ダウンロード・リンク","dialog":{"initialLocation":"初期位置へ移動","multipleItemMessage":"選択できる項目は1つだけです","name":"名前:","navigateBack":"戻る","navigateForward":"ナビゲートフォワード","navigateUp":"ディレクトリを1つ上に移動する"},"fileResource":{"binaryFileQuery":"開くと時間がかかり、IDEが反応しなくなる可能性があります。とにかく\'{0}\'を開きたいのですか?","binaryTitle":"ファイルがバイナリであるか、サポートされていないテキストエンコーディングが使用されています。","largeFileTitle":"ファイルが大きすぎます({0})。","overwriteTitle":"ファイル \'{0}\' はファイルシステム上で変更されました。"},"filesExclude":"ファイルやフォルダーを除外するためのグロブパターンを設定します。例えば、ファイルエクスプローラーでは、この設定をもとにファイルやフォルダーの表示・非表示を決定します。","format":"フォーマット:","maxConcurrentUploads":"複数のファイルをアップロードする際に、同時にアップロードするファイルの最大数です。0の場合は、すべてのファイルが同時にアップロードされます。","maxFileSizeMB":"開くことのできる最大ファイルサイズ(MB)を制御します。","prepareDownload":"ダウンロードの準備中...","prepareDownloadLink":"ダウンロードリンクの準備中...","processedOutOf":"{1}のうち{0}を処理","replaceTitle":"ファイルの置き換え","uploadFiles":"ファイルのアップロード...","uploadedOutOf":"{1}のうち{0}をアップロードしました。"},"getting-started":{"apiComparator":"{0} API互換性","newExtension":"新しいエクステンションの構築","newPlugin":"新しいプラグインの構築","startup-editor":{"welcomePage":"{0} とエクステンションを使い始めるのに役立つコンテンツを含む、ようこそページを開きます。"}},"git":{"aFewSecondsAgo":"さきほど","addSignedOff":"サイン・オフ・バイの追加","amendReuseMessag":"最後のコミットメッセージを再利用するには、「Enter」または「Escape」を押してキャンセルしてください。","amendRewrite":"前回のコミットメッセージを書き換えます。確定するには「Enter」を、キャンセルするには「Escape」を押してください。","checkoutCreateLocalBranchWithName":"名前:{0}で新しいローカルブランチを作成します。確定するには「Enter」を、キャンセルするには「Escape」を押してください。","checkoutProvideBranchName":"支店名をご記入ください。","checkoutSelectRef":"チェックアウトするRefを選択するか、新しいローカルブランチを作成します。","cloneQuickInputLabel":"Gitリポジトリの場所を指定してください。確定するには「Enter」を、キャンセルするには「Escape」を押してください。","cloneRepository":"Gitリポジトリをクローンします。{0}.確定するには「Enter」を、キャンセルするには「Escape」を押します。","compareWith":"比べてみると...","compareWithBranchOrTag":"現在アクティブな{0}のブランチと比較するブランチやタグを選びます。","diff":"差分","dirtyDiffLinesLimit":"エディタの行数がこの制限を超えている場合、ダーティな diff デコレーションを表示しません。","dropStashMessage":"スタッシュの削除に成功しました。","editorDecorationsEnabled":"エディタにgitデコレーションを表示します。","fetchPickRemote":"フェッチするリモートを選びます。","gitDecorationsColors":"ナビゲーターに色の装飾を施す。","mergeQuickPickPlaceholder":"現在アクティブな{0}ブランチにマージするブランチを選びます。","missingUserInfo":"gitで「user.name」と「user.email」を設定していることを確認してください。","noHistoryForError":"の履歴はありません。{0}","noPreviousCommit":"修正する前のコミットがない","noRepositoriesSelected":"リポジトリが選択されていません。","prepositionIn":"で","repositoryNotInitialized":"リポジトリ {0} はまだ初期化されていません。","stashChanges":"スタッシュの変更確定するには「Enter」を、キャンセルするには「Escape」を押します。","stashChangesWithMessage":"メッセージでスタッシュが変わります。{0}.確定するには「Enter」を、キャンセルするには「Escape」を押してください。","tabTitleIndex":"{0} (インデックス)","tabTitleWorkingTree":"{0} (ワーキングツリー)","toggleBlameAnnotations":"トグル・ブレイム・アノテーション"},"keybinding-schema-updater":{"deprecation":"代わりに `when` 句を使用してください。"},"keymaps":{"editKeybindingTitle":"{0}のキーバインドを編集する","keybindingCollidesValidation":"キーバインドがコリジョン中","requiredKeybindingValidation":"キーバインド値が必要です","resetKeybindingConfirmation":"このキーバインドを本当に初期値に戻すのですか?","resetKeybindingTitle":"{0}のキーバインドをリセットする","resetMultipleKeybindingsWarning":"このコマンドに複数のキーバインドが存在する場合は、すべてのキーバインドがリセットされます。"},"localize":{"offlineTooltip":"バックエンドに接続できません。"},"markers":{"clearAll":"クリアオール","noProblems":"これまでのところ、ワークスペースに問題は検出されていません。","tabbarDecorationsEnabled":"タブバーに問題のデコレーター(診断マーカー)を表示する。"},"memory-inspector":{"addressTooltip":"表示するメモリ位置、アドレス、またはアドレスに評価される式","ascii":"ASCII","binary":"バイナリ","byteSize":"バイトサイズ","bytesPerGroup":"1グループあたりのバイト数","closeSettings":"設定を閉じる","columns":"コラム","command":{"createNewMemory":"新しいメモリインスペクタの作成","createNewRegisterView":"新規登録ビューの作成","followPointer":"フォローポインター","followPointerMemory":"メモリインスペクタでポインタをフォローする","resetValue":"リセット値","showRegister":"メモリインスペクタにレジスタを表示する","viewVariable":"メモリインスペクタに変数を表示する"},"data":"データ","decimal":"10進数","diff":{"label":"差分です。{0}"},"diff-widget":{"offset-label":"{0} オフセット","offset-title":"からメモリをオフセットするバイト数{0}"},"editable":{"apply":"変更を適用する","clear":"クリアランス"},"endianness":"エンディアン","extraColumn":"エクストラコラム","groupsPerRow":"1行あたりのグループ数","hexadecimal":"十六進法","length":"長さ","lengthTooltip":"取得するバイト数(10進数または16進数)。","memory":{"addressField":{"memoryReadError":"所在地欄に住所または式を入力する。"},"freeze":"フリーズメモリービュー","hideSettings":"設定パネルの非表示","readError":{"bounds":"メモリ境界を超えたため、結果は切り捨てられます。","noContents":"現在、メモリーコンテンツはございません。"},"readLength":{"memoryReadError":"Lengthの欄に長さ(10進数または16進数)を入力する。"},"showSettings":"設定パネルを表示する","unfreeze":"アンフリーズメモリービュー","userError":"メモリの取り込みにエラーが発生しました。"},"memoryCategory":"メモリーインスペクター","memoryInspector":"メモリーインスペクター","memoryTitle":"メモリ","octal":"八進数","offset":"オフセット","offsetTooltip":"ナビゲート時に現在のメモリ位置に追加されるオフセット値","provider":{"localsError":"ローカル変数を読み取ることができません。アクティブなデバッグ・セッションがありません。","readError":"メモリを読み込むことができません。アクティブなデバッグセッションがありません。","writeError":"メモリの書き込みができません。アクティブなデバッグセッションがありません。"},"register":"登録","register-widget":{"filter-placeholder":"フィルター(で始まる)"},"registerReadError":"レジスタの取得にエラーが発生しました。","registers":"レジスター","toggleComparisonWidgetVisibility":"比較ウィジェットの可視性をトグルする","utils":{"afterBytes":"比較したい両方のウィジェットにメモリを搭載する必要があります。{0} はメモリが搭載されていません。","bytesMessage":"比較したい両方のウィジェットにメモリを搭載する必要があります。{0} はメモリが搭載されていません。"}},"messages":{"notificationTimeout":"このタイムアウト後は、情報提供のための通知が非表示になります。","toggleNotifications":"通知の切り替え"},"mini-browser":{"typeUrl":"URLを入力する"},"monaco":{"noSymbolsMatching":"シンボルが一致しない","typeToSearchForSymbols":"記号を検索するタイプ"},"navigator":{"autoReveal":"オートリヴェール","clipboardWarn":"クリップボードへのアクセスが拒否されました。ブラウザのアクセス許可を確認してください。","clipboardWarnFirefox":"クリップボードAPIは使用できません。これは、\'{1}\' ページの \'{0}\' 環境設定によって有効にすることができます。その後Theiaをリロードしてください。これにより、FireFoxがシステムクリップボードにフルアクセスできるようになります。","refresh":"エクスプローラーでの更新","reveal":"エクスプローラーでの表示","toggleHiddenFiles":"隠しファイルのトグル"},"output":{"clearOutputChannel":"クリア出力チャンネル...","closeOutputChannel":"出力チャンネルを閉じる...","hiddenChannels":"隠しチャンネル","hideOutputChannel":"出力チャンネルを隠す...","maxChannelHistory":"1つの出力チャネルの最大エントリ数。","outputChannels":"出力チャンネル","showOutputChannel":"出力チャンネルを表示..."},"plugin":{"blockNewTab":"お使いのブラウザで新しいタブを開くことができませんでした"},"plugin-dev":{"alreadyRunning":"ホストされているインスタンスはすでに実行されています。","debugInstance":"デバッグインスタンス","debugMode":"Node.js のデバッグに inspect または inspect-brk を使用する","devHost":"開発ホスト","failed":"ホストされたプラグインインスタンスの実行に失敗しました。{0}","hostedPlugin":"ホスト型プラグイン","hostedPluginRunning":"ホスト型プラグイン: 実行中","hostedPluginStarting":"ホスト型プラグイン: 開始","hostedPluginStopped":"ホスト型プラグイン: 停止中","hostedPluginWatching":"ホストされたプラグイン: ウォッチング","instanceTerminated":"{0}は終了しました。","launchOutFiles":"生成されたJavaScriptファイルを探すためのグロブパターンの配列です(`${pluginPath}`はプラグインの実際のパスに置き換えられます)。","noValidPlugin":"指定されたフォルダに有効なプラグインが含まれていません。","notRunning":"ホスト側のインスタンスが起動していない。","pluginFolder":"プラグインフォルダが設定されています。{0}","preventedNewTab":"お使いのブラウザで新しいタブが開かない","restartInstance":"インスタンスの再起動","running":"ホストされているインスタンスは、次のように実行されています。","select":"セレクト","selectPath":"セレクトパス","startInstance":"インスタンスの開始","starting":"ホストされたインスタンス・サーバーの起動 ...","stopInstance":"インスタンスの停止","unknownTerminated":"インスタンスが終了しました。","watchMode":"開発中のプラグインにウォッチャーを実行"},"plugin-ext":{"authentication-main":{"loginTitle":"ログイン"},"plugins":"プラグイン","webviewTrace":"ウェブビューによる通信のトレースを制御します。","webviewWarnIfUnsecure":"現在、ウェブビューが安全でない状態で展開されていることをユーザーに警告します。"},"preview":{"openByDefault":"デフォルトではエディタではなくプレビューを開くようになっています。"},"property-view":{"created":"作成","directory":"ディレクトリ","lastModified":"最終更新日","location":"所在地","noProperties":"物件はありません。","properties":"プロパティ","size":"サイズ","symbolicLink":"シンボリックリンク"},"scm":{"amend":"修正","amendHeadCommit":"HEADコミット","amendLastCommit":"前回のコミットを修正","changeRepository":"リポジトリの変更...","config.untrackedChanges":"未追跡の変更の動作を制御します。","config.untrackedChanges.hidden":"隠れ","config.untrackedChanges.mixed":"合成","config.untrackedChanges.separate":"別","history":"歴史","noRepositoryFound":"リポジトリが見つからない","unamend":"くり返す","unamendCommit":"未修正のコミット"},"search-in-workspace":{"includeIgnoredFiles":"無視されたファイルを含める","noFolderSpecified":"フォルダを開いていない、または指定していない。現在、開いているファイルのみが検索されます。","resultSubset":"これは、すべての結果の一部に過ぎません。より具体的な検索用語を使って、結果リストを絞り込んでください。","searchOnEditorModification":"修正されたときにアクティブなエディタを検索します。"},"secondary-window":{"extract-widget":"セカンダリーウィンドウへの表示移動"},"shell-area":{"secondary":"セカンダリーウィンドウ","top":"トップ"},"task":{"attachTask":"タスクの添付...","clearHistory":"明確な歴史","noTaskToRun":"実行するタスクが見つかりません。タスクの設定...","openUserTasks":"ユーザータスクを開く"},"terminal":{"defaultProfile":"で使用されるデフォルトのプロファイルです。{0}","enableCopy":"ctrl-c(macOSではcmd-c)で選択されたテキストをコピーできるようになりました。","enablePaste":"ctrl-v(macOSではcmd-v)でクリップボードからの貼り付けを可能にする。","profileArgs":"このプロファイルが使用するシェル引数。","profileColor":"端末と関連付ける端末テーマカラーID。","profileDefault":"Default Profileを選択する...","profileIcon":"ターミナルアイコンに関連付けるコーディコンIDです。\\nterminal-tmux:\\"$(terminal-tmux)\\" とする。","profileNew":"新端末(プロフィール付き)...","profilePath":"このプロファイルが使用するシェルのパス。","profiles":"新しいターミナルを作成するときに提示するプロファイル。オプションのアーギュメントを使用して、手動でパスプロパティを設定します。\\n既存のプロファイルを `null` に設定すると、リストからプロファイルを隠すことができます。 例: `\\"{0}\\": null`.","rendererType":"端末のレンダリング方法を制御する。","selectProfile":"新規端末のプロファイルを選択する","shell.deprecated":"これは非推奨です。デフォルトシェルを設定する新しい推奨方法は、 \'terminal.integrated.profiles.{0}\' でターミナルプロファイルを作成し、 \'terminal.integrated.defaultProfile.{0}.\' でそのプロファイル名をデフォルトとして設定する方法です。","shellArgsLinux":"Linux端末で使用するコマンドライン引数です。","shellArgsOsx":"macOSのターミナルで使用するコマンドライン引数です。","shellArgsWindows":"Windows端末で使用するコマンドライン引数です。","shellLinux":"Linuxでターミナルが使用するシェルのパス(デフォルト:\'{0}\'})。","shellOsx":"macOSでターミナルが使用するシェルのパスです(デフォルト:\'{0}\'})。","shellWindows":"Windowsでターミナルが使用するシェルのパスです。(デフォルト: \'{0}\')を指定します。"},"toolbar":{"addCommand":"ツールバーへのコマンド追加","addCommandPlaceholder":"ツールバーに追加するコマンドを探す","centerColumn":"センターポール","failedUpdate":"1}\'の\'{0}\'の値を更新できませんでした。","filterIcons":"フィルターアイコン","iconSelectDialog":"{0}」のアイコンを選択します。","iconSet":"アイコンセット","insertGroupLeft":"インサートグループセパレーター(左)","insertGroupRight":"インサートグループセパレーター(右)","leftColumn":"左欄","openJSON":"ツールバーのカスタマイズ(JSONを開く)","removeCommand":"ツールバーからコマンドを削除する","restoreDefaults":"ツールバーの初期設定に戻す","rightColumn":"右列","selectIcon":"アイコンの選択","toggleToolbar":"ツールバーのトグル","toolbarLocationPlaceholder":"コマンドを追加したい場所はどこですか?","useDefaultIcon":"デフォルトアイコンを使用する"},"typehierarchy":{"subtypeHierarchy":"サブタイプヒエラルキー","supertypeHierarchy":"スーパータイプヒエラルキー"},"vsx-registry":{"downloadCount":"ダウンロード回数{0}","errorFetching":"拡張機能の取得にエラーが発生しました。","failedInstallingVSIX":"VSIXから{0} のインストールに失敗しました。","invalidVSIX":"選択されたファイルは、有効な \\"*.vsix \\"プラグインではありません。","license":"ライセンス{0}","recommendedExtensions":"このワークスペースでの使用が推奨される拡張機能の名前のリストです。","searchPlaceholder":"{0}で拡張子を検索","showInstalled":"インストールされている拡張機能を表示する","showRecommendedExtensions":"拡張機能の推奨事項について、通知を表示するかどうかを制御します。","vsx-extensions-contribution":{"update-version-uninstall-error":"拡張子の削除中にエラーが発生しました。{0}.","update-version-version-error":"バージョン{0} のインストールに失敗しました。{1} 。"}},"webview":{"goToReadme":"READMEに戻る","messageWarning":"           {0}エンドポイントのホストパターンが`{1}`に変更されました。パターンを変更すると、セキュリティ上の脆弱性が発生する可能性があります。             詳しくは `{2}` をご覧ください。"},"workspace":{"compareWithEachOther":"互いの比較","confirmDeletePermanently.description":"ゴミ箱を使った「{0}」の削除に失敗しました。代わりに永久に削除しますか?","confirmDeletePermanently.solution":"環境設定でゴミ箱の使用を無効にすることができます。","confirmDeletePermanently.title":"ファイル削除時のエラー","confirmMessage.delete":"本当に以下のファイルを削除しますか?","confirmMessage.dirtyMultiple":"保存されていない変更のある{0}個のファイルを本当に削除したいのですか?","confirmMessage.dirtySingle":"本当に未保存のまま{0}を削除したいのでしょうか?","confirmMessage.uriMultiple":"本当に{0}個の選択されたファイルをすべて削除しますか?","confirmMessage.uriSingle":"本当に{0}を削除するのですか?","duplicate":"デュプリケート","failApply":"新しいファイルに変更を適用できなかった","failSaveAs":"現在のウィジェットでは\\"{0}\\"を実行できません。","newFilePlaceholder":"ファイル名","newFolderPlaceholder":"フォルダー名","noErasure":"注:ディスクからは何も消去されません","openRecentPlaceholder":"開きたいワークスペースの名前を入力する","openRecentWorkspace":"最近のワークスペースを開く...","preserveWindow":"ワークスペースを現在のウィンドウで開けるようにします。","removeFolder":"ワークスペースから以下のフォルダを削除してよろしいですか?","removeFolders":"ワークスペースから以下のフォルダを削除してよろしいですか?","trashTitle":"{0}をゴミ箱に移動","trustEmptyWindow":"空のワークスペースをデフォルトで信頼するかどうかを制御します。","trustEnabled":"ワークスペースの信頼を有効にするかどうかを制御します。無効の場合、すべてのワークスペースが信頼されます。","trustRequest":"拡張機能がワークスペースの信頼を要求していますが、対応する API はまだ完全にはサポートされていません。このワークスペースを信頼しますか?","untitled-cleanup":"名称未設定のワークスペースファイルが多数あるようです。{0}を確認して、未使用のファイルを削除してください。","workspaceFolderAdded":"複数のルートを持つワークスペースが作成されました。ワークスペースの構成をファイルとして保存しますか?","workspaceFolderAddedTitle":"ワークスペースにフォルダを追加"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.pl.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.pl.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Warunek edycji...","terminal:new:profile":"Tworzenie nowego zintegrowanego terminalu z profilu","terminal:profile:default":"Wybierz domyślny profil terminala","theia":{"callhierarchy":{"noCallers":"Nie wykryto żadnych rozmówców.","open":"Hierarchia zaproszeń otwartych"},"core":{"about":{"compatibility":"{0} Zgodność","defaultApi":"Domyślnie {0} API","version":"Wersja"},"common":{"closeAll":"Zamknij wszystkie karty","closeAllTabMain":"Zamknij wszystkie karty w obszarze głównym","closeOtherTabMain":"Zamknij inne karty w obszarze głównym","closeOthers":"Zamknij inne karty","closeRight":"Zamknij karty z prawej strony","closeTab":"Zamknij kartę","closeTabMain":"Zamknij kartę w obszarze głównym","collapseAllTabs":"Złóż wszystkie panele boczne","collapseBottomPanel":"Panel dolny Toggle","collapseTab":"Składana ścianka boczna","showNextTabGroup":"Przełącz do następnej grupy kart","showNextTabInGroup":"Przejście do następnej karty w grupie","showPreviousTabGroup":"Przejście do poprzedniej grupy kart","showPreviousTabInGroup":"Przełączanie do poprzedniej karty w grupie","toggleMaximized":"Przełącz maksymalny"},"enhancedPreview":{"classic":"Wyświetla prosty podgląd karty z podstawowymi informacjami.","enhanced":"Wyświetla rozszerzony podgląd karty z dodatkowymi informacjami.","visual":"Wyświetla wizualny podgląd karty."},"file":{"browse":"Przeglądaj stronę"},"highlightModifiedTabs":"Określa, czy na zmodyfikowanych (brudnych) zakładkach edytora ma być wyświetlana górna ramka.","keybindingStatus":"{0} zostało naciśnięte, oczekiwanie na kolejne klawisze","keyboard":{"choose":"Wybierz układ klawiatury","chooseLayout":"Wybierz układ klawiatury","current":"(aktualny: {0})","currentLayout":" - obecny układ","mac":"Klawiatury Mac","pc":"Klawiatury PC","tryDetect":"Spróbuj wykryć układ klawiatury na podstawie informacji z przeglądarki i wciśniętych klawiszy."},"navigator":{"clipboardWarn":"Dostęp do schowka jest zablokowany. Sprawdź uprawnienia przeglądarki.","clipboardWarnFirefox":"Interfejs API schowka nie jest dostępny. Można go włączyć za pomocą opcji \'{0}\' na stronie \'{1}\'. Następnie należy ponownie załadować Theia. Uwaga, pozwoli to FireFox uzyskać pełny dostęp do schowka systemowego."},"offline":"Offline","quitMessage":"Wszelkie niezapisane zmiany nie zostaną zapisane.","resetWorkbenchLayout":"Resetuj układ stołu warsztatowego","searchbox":{"close":"Zamknij (Ucieczka)","next":"Następny (w dół)","previous":"Poprzedni (Up)"},"silentNotifications":"Określa, czy wyłączyć wyskakujące okienka powiadomień.","tabDefaultSize":"Określa domyślny rozmiar dla zakładek.","tabMaximize":"Określa, czy karty mają być maksymalizowane po dwukrotnym kliknięciu.","tabMinimumSize":"Określa minimalny rozmiar dla zakładek.","tabShrinkToFit":"Zmniejszanie zakładek w celu dopasowania do dostępnej przestrzeni."},"debug":{"addConfigurationPlaceholder":"Wybierz główny obszar roboczy, do którego chcesz dodać konfigurację","compound-cycle":"Konfiguracja startowa \\"{0}\\" zawiera cykl z samym sobą","continueAll":"Kontynuuj Wszystko","copyExpressionValue":"Kopiuj wartość wyrażenia","debugVariableInput":"Ustaw {0} Wartość","instruction-breakpoint":"Punkt przerwania instrukcji","missingConfiguration":"Brak konfiguracji dynamicznej \\"{0}:{1}\\" lub nie ma ona zastosowania.","pauseAll":"Pauza Wszystkie","reveal":"Ujawnij","threads":"Nici","toggleTracing":"Włączanie/wyłączanie śledzenia komunikacji z adapterami debugowania"},"editor":{"dirtyEncoding":"Plik jest zabrudzony. Proszę zapisać go najpierw przed ponownym otwarciem z innym kodowaniem.","editor.codeActionWidget.showHeaders":"Włączenie/wyłączenie pokazywania nagłówków grup w menu akcji kodu.","editor.experimental.pasteActions.enabled":"Włączanie/wyłączanie edycji z rozszerzeń podczas wklejania.","editor.formatOnSaveMode.modificationsIfAvailable":"Spowoduje próbę sformatowania tylko modyfikacji (wymaga kontroli źródła). Jeśli kontrola źródła nie może być użyta, sformatowany zostanie cały plik.","editor.inlayHints.enabled1":"Podpowiedzi są domyślnie wyświetlane i ukrywają się po przytrzymaniu `Ctrl+Alt`.","editor.inlayHints.enabled2":"Podpowiedzi są domyślnie ukryte i pokazują się po przytrzymaniu `Ctrl+Alt`.","editor.quickSuggestions":"Kontroluje czy sugestie powinny być automatycznie wyświetlane podczas pisania. Można to kontrolować w przypadku wpisywania komentarzy, ciągów znaków i innego kodu. Szybkie sugestie mogą być skonfigurowane tak, aby pokazywały się jako tekst widma lub z widżetem sugestii. Należy również pamiętać o ustawieniu \'#editor.suggestOnTriggerCharacters#\', które kontroluje czy sugestie są uruchamiane przez znaki specjalne.","editor.suggest.matchOnWordStartOnly":"Kiedy włączone filtrowanie IntelliSense wymaga, aby pierwszy znak pasował na początku słowa, np. `c` na `Console` lub `WebContext` ale _nie_ na `description`. Kiedy wyłączone IntelliSense pokaże więcej wyników, ale nadal sortuje je według jakości dopasowania.","files.autoSave":"Steruje funkcją [automatycznego zapisywania](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) edytorów, w których nie zapisano zmian.","files.autoSave.afterDelay":"Edytor ze zmianami jest automatycznie zapisywany po upływie skonfigurowanego czasu `#files.autoSaveDelay#`.","files.autoSave.off":"Edytor ze zmianami nigdy nie jest automatycznie zapisywany.","files.autoSave.onFocusChange":"Edytor z wprowadzonymi zmianami jest automatycznie zapisywany po utracie przez niego ostrości.","files.autoSave.onWindowChange":"Edytor ze zmianami jest automatycznie zapisywany po utracie ostrości okna.","formatOnSaveTimeout":"Timeout w milisekundach, po którym formatowanie uruchamiane przy zapisie pliku zostanie anulowane.","persistClosedEditors":"Określa, czy historia zamkniętego edytora ma być zachowywana podczas przeładowywania okna.","showAllEditors":"Pokaż wszystkie otwarte edytory","splitHorizontal":"Podziel edytor poziomo","splitVertical":"Podziel edytor pionowo","toggleStickyScroll":"Przełącz przewijanie przylepnel"},"file-search":{"toggleIgnoredFiles":" (Naciśnij {0}, aby pokazać/ukryć ignorowane pliki)"},"fileDialog":{"showHidden":"Pokaż ukryte pliki"},"fileSystem":{"fileResource":{"overWriteBody":"Czy chcesz nadpisać zmiany wprowadzone w \\"{0}\\" w systemie plików?"}},"filesystem":{"copiedToClipboard":"Skopiowałem link do pobrania do schowka.","copyDownloadLink":"Kopiuj Link do pobrania","dialog":{"initialLocation":"Przejdź do lokalizacji początkowej","multipleItemMessage":"Można wybrać tylko jeden element","name":"Nazwa:","navigateBack":"Nawiguj wstecz","navigateForward":"Nawiguj do przodu","navigateUp":"Nawiguj w górę jednego katalogu"},"fileResource":{"binaryFileQuery":"Otwarcie go może zająć trochę czasu i może spowodować, że IDE nie będzie reagować. Czy mimo to chcesz otworzyć plik \\"{0}\\"?","binaryTitle":"Plik jest albo binarny, albo używa nieobsługiwanego kodowania tekstowego.","largeFileTitle":"Plik jest zbyt duży ({0}).","overwriteTitle":"Plik \'{0}\' został zmieniony w systemie plików."},"filesExclude":"Konfiguracja wzorców globalnych dla wykluczania plików i folderów. Na przykład, Eksplorator plików decyduje, które pliki i foldery pokazać lub ukryć na podstawie tego ustawienia.","format":"Format:","maxConcurrentUploads":"Maksymalna liczba jednocześnie wysyłanych plików podczas wysyłania wielu plików. 0 oznacza, że wszystkie pliki będą wysyłane jednocześnie.","maxFileSizeMB":"Kontroluje maksymalny rozmiar pliku w MB, który może zostać otwarty.","prepareDownload":"Przygotowanie do pobrania...","prepareDownloadLink":"Przygotowywanie linku do pobrania...","processedOutOf":"Przetworzono {0} z {1}.","replaceTitle":"Wymiana pliku","uploadFiles":"Prześlij pliki...","uploadedOutOf":"Przesłano {0} z {1}."},"getting-started":{"apiComparator":"{0} Zgodność z API","newExtension":"Budowanie nowego rozszerzenia","newPlugin":"Tworzenie nowego pluginu","startup-editor":{"welcomePage":"Otwórz stronę powitalną, zawierającą treści ułatwiające rozpoczęcie korzystania z witryny {0} i rozszerzeń."}},"git":{"aFewSecondsAgo":"kilka sekund temu","addSignedOff":"Dodaj podpisane przez","amendReuseMessag":"Aby ponownie użyć ostatniego komunikatu commit, należy nacisnąć \'Enter\' lub \'Escape\', aby anulować.","amendRewrite":"Ponownie napisać poprzednią wiadomość. Wcisnąć \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","checkoutCreateLocalBranchWithName":"Utworzyć nowy oddział lokalny o nazwie: {0}. Wcisnąć \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","checkoutProvideBranchName":"Proszę podać nazwę oddziału.","checkoutSelectRef":"Wybierz ref do kasy lub utwórz nowy oddział lokalny:","cloneQuickInputLabel":"Proszę podać lokalizację repozytorium Git. Naciśnij \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","cloneRepository":"Sklonuj repozytorium Git: {0}. Naciśnij \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","compareWith":"Porównaj z...","compareWithBranchOrTag":"Wybierz gałąź lub znacznik do porównania z aktualnie aktywną gałęzią {0}:","diff":"Dyferencjał","dirtyDiffLinesLimit":"Nie pokazuj brudnych dekoracji diff, jeśli liczba linii edytora przekracza ten limit.","dropStashMessage":"Skrytka pomyślnie usunięta.","editorDecorationsEnabled":"Pokaż dekoracje git w edytorze.","fetchPickRemote":"Wybierz pilota, z którego chcesz pobrać dane:","gitDecorationsColors":"Użyj dekoracji kolorystycznej w nawigatorze.","mergeQuickPickPlaceholder":"Wybierz gałąź, która ma zostać połączona z aktualnie aktywną gałęzią {0}:","missingUserInfo":"Upewnij się, że skonfigurowałeś swoje \'user.name\' i \'user.email\' w git.","noHistoryForError":"Nie ma dostępnej historii dla {0}","noPreviousCommit":"Brak wcześniejszych zobowiązań do zmiany","noRepositoriesSelected":"Nie wybrano żadnych repozytoriów.","prepositionIn":"w","repositoryNotInitialized":"Repozytorium {0} nie jest jeszcze zainicjalizowane.","stashChanges":"Zmiany w schowku. Wcisnąć \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","stashChangesWithMessage":"Zmiany w pamięci masowej z komunikatem: {0}. Wcisnąć \'Enter\', aby potwierdzić lub \'Escape\', aby anulować.","tabTitleIndex":"{0} (indeks)","tabTitleWorkingTree":"{0} (Drzewo robocze)","toggleBlameAnnotations":"Przełączanie adnotacji o winie"},"keybinding-schema-updater":{"deprecation":"Zamiast tego użyj klauzuli `when`."},"keymaps":{"editKeybindingTitle":"Edytuj przypisanie klawiszy dla {0}","keybindingCollidesValidation":"przypisanie klawiszy aktualnie koliduje","requiredKeybindingValidation":"wymagana jest wartość wiązania klawiszy","resetKeybindingConfirmation":"Czy naprawdę chcesz przywrócić domyślną wartość tego powiązania klawiszy?","resetKeybindingTitle":"Zresetuj przypisanie klawiszy dla {0}.","resetMultipleKeybindingsWarning":"Jeśli dla tego polecenia istnieje wiele przypisań klawiszy, wszystkie zostaną zresetowane."},"localize":{"offlineTooltip":"Nie można połączyć się z backendem."},"markers":{"clearAll":"Wyczyść wszystko","noProblems":"Dotychczas nie wykryto żadnych problemów w przestrzeni roboczej.","tabbarDecorationsEnabled":"Pokaż dekoratory problemów (znaczniki diagnostyczne) na paskach kart."},"memory-inspector":{"addressTooltip":"Miejsce w pamięci do wyświetlenia, adres lub wyrażenie obliczane na adres","ascii":"ASCII","binary":"Binarne","byteSize":"Rozmiar bajtu","bytesPerGroup":"Bajty na grupę","closeSettings":"Zamknij ustawienia","columns":"Kolumny","command":{"createNewMemory":"Tworzenie nowego inspektora pamięci","createNewRegisterView":"Utwórz nowy widok rejestru","followPointer":"Podążaj za wskazówką","followPointerMemory":"Podążaj za wskaźnikiem w inspektorze pamięci","resetValue":"Wartość zerowa","showRegister":"Pokaż rejestr w inspektorze pamięci","viewVariable":"Pokaż zmienną w inspektorze pamięci"},"data":"Dane","decimal":"W systemie dziesiętnym","diff":{"label":"Diff: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bajty do przesunięcia pamięci z {0}"},"editable":{"apply":"Zastosuj zmiany","clear":"Wyraźne zmiany"},"endianness":"Endianness","extraColumn":"Dodatkowa kolumna","groupsPerRow":"Grupy na wiersz","hexadecimal":"Szesnastkowo","length":"Długość","lengthTooltip":"Liczba bajtów do pobrania, w systemie dziesiętnym lub szesnastkowym","memory":{"addressField":{"memoryReadError":"W polu Lokalizacja wpisz adres lub wyrażenie."},"freeze":"Widok zamrożonej pamięci","hideSettings":"Ukryj panel ustawień","readError":{"bounds":"Przekroczone granice pamięci, wynik zostanie obcięty.","noContents":"Obecnie nie jest dostępna zawartość pamięci."},"readLength":{"memoryReadError":"W polu Długość wprowadź długość (liczbę dziesiętną lub szesnastkową)."},"showSettings":"Pokaż panel ustawień","unfreeze":"Odmrażanie widoku pamięci","userError":"Wystąpił błąd w pobieraniu pamięci."},"memoryCategory":"Inspektor pamięci","memoryInspector":"Inspektor pamięci","memoryTitle":"Pamięć","octal":"Octal","offset":"Offset","offsetTooltip":"Przesunięcie, które ma być dodane do bieżącej lokalizacji pamięci, podczas nawigacji","provider":{"localsError":"Nie można odczytać zmiennych lokalnych. Brak aktywnej sesji debugowania.","readError":"Nie można odczytać pamięci. Brak aktywnej sesji debugowania.","writeError":"Nie można zapisać pamięci. Brak aktywnej sesji debugowania."},"register":"Zarejestruj się","register-widget":{"filter-placeholder":"Filtr (zaczyna się od)"},"registerReadError":"Wystąpił błąd w pobieraniu rejestrów.","registers":"Rejestry","toggleComparisonWidgetVisibility":"Przełączanie widoczności widgetu porównania","utils":{"afterBytes":"Musisz załadować pamięć w obu widżetach, które chcesz porównać. {0} nie ma załadowanej pamięci.","bytesMessage":"Musisz załadować pamięć w obu widżetach, które chcesz porównać. {0} nie ma załadowanej pamięci."}},"messages":{"notificationTimeout":"Powiadomienia informacyjne zostaną ukryte po upływie tego czasu.","toggleNotifications":"Przełącz Powiadomienia"},"mini-browser":{"typeUrl":"Wpisz adres URL"},"monaco":{"noSymbolsMatching":"Brak pasujących symboli","typeToSearchForSymbols":"Wpisz, aby wyszukać symbole"},"navigator":{"autoReveal":"Auto ujawnienie","clipboardWarn":"Dostęp do schowka jest zablokowany. Sprawdź uprawnienia przeglądarki.","clipboardWarnFirefox":"Interfejs API schowka nie jest dostępny. Można go włączyć za pomocą opcji \'{0}\' na stronie \'{1}\'. Następnie należy ponownie załadować Theia. Uwaga, pozwoli to FireFox uzyskać pełny dostęp do schowka systemowego.","refresh":"Odśwież w Eksploratorze","reveal":"Ujawnij w Eksploratorze","toggleHiddenFiles":"Przełącz ukryte pliki"},"output":{"clearOutputChannel":"Wyczyść kanał wyjściowy...","closeOutputChannel":"Zamknij kanał wyjściowy...","hiddenChannels":"Ukryte kanały","hideOutputChannel":"Ukryj kanał wyjściowy...","maxChannelHistory":"Maksymalna liczba wpisów w kanale wyjściowym.","outputChannels":"Kanały wyjściowe","showOutputChannel":"Pokaż kanał wyjściowy..."},"plugin":{"blockNewTab":"Twoja przeglądarka uniemożliwiła otwarcie nowej karty"},"plugin-dev":{"alreadyRunning":"Hostowana instancja jest już uruchomiona.","debugInstance":"Instancja debugowania","debugMode":"Używanie inspect lub inspect-brk do debugowania Node.js","devHost":"Gospodarz ds. rozwoju","failed":"Failed to run hosted plugin instance: {0}","hostedPlugin":"Wtyczka hostowana","hostedPluginRunning":"Wtyczka hostowana: Uruchomiony","hostedPluginStarting":"Wtyczka hostowana: Start","hostedPluginStopped":"Wtyczka hostowana: Zatrzymany","hostedPluginWatching":"Wtyczka hostowana: Obserwowanie","instanceTerminated":"{0} zostało zakończone","launchOutFiles":"Tablica wzorców globalnych do lokalizowania wygenerowanych plików JavaScript (`${pluginPath}` zostanie zastąpione przez rzeczywistą ścieżkę do pluginu).","noValidPlugin":"Podany folder nie zawiera poprawnego pluginu.","notRunning":"Hostowana instancja nie jest uruchomiona.","pluginFolder":"Folder pluginów jest ustawiony na: {0}","preventedNewTab":"Twoja przeglądarka uniemożliwiła otwarcie nowej karty","restartInstance":"Zrestartuj instancję","running":"Hosted instance is running at:","select":"Wybierz","selectPath":"Wybierz ścieżkę","startInstance":"Uruchomienie instancji","starting":"Uruchomienie serwera instancji ...","stopInstance":"Zatrzymaj instancję","unknownTerminated":"Instancja została zakończona","watchMode":"Uruchom strażnika na opracowywanym pluginie"},"plugin-ext":{"authentication-main":{"loginTitle":"Login"},"plugins":"Wtyczki","webviewTrace":"Kontroluje śledzenie komunikacji z webviews.","webviewWarnIfUnsecure":"Ostrzega użytkowników, że widoki internetowe są obecnie wdrażane w sposób niezabezpieczony."},"preview":{"openByDefault":"Domyślnie otwiera podgląd zamiast edytora."},"property-view":{"created":"Utworzony","directory":"Katalog","lastModified":"Ostatnio zmodyfikowany","location":"Lokalizacja","noProperties":"Brak dostępnych obiektów.","properties":"Właściwości","size":"Rozmiar","symbolicLink":"Powiązanie symboliczne"},"scm":{"amend":"Zmienić","amendHeadCommit":"Zobowiązanie HEAD","amendLastCommit":"Zmienić ostatnie zobowiązanie","changeRepository":"Zmień Repozytorium...","config.untrackedChanges":"Określa zachowanie się zmian nieśledzonych.","config.untrackedChanges.hidden":"ukryte","config.untrackedChanges.mixed":"mieszane","config.untrackedChanges.separate":"oddzielna strona","history":"Historia","noRepositoryFound":"Nie znaleziono repozytorium","unamend":"Zmienić","unamendCommit":"Niepoprawione zobowiązanie"},"search-in-workspace":{"includeIgnoredFiles":"Dołączanie ignorowanych plików","noFolderSpecified":"Nie otwarto ani nie określono folderu. Aktualnie przeszukiwane są tylko otwarte pliki.","resultSubset":"To jest tylko podzbiór wszystkich wyników. Użyj bardziej szczegółowego terminu wyszukiwania, aby zawęzić listę wyników.","searchOnEditorModification":"Przeszukiwanie aktywnego edytora po modyfikacji."},"secondary-window":{"extract-widget":"Przenieś widok do okna podrzędnego"},"shell-area":{"secondary":"Drugie okno","top":"Top"},"task":{"attachTask":"Dołącz zadanie...","clearHistory":"Czysta historia","noTaskToRun":"Nie znaleziono zadania do uruchomienia. Skonfiguruj zadania...","openUserTasks":"Otwórz zadania użytkownika"},"terminal":{"defaultProfile":"Domyślny profil używany w {0}","enableCopy":"Włącz ctrl-c (cmd-c na macOS), aby skopiować zaznaczony tekst","enablePaste":"Włącz ctrl-v (cmd-v na macOS), aby wkleić z schowka","profileArgs":"Argumenty powłoki, których używa ten profil.","profileColor":"Identyfikator koloru motywu terminala do powiązania z terminalem.","profileDefault":"Wybierz Profil domyślny...","profileIcon":"ID codicon do skojarzenia z ikoną terminala.\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Nowy Terminal (z profilem)...","profilePath":"Ścieżka powłoki, której używa ten profil.","profiles":"Profile, które mają być prezentowane podczas tworzenia nowego terminala. Ustaw właściwość path ręcznie z opcjonalnymi argumentami.\\nUstaw istniejący profil na `null`, aby ukryć profil z listy, na przykład: `\\"{0}\\": null`.","rendererType":"Kontroluje sposób renderowania terminala.","selectProfile":"Wybrać profil dla nowego terminalu","shell.deprecated":"Jest to przestarzałe, nowym zalecanym sposobem konfiguracji domyślnej powłoki jest utworzenie profilu terminala w \'terminal.integrated.profiles.{0}\' i ustawienie jego nazwy jako domyślnej w \'terminal.integrated.defaultProfile.{0}.\'","shellArgsLinux":"Argumenty wiersza poleceń do użycia w terminalu Linuksa.","shellArgsOsx":"Argumenty wiersza poleceń do użycia w terminalu macOS.","shellArgsWindows":"Argumenty wiersza poleceń do użycia w terminalu Windows.","shellLinux":"Ścieżka do powłoki, z której korzysta terminal na Linuksie (domyślnie: \'{0}\'}).","shellOsx":"Ścieżka do powłoki, z której korzysta terminal na macOS (domyślnie: \'{0}\'}).","shellWindows":"Ścieżka do powłoki, której terminal używa na Windows. (domyślnie: \'{0}\')."},"toolbar":{"addCommand":"Dodaj polecenie do paska narzędzi","addCommandPlaceholder":"Znajdź polecenie, które można dodać do paska narzędzi","centerColumn":"Kolumna środkowa","failedUpdate":"Nie udało się zaktualizować wartości \\"{0}\\" w \\"{1}\\".","filterIcons":"Ikony filtrów","iconSelectDialog":"Wybierz ikonę dla \\"{0}\\".","iconSet":"Zestaw ikon","insertGroupLeft":"Wstaw Separator grup (z lewej)","insertGroupRight":"Wstaw Separator grup (prawy)","leftColumn":"Kolumna lewa","openJSON":"Dostosuj pasek narzędzi (Otwórz JSON)","removeCommand":"Usuń polecenie z paska narzędzi","restoreDefaults":"Przywróć domyślne ustawienia paska narzędzi","rightColumn":"Prawa kolumna","selectIcon":"Wybierz ikonę","toggleToolbar":"Przełączanie paska narzędzi","toolbarLocationPlaceholder":"Gdzie chcesz dodać to polecenie?","useDefaultIcon":"Użyj domyślnej ikony"},"typehierarchy":{"subtypeHierarchy":"Hierarchia podtypów","supertypeHierarchy":"Hierarchia nadtypów"},"vsx-registry":{"downloadCount":"Pobierz licz: {0}","errorFetching":"Błąd pobierania rozszerzeń.","failedInstallingVSIX":"Nie udało się zainstalować {0} z VSIX.","invalidVSIX":"Wybrany plik nie jest prawidłowym pluginem \\"*.vsix\\".","license":"Licencja: {0}","recommendedExtensions":"Lista nazw rozszerzeń zalecanych do użycia w tym obszarze roboczym.","searchPlaceholder":"Wyszukaj rozszerzenia w {0}.","showInstalled":"Pokaż zainstalowane rozszerzenia","showRecommendedExtensions":"Określa, czy dla zaleceń dotyczących rozszerzeń mają być wyświetlane powiadomienia.","vsx-extensions-contribution":{"update-version-uninstall-error":"Błąd podczas usuwania rozszerzenia: {0}.","update-version-version-error":"Nie udało się zainstalować wersji {0} z {1}."}},"webview":{"goToReadme":"Przejdź do pliku README","messageWarning":"            Wzorzec hosta punktu końcowego {0} został zmieniony na `{1}`; zmiana wzorca może prowadzić do luk w zabezpieczeniach.             Zobacz `{2}` aby uzyskać więcej informacji."},"workspace":{"compareWithEachOther":"Porównaj z innymi","confirmDeletePermanently.description":"Nie udało się usunąć \\"{0}\\" za pomocą Kosza. Czy chcesz usunąć go na stałe?","confirmDeletePermanently.solution":"Możesz wyłączyć korzystanie z Kosza w preferencjach.","confirmDeletePermanently.title":"Błąd przy usuwaniu pliku","confirmMessage.delete":"Czy naprawdę chcesz usunąć następujące pliki?","confirmMessage.dirtyMultiple":"Czy naprawdę chcesz usunąć {0} plików z niezapisanymi zmianami?","confirmMessage.dirtySingle":"Czy naprawdę chcesz usunąć {0} z niezapisanymi zmianami?","confirmMessage.uriMultiple":"Czy naprawdę chcesz usunąć wszystkie {0} zaznaczone pliki?","confirmMessage.uriSingle":"Czy naprawdę chcesz usunąć {0}?","duplicate":"Duplikat","failApply":"Nie można zastosować zmian do nowego pliku","failSaveAs":"Nie można uruchomić \\"{0}\\" dla bieżącego widżetu.","newFilePlaceholder":"Nazwa pliku","newFolderPlaceholder":"Nazwa folderu","noErasure":"Uwaga: Nic nie zostanie usunięte z dysku.","openRecentPlaceholder":"Wpisz nazwę obszaru roboczego, który chcesz otworzyć","openRecentWorkspace":"Otwórz ostatni obszar roboczy...","preserveWindow":"Umożliwia otwieranie obszarów roboczych w bieżącym oknie.","removeFolder":"Czy na pewno chcesz usunąć poniższy folder z obszaru roboczego?","removeFolders":"Czy na pewno chcesz usunąć następujące foldery z obszaru roboczego?","trashTitle":"Przenieś {0} do kosza","trustEmptyWindow":"Określa, czy pusty obszar roboczy jest domyślnie zaufany, czy nie.","trustEnabled":"Określa, czy zaufanie do obszaru roboczego jest włączone, czy nie. Jeśli wyłączone, wszystkie obszary robocze są zaufane.","trustRequest":"Rozszerzenie prosi o zaufanie do przestrzeni roboczej, ale odpowiednie API nie jest jeszcze w pełni obsługiwane. Czy chcesz zaufać temu obszarowi roboczemu?","untitled-cleanup":"Wygląda na to, że jest wiele plików obszaru roboczego bez tytułu. Proszę sprawdzić {0} i usunąć wszystkie nieużywane pliki.","workspaceFolderAdded":"Utworzono przestrzeń roboczą z wieloma korzeniami. Czy chcesz zapisać konfigurację obszaru roboczego jako plik?","workspaceFolderAddedTitle":"Folder dodany do obszaru roboczego"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.pt-br.json":
/*!***********************************************!*\
  !*** ../../packages/core/i18n/nls.pt-br.json ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Editar condição...","terminal:new:profile":"Criar um novo terminal integrado a partir de um perfil","terminal:profile:default":"Escolha o Perfil do Terminal padrão","theia":{"callhierarchy":{"noCallers":"Nenhum chamador foi detectado.","open":"Hierarquia de Chamadas Abertas"},"core":{"about":{"compatibility":"{0} Compatibilidade","defaultApi":"Padrão {0} API","version":"Versão"},"common":{"closeAll":"Fechar todas as abas","closeAllTabMain":"Fechar todas as abas na área principal","closeOtherTabMain":"Fechar outras guias na área principal","closeOthers":"Fechar outras abas","closeRight":"Fechar abas para a direita","closeTab":"Fechar a aba","closeTabMain":"Aba fechar na área principal","collapseAllTabs":"Colapso de todos os painéis laterais","collapseBottomPanel":"Alternar o painel inferior","collapseTab":"Painel lateral de colapso","showNextTabGroup":"Mudar para o grupo Next Tab","showNextTabInGroup":"Mudar para a próxima guia no grupo","showPreviousTabGroup":"Mudar para o grupo Previous Tab","showPreviousTabInGroup":"Mudar para a guia Anterior em Grupo","toggleMaximized":"Alternar ao máximo"},"enhancedPreview":{"classic":"Exibir uma visualização simples da guia com informações básicas.","enhanced":"Exibir uma visualização aprimorada da guia com informações adicionais.","visual":"Exibe uma prévia visual da guia."},"file":{"browse":"Navegue"},"highlightModifiedTabs":"Controla se uma borda superior é desenhada ou não nas abas do editor modificadas (sujas).","keybindingStatus":"{0} foi pressionado, esperando por mais teclas","keyboard":{"choose":"Escolha o Layout do Teclado","chooseLayout":"Escolha um layout de teclado","current":"(atual: {0})","currentLayout":" - layout atual","mac":"Teclados Mac","pc":"Teclados de PC","tryDetect":"Tente detectar o layout do teclado a partir das informações do navegador e pressione as teclas."},"navigator":{"clipboardWarn":"O acesso à área de transferência foi negado. Verifique a permissão de seu navegador.","clipboardWarnFirefox":"A API da área de transferência não está disponível. Ela pode ser ativada pela preferência \'{0}\' na página \'{1}\'. Em seguida, recarregue o Theia. Observe que isso permitirá que o FireFox obtenha acesso total à área de transferência do sistema."},"offline":"Offline","quitMessage":"Quaisquer mudanças não salvas não serão salvas.","resetWorkbenchLayout":"Restabelecer o layout do Workbench","searchbox":{"close":"Fechado (Escape)","next":"Próximo (Abaixo)","previous":"Anterior (Para cima)"},"silentNotifications":"Controla se devem ser suprimidas as popups de notificação.","tabDefaultSize":"Especifica o tamanho padrão das guias.","tabMaximize":"Controla se é necessário maximizar as abas com duplo clique.","tabMinimumSize":"Especifica o tamanho mínimo das guias.","tabShrinkToFit":"Reduzir as guias para que se ajustem ao espaço disponível."},"debug":{"addConfigurationPlaceholder":"Selecione a raiz do espaço de trabalho para adicionar configuração a","compound-cycle":"A configuração de lançamento \'{0}\' contém um ciclo consigo mesmo","continueAll":"Continuar Todos","copyExpressionValue":"Valor de Expressão de Cópia","debugVariableInput":"Conjunto {0} Valor","instruction-breakpoint":"Ponto de Interrupção da Instrução","missingConfiguration":"A configuração dinâmica \'{0}:{1}\' está ausente ou não é aplicável","pauseAll":"Pausa Todos","reveal":"Revelar","threads":"Tópicos","toggleTracing":"Habilitar/desabilitar as comunicações de rastreamento com adaptadores de depuração"},"editor":{"dirtyEncoding":"O arquivo está sujo. Por favor, salve-o primeiro antes de reabri-lo com outra codificação.","editor.codeActionWidget.showHeaders":"Habilitar/desabilitar mostrar os cabeçalhos de grupo no menu de ação de código.","editor.experimental.pasteActions.enabled":"Ativar/desativar a execução de edições de extensões ao colar.","editor.formatOnSaveMode.modificationsIfAvailable":"Tentará formatar modificações apenas (requer controle de fonte). Se o controle da fonte não puder ser usado, então o arquivo inteiro será formatado.","editor.inlayHints.enabled1":"Dicas de Inlay estão mostrando por padrão e se escondem ao segurar `Ctrl+Alt`.","editor.inlayHints.enabled2":"Dicas de Inlay são ocultadas por padrão e mostram quando se segura `Ctrl+Alt`.","editor.quickSuggestions":"Controla se as sugestões devem aparecer automaticamente durante a digitação. Isto pode ser controlado para digitação de comentários, strings, e outros códigos. A sugestão rápida pode ser configurada para aparecer como texto fantasma ou com o widget de sugestão. Esteja ciente também do \'#editor.suggestOnTriggerCharacters#\'-setting que controla se as sugestões são acionadas por caracteres especiais.","editor.suggest.matchOnWordStartOnly":"Quando ativada, a filtragem IntelliSense requer que o primeiro caractere corresponda em um início de palavra, por exemplo `c` em `Console` ou `Contexto Web` mas _não_ em `descrição`. Quando desabilitado, o IntelliSense mostrará mais resultados, mas ainda assim os classifica pela qualidade da correspondência.","files.autoSave":"Controles [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) de editores que não salvaram mudanças.","files.autoSave.afterDelay":"Um editor com mudanças é automaticamente salvo após o `#files.autoSaveDelay#` configurado.","files.autoSave.off":"Um editor com mudanças nunca é salvo automaticamente.","files.autoSave.onFocusChange":"Um editor com mudanças é automaticamente salvo quando o editor perde o foco.","files.autoSave.onWindowChange":"Um editor com mudanças é automaticamente salvo quando a janela perde o foco.","formatOnSaveTimeout":"Timeout em milissegundos, após o qual a formatação que é executada em arquivo salvo é cancelada.","persistClosedEditors":"Controla se deve persistir o histórico do editor fechado para o espaço de trabalho através de recargas de janela.","showAllEditors":"Mostrar todos os editores abertos","splitHorizontal":"Editor dividido Horizontal","splitVertical":"Split Editor Vertical","toggleStickyScroll":"Alternar Rolagem Autoadesiva"},"file-search":{"toggleIgnoredFiles":" (Pressione {0} para mostrar/ocultar arquivos ignorados)"},"fileDialog":{"showHidden":"Mostrar arquivos ocultos"},"fileSystem":{"fileResource":{"overWriteBody":"Você quer sobrescrever as mudanças feitas no \'{0}\' no sistema de arquivo?"}},"filesystem":{"copiedToClipboard":"Copiou o link de download para a área de transferência.","copyDownloadLink":"Link para download de cópias","dialog":{"initialLocation":"Ir para o local inicial","multipleItemMessage":"Você pode selecionar apenas um item","name":"Nome:","navigateBack":"Navegar para trás","navigateForward":"Navegar em frente","navigateUp":"Navegar para cima de um diretório"},"fileResource":{"binaryFileQuery":"A sua abertura pode levar algum tempo e pode tornar a IDE insensível. Você quer abrir \'{0}\' de qualquer maneira?","binaryTitle":"O arquivo ou é binário ou usa uma codificação de texto não suportada.","largeFileTitle":"O arquivo é muito grande ({0}).","overwriteTitle":"O arquivo \'{0}\' foi alterado no sistema de arquivo."},"filesExclude":"Configurar padrões globais para excluir arquivos e pastas. Por exemplo, o explorador de arquivos decide quais arquivos e pastas mostrar ou ocultar com base nesta configuração.","format":"Formato:","maxConcurrentUploads":"Número máximo de arquivos simultâneos a serem carregados ao fazer upload de vários arquivos. 0 significa que todos os arquivos serão carregados ao mesmo tempo.","maxFileSizeMB":"Controla o tamanho máximo de arquivo em MB que é possível abrir.","prepareDownload":"Preparando o download...","prepareDownloadLink":"Preparando o link para download...","processedOutOf":"Processado {0} de {1}","replaceTitle":"Substituir arquivo","uploadFiles":"Carregar arquivos...","uploadedOutOf":"Carregado {0} de {1}"},"getting-started":{"apiComparator":"{0} Compatibilidade API","newExtension":"Construindo uma nova extensão","newPlugin":"Construindo um Novo Plugin","startup-editor":{"welcomePage":"Abra a página de boas-vindas, com conteúdo para ajudar a começar a usar o {0} e as extensões."}},"git":{"aFewSecondsAgo":"alguns segundos atrás","addSignedOff":"Adicionar Signed-off-by","amendReuseMessag":"Para reutilizar a última mensagem de compromisso, pressione \'Enter\' ou \'Escape\' para cancelar.","amendRewrite":"Reescrever mensagem de compromisso anterior. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","checkoutCreateLocalBranchWithName":"Criar uma nova filial local com o nome: {0}. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","checkoutProvideBranchName":"Por favor, forneça um nome de filial.","checkoutSelectRef":"Selecione um árbitro para fazer o checkout ou crie uma nova filial local:","cloneQuickInputLabel":"Favor fornecer um local de repositório Git. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","cloneRepository":"Clonar o repositório Git: {0}. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","compareWith":"Comparar com...","compareWithBranchOrTag":"Escolha uma filial ou etiqueta para comparar com a filial atualmente ativa {0}:","diff":"Diff","dirtyDiffLinesLimit":"Não mostrar decorações difusas sujas, se a contagem de linhas do editor exceder este limite.","dropStashMessage":"Armazenamento removido com sucesso.","editorDecorationsEnabled":"Mostrar decorações de git no editor.","fetchPickRemote":"Escolha um controle remoto para ir buscar:","gitDecorationsColors":"Use a decoração colorida no navegador.","mergeQuickPickPlaceholder":"Escolha uma filial para fundir-se na filial atualmente ativa {0}:","missingUserInfo":"Certifique-se de configurar seu \'user.name\' e \'user.email\' em \'git\'.","noHistoryForError":"Não há histórico disponível para {0}","noPreviousCommit":"Nenhum compromisso anterior de emendar","noRepositoriesSelected":"Não foram selecionados repositórios.","prepositionIn":"em","repositoryNotInitialized":"O Repositório {0} ainda não foi inicializado.","stashChanges":"Mudanças de estoque. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","stashChangesWithMessage":"Mudanças de estoque com mensagem: {0}. Pressione \'Enter\' para confirmar ou \'Escape\' para cancelar.","tabTitleIndex":"{0} (índice)","tabTitleWorkingTree":"{0} (Árvore de trabalho)","toggleBlameAnnotations":"Troca de anotações de culpa"},"keybinding-schema-updater":{"deprecation":"Utilize a cláusula `when` em seu lugar."},"keymaps":{"editKeybindingTitle":"Editar Keybinding para {0}","keybindingCollidesValidation":"a chave de encadernação colide atualmente","requiredKeybindingValidation":"valor vinculante é necessário","resetKeybindingConfirmation":"Você realmente quer redefinir esta ligação de chave para seu valor padrão?","resetKeybindingTitle":"Redefinir a encadernação para {0}","resetMultipleKeybindingsWarning":"Se existirem múltiplas ligações de teclas para este comando, todas elas serão reiniciadas."},"localize":{"offlineTooltip":"Não pode ser conectado ao backend."},"markers":{"clearAll":"Limpar tudo","noProblems":"Até agora não foram detectados problemas no espaço de trabalho.","tabbarDecorationsEnabled":"Mostrar os decoradores de problemas (marcadores de diagnóstico) nas barras de tabulação."},"memory-inspector":{"addressTooltip":"Localização da memória a exibir, um endereço ou expressão avaliando para um endereço","ascii":"ASCII","binary":"Binário","byteSize":"Tamanho do byte","bytesPerGroup":"Bytes Por Grupo","closeSettings":"Fechar configurações","columns":"Colunas","command":{"createNewMemory":"Criar um novo inspetor de memória","createNewRegisterView":"Criar nova visão de registro","followPointer":"Siga o Ponteiro","followPointerMemory":"Siga o Pointer in Memory Inspector","resetValue":"Valor de reinicialização","showRegister":"Mostrar Registro no Inspetor de Memória","viewVariable":"Mostrar Variable in Memory Inspector"},"data":"Dados","decimal":"Decimal","diff":{"label":"Dif: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bytes para compensar a memória de {0}"},"editable":{"apply":"Aplicar alterações","clear":"Mudanças claras"},"endianness":"Endianness","extraColumn":"Coluna Extra","groupsPerRow":"Grupos por fila","hexadecimal":"Hexadecimal","length":"Comprimento","lengthTooltip":"Número de bytes a serem buscados, em decimal ou hexadecimal","memory":{"addressField":{"memoryReadError":"Digite um endereço ou expressão no campo Localização."},"freeze":"Vista de memória congelada","hideSettings":"Ocultar Painel de Ajustes","readError":{"bounds":"Os limites de memória excedidos, o resultado será truncado.","noContents":"Nenhum conteúdo de memória disponível atualmente."},"readLength":{"memoryReadError":"Digite um comprimento (número decimal ou hexadecimal) no campo Comprimento."},"showSettings":"Mostrar Painel de Ajustes","unfreeze":"Vista da memória do descongelamento","userError":"Houve um erro na memória de busca."},"memoryCategory":"Inspetor de memória","memoryInspector":"Inspetor de memória","memoryTitle":"Memória","octal":"Octal","offset":"Offset","offsetTooltip":"Offset a ser adicionado ao local atual da memória, durante a navegação","provider":{"localsError":"Não é possível ler as variáveis locais. Não há sessão de depuração ativa.","readError":"Não é possível ler a memória. Não há sessão de depuração ativa.","writeError":"Não é possível escrever memória. Não há sessão de depuração ativa."},"register":"Registre-se","register-widget":{"filter-placeholder":"Filtro (começa com)"},"registerReadError":"Havia um registro de busca de erros.","registers":"Registros","toggleComparisonWidgetVisibility":"Visibilidade do widget de comparação de alternância","utils":{"afterBytes":"Você deve carregar memória em ambos os widgets que gostaria de comparar. {0} não tem memória carregada.","bytesMessage":"Você deve carregar memória em ambos os widgets que gostaria de comparar. {0} não tem memória carregada."}},"messages":{"notificationTimeout":"Notificações informativas serão ocultadas após este tempo limite.","toggleNotifications":"Notificações de alternância"},"mini-browser":{"typeUrl":"Digite uma URL"},"monaco":{"noSymbolsMatching":"Sem símbolos correspondentes","typeToSearchForSymbols":"Digite para procurar por símbolos"},"navigator":{"autoReveal":"Auto Revelação","clipboardWarn":"O acesso à área de transferência foi negado. Verifique a permissão de seu navegador.","clipboardWarnFirefox":"A API da área de transferência não está disponível. Ela pode ser ativada pela preferência \'{0}\' na página \'{1}\'. Em seguida, recarregue o Theia. Observe que isso permitirá que o FireFox obtenha acesso total à área de transferência do sistema.","refresh":"Refrescar no Explorer","reveal":"Revelar no Explorer","toggleHiddenFiles":"Alternar arquivos ocultos"},"output":{"clearOutputChannel":"Canal de saída livre...","closeOutputChannel":"Fechar canal de saída...","hiddenChannels":"Canais ocultos","hideOutputChannel":"Esconder canal de saída...","maxChannelHistory":"O número máximo de entradas em um canal de saída.","outputChannels":"Canais de saída","showOutputChannel":"Mostrar canal de saída..."},"plugin":{"blockNewTab":"Seu navegador impediu a abertura de uma nova aba"},"plugin-dev":{"alreadyRunning":"A instância anfitriã já está funcionando.","debugInstance":"Instância de depuração","debugMode":"Usando a inspeção ou a inspeção-brk para o Node.js debug","devHost":"Anfitrião do desenvolvimento","failed":"Falha na execução da instância de plugin hospedado: {0}","hostedPlugin":"Plugin hospedado","hostedPluginRunning":"Plugin hospedado: Funcionamento","hostedPluginStarting":"Plugin hospedado: Início","hostedPluginStopped":"Plugin hospedado: Parado","hostedPluginWatching":"Plugin hospedado: Observando","instanceTerminated":"{0} foi encerrado","launchOutFiles":"O conjunto de padrões globais para localização de arquivos JavaScript gerados (`${pluginPath}` será substituído pelo caminho real do plugin).","noValidPlugin":"A pasta especificada não contém um plugin válido.","notRunning":"A instância hospedada não está funcionando.","pluginFolder":"A pasta de plugins está definida para: {0}","preventedNewTab":"Seu navegador impediu a abertura de uma nova aba","restartInstance":"Reinício da instância","running":"A instância anfitriã está funcionando em:","select":"Selecione","selectPath":"Selecione o caminho","startInstance":"Instância inicial","starting":"Iniciando o servidor de instância hospedado ...","stopInstance":"Parada de instância","unknownTerminated":"A instância foi encerrada","watchMode":"Executar o watcher no plugin em desenvolvimento"},"plugin-ext":{"authentication-main":{"loginTitle":"Login"},"plugins":"Plugins","webviewTrace":"Controla o rastreamento da comunicação com visualizações na web.","webviewWarnIfUnsecure":"Adverte os usuários de que as visualizações na web são atualmente implantadas de forma insegura."},"preview":{"openByDefault":"Abrir a visualização em vez do editor por padrão."},"property-view":{"created":"Criado em","directory":"Diretório","lastModified":"Última modificação","location":"Localização","noProperties":"Não há propriedades disponíveis.","properties":"Imóveis","size":"Tamanho","symbolicLink":"Elo simbólico"},"scm":{"amend":"Emenda","amendHeadCommit":"Compromisso HEAD","amendLastCommit":"Emendar o último compromisso","changeRepository":"Repositório de Mudanças...","config.untrackedChanges":"Controla como se comportam as mudanças não controladas.","config.untrackedChanges.hidden":"oculto","config.untrackedChanges.mixed":"misto","config.untrackedChanges.separate":"separado","history":"História","noRepositoryFound":"Não foi encontrado nenhum repositório","unamend":"Unamend","unamendCommit":"Compromisso sem alterações"},"search-in-workspace":{"includeIgnoredFiles":"Incluir Arquivos Ignorados","noFolderSpecified":"Você não abriu ou especificou uma pasta. Somente os arquivos abertos são pesquisados no momento.","resultSubset":"Este é apenas um subconjunto de todos os resultados. Use um termo de busca mais específico para restringir a lista de resultados.","searchOnEditorModification":"Pesquise o editor ativo quando modificado."},"secondary-window":{"extract-widget":"Mover vista para a janela secundária"},"shell-area":{"secondary":"Janela Secundária","top":"Topo"},"task":{"attachTask":"Anexar Tarefa...","clearHistory":"Histórico claro","noTaskToRun":"Nenhuma tarefa a ser executada foi encontrada. Configurar tarefas...","openUserTasks":"Tarefas abertas para o usuário"},"terminal":{"defaultProfile":"O perfil padrão usado em {0}","enableCopy":"Habilitar ctrl-c (cmd-c em macOS) para copiar o texto selecionado","enablePaste":"Habilitar ctrl-v (cmd-v em macOS) para colar a partir da prancheta","profileArgs":"Os argumentos de concha que este perfil utiliza.","profileColor":"Uma identificação por cor do tema do terminal para associar com o terminal.","profileDefault":"Escolha o Perfil Padrão...","profileIcon":"Um codicon ID para associar com o ícone do terminal.\\nterminal-tmux: \\"$(terminal-tmux)\\".","profileNew":"Novo Terminal (Com Perfil)...","profilePath":"O caminho da casca que este perfil utiliza.","profiles":"Os perfis a serem apresentados ao criar um novo terminal. Definir a propriedade do caminho manualmente com args opcionais.\\nDefinir um perfil existente para \'nulo\' para ocultar o perfil da lista, por exemplo: `\\"{0}\\": nulo\'.","rendererType":"Controla como o terminal é renderizado.","selectProfile":"Selecione um perfil para o novo terminal","shell.deprecated":"Isto é depreciado, a nova forma recomendada para configurar sua shell padrão é criando um perfil de terminal em \'terminal.integrated.profiles.{0}\' e definindo seu nome de perfil como o padrão em \'terminal.integrated.defaultProfile\'.{0}.","shellArgsLinux":"Os argumentos de linha de comando a serem usados quando no terminal Linux.","shellArgsOsx":"Os argumentos de linha de comando a serem usados quando no terminal macOS.","shellArgsWindows":"Os argumentos de linha de comando a serem usados quando no terminal Windows.","shellLinux":"O caminho do shell que o terminal usa no Linux (padrão: \'{0}\'}).","shellOsx":"O caminho da concha que o terminal usa em macOS (padrão: \'{0}\'}).","shellWindows":"O caminho da concha que o terminal utiliza no Windows. (padrão: \'{0}\')."},"toolbar":{"addCommand":"Adicionar Comando à Barra de Ferramentas","addCommandPlaceholder":"Encontre um comando para adicionar à barra de ferramentas","centerColumn":"Coluna Central","failedUpdate":"Falha em atualizar o valor de \'{0}\' em \'{1}\'.","filterIcons":"Ícones de filtro","iconSelectDialog":"Selecione um Ícone para \'{0}\'.","iconSet":"Conjunto de Ícones","insertGroupLeft":"Inserir separador de grupo (Esquerda)","insertGroupRight":"Inserir separador de grupo (à direita)","leftColumn":"Coluna da esquerda","openJSON":"Personalizar barra de ferramentas (Open JSON)","removeCommand":"Remover Comando da Barra de Ferramentas","restoreDefaults":"Restaurar os padrões da barra de ferramentas","rightColumn":"Coluna da direita","selectIcon":"Selecione Ícone","toggleToolbar":"Barra de ferramentas Toggle","toolbarLocationPlaceholder":"Onde você gostaria que o comando fosse adicionado?","useDefaultIcon":"Use o Ícone Default"},"typehierarchy":{"subtypeHierarchy":"Subtipo Hierarquia","supertypeHierarchy":"Supertipo Hierarquia"},"vsx-registry":{"downloadCount":"Contagem de downloads: {0}","errorFetching":"Extensões de erro de busca.","failedInstallingVSIX":"Falha na instalação {0} da VSIX.","invalidVSIX":"O arquivo selecionado não é um plugin \\"*.vsix\\" válido.","license":"Licença: {0}","recommendedExtensions":"Uma lista dos nomes das extensões recomendadas para uso neste espaço de trabalho.","searchPlaceholder":"Pesquisar extensões em {0}","showInstalled":"Mostrar extensões instaladas","showRecommendedExtensions":"Controla se as notificações são mostradas para recomendações de extensão.","vsx-extensions-contribution":{"update-version-uninstall-error":"Erro ao remover a extensão: {0}.","update-version-version-error":"Falha na instalação da versão {0} de {1}."}},"webview":{"goToReadme":"Ir para o LEIAME","messageWarning":"            O padrão de host do terminal {0} foi alterado para `{1}\'; mudar o padrão pode levar a vulnerabilidades de segurança.             Veja `{2}` para mais informações."},"workspace":{"compareWithEachOther":"Compare uns com os outros","confirmDeletePermanently.description":"Falha em excluir \\"{0}\\" usando o Lixo. Você quer excluir permanentemente em seu lugar?","confirmDeletePermanently.solution":"Você pode desativar o uso de Lixo nas preferências.","confirmDeletePermanently.title":"Erro ao apagar o arquivo","confirmMessage.delete":"Você realmente quer apagar os seguintes arquivos?","confirmMessage.dirtyMultiple":"Você realmente quer excluir {0} arquivos com alterações não salvas?","confirmMessage.dirtySingle":"Você realmente quer apagar {0} com as mudanças não salvas?","confirmMessage.uriMultiple":"Você realmente quer apagar todos os {0} arquivos selecionados?","confirmMessage.uriSingle":"Você realmente quer apagar {0}?","duplicate":"Duplicata","failApply":"Não foi possível aplicar alterações ao novo arquivo","failSaveAs":"Não é possível executar \\"{0}\\" para o widget atual.","newFilePlaceholder":"Nome do arquivo","newFolderPlaceholder":"Nome da pasta","noErasure":"Nota: Nada será apagado do disco","openRecentPlaceholder":"Digite o nome do espaço de trabalho que você deseja abrir","openRecentWorkspace":"Espaço de Trabalho Recente Aberto...","preserveWindow":"Permitir a abertura de espaços de trabalho na janela atual.","removeFolder":"Você tem certeza de que deseja remover a seguinte pasta do espaço de trabalho?","removeFolders":"Você tem certeza de que quer remover as seguintes pastas do espaço de trabalho?","trashTitle":"Mudar {0} para Lixo","trustEmptyWindow":"Controla se o espaço de trabalho vazio é ou não confiável por padrão.","trustEnabled":"Controla se a confiança no espaço de trabalho está ou não habilitada. Se desativado, todos os espaços de trabalho são confiáveis.","trustRequest":"Uma extensão solicita confiança no espaço de trabalho, mas a API correspondente ainda não é totalmente suportada. Você quer confiar neste espaço de trabalho?","untitled-cleanup":"Parece haver muitos arquivos de espaço de trabalho sem título. Por favor, verifique {0} e remova quaisquer arquivos não utilizados.","workspaceFolderAdded":"Foi criado um espaço de trabalho com múltiplas raízes. Você quer salvar sua configuração de espaço de trabalho como um arquivo?","workspaceFolderAddedTitle":"Pasta adicionada ao espaço de trabalho"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.pt-pt.json":
/*!***********************************************!*\
  !*** ../../packages/core/i18n/nls.pt-pt.json ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Editar condição...","terminal:new:profile":"Criar Novo Terminal Integrado a partir de um Perfil","terminal:profile:default":"Escolha o Perfil Terminal padrão","theia":{"callhierarchy":{"noCallers":"Não foram detectadas pessoas que tenham telefonado.","open":"Hierarquia de Chamadas Abertas"},"core":{"about":{"compatibility":"{0} Compatibilidade","defaultApi":"Padrão {0} API","version":"Versão"},"common":{"closeAll":"Fechar todos os separadores","closeAllTabMain":"Fechar todos os separadores na área principal","closeOtherTabMain":"Fechar outros separadores na área principal","closeOthers":"Fechar outros separadores","closeRight":"Fechar abas para a direita","closeTab":"Aba fechar","closeTabMain":"Fechar separador na área principal","collapseAllTabs":"Colapso de todos os painéis laterais","collapseBottomPanel":"Alternar Painel Inferior","collapseTab":"Painel lateral de colapso","showNextTabGroup":"Mudar para Grupo de Separador Seguinte","showNextTabInGroup":"Mudar para o separador seguinte no grupo","showPreviousTabGroup":"Mudar para Grupo de Separador Anterior","showPreviousTabInGroup":"Mudar para o separador Anterior em Grupo","toggleMaximized":"Alternar Maximizado"},"enhancedPreview":{"classic":"Apresenta uma pré-visualização simples do separador com informações básicas.","enhanced":"Apresentar uma pré-visualização melhorada do separador com informações adicionais.","visual":"Apresenta uma pré-visualização visual do separador."},"file":{"browse":"Navegar"},"highlightModifiedTabs":"Controla se uma borda superior é desenhada ou não em abas de editor modificadas (sujas).","keybindingStatus":"{0} foi premido, à espera de mais teclas","keyboard":{"choose":"Escolha o Layout do Teclado","chooseLayout":"Escolha um layout de teclado","current":"(actual: {0})","currentLayout":" - layout actual","mac":"Teclados Mac","pc":"Teclados de PC","tryDetect":"Tente detectar a disposição do teclado a partir da informação do browser e prima as teclas."},"navigator":{"clipboardWarn":"O acesso à área de transferência foi negado. Verifique a permissão do seu browser.","clipboardWarnFirefox":"A API da área de transferência não está disponível. Pode ser activada através da preferência \'{0}\' na página \'{1}\'. Em seguida, recarregue o Theia. Note que isso permitirá ao FireFox obter acesso total à área de transferência do sistema."},"offline":"Offline","quitMessage":"Quaisquer alterações não guardadas não serão salvas.","resetWorkbenchLayout":"Repor o layout da bancada de trabalho","searchbox":{"close":"Fechar (Escape)","next":"Próximo (Para baixo)","previous":"Anterior (Para cima)"},"silentNotifications":"Controla se deve suprimir popups de notificação.","tabDefaultSize":"Especifica o tamanho predefinido dos separadores.","tabMaximize":"Controla se pretende maximizar os separadores com um duplo clique.","tabMinimumSize":"Especifica o tamanho mínimo dos separadores.","tabShrinkToFit":"Encolher os separadores de acordo com o espaço disponível."},"debug":{"addConfigurationPlaceholder":"Seleccione a raiz do espaço de trabalho para adicionar configuração a","compound-cycle":"Configuração de lançamento \'{0}\' contém um ciclo consigo mesmo","continueAll":"Continuar Tudo","copyExpressionValue":"Valor de Expressão da Cópia","debugVariableInput":"Conjunto {0} Valor","instruction-breakpoint":"Ponto de Interrupção da Instrução","missingConfiguration":"Configuração dinâmica \'{0}:{1}\' está em falta ou não é aplicável","pauseAll":"Pausa Todos","reveal":"Revelar","threads":"Tópicos","toggleTracing":"Activar/desactivar as comunicações de rastreio com adaptadores de depuração"},"editor":{"dirtyEncoding":"O ficheiro está sujo. Por favor guardá-lo primeiro antes de o reabrir com outra codificação.","editor.codeActionWidget.showHeaders":"Activar/desactivar mostrar os cabeçalhos de grupo no menu de acção de código.","editor.experimental.pasteActions.enabled":"Ativar/desativar a execução de edições de extensões ao colar.","editor.formatOnSaveMode.modificationsIfAvailable":"Tentará apenas formatar modificações (requer controlo da fonte). Se o controlo da fonte não puder ser utilizado, então o ficheiro inteiro será formatado.","editor.inlayHints.enabled1":"Dicas de Inlay estão a mostrar por defeito e escondem-se quando se segura \\"Ctrl+Alt\\".","editor.inlayHints.enabled2":"Dicas de Inlay são ocultadas por defeito e mostram quando se mantém \'Ctrl+Alt\'.","editor.quickSuggestions":"Controla se as sugestões devem aparecer automaticamente durante a dactilografia. Isto pode ser controlado para digitação de comentários, strings, e outros códigos. A sugestão rápida pode ser configurada para aparecer como texto fantasma ou com o widget de sugestão. Esteja também ciente do \'#editor.suggestOnTriggerCharacters#\'-setting que controla se as sugestões são accionadas por caracteres especiais.","editor.suggest.matchOnWordStartOnly":"Quando activada, a filtragem IntelliSense requer que o primeiro caractere corresponda num início de palavra, por exemplo `c` em `Console` ou `Contexto Web` mas _não_ em `descrição`. Quando desactivado, o IntelliSense mostrará mais resultados, mas ainda os classifica pela qualidade da correspondência.","files.autoSave":"Controla [auto guardar](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) de editores que tenham alterações não guardadas.","files.autoSave.afterDelay":"Um editor com alterações é automaticamente guardado após a configuração `#files.autoSaveDelay#``.","files.autoSave.off":"Um editor com alterações nunca é automaticamente guardado.","files.autoSave.onFocusChange":"Um editor com alterações é automaticamente guardado quando o editor perde o foco.","files.autoSave.onWindowChange":"Um editor com alterações é automaticamente guardado quando a janela perde o foco.","formatOnSaveTimeout":"Timeout em milissegundos após o qual a formatação que é executada em ficheiro guardado é cancelada.","persistClosedEditors":"Controla se deve persistir o histórico do editor fechado para o espaço de trabalho através de recargas de janela.","showAllEditors":"Mostrar todos os editores abertos","splitHorizontal":"Editor dividido Horizontal","splitVertical":"Split Editor Vertical","toggleStickyScroll":"Manípulo de rotação"},"file-search":{"toggleIgnoredFiles":" (Prima {0} para mostrar/ocultar ficheiros ignorados)"},"fileDialog":{"showHidden":"Mostrar ficheiros ocultos"},"fileSystem":{"fileResource":{"overWriteBody":"Quer sobrescrever as alterações feitas a \'{0}\' no sistema de ficheiros?"}},"filesystem":{"copiedToClipboard":"Copiou a ligação de transferência para a área de transferência.","copyDownloadLink":"Link para download de cópias","dialog":{"initialLocation":"Ir para o local inicial","multipleItemMessage":"Pode seleccionar apenas um item","name":"Nome:","navigateBack":"Navegar para trás","navigateForward":"Navegar para a frente","navigateUp":"Navegar para cima de um directório"},"fileResource":{"binaryFileQuery":"A sua abertura pode demorar algum tempo e pode tornar a IDE pouco reactiva. Quer abrir \'{0}\' de qualquer forma?","binaryTitle":"O ficheiro ou é binário ou utiliza uma codificação de texto não suportada.","largeFileTitle":"O ficheiro é demasiado grande ({0}).","overwriteTitle":"O ficheiro \'{0}\' foi alterado no sistema de ficheiros."},"filesExclude":"Configurar padrões globais para excluir ficheiros e pastas. Por exemplo, o Explorador de ficheiros decide quais os ficheiros e pastas a mostrar ou esconder com base nesta configuração.","format":"Formato:","maxConcurrentUploads":"Número máximo de ficheiros simultâneos a carregar ao carregar vários ficheiros. 0 significa que todos os ficheiros serão carregados ao mesmo tempo.","maxFileSizeMB":"Controla o tamanho máximo do ficheiro em MB que é possível abrir.","prepareDownload":"A preparar o download...","prepareDownloadLink":"Preparar o link para descarregar...","processedOutOf":"Processado {0} a partir de {1}","replaceTitle":"Substituir ficheiro","uploadFiles":"Carregar ficheiros...","uploadedOutOf":"Carregado {0} a partir de {1}"},"getting-started":{"apiComparator":"{0} Compatibilidade API","newExtension":"Construir uma nova extensão","newPlugin":"Construir um Novo Plugin","startup-editor":{"welcomePage":"Abra a página de boas-vindas, com conteúdo para ajudar a começar a utilizar {0} e as extensões."}},"git":{"aFewSecondsAgo":"há alguns segundos","addSignedOff":"Adicionar Signed-off-by","amendReuseMessag":"Para reutilizar a última mensagem de compromisso, prima \'Enter\' ou \'Escape\' para cancelar.","amendRewrite":"Reescrever mensagem de compromisso anterior. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","checkoutCreateLocalBranchWithName":"Criar uma nova filial local com o nome: {0}. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","checkoutProvideBranchName":"Por favor, forneça um nome de filial.","checkoutSelectRef":"Seleccionar um árbitro para fazer a caixa ou criar uma nova sucursal local:","cloneQuickInputLabel":"Por favor, forneça a localização de um repositório Git. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","cloneRepository":"Clonar o repositório Git: {0}. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","compareWith":"Comparar com...","compareWithBranchOrTag":"Escolher um ramo ou etiqueta para comparar com o ramo actualmente activo {0}:","diff":"Diff","dirtyDiffLinesLimit":"Não mostrar decorações difusas sujas, se a contagem de linhas do editor exceder este limite.","dropStashMessage":"Armazenamento removido com sucesso.","editorDecorationsEnabled":"Mostrar decorações de git no editor.","fetchPickRemote":"Escolher um comando de onde ir buscar:","gitDecorationsColors":"Utilizar decoração a cores no navegador.","mergeQuickPickPlaceholder":"Escolher um ramo para se fundir no ramo actualmente activo {0}:","missingUserInfo":"Certifique-se de configurar o seu \'user.name\' e \'user.email\' em git.","noHistoryForError":"Não existe um historial disponível para {0}","noPreviousCommit":"Nenhum compromisso anterior para emendar","noRepositoriesSelected":"Não foram seleccionados repositórios.","prepositionIn":"em","repositoryNotInitialized":"Repositório {0} ainda não foi inicializado.","stashChanges":"Mudanças de stock. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","stashChangesWithMessage":"Mudanças de stock com mensagem: {0}. Prima \'Enter\' para confirmar ou \'Escape\' para cancelar.","tabTitleIndex":"{0} (índice)","tabTitleWorkingTree":"{0} (Árvore de trabalho)","toggleBlameAnnotations":"Anotações de culpa alternadas"},"keybinding-schema-updater":{"deprecation":"Utilize antes a cláusula `when`."},"keymaps":{"editKeybindingTitle":"Editar encadernação de chaves para {0}","keybindingCollidesValidation":"ligação de chaves actualmente colide","requiredKeybindingValidation":"é necessário um valor de encadernação","resetKeybindingConfirmation":"Quer mesmo repor esta encadernação de chave no seu valor por defeito?","resetKeybindingTitle":"Repor a encadernação para {0}","resetMultipleKeybindingsWarning":"Se existirem múltiplas ligações de teclas para este comando, todas elas serão reiniciadas."},"localize":{"offlineTooltip":"Não se pode ligar ao backend."},"markers":{"clearAll":"Limpar tudo","noProblems":"Até agora não foram detectados problemas no espaço de trabalho.","tabbarDecorationsEnabled":"Mostrar decoradores de problemas (marcadores de diagnóstico) nas barras de tabulação."},"memory-inspector":{"addressTooltip":"Localização da memória a exibir, um endereço ou expressão a avaliar para um endereço","ascii":"ASCII","binary":"Binário","byteSize":"Tamanho do byte","bytesPerGroup":"Bytes Por Grupo","closeSettings":"Fechar Definições","columns":"Colunas","command":{"createNewMemory":"Criar Novo Inspector de Memória","createNewRegisterView":"Criar Nova Vista de Registo","followPointer":"Siga o Ponteiro","followPointerMemory":"Seguir o Ponto em Memória Inspector","resetValue":"Valor de reinicialização","showRegister":"Mostrar Registo em Memória Inspector","viewVariable":"Mostrar Variable in Memory Inspector"},"data":"Dados","decimal":"Decimal","diff":{"label":"Dif: {0}"},"diff-widget":{"offset-label":"{0} Offset","offset-title":"Bytes para compensar a memória de {0}"},"editable":{"apply":"Aplicar alterações","clear":"Mudanças claras"},"endianness":"Endianness","extraColumn":"Coluna Extra","groupsPerRow":"Grupos por fila","hexadecimal":"Hexadecimal","length":"Comprimento","lengthTooltip":"Número de bytes a buscar, em decimal ou hexadecimal","memory":{"addressField":{"memoryReadError":"Introduzir um endereço ou expressão no campo Localização."},"freeze":"Vista de memória congelada","hideSettings":"Esconder Painel de Definições","readError":{"bounds":"Limites de memória excedidos, o resultado será truncado.","noContents":"Não existe actualmente nenhum conteúdo de memória disponível."},"readLength":{"memoryReadError":"Introduza um comprimento (número decimal ou hexadecimal) no campo Comprimento."},"showSettings":"Mostrar Painel de Ajustes","unfreeze":"Vista da memória de descongelamento","userError":"Havia uma memória de busca de erros."},"memoryCategory":"Inspector de Memória","memoryInspector":"Inspector de Memória","memoryTitle":"Memória","octal":"Octal","offset":"Offset","offsetTooltip":"Offset a ser adicionado ao local da memória actual, quando se navega","provider":{"localsError":"Não é possível ler variáveis locais. Não há sessão de depuração activa.","readError":"Não é possível ler a memória. Sem sessão de depuração activa.","writeError":"Não é possível escrever memória. Sem sessão de depuração activa."},"register":"Registe-se","register-widget":{"filter-placeholder":"Filtro (começa por)"},"registerReadError":"Havia um registo de busca de erros.","registers":"Registos","toggleComparisonWidgetVisibility":"Visibilidade do widget de comparação de alternância","utils":{"afterBytes":"Deve carregar memória em ambos os widgets que gostaria de comparar. {0} não tem memória carregada.","bytesMessage":"Deve carregar memória em ambos os widgets que gostaria de comparar. {0} não tem memória carregada."}},"messages":{"notificationTimeout":"As notificações informativas serão ocultadas após este intervalo de tempo.","toggleNotifications":"Notificações de alternância"},"mini-browser":{"typeUrl":"Digite um URL"},"monaco":{"noSymbolsMatching":"Sem correspondência de símbolos","typeToSearchForSymbols":"Tipo para pesquisa de símbolos"},"navigator":{"autoReveal":"Auto Revelação","clipboardWarn":"O acesso à área de transferência foi negado. Verifique a permissão do seu browser.","clipboardWarnFirefox":"A API da área de transferência não está disponível. Pode ser activada através da preferência \'{0}\' na página \'{1}\'. Em seguida, recarregue o Theia. Note que isso permitirá ao FireFox obter acesso total à área de transferência do sistema.","refresh":"Actualizar no Explorer","reveal":"Revelar no Explorer","toggleHiddenFiles":"Alternar ficheiros escondidos"},"output":{"clearOutputChannel":"Canal de saída transparente...","closeOutputChannel":"Fechar canal de saída...","hiddenChannels":"Canais ocultos","hideOutputChannel":"Esconder canal de saída...","maxChannelHistory":"O número máximo de entradas num canal de saída.","outputChannels":"Canais de saída","showOutputChannel":"Mostrar canal de saída..."},"plugin":{"blockNewTab":"O seu navegador impediu a abertura de um novo separador"},"plugin-dev":{"alreadyRunning":"A instância anfitriã já está a funcionar.","debugInstance":"Tribunal de depuração","debugMode":"Usando inspeccionar ou inspeccionar-brk para Node.js debug","devHost":"Anfitrião do Desenvolvimento","failed":"Falha na execução de uma instância de plugin hospedado: {0}","hostedPlugin":"Plugin hospedado","hostedPluginRunning":"Plugin hospedado: A funcionar","hostedPluginStarting":"Plugin hospedado: Início","hostedPluginStopped":"Plugin hospedado: Parado","hostedPluginWatching":"Plugin hospedado: Observando","instanceTerminated":"{0} foi terminado","launchOutFiles":"O conjunto de padrões globais para localização de ficheiros JavaScript gerados (`${pluginPath}` será substituído pelo caminho real do plugin).","noValidPlugin":"A pasta especificada não contém um plugin válido.","notRunning":"A instância anfitriã não está a funcionar.","pluginFolder":"A pasta Plugin está definida para: {0}","preventedNewTab":"O seu navegador impediu a abertura de um novo separador","restartInstance":"Reinício da instância","running":"A instância anfitriã está a funcionar em:","select":"Seleccione","selectPath":"Seleccione o caminho","startInstance":"Instância inicial","starting":"Iniciar servidor de instância hospedado ...","stopInstance":"Instância de paragem","unknownTerminated":"A instância foi encerrada","watchMode":"Executar o watcher em plugin em desenvolvimento"},"plugin-ext":{"authentication-main":{"loginTitle":"Iniciar sessão"},"plugins":"Plugins","webviewTrace":"Controla o rastreio da comunicação com visualizações na web.","webviewWarnIfUnsecure":"Adverte os utilizadores de que as visualizações da web estão actualmente implantadas de forma insegura."},"preview":{"openByDefault":"Abrir a pré-visualização em vez do editor por defeito."},"property-view":{"created":"Criado em","directory":"Directório","lastModified":"Última modificação","location":"Localização","noProperties":"Não existem propriedades disponíveis.","properties":"Imóveis","size":"Tamanho","symbolicLink":"Ligação simbólica"},"scm":{"amend":"Alterar","amendHeadCommit":"Compromisso HEAD","amendLastCommit":"Emendar o último compromisso","changeRepository":"Repositório de Mudanças...","config.untrackedChanges":"Controla o comportamento de mudanças não controladas.","config.untrackedChanges.hidden":"escondido","config.untrackedChanges.mixed":"misto","config.untrackedChanges.separate":"em separado","history":"História","noRepositoryFound":"Não foi encontrado nenhum repositório","unamend":"Unamend","unamendCommit":"Compromisso sem alterações"},"search-in-workspace":{"includeIgnoredFiles":"Incluir Ficheiros Ignorados","noFolderSpecified":"Não abriu nem especificou uma pasta. Apenas os ficheiros abertos são actualmente pesquisados.","resultSubset":"Este é apenas um subconjunto de todos os resultados. Use um termo de pesquisa mais específico para restringir a lista de resultados.","searchOnEditorModification":"Pesquisar o editor activo quando modificado."},"secondary-window":{"extract-widget":"Mover vista para a janela secundária"},"shell-area":{"secondary":"Janela Secundária","top":"Início"},"task":{"attachTask":"Anexar Tarefa...","clearHistory":"História clara","noTaskToRun":"Não foi encontrada nenhuma tarefa para executar. Configurar tarefas...","openUserTasks":"Tarefas de utilizador aberto"},"terminal":{"defaultProfile":"O perfil padrão utilizado em {0}","enableCopy":"Habilitar ctrl-c (cmd-c em macOS) para copiar o texto seleccionado","enablePaste":"Habilitar ctrl-v (cmd-v em macOS) para colar a partir da prancheta","profileArgs":"Os argumentos de concha que este perfil utiliza.","profileColor":"Um ID de cor de tema terminal a associar ao terminal.","profileDefault":"Escolher Perfil por Defeito...","profileIcon":"Um código de identificação para associar com o ícone do terminal.\\nterminal-tmux: \\"$(terminal-tmux)\\".","profileNew":"Novo Terminal (Com Perfil)...","profilePath":"O caminho da concha que este perfil utiliza.","profiles":"Os perfis a apresentar aquando da criação de um novo terminal. Definir manualmente a propriedade do caminho com args opcionais.\\nDefinir um perfil existente para `nulo` para ocultar o perfil da lista, por exemplo: `\\"{0}\\": nulo`.","rendererType":"Controla a forma como o terminal é renderizado.","selectProfile":"Seleccionar um perfil para o novo terminal","shell.deprecated":"Isto é depreciado, a nova forma recomendada para configurar a sua shell padrão é criando um perfil de terminal em \'terminal.integrated.profiles.{0}\' e definindo o seu nome de perfil como o padrão em \'terminal.integrated.defaultProfile\'.{0}.","shellArgsLinux":"Os argumentos de linha de comando a utilizar quando no terminal Linux.","shellArgsOsx":"Os argumentos de linha de comando a utilizar quando no terminal macOS.","shellArgsWindows":"Os argumentos de linha de comando a utilizar quando no terminal do Windows.","shellLinux":"O caminho da shell que o terminal utiliza no Linux (predefinição: \'{0}\'}).","shellOsx":"O caminho da concha que o terminal utiliza em macOS (predefinição: \'{0}\'}).","shellWindows":"O caminho da concha que o terminal utiliza no Windows. (predefinição: \'{0}\')."},"toolbar":{"addCommand":"Adicionar Comando à Barra de Ferramentas","addCommandPlaceholder":"Encontrar um comando para adicionar à barra de ferramentas","centerColumn":"Coluna Central","failedUpdate":"Falha em actualizar o valor de \'{0}\' em \'{1}\'.","filterIcons":"Ícones de filtro","iconSelectDialog":"Seleccione um Ícone para \'{0}\'.","iconSet":"Conjunto de Ícones","insertGroupLeft":"Inserir separador de grupo (Esquerda)","insertGroupRight":"Inserir separador de grupo (à direita)","leftColumn":"Coluna da Esquerda","openJSON":"Personalizar a barra de ferramentas (Abrir JSON)","removeCommand":"Remover Comando da Barra de Ferramentas","restoreDefaults":"Restaurar Padrões da Barra de Ferramentas","rightColumn":"Coluna da direita","selectIcon":"Seleccionar Ícone","toggleToolbar":"Barra de ferramentas Toggle","toolbarLocationPlaceholder":"Onde gostaria que o comando fosse adicionado?","useDefaultIcon":"Usar Ícone por defeito"},"typehierarchy":{"subtypeHierarchy":"Subtipo Hierarquia","supertypeHierarchy":"Hierarquia de Supertipo"},"vsx-registry":{"downloadCount":"Contagem de downloads: {0}","errorFetching":"Extensões de erro de busca.","failedInstallingVSIX":"Falha na instalação {0} da VSIX.","invalidVSIX":"O ficheiro seleccionado não é um plugin \\"*.vsix\\" válido.","license":"Licença: {0}","recommendedExtensions":"Uma lista dos nomes das extensões recomendadas para utilização neste espaço de trabalho.","searchPlaceholder":"Pesquisar extensões em {0}","showInstalled":"Mostrar extensões instaladas","showRecommendedExtensions":"Controla se as notificações são mostradas para recomendações de extensão.","vsx-extensions-contribution":{"update-version-uninstall-error":"Erro ao retirar a extensão: {0}.","update-version-version-error":"Falha na instalação da versão {0} de {1}."}},"webview":{"goToReadme":"Ir para LEIAME","messageWarning":"            O padrão de alojamento do terminal {0} foi alterado para `{1}`; alterar o padrão pode levar a vulnerabilidades de segurança.             Ver `{2}` para mais informações."},"workspace":{"compareWithEachOther":"Comparar uns com os outros","confirmDeletePermanently.description":"Falha em apagar \\"{0}\\" utilizando o Lixo. Pretende, em vez disso, apagar permanentemente?","confirmDeletePermanently.solution":"Pode desactivar a utilização de Lixo nas preferências.","confirmDeletePermanently.title":"Erro ao apagar ficheiro","confirmMessage.delete":"Quer mesmo apagar os seguintes ficheiros?","confirmMessage.dirtyMultiple":"Quer mesmo apagar ficheiros {0} com alterações não guardadas?","confirmMessage.dirtySingle":"Quer mesmo eliminar {0} com alterações não guardadas?","confirmMessage.uriMultiple":"Quer realmente apagar todos os ficheiros {0} seleccionados?","confirmMessage.uriSingle":"Quer mesmo apagar {0}?","duplicate":"Duplicado","failApply":"Não foi possível aplicar alterações ao novo ficheiro","failSaveAs":"Não é possível executar \\"{0}\\" para o widget actual.","newFilePlaceholder":"Nome do ficheiro","newFolderPlaceholder":"Nome da pasta","noErasure":"Nota: Nada será apagado do disco","openRecentPlaceholder":"Digite o nome do espaço de trabalho que pretende abrir","openRecentWorkspace":"Espaço de Trabalho Recente Aberto...","preserveWindow":"Activar a abertura de espaços de trabalho na janela actual.","removeFolder":"Tem a certeza de que quer remover a seguinte pasta do espaço de trabalho?","removeFolders":"Tem a certeza de que quer remover as seguintes pastas do espaço de trabalho?","trashTitle":"Mover {0} para o Lixo","trustEmptyWindow":"Controla se o espaço de trabalho vazio é ou não de confiança por defeito.","trustEnabled":"Controla se a confiança no espaço de trabalho está ou não activada. Se estiver desactivado, todos os espaços de trabalho são de confiança.","trustRequest":"Uma extensão pede confiança no espaço de trabalho, mas a API correspondente ainda não é totalmente suportada. Quer confiar neste espaço de trabalho?","untitled-cleanup":"Parece haver muitos ficheiros de espaço de trabalho sem título. Por favor verifique {0} e remova quaisquer ficheiros não utilizados.","workspaceFolderAdded":"Foi criado um espaço de trabalho com múltiplas raízes. Quer guardar a configuração do seu espaço de trabalho como um ficheiro?","workspaceFolderAddedTitle":"Pasta adicionada ao espaço de trabalho"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.ru.json":
/*!********************************************!*\
  !*** ../../packages/core/i18n/nls.ru.json ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"Изменить состояние...","terminal:new:profile":"Создание нового интегрированного терминала из профиля","terminal:profile:default":"Выберите профиль терминала по умолчанию","theia":{"callhierarchy":{"noCallers":"Вызывающих не обнаружено.","open":"Иерархия открытых звонков"},"core":{"about":{"compatibility":"{0} Совместимость","defaultApi":"По умолчанию {0} API","version":"Версия"},"common":{"closeAll":"Закрыть все вкладки","closeAllTabMain":"Закрыть все вкладки в основной области","closeOtherTabMain":"Закрыть другие вкладки в основной области","closeOthers":"Закрыть другие вкладки","closeRight":"Закрыть вкладки справа","closeTab":"Закрыть вкладку","closeTabMain":"Закрыть вкладку в основной области","collapseAllTabs":"Свернуть все боковые панели","collapseBottomPanel":"Переключаемая нижняя панель","collapseTab":"Разваливающаяся боковая панель","showNextTabGroup":"Переход к следующей группе вкладок","showNextTabInGroup":"Переход на следующую вкладку в группе","showPreviousTabGroup":"Переход к предыдущей группе вкладок","showPreviousTabInGroup":"Переход на предыдущую вкладку в группе","toggleMaximized":"Переключение максимизации"},"enhancedPreview":{"classic":"Отображение простого предварительного просмотра вкладки с основной информацией.","enhanced":"Отображение расширенного предварительного просмотра вкладки с дополнительной информацией.","visual":"Отображение визуального предварительного просмотра вкладки."},"file":{"browse":"Просмотреть"},"highlightModifiedTabs":"Управляет тем, будет ли рисоваться верхняя граница на измененных (грязных) вкладках редактора или нет.","keybindingStatus":"{0} было нажато, ожидание других клавиш","keyboard":{"choose":"Выберите раскладку клавиатуры","chooseLayout":"Выберите раскладку клавиатуры","current":"(текущий: {0})","currentLayout":" - текущий макет","mac":"Клавиатуры Mac","pc":"Клавиатуры для ПК","tryDetect":"Попытайтесь определить раскладку клавиатуры по информации браузера и нажатым клавишам."},"navigator":{"clipboardWarn":"Доступ к буферу обмена запрещен. Проверьте разрешение вашего браузера.","clipboardWarnFirefox":"API буфера обмена недоступен. Его можно включить с помощью \'{0}\' привилегии на странице \'{1}\'. Затем перезагрузите Theia. Обратите внимание, это позволит FireFox получить полный доступ к системному буферу обмена."},"offline":"Offline","quitMessage":"Любые несохраненные изменения не будут сохранены.","resetWorkbenchLayout":"Сброс макета верстака","searchbox":{"close":"Закрыть (побег)","next":"Далее (вниз)","previous":"Предыдущий (Вверх)"},"silentNotifications":"Управляет тем, следует ли подавлять всплывающие окна уведомлений.","tabDefaultSize":"Определяет размер по умолчанию для вкладок.","tabMaximize":"Управляет тем, следует ли максимизировать вкладки при двойном щелчке.","tabMinimumSize":"Определяет минимальный размер вкладок.","tabShrinkToFit":"Сожмите вкладки, чтобы они соответствовали свободному пространству."},"debug":{"addConfigurationPlaceholder":"Выберите корень рабочего пространства для добавления конфигурации","compound-cycle":"Конфигурация запуска \'{0}\' содержит цикл с самим собой","continueAll":"Продолжить все","copyExpressionValue":"Копирование значения выражения","debugVariableInput":"Установите значение {0} ","instruction-breakpoint":"Точка останова инструкции","missingConfiguration":"Динамическая конфигурация \'{0}:{1}\' отсутствует или неприменима","pauseAll":"Приостановить все","reveal":"Раскрыть","threads":"Нитки","toggleTracing":"Включение/выключение трассировки связи с отладочными адаптерами"},"editor":{"dirtyEncoding":"Файл загрязнен. Пожалуйста, сначала сохраните его, а затем откройте с другой кодировкой.","editor.codeActionWidget.showHeaders":"Включить/выключить показ заголовков групп в меню действий кода.","editor.experimental.pasteActions.enabled":"Включение/выключение запуска правок из расширений при вставке.","editor.formatOnSaveMode.modificationsIfAvailable":"Попытается отформатировать только модификации (требуется контроль исходного текста). Если контроль источника не может быть использован, то будет отформатирован весь файл.","editor.inlayHints.enabled1":"Подсказки инкрустации отображаются по умолчанию и скрываются при нажатии `Ctrl+Alt`.","editor.inlayHints.enabled2":"Подсказки инкрустации скрыты по умолчанию и отображаются при нажатии `Ctrl+Alt`.","editor.quickSuggestions":"Управляет тем, должны ли предложения автоматически появляться при вводе текста. Этим можно управлять при вводе комментариев, строк и другого кода. Быстрые предложения могут быть настроены на отображение в виде призрачного текста или виджета предложений. Также обратите внимание на настройку \'#editor.suggestOnTriggerCharacters#\', которая определяет, будут ли появляться предложения при использовании специальных символов.","editor.suggest.matchOnWordStartOnly":"При включении фильтрации IntelliSense требуется, чтобы первый символ совпадал с началом слова, например, `c` в `Console` или `WebContext`, но _нет_ в `description`. При отключении IntelliSense показывает больше результатов, но все равно сортирует их по качеству совпадения.","files.autoSave":"Управляет [автосохранением](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) редакторов, в которых есть несохраненные изменения.","files.autoSave.afterDelay":"Редактор с изменениями автоматически сохраняется по истечении настроенной `#files.autoSaveDelay#`.","files.autoSave.off":"Редактор с изменениями никогда не сохраняется автоматически.","files.autoSave.onFocusChange":"Редактор с изменениями автоматически сохраняется, когда редактор теряет фокус.","files.autoSave.onWindowChange":"Редактор с изменениями автоматически сохраняется, когда окно теряет фокус.","formatOnSaveTimeout":"Тайм-аут в миллисекундах, по истечении которого форматирование, выполняемое при сохранении файла, отменяется.","persistClosedEditors":"Управляет тем, сохранять ли историю закрытых редакторов для рабочей области при перезагрузке окна.","showAllEditors":"Показать все открытые редакторы","splitHorizontal":"Раздельный редактор Горизонтальный","splitVertical":"Раздельный редактор Вертикальный","toggleStickyScroll":"Переключить залипание прокрутки"},"file-search":{"toggleIgnoredFiles":" (Нажмите {0}, чтобы показать/скрыть игнорируемые файлы)"},"fileDialog":{"showHidden":"Показать скрытые файлы"},"fileSystem":{"fileResource":{"overWriteBody":"Вы хотите перезаписать изменения, сделанные в файловой системе \'{0}\'?"}},"filesystem":{"copiedToClipboard":"Скопировал ссылку на скачивание в буфер обмена.","copyDownloadLink":"Скопировать ссылку для скачивания","dialog":{"initialLocation":"Перейти к начальному местоположению","multipleItemMessage":"Вы можете выбрать только один элемент","name":"Имя:","navigateBack":"Навигация назад","navigateForward":"Двигайтесь вперед","navigateUp":"Навигация по одному каталогу"},"fileResource":{"binaryFileQuery":"Его открытие может занять некоторое время и сделать IDE невосприимчивой. Вы хотите открыть \'{0}\' в любом случае?","binaryTitle":"Файл либо двоичный, либо использует неподдерживаемую текстовую кодировку.","largeFileTitle":"Файл слишком большой ({0}).","overwriteTitle":"Файл \'{0}\' был изменен в файловой системе."},"filesExclude":"Настройте шаблоны glob для исключения файлов и папок. Например, проводник файлов решает, какие файлы и папки показывать или скрывать на основе этого параметра.","format":"Формат:","maxConcurrentUploads":"Максимальное количество одновременно загружаемых файлов при загрузке нескольких файлов. 0 означает, что все файлы будут загружены одновременно.","maxFileSizeMB":"Контролирует максимальный размер файла в МБ, который можно открыть.","prepareDownload":"Подготовка к загрузке...","prepareDownloadLink":"Подготовка ссылки для скачивания...","processedOutOf":"Обработано {0} из {1}","replaceTitle":"Заменить файл","uploadFiles":"Загрузить файлы...","uploadedOutOf":"Загружено {0} из {1}"},"getting-started":{"apiComparator":"{0} Совместимость API","newExtension":"Построение нового расширения","newPlugin":"Создание нового плагина","startup-editor":{"welcomePage":"Откройте страницу приветствия, содержащую материалы, помогающие начать работу с {0} и расширениями."}},"git":{"aFewSecondsAgo":"несколько секунд назад","addSignedOff":"Добавить подписанный","amendReuseMessag":"Чтобы повторно использовать последнее сообщение фиксации, нажмите \'Enter\' или \'Escape\' для отмены.","amendRewrite":"Переписать предыдущее сообщение о фиксации. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","checkoutCreateLocalBranchWithName":"Создайте новый локальный филиал с именем: {0}. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","checkoutProvideBranchName":"Пожалуйста, укажите название филиала.","checkoutSelectRef":"Выберите ссылку для проверки или создайте новую локальную ветку:","cloneQuickInputLabel":"Укажите местоположение Git-репозитория. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","cloneRepository":"Клонируйте репозиторий Git: {0}. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","compareWith":"Сравнить с...","compareWithBranchOrTag":"Выберите ветвь или метку для сравнения с активной в данный момент ветвью {0}:","diff":"Дифф","dirtyDiffLinesLimit":"Не показывать грязные декорации diff, если количество строк редактора превышает этот предел.","dropStashMessage":"Тайник успешно удален.","editorDecorationsEnabled":"Показать украшения git в редакторе.","fetchPickRemote":"Выберите пульт, с которого будет производиться выборка:","gitDecorationsColors":"Используйте цветовое оформление в навигаторе.","mergeQuickPickPlaceholder":"Выберите ветвь для слияния с активной в данный момент ветвью {0}:","missingUserInfo":"Убедитесь, что вы настроили \'user.name\' и \'user.email\' в git.","noHistoryForError":"Не существует истории, доступной для {0}","noPreviousCommit":"Нет предыдущего обязательства по внесению изменений","noRepositoriesSelected":"Ни одно хранилище не было выбрано.","prepositionIn":"в","repositoryNotInitialized":"Хранилище {0} еще не инициализировано.","stashChanges":"Изменение тайника. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","stashChangesWithMessage":"Изменение тайника с сообщением: {0}. Нажмите \'Enter\' для подтверждения или \'Escape\' для отмены.","tabTitleIndex":"{0} (индекс)","tabTitleWorkingTree":"{0} (Рабочее дерево)","toggleBlameAnnotations":"Переключить аннотации вины"},"keybinding-schema-updater":{"deprecation":"Вместо этого используйте предложение `when`."},"keymaps":{"editKeybindingTitle":"Редактировать привязку клавиш для {0}","keybindingCollidesValidation":"привязка клавиш в настоящее время сталкивается","requiredKeybindingValidation":"требуется значение привязки клавиш","resetKeybindingConfirmation":"Вы действительно хотите сбросить привязку к клавишам до значения по умолчанию?","resetKeybindingTitle":"Сброс привязки клавиш для {0}","resetMultipleKeybindingsWarning":"Если для этой команды существует несколько привязок клавиш, все они будут сброшены."},"localize":{"offlineTooltip":"Не удается подключиться к бэкенду."},"markers":{"clearAll":"Очистить все","noProblems":"Пока никаких проблем в рабочем пространстве не обнаружено.","tabbarDecorationsEnabled":"Показывать декораторы проблем (диагностические маркеры) на панелях вкладок."},"memory-inspector":{"addressTooltip":"Место в памяти для отображения, адрес или выражение, оценивающее адрес","ascii":"ASCII","binary":"Бинарные","byteSize":"Размер байта","bytesPerGroup":"Байты на группу","closeSettings":"Закрыть настройки","columns":"Колонки","command":{"createNewMemory":"Создать новый инспектор памяти","createNewRegisterView":"Создание нового представления реестра","followPointer":"Следуйте за указателем","followPointerMemory":"Следование за указателем в инспекторе памяти","resetValue":"Сброс значения","showRegister":"Показать регистр в инспекторе памяти","viewVariable":"Показать переменную в инспекторе памяти"},"data":"Данные","decimal":"Десятичный","diff":{"label":"Дифф: {0}"},"diff-widget":{"offset-label":"{0} Смещение","offset-title":"Байты для смещения памяти от {0}"},"editable":{"apply":"Применять изменения","clear":"Четкие изменения"},"endianness":"Endianness","extraColumn":"Дополнительная колонка","groupsPerRow":"Группы на строку","hexadecimal":"Шестнадцатеричная","length":"Длина","lengthTooltip":"Количество байтов для выборки, в десятичном или шестнадцатеричном формате","memory":{"addressField":{"memoryReadError":"Введите адрес или выражение в поле Местоположение."},"freeze":"Заморозить просмотр памяти","hideSettings":"Скрыть панель настроек","readError":{"bounds":"Превышены границы памяти, результат будет усечен.","noContents":"В настоящее время содержимое памяти не доступно."},"readLength":{"memoryReadError":"Введите длину (десятичное или шестнадцатеричное число) в поле Длина."},"showSettings":"Показать панель настроек","unfreeze":"Разморозить память Просмотр","userError":"Произошла ошибка при выборке памяти."},"memoryCategory":"Инспектор памяти","memoryInspector":"Инспектор памяти","memoryTitle":"Память","octal":"Octal","offset":"Смещение","offsetTooltip":"Смещение, добавляемое к текущей ячейке памяти при навигации","provider":{"localsError":"Невозможно прочитать локальные переменные. Нет активного сеанса отладки.","readError":"Невозможно прочитать память. Нет активного сеанса отладки.","writeError":"Невозможно записать память. Нет активного сеанса отладки."},"register":"Зарегистрироваться","register-widget":{"filter-placeholder":"Фильтр (начинается с)"},"registerReadError":"Произошла ошибка при выборке регистров.","registers":"Регистры","toggleComparisonWidgetVisibility":"Переключение видимости виджета сравнения","utils":{"afterBytes":"Вы должны загрузить память в оба виджета, которые хотите сравнить. {0} не имеет загруженной памяти.","bytesMessage":"Вы должны загрузить память в оба виджета, которые хотите сравнить. {0} не имеет загруженной памяти."}},"messages":{"notificationTimeout":"По истечении этого времени информационные уведомления будут скрыты.","toggleNotifications":"Переключение уведомлений"},"mini-browser":{"typeUrl":"Введите URL-адрес"},"monaco":{"noSymbolsMatching":"Символы не совпадают","typeToSearchForSymbols":"Введите для поиска символов"},"navigator":{"autoReveal":"Автоматическое раскрытие","clipboardWarn":"Доступ к буферу обмена запрещен. Проверьте разрешение вашего браузера.","clipboardWarnFirefox":"API буфера обмена недоступен. Его можно включить с помощью \'{0}\' предпочтения на странице \'{1}\'. Затем перезагрузите Theia. Обратите внимание, это позволит FireFox получить полный доступ к системному буферу обмена.","refresh":"Обновить в Проводнике","reveal":"Раскрытие в Проводнике","toggleHiddenFiles":"Переключение скрытых файлов"},"output":{"clearOutputChannel":"Очистить выходной канал...","closeOutputChannel":"Закрыть выходной канал...","hiddenChannels":"Скрытые каналы","hideOutputChannel":"Скрыть выходной канал...","maxChannelHistory":"Максимальное количество записей в выходном канале.","outputChannels":"Выходные каналы","showOutputChannel":"Показать выходной канал..."},"plugin":{"blockNewTab":"Ваш браузер не позволил открыть новую вкладку"},"plugin-dev":{"alreadyRunning":"Хостируемый экземпляр уже запущен.","debugInstance":"Отладочный экземпляр","debugMode":"Использование inspect или inspect-brk для отладки Node.js","devHost":"Ведущий разработки","failed":"Не удалось запустить размещенный экземпляр плагина: {0}","hostedPlugin":"Хостируемый плагин","hostedPluginRunning":"Хостируемый плагин: Выполняется","hostedPluginStarting":"Хостируемый плагин: запуск","hostedPluginStopped":"Хостируемый плагин: Stopped","hostedPluginWatching":"Хостируемый плагин: Смотреть","instanceTerminated":"{0} была прекращена","launchOutFiles":"Массив шаблонов glob для размещения сгенерированных JavaScript файлов (`${pluginPath}` будет заменен на фактический путь к плагину).","noValidPlugin":"Указанная папка не содержит действительного плагина.","notRunning":"Хостируемый экземпляр не запущен.","pluginFolder":"Папка плагина установлена на: {0}","preventedNewTab":"Ваш браузер не позволил открыть новую вкладку","restartInstance":"Перезапуск экземпляра","running":"Хостируемый экземпляр работает на:","select":"Выберите","selectPath":"Выберите путь","startInstance":"Запуск экземпляра","starting":"Запуск сервера размещенных экземпляров ...","stopInstance":"Остановить экземпляр","unknownTerminated":"Экземпляр был завершен","watchMode":"Запуск наблюдателя на разрабатываемом плагине"},"plugin-ext":{"authentication-main":{"loginTitle":"Вход в систему"},"plugins":"Плагины","webviewTrace":"Управляет трассировкой связи с веб-вью.","webviewWarnIfUnsecure":"Предупреждает пользователей о том, что веб-просмотры в настоящее время развернуты небезопасно."},"preview":{"openByDefault":"По умолчанию вместо редактора открывается предварительный просмотр."},"property-view":{"created":"Создано","directory":"Каталог","lastModified":"Последнее изменение","location":"Местонахождение","noProperties":"Нет доступных объектов.","properties":"Свойства","size":"Размер","symbolicLink":"Символическая связь"},"scm":{"amend":"изменить","amendHeadCommit":"ГЛАВНОЕ ОБЯЗАТЕЛЬСТВО","amendLastCommit":"Поправка к последнему сообщению","changeRepository":"Изменить репозиторий...","config.untrackedChanges":"Управляет поведением неотслеживаемых изменений.","config.untrackedChanges.hidden":"скрытый","config.untrackedChanges.mixed":"смешанный","config.untrackedChanges.separate":"отдельный","history":"История","noRepositoryFound":"Репозиторий не найден","unamend":"не изменять","unamendCommit":"Неизмененное обязательство"},"search-in-workspace":{"includeIgnoredFiles":"Включить игнорируемые файлы","noFolderSpecified":"Вы не открыли или не указали папку. В настоящее время поиск ведется только в открытых файлах.","resultSubset":"Это только часть всех результатов. Используйте более конкретный поисковый запрос, чтобы сузить список результатов.","searchOnEditorModification":"Поиск активного редактора при изменении."},"secondary-window":{"extract-widget":"Переместить вид в дополнительное окно"},"shell-area":{"secondary":"Вторичное окно","top":"Топ"},"task":{"attachTask":"Прикрепите задание...","clearHistory":"Чистая история","noTaskToRun":"Не найдено ни одной задачи для выполнения. Настройте задачи...","openUserTasks":"Открытые задачи пользователя"},"terminal":{"defaultProfile":"Профиль по умолчанию, используемый на {0}","enableCopy":"Включите ctrl-c (cmd-c в macOS) для копирования выделенного текста","enablePaste":"Включите ctrl-v (cmd-v в macOS) для вставки из буфера обмена","profileArgs":"Аргументы оболочки, которые использует этот профиль.","profileColor":"Идентификатор цвета темы терминала, который ассоциируется с терминалом.","profileDefault":"Выберите Профиль по умолчанию...","profileIcon":"Идентификатор кодикона, который нужно связать с иконкой терминала.\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"Новый терминал (с профилем)...","profilePath":"Путь к оболочке, которую использует данный профиль.","profiles":"Профили, которые должны быть представлены при создании нового терминала. Задайте свойство path вручную с помощью необязательных args.\\nУстановите для существующего профиля значение `null`, чтобы скрыть профиль из списка, например: `\\"{0}\\": null`.","rendererType":"Управляет способом отображения терминала.","selectProfile":"Выберите профиль для нового терминала","shell.deprecated":"Это устарело, новым рекомендуемым способом настройки оболочки по умолчанию является создание профиля терминала в \'terminal.integrated.profiles.{0}\' и установка имени профиля по умолчанию в \'terminal.integrated.defaultProfile.{0}.\\".","shellArgsLinux":"Аргументы командной строки для использования в терминале Linux.","shellArgsOsx":"Аргументы командной строки для использования в терминале macOS.","shellArgsWindows":"Аргументы командной строки для использования в терминале Windows.","shellLinux":"Путь к оболочке, которую использует терминал в Linux (по умолчанию: \'{0}\'}).","shellOsx":"Путь к оболочке, которую использует терминал на macOS (по умолчанию: \'{0}\'}).","shellWindows":"Путь к оболочке, которую терминал использует в Windows. (по умолчанию: \'{0}\')."},"toolbar":{"addCommand":"Добавить команду на панель инструментов","addCommandPlaceholder":"Найдите команду для добавления на панель инструментов","centerColumn":"Центральная колонка","failedUpdate":"Не удалось обновить значение \'{0}\' в \'{1}\'.","filterIcons":"Значки фильтров","iconSelectDialog":"Выберите значок для \'{0}\'","iconSet":"Набор иконок","insertGroupLeft":"Вставить разделитель групп (слева)","insertGroupRight":"Вставить разделитель групп (справа)","leftColumn":"Левая колонка","openJSON":"Настроить панель инструментов (открыть JSON)","removeCommand":"Удалить команду из панели инструментов","restoreDefaults":"Восстановление настроек панели инструментов по умолчанию","rightColumn":"Правая колонка","selectIcon":"Выберите значок","toggleToolbar":"Переключение панели инструментов","toolbarLocationPlaceholder":"Куда бы вы хотели добавить команду?","useDefaultIcon":"Использовать значок по умолчанию"},"typehierarchy":{"subtypeHierarchy":"Иерархия подтипов","supertypeHierarchy":"Иерархия супертипов"},"vsx-registry":{"downloadCount":"Скачать граф: {0}","errorFetching":"Ошибка при получении расширений.","failedInstallingVSIX":"Не удалось установить {0} из VSIX.","invalidVSIX":"Выбранный файл не является действительным плагином \\"*.vsix\\".","license":"Лицензия: {0}","recommendedExtensions":"Список имен расширений, рекомендуемых для использования в данной рабочей области.","searchPlaceholder":"Поисковые расширения в {0}","showInstalled":"Показать установленные расширения","showRecommendedExtensions":"Служит для управления отображением уведомлений о рекомендациях расширения.","vsx-extensions-contribution":{"update-version-uninstall-error":"Ошибка при удалении расширения: {0}.","update-version-version-error":"Не удалось установить версию {0} сайта {1}."}},"webview":{"goToReadme":"Перейти к README","messageWarning":"            Шаблон хоста конечной точки {0} был изменен на `{1}`; изменение шаблона может привести к уязвимостям безопасности.             Для получения дополнительной информации смотрите `{2}`."},"workspace":{"compareWithEachOther":"Сравните друг с другом","confirmDeletePermanently.description":"Не удалось удалить \\"{0}\\" с помощью Корзины. Вы хотите удалить его навсегда?","confirmDeletePermanently.solution":"Вы можете отключить использование корзины в настройках.","confirmDeletePermanently.title":"Ошибка при удалении файла","confirmMessage.delete":"Вы действительно хотите удалить следующие файлы?","confirmMessage.dirtyMultiple":"Вы действительно хотите удалить {0} файлов с несохраненными изменениями?","confirmMessage.dirtySingle":"Вы действительно хотите удалить {0} с несохраненными изменениями?","confirmMessage.uriMultiple":"Вы действительно хотите удалить все {0} выбранных файлов?","confirmMessage.uriSingle":"Вы действительно хотите удалить {0}?","duplicate":"Дубликат","failApply":"Не удалось применить изменения к новому файлу","failSaveAs":"Невозможно выполнить \\"{0}\\" для текущего виджета.","newFilePlaceholder":"Имя файла","newFolderPlaceholder":"Имя папки","noErasure":"Примечание: С диска ничего не будет удалено","openRecentPlaceholder":"Введите имя рабочей области, которую вы хотите открыть","openRecentWorkspace":"Открыть недавнее рабочее пространство...","preserveWindow":"Включить открытие рабочих пространств в текущем окне.","removeFolder":"Вы уверены, что хотите удалить следующую папку из рабочей области?","removeFolders":"Вы уверены, что хотите удалить следующие папки из рабочей области?","trashTitle":"Переместить {0} в корзину","trustEmptyWindow":"Управляет тем, доверяется ли пустая рабочая область по умолчанию.","trustEnabled":"Управляет тем, включено или нет доверие к рабочему пространству. Если отключено, все рабочие пространства являются доверенными.","trustRequest":"Расширение запрашивает доверие к рабочему пространству, но соответствующий API еще не полностью поддерживается. Хотите ли вы доверять этому рабочему пространству?","untitled-cleanup":"Похоже, что имеется много файлов рабочей области без названия. Проверьте {0} и удалите все неиспользуемые файлы.","workspaceFolderAdded":"Было создано рабочее пространство с несколькими корнями. Хотите ли вы сохранить конфигурацию рабочего пространства в виде файла?","workspaceFolderAddedTitle":"Папка добавлена в рабочую область"}}}');

/***/ }),

/***/ "../../packages/core/i18n/nls.zh-cn.json":
/*!***********************************************!*\
  !*** ../../packages/core/i18n/nls.zh-cn.json ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"debug.breakpoint.editCondition":"编辑条件...","terminal:new:profile":"从配置文件中创建新的集成终端","terminal:profile:default":"选择默认的终端配置文件","theia":{"callhierarchy":{"noCallers":"没有发现调用者。","open":"打开调用层次结构"},"core":{"about":{"compatibility":"{0} 兼容性","defaultApi":"默认的{0} API","version":"版本"},"common":{"closeAll":"全部关闭","closeAllTabMain":"关闭主区域的所有标签页","closeOtherTabMain":"关闭主区域的其他标签页","closeOthers":"关闭其他标签页","closeRight":"关闭右侧标签页","closeTab":"关闭标签页","closeTabMain":"关闭主区域标签页","collapseAllTabs":"折叠所有面板","collapseBottomPanel":"折叠底部面板","collapseTab":"折叠面板","showNextTabGroup":"切换到下一个标签页组","showNextTabInGroup":"切换到组中的下一个标签页","showPreviousTabGroup":"切换到上一个标签页组","showPreviousTabInGroup":"切换到组中的上一个标签页","toggleMaximized":"切换最大化面板"},"enhancedPreview":{"classic":"显示选项卡的简单预览和基本信息。","enhanced":"显示选项卡的增强预览,并提供更多信息。","visual":"显示选项卡的可视化预览。"},"file":{"browse":"浏览"},"highlightModifiedTabs":"控制是否在修改过的(dirty)编辑器标签上绘制顶部边框。","keybindingStatus":"{0}被按下,等待更多的按键","keyboard":{"choose":"选择键盘布局","chooseLayout":"选择一个键盘布局","current":"(当前:{0})","currentLayout":"- 当前布局","mac":"苹果键盘","pc":"电脑键盘","tryDetect":"尝试从浏览器信息和按下的按键中检测键盘布局。"},"navigator":{"clipboardWarn":"对剪贴板的访问被拒绝了。检查你的浏览器的权限。","clipboardWarnFirefox":"剪贴板API是不可用的。它可以通过\'{0}\'页面上的\'{1}\'偏好启用。然后重新加载Theia。注意,这将允许FireFox获得对系统剪贴板的完全访问。"},"offline":"离线","quitMessage":"任何未保存的修改都不会被保存。","resetWorkbenchLayout":"重置工作台面布局","searchbox":{"close":"关闭 (Escape)","next":"下一页 (向下)","previous":"上一页 (向上)"},"silentNotifications":"控制是否抑制弹出通知。","tabDefaultSize":"指定标签的默认尺寸。","tabMaximize":"控制是否在双击时最大化标签。","tabMinimumSize":"指定标签的最小尺寸。","tabShrinkToFit":"收缩标签以适应可用空间。"},"debug":{"addConfigurationPlaceholder":"选择要添加配置的工作区根","compound-cycle":"启动配置\'{0}\'包含一个与自己的循环","continueAll":"继续所有","copyExpressionValue":"复制表达式的值","debugVariableInput":"设置{0} 值","instruction-breakpoint":"指令断点","missingConfiguration":"动态配置\'{0}:{1}\'缺少或不适用","pauseAll":"暂停所有","reveal":"显示","threads":"线程","toggleTracing":"启用/禁用与调试适配器的跟踪通信"},"editor":{"dirtyEncoding":"该文件是脏的。请先保存它,然后用另一种编码重新打开它。","editor.codeActionWidget.showHeaders":"启用/禁用在代码动作菜单中显示组标题。","editor.experimental.pasteActions.enabled":"启用/禁用粘贴时从扩展程序运行编辑。","editor.formatOnSaveMode.modificationsIfAvailable":"将尝试只对修改部分进行格式化(需要源代码控制)。如果不能使用源码控制,那么整个文件将被格式化。","editor.inlayHints.enabled1":"镶嵌提示默认显示,按住 \\"Ctrl+Alt \\"时隐藏。","editor.inlayHints.enabled2":"镶嵌提示默认是隐藏的,当按住`Ctrl+Alt`时显示。","editor.quickSuggestions":"控制在输入时是否应该自动显示建议。这可以在输入评论、字符串和其他代码时加以控制。快速建议可以被配置为显示为幽灵文本或建议小部件。还要注意\'#editor.suggestOnTriggerCharacters#\'设置,它控制建议是否被特殊字符触发。","editor.suggest.matchOnWordStartOnly":"当启用IntelliSense过滤功能时,需要在一个词的开头匹配第一个字符,例如在 \\"Console \\"或 \\"WebContext \\"上的 \\"c\\",但在 \\"description \\"上_不需要。当禁用IntelliSense时,将显示更多的结果,但仍然按照匹配质量进行排序。","files.autoSave":"控制有未保存的修改的编辑器的[自动保存](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)。","files.autoSave.afterDelay":"在配置的 `#files.autoSaveDelay#`之后,有改动的编辑器会自动保存。","files.autoSave.off":"有变化的编辑器永远不会被自动保存。","files.autoSave.onFocusChange":"当编辑器失去焦点时,有变化的编辑器会自动保存。","files.autoSave.onWindowChange":"当窗口失去焦点时,有变化的编辑器会自动保存。","formatOnSaveTimeout":"超时,以毫秒为单位,超时后文件保存时运行的格式化被取消。","persistClosedEditors":"控制是否为工作区持续保存关闭的编辑器历史,跨越窗口重新加载。","showAllEditors":"显示所有打开的编辑器","splitHorizontal":"水平拆分编辑器","splitVertical":"垂直拆分编辑器","toggleStickyScroll":"切换粘滞滚动"},"file-search":{"toggleIgnoredFiles":"(按{0}显示/隐藏被忽略的文件)"},"fileDialog":{"showHidden":"显示隐藏的文件"},"fileSystem":{"fileResource":{"overWriteBody":"你想覆盖文件系统中对\'{0}\'所做的修改吗?"}},"filesystem":{"copiedToClipboard":"将下载链接复制到剪贴板。","copyDownloadLink":"复制下载链接","dialog":{"initialLocation":"转到初始位置","multipleItemMessage":"你只能选择一个项目","name":"名称:","navigateBack":"返回导航","navigateForward":"向前导航","navigateUp":"向上导航一个目录"},"fileResource":{"binaryFileQuery":"打开它可能需要一些时间,并可能使IDE没有反应。你到底要不要打开\'{0}\'?","binaryTitle":"该文件要么是二进制文件,要么使用不支持的文本编码。","largeFileTitle":"文件太大({0})。","overwriteTitle":"文件\'{0}\'在文件系统中被更改。"},"filesExclude":"配置用于排除文件和文件夹的glob模式。例如,文件资源管理器会根据这一设置来决定显示或隐藏哪些文件和文件夹。","format":"格式:","maxConcurrentUploads":"上传多个文件时的最大并发文件数。0意味着所有文件都将被并发上传。","maxFileSizeMB":"控制可能打开的最大文件大小(MB)。","prepareDownload":"准备下载...","prepareDownloadLink":"准备下载链接...","processedOutOf":"在{1}中处理了{0}。","replaceTitle":"替换文件","uploadFiles":"上传文件...","uploadedOutOf":"上传了{0}出{1}。"},"getting-started":{"apiComparator":"{0} API兼容性","newExtension":"构建一个新的扩展","newPlugin":"构建一个新的插件","startup-editor":{"welcomePage":"打开欢迎页面,其中包含帮助开始使用{0} 和扩展程序的内容。"}},"git":{"aFewSecondsAgo":"几秒钟前","addSignedOff":"添加 \\"已签署\\"。","amendReuseMessag":"要重新使用最后一条提交信息,请按\'Enter\'或\'Escape\'来取消。","amendRewrite":"重写之前的提交信息。按\'Enter\'键确认或按\'Escape\'键取消。","checkoutCreateLocalBranchWithName":"创建一个新的本地分支,名称为:{0}。按\'Enter\'键确认或按\'Escape\'键取消。","checkoutProvideBranchName":"请提供分支机构名称。","checkoutSelectRef":"选择一个参考文献来结账或创建一个新的本地分支。","cloneQuickInputLabel":"请提供一个 Git 仓库的位置。按\'Enter\'键确认或按\'Escape\'键取消。","cloneRepository":"克隆 Git 仓库。{0}.按\'Enter\'键确认或按\'Escape\'键取消。","compareWith":"对比...","compareWithBranchOrTag":"挑选一个分支或标签,与当前活动的{0}分支进行比较。","diff":"差异","dirtyDiffLinesLimit":"如果编辑器的行数超过这个限制,则不显示肮脏的差异装饰。","dropStashMessage":"存储删除成功。","editorDecorationsEnabled":"在编辑器中显示 git 的装饰。","fetchPickRemote":"选择一个远程存储库抓取","gitDecorationsColors":"在导航器中使用颜色装饰。","mergeQuickPickPlaceholder":"挑选一个分支来合并到当前活动的{0}分支。","missingUserInfo":"确保你在git中配置了\'user.name\'和\'user.email\'。","noHistoryForError":"没有任何历史记录可用于{0}","noPreviousCommit":"没有以前的承诺可以修改","noRepositoriesSelected":"没有选择存储库。","prepositionIn":"在","repositoryNotInitialized":"存储库{0}还没有被初始化。","stashChanges":"储藏室的变化。按\'Enter\'键确认,或按\'Escape\'键取消。","stashChangesWithMessage":"储藏室的变化与信息。{0}.按\'Enter\'键确认或按\'Escape\'键取消。","tabTitleIndex":"{0} (索引)","tabTitleWorkingTree":"{0} (工作树)","toggleBlameAnnotations":"切换指责注释"},"keybinding-schema-updater":{"deprecation":"使用`when`子句来代替。"},"keymaps":{"editKeybindingTitle":"编辑{0}的按键绑定","keybindingCollidesValidation":"键盘绑定目前碰撞","requiredKeybindingValidation":"键盘绑定值是必需的","resetKeybindingConfirmation":"你真的想把这个按键绑定重置为默认值吗?","resetKeybindingTitle":"重置{0}的键盘绑定","resetMultipleKeybindingsWarning":"如果这个命令存在多个按键绑定,所有的按键都将被重置。"},"localize":{"offlineTooltip":"无法连接到后端。"},"markers":{"clearAll":"清除所有","noProblems":"到目前为止,在工作区还没有发现任何问题。","tabbarDecorationsEnabled":"在标签栏中显示问题装饰器(诊断标记)。"},"memory-inspector":{"addressTooltip":"要显示的内存位置,一个地址或对一个地址进行评估的表达式","ascii":"ASCII","binary":"二进制","byteSize":"字节大小","bytesPerGroup":"每组字节数","closeSettings":"关闭设置","columns":"专栏","command":{"createNewMemory":"创建新的内存检查器","createNewRegisterView":"创建新的注册表视图","followPointer":"跟随指针","followPointerMemory":"在内存检查器中跟踪指针","resetValue":"重置值","showRegister":"在内存检查器中显示寄存器","viewVariable":"在内存检查器中显示变量"},"data":"数据","decimal":"十进制","diff":{"label":"差异: {0}"},"diff-widget":{"offset-label":"{0} 偏移","offset-title":"字节,以抵消内存从{0}"},"editable":{"apply":"应用更改","clear":"清晰的变化"},"endianness":"内联性","extraColumn":"额外专栏","groupsPerRow":"每行的组别","hexadecimal":"十六进制","length":"长度","lengthTooltip":"要获取的字节数,以十进制或十六进制表示","memory":{"addressField":{"memoryReadError":"在位置栏中输入一个地址或表达式。"},"freeze":"冻结内存视图","hideSettings":"隐藏设置面板","readError":{"bounds":"超过了内存界限,结果将被截断。","noContents":"目前没有内存内容。"},"readLength":{"memoryReadError":"在长度字段中输入一个长度(十进制或十六进制数字)。"},"showSettings":"显示设置面板","unfreeze":"解冻内存视图","userError":"获取内存时出现了错误。"},"memoryCategory":"内存检查器","memoryInspector":"内存检查器","memoryTitle":"记忆","octal":"八进制","offset":"偏移","offsetTooltip":"在导航时,要添加到当前内存位置的偏移量。","provider":{"localsError":"无法读取本地变量。没有活动的调试会话。","readError":"无法读取内存。没有活动的调试会话。","writeError":"无法写入内存。没有活动的调试会话。"},"register":"注册","register-widget":{"filter-placeholder":"过滤(以)开始"},"registerReadError":"获取寄存器时出现了错误。","registers":"登记册","toggleComparisonWidgetVisibility":"切换比较小工具的可见性","utils":{"afterBytes":"你必须在你想比较的两个部件中加载内存。{0} ,没有加载内存。","bytesMessage":"你必须在你想比较的两个部件中加载内存。{0} ,没有加载内存。"}},"messages":{"notificationTimeout":"在此超时后,信息性通知将被隐藏。","toggleNotifications":"切换通知"},"mini-browser":{"typeUrl":"输入一个URL"},"monaco":{"noSymbolsMatching":"没有匹配的符号","typeToSearchForSymbols":"键入以搜索符号"},"navigator":{"autoReveal":"自动显示","clipboardWarn":"对剪贴板的访问被拒绝了。检查你的浏览器的权限。","clipboardWarnFirefox":"剪贴板API是不可用的。它可以通过\'{0}\'页面上的\'{1}\'偏好启用。然后重新加载Theia。注意,这将允许FireFox获得对系统剪贴板的完全访问。","refresh":"在资源管理器中刷新","reveal":"在资源管理器中显示","toggleHiddenFiles":"切换隐藏文件"},"output":{"clearOutputChannel":"清除输出通道...","closeOutputChannel":"关闭输出通道...","hiddenChannels":"隐蔽通道","hideOutputChannel":"隐藏输出通道...","maxChannelHistory":"一个输出通道中的最大条目数。","outputChannels":"输出通道","showOutputChannel":"显示输出通道..."},"plugin":{"blockNewTab":"您的浏览器阻止了新标签的打开"},"plugin-dev":{"alreadyRunning":"托管的实例已经在运行。","debugInstance":"调试实例","debugMode":"使用 inspect 或 inspect-brk 进行 Node.js 调试","devHost":"发展的主人","failed":"运行托管插件实例失败。{0}","hostedPlugin":"托管的插件","hostedPluginRunning":"托管的插件: 运行","hostedPluginStarting":"托管的插件: 开始","hostedPluginStopped":"托管的插件: 停止","hostedPluginWatching":"托管的插件: 观察","instanceTerminated":"{0}已被终止","launchOutFiles":"用于定位生成的JavaScript文件的glob模式数组(`${pluginPath}`将被插件的实际路径所取代)。","noValidPlugin":"指定的文件夹不包含有效的插件。","notRunning":"托管的实例没有运行。","pluginFolder":"插件文件夹被设置为。{0}","preventedNewTab":"您的浏览器阻止了新标签的打开","restartInstance":"重启实例","running":"托管的实例运行在。","select":"选择","selectPath":"选择路径","startInstance":"启动实例","starting":"启动托管实例服务器 ...","stopInstance":"停止实例","unknownTerminated":"该实例已被终止","watchMode":"在开发中的插件上运行观察器"},"plugin-ext":{"authentication-main":{"loginTitle":"登录"},"plugins":"插件","webviewTrace":"控制与webviews的通信跟踪。","webviewWarnIfUnsecure":"警告用户,目前网络视图的部署是不安全的。"},"preview":{"openByDefault":"默认情况下,打开预览而不是编辑器。"},"property-view":{"created":"创建","directory":"目录","lastModified":"最后修改","location":"位置","noProperties":"没有可用的属性。","properties":"属性","size":"尺寸","symbolicLink":"符号链接"},"scm":{"amend":"修改","amendHeadCommit":"HEAD 提交","amendLastCommit":"修改最后的提交","changeRepository":"修改存储库...","config.untrackedChanges":"控制未被追踪的变化的行为方式。","config.untrackedChanges.hidden":"隐藏的","config.untrackedChanges.mixed":"混合的","config.untrackedChanges.separate":"分开","history":"历史","noRepositoryFound":"没有找到存储库","unamend":"撤销","unamendCommit":"撤销提交"},"search-in-workspace":{"includeIgnoredFiles":"包括被忽略的文件","noFolderSpecified":"你没有打开或指定一个文件夹。目前只搜索了打开的文件。","resultSubset":"这只是所有结果的一个子集。使用一个更具体的搜索词来缩小结果列表。","searchOnEditorModification":"修改时搜索活动的编辑器。"},"secondary-window":{"extract-widget":"将视图移至第二窗口"},"shell-area":{"secondary":"二级窗口","top":"返回顶部"},"task":{"attachTask":"附加任务...","clearHistory":"清除历史","noTaskToRun":"没有发现要运行的任务。配置任务...","openUserTasks":"打开用户的任务"},"terminal":{"defaultProfile":"上使用的默认配置文件。{0}","enableCopy":"启用ctrl-c(macOS上为cmd-c)来复制选定的文本","enablePaste":"启用ctrl-v(macOS上为cmd-v)从剪贴板粘贴。","profileArgs":"此配置文件使用的shell参数。","profileColor":"终端主题颜色ID,与终端相关联。","profileDefault":"选择默认配置文件...","profileIcon":"一个与终端图标相关联的codicon ID。\\nterminal-tmux:\\"$(terminal-tmux)\\"","profileNew":"新终端(含简介)...","profilePath":"此配置文件使用的shell的路径。","profiles":"创建一个新的终端时要呈现的配置文件。用可选的args手动设置路径属性。\\n将现有的配置文件设置为`null\'以从列表中隐藏该配置文件,例如:`\\"{0}\\": null`。","rendererType":"控制终端的渲染方式。","selectProfile":"为新终端选择一个配置文件","shell.deprecated":"这已被废弃,新的推荐方法是在\'terminal.integrated.profiles.{0}\'中创建一个终端配置文件,并在\'terminal.integrated.defaultProfile.{0}\'中把它的配置文件名称设置为默认值,来配置你的默认外壳。","shellArgsLinux":"在Linux终端时使用的命令行参数。","shellArgsOsx":"在macOS终端时使用的命令行参数。","shellArgsWindows":"在Windows终端时使用的命令行参数。","shellLinux":"终端在Linux上使用的shell的路径(默认:\'{0}\'})。","shellOsx":"终端在macOS上使用的shell的路径(默认:\'{0}\'})。","shellWindows":"终端在Windows上使用的shell的路径。(默认:\'{0}\')。"},"toolbar":{"addCommand":"将命令添加到工具栏","addCommandPlaceholder":"找到一个要添加到工具栏的命令","centerColumn":"中央栏","failedUpdate":"更新\'{0}\'在\'{1}\'的值失败。","filterIcons":"过滤器图标","iconSelectDialog":"为\'{0}\'选择一个图标","iconSet":"图标集","insertGroupLeft":"插入组的分隔符(左)。","insertGroupRight":"插入群组分隔符(右)。","leftColumn":"左栏","openJSON":"自定义工具栏(打开JSON)","removeCommand":"从工具栏上删除命令","restoreDefaults":"恢复工具栏的默认值","rightColumn":"右栏","selectIcon":"选择图标","toggleToolbar":"切换工具栏","toolbarLocationPlaceholder":"你想把命令加在哪里?","useDefaultIcon":"使用默认图标"},"typehierarchy":{"subtypeHierarchy":"子类型层次结构","supertypeHierarchy":"超类型层次结构"},"vsx-registry":{"downloadCount":"下载次数: {0}","errorFetching":"取出扩展程序时出错。","failedInstallingVSIX":"从VSIX安装{0} ,失败了。","invalidVSIX":"所选文件不是有效的 \\"*.vsix \\"插件。","license":"许可证: {0}","recommendedExtensions":"建议在该工作区使用的扩展名称的列表。","searchPlaceholder":"在{0}中搜索扩展","showInstalled":"显示已安装的扩展程序","showRecommendedExtensions":"控制是否显示扩展建议的通知。","vsx-extensions-contribution":{"update-version-uninstall-error":"删除扩展名时出错:{0}.","update-version-version-error":"{0} 在安装{1} 的版本时失败。"}},"webview":{"goToReadme":"转到README","messageWarning":"            {0}端点的主机模式已改为`{1}`;改变模式可能导致安全漏洞。             参见`{2}`以了解更多信息。"},"workspace":{"compareWithEachOther":"互相比较","confirmDeletePermanently.description":"使用垃圾箱删除\\"{0}\\"失败。你想永久删除吗?","confirmDeletePermanently.solution":"你可以在偏好设置中禁用垃圾桶的使用。","confirmDeletePermanently.title":"删除文件时出错","confirmMessage.delete":"你真的想删除以下文件吗?","confirmMessage.dirtyMultiple":"你真的想删除{0}个有未保存的修改的文件吗?","confirmMessage.dirtySingle":"你真的想删除{0}与未保存的变化吗?","confirmMessage.uriMultiple":"你真的想删除所有{0}选中的文件吗?","confirmMessage.uriSingle":"你真的想删除{0}吗?","duplicate":"复制","failApply":"无法将更改应用于新文件","failSaveAs":"无法为当前的小组件运行\\"{0}\\"。","newFilePlaceholder":"文件名称","newFolderPlaceholder":"文件夹名称","noErasure":"注意:没有任何东西会从磁盘上被删除","openRecentPlaceholder":"输入你要打开的工作区的名称","openRecentWorkspace":"打开最近的工作区...","preserveWindow":"启用在当前窗口中打开工作空间。","removeFolder":"你确定要从工作区删除以下文件夹吗?","removeFolders":"你确定要从工作区删除以下文件夹吗?","trashTitle":"将{0}移至垃圾箱","trustEmptyWindow":"控制空工作区是否被默认信任。","trustEnabled":"控制是否启用工作区信任。如果禁用,所有工作空间都被信任。","trustRequest":"一个扩展请求信任工作区,但相应的API还没有完全支持。你想信任这个工作区吗?","untitled-cleanup":"似乎有许多无标题的工作区文件。请检查{0}并删除任何未使用的文件。","workspaceFolderAdded":"创建了一个有多个根的工作区。你想把你的工作区配置保存为一个文件吗?","workspaceFolderAddedTitle":"文件夹添加到工作区"}}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_fuzzy_lib_fuzzy_js-node_modules_inversify_es_inversify_js-node_modules_i-374ef0","vendors-node_modules_phosphor_coreutils_lib_index_js-packages_core_node_modules_iconv-lite_li-d06203","vendors-node_modules_yargs_index_js","vendors-node_modules_fs-extra_lib_index_js","vendors-node_modules_reflect-metadata_Reflect_js","vendors-node_modules_deepmerge_dist_cjs_js-node_modules_express_index_js-node_modules_http-pr-e1c984","vendors-node_modules_nsfw_js_src_index_js-packages_filesystem_node_modules_minimatch_minimatch_js","vendors-node_modules_drivelist_build_Release_drivelist_node-node_modules_stroncium_procfs_lib-cf49d8","packages_core_lib_common_index_js","packages_plugin-ext_lib_common_plugin-api-rpc_js","packages_core_lib_node_messaging_ipc-channel_js-packages_core_lib_node_messaging_ipc-protocol_js","dev-packages_application-package_lib_api_js-packages_plugin-ext_lib_common_index_js","node_modules_express_lib_sync_recursive-node_modules_require-main-filename_sync_recursive-pac-c83c5f","packages_filesystem_lib_node_nsfw-watcher_nsfw-filesystem-service_js"], () => (__webpack_require__("./src-gen/backend/main.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			"main": 1
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 			__webpack_require__.O();
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e("vendors-node_modules_fuzzy_lib_fuzzy_js-node_modules_inversify_es_inversify_js-node_modules_i-374ef0");
/******/ 			__webpack_require__.e("vendors-node_modules_phosphor_coreutils_lib_index_js-packages_core_node_modules_iconv-lite_li-d06203");
/******/ 			__webpack_require__.e("vendors-node_modules_yargs_index_js");
/******/ 			__webpack_require__.e("vendors-node_modules_fs-extra_lib_index_js");
/******/ 			__webpack_require__.e("vendors-node_modules_reflect-metadata_Reflect_js");
/******/ 			__webpack_require__.e("vendors-node_modules_deepmerge_dist_cjs_js-node_modules_express_index_js-node_modules_http-pr-e1c984");
/******/ 			__webpack_require__.e("vendors-node_modules_nsfw_js_src_index_js-packages_filesystem_node_modules_minimatch_minimatch_js");
/******/ 			__webpack_require__.e("vendors-node_modules_drivelist_build_Release_drivelist_node-node_modules_stroncium_procfs_lib-cf49d8");
/******/ 			__webpack_require__.e("packages_core_lib_common_index_js");
/******/ 			__webpack_require__.e("packages_plugin-ext_lib_common_plugin-api-rpc_js");
/******/ 			__webpack_require__.e("packages_core_lib_node_messaging_ipc-channel_js-packages_core_lib_node_messaging_ipc-protocol_js");
/******/ 			__webpack_require__.e("dev-packages_application-package_lib_api_js-packages_plugin-ext_lib_common_index_js");
/******/ 			__webpack_require__.e("node_modules_express_lib_sync_recursive-node_modules_require-main-filename_sync_recursive-pac-c83c5f");
/******/ 			__webpack_require__.e("packages_filesystem_lib_node_nsfw-watcher_nsfw-filesystem-service_js");
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;
//# sourceMappingURL=main.js.map