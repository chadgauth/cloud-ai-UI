import * as jsoncParser from 'jsonc-parser';
import { Command, Disposable, DisposableCollection, Emitter, MessageService } from '@theia/core';
import { interfaces } from '@theia/core/shared/inversify';
import { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';
import { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';
import { MonacoWorkspace } from '@theia/monaco/lib/browser/monaco-workspace';
import { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';
import { EditorManager } from '@theia/editor/lib/browser';
import { Widget } from '@theia/core/lib/browser';
import { FileService } from '@theia/filesystem/lib/browser/file-service';
import { Deferred } from '@theia/core/lib/common/promise-util';
import URI from '@theia/core/lib/common/uri';
import { DeflatedToolbarTree, ToolbarTreeSchema, ToolbarItemDeflated, ToolbarAlignment, ToolbarItemPosition } from './toolbar-interfaces';
export declare const TOOLBAR_BAD_JSON_ERROR_MESSAGE: string;
export declare class ToolbarStorageProvider implements Disposable {
    protected readonly appState: FrontendApplicationStateService;
    protected readonly textModelService: MonacoTextModelService;
    protected readonly fileService: FileService;
    protected readonly messageService: MessageService;
    protected lateInjector: <T>(id: interfaces.ServiceIdentifier<T>) => T;
    protected readonly USER_TOOLBAR_URI: URI;
    get ready(): Promise<void>;
    protected readonly _ready: Deferred<void>;
    protected monacoWorkspace: MonacoWorkspace;
    protected editorManager: EditorManager;
    protected model: MonacoEditorModel | undefined;
    protected toDispose: DisposableCollection;
    protected toolbarItemsUpdatedEmitter: Emitter<void>;
    readonly onToolbarItemsChanged: import("@theia/core").Event<void>;
    toolbarItems: DeflatedToolbarTree | undefined;
    protected init(): void;
    protected doInit(): Promise<void>;
    protected readConfiguration(): void;
    removeItem(position: ToolbarItemPosition): Promise<boolean>;
    addItem(command: Command, alignment: ToolbarAlignment): Promise<boolean>;
    swapValues(oldPosition: ToolbarItemPosition, newPosition: ToolbarItemPosition, direction: 'location-left' | 'location-right'): Promise<boolean>;
    addItemToEmptyColumn(item: ToolbarItemDeflated, alignment: ToolbarAlignment): Promise<boolean>;
    moveItemToEmptySpace(oldPosition: ToolbarItemPosition, newAlignment: ToolbarAlignment, centerPosition?: 'left' | 'right'): Promise<boolean>;
    insertGroup(position: ToolbarItemPosition, insertDirection: 'left' | 'right'): Promise<boolean>;
    protected removeEmptyGroupsFromToolbar(toolbarItems: DeflatedToolbarTree | undefined): DeflatedToolbarTree | undefined;
    clearAll(): Promise<boolean>;
    protected writeToFile(path: jsoncParser.JSONPath, value: unknown, insertion?: boolean): Promise<boolean>;
    protected parseContent(fileContent: string): DeflatedToolbarTree | undefined;
    protected parse(fileContent: string): DeflatedToolbarTree | undefined;
    openOrCreateJSONFile(state: ToolbarTreeSchema, doOpen?: boolean): Promise<Widget | undefined>;
    dispose(): void;
}
//# sourceMappingURL=toolbar-storage-provider.d.ts.map